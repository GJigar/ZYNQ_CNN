# 1 "my_net/src/my_net.cpp"
# 1 "my_net/src/my_net.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 152 "<built-in>" 3
# 1 "<command line>" 1







# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 157 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 9 "<command line>" 2
# 1 "<built-in>" 2
# 1 "my_net/src/my_net.cpp" 2
# 1 "my_net/src/my_net.h" 1



# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 1 3








# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 10 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/_mingw_mac.h" 1 3
# 10 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3
# 277 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 1 3
# 13 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 3
# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 674 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/sdks/_mingw_directx.h" 1 3
# 674 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3

# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include/sdks/_mingw_ddk.h" 1 3
# 675 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3
# 13 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {





  typedef __builtin_va_list __gnuc_va_list;






  typedef __gnuc_va_list va_list;
# 99 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\vadefs.h" 3
}


#pragma pack(pop)
# 277 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 2 3


#pragma pack(push,_CRT_PACKING)
# 370 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef unsigned long long size_t;
# 380 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long ssize_t;
# 392 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long intptr_t;
# 405 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef unsigned long long uintptr_t;
# 418 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
__extension__ typedef long long ptrdiff_t;
# 436 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
typedef unsigned short wint_t;
typedef unsigned short wctype_t;
# 456 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
typedef int errno_t;




typedef long __time32_t;




__extension__ typedef long long __time64_t;







typedef __time64_t time_t;
# 607 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 3
struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct {
  pthreadlocinfo locinfo;
  pthreadmbcinfo mbcinfo;
} _locale_tstruct,*_locale_t;



typedef struct tagLC_ID {
  unsigned short wLanguage;
  unsigned short wCountry;
  unsigned short wCodePage;
} LC_ID,*LPLC_ID;




typedef struct threadlocaleinfostruct {
  int refcount;
  unsigned int lc_codepage;
  unsigned int lc_collate_cp;
  unsigned long lc_handle[6];
  LC_ID lc_id[6];
  struct {
    char *locale;
    wchar_t *wlocale;
    int *refcount;
    int *wrefcount;
  } lc_category[6];
  int lc_clike;
  int mb_cur_max;
  int *lconv_intl_refcount;
  int *lconv_num_refcount;
  int *lconv_mon_refcount;
  struct lconv *lconv;
  int *ctype1_refcount;
  unsigned short *ctype1;
  const unsigned short *pctype;
  const unsigned char *pclmap;
  const unsigned char *pcumap;
  struct __lc_time_data *lc_time_curr;
} threadlocinfo;



extern "C" {



const char *__mingw_get_crt_info (void);


}


#pragma pack(pop)
# 9 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 2 3


# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw_print_push.h" 1 3
# 11 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 2 3


#pragma pack(push,_CRT_PACKING)


extern "C" {
# 26 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  struct _iobuf {
    char *_ptr;
    int _cnt;
    char *_base;
    int _flag;
    int _file;
    int _charbuf;
    int _bufsiz;
    char *_tmpfname;
  };
  typedef struct _iobuf FILE;
# 84 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  typedef long _off_t;

  typedef long off_t;






  __extension__ typedef long long _off64_t;

  __extension__ typedef long long off64_t;





  __attribute__ ((__dllimport__)) FILE * __iob_func(void);
# 120 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __extension__ typedef long long fpos_t;
# 157 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __attribute__ ((__dllimport__)) int _filbuf(FILE *_File);
  __attribute__ ((__dllimport__)) int _flsbuf(int _Ch,FILE *_File);



  __attribute__ ((__dllimport__)) FILE * _fsopen(const char *_Filename,const char *_Mode,int _ShFlag);

  void clearerr(FILE *_File);
  int fclose(FILE *_File);
  __attribute__ ((__dllimport__)) int _fcloseall(void);



  __attribute__ ((__dllimport__)) FILE * _fdopen(int _FileHandle,const char *_Mode);

  int feof(FILE *_File);
  int ferror(FILE *_File);
  int fflush(FILE *_File);
  int fgetc(FILE *_File);
  __attribute__ ((__dllimport__)) int _fgetchar(void);
  int fgetpos(FILE * __restrict__ _File ,fpos_t * __restrict__ _Pos);
  char * fgets(char * __restrict__ _Buf,int _MaxCount,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int _fileno(FILE *_File);



  __attribute__ ((__dllimport__)) char * _tempnam(const char *_DirName,const char *_FilePrefix);
  __attribute__ ((__dllimport__)) int _flushall(void);
  FILE * fopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode) ;
  FILE *fopen64(const char * __restrict__ filename,const char * __restrict__ mode);
  int fprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,...);
  int fputc(int _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) int _fputchar(int _Ch);
  int fputs(const char * __restrict__ _Str,FILE * __restrict__ _File);
  size_t fread(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  FILE * freopen(const char * __restrict__ _Filename,const char * __restrict__ _Mode,FILE * __restrict__ _File) ;
  int fscanf(FILE * __restrict__ _File,const char * __restrict__ _Format,...) ;
  int _fscanf_l(FILE * __restrict__ _File,const char * __restrict__ _Format,_locale_t locale,...) ;
  int fsetpos(FILE *_File,const fpos_t *_Pos);
  int fseek(FILE *_File,long _Offset,int _Origin);
  int fseeko64(FILE* stream, _off64_t offset, int whence);
  long ftell(FILE *_File);
  _off64_t ftello64(FILE * stream);
  __extension__ int _fseeki64(FILE *_File,long long _Offset,int _Origin);
  __extension__ long long _ftelli64(FILE *_File);
  size_t fwrite(const void * __restrict__ _Str,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  int getc(FILE *_File);
  int getchar(void);
  __attribute__ ((__dllimport__)) int _getmaxstdio(void);
  char * gets(char *_Buffer) ;
  int _getw(FILE *_File);


  void perror(const char *_ErrMsg);

  __attribute__ ((__dllimport__)) int _pclose(FILE *_File);
  __attribute__ ((__dllimport__)) FILE * _popen(const char *_Command,const char *_Mode);




  int printf(const char * __restrict__ _Format,...);
  int putc(int _Ch,FILE *_File);
  int putchar(int _Ch);
  int puts(const char *_Str);
  __attribute__ ((__dllimport__)) int _putw(int _Word,FILE *_File);


  int remove(const char *_Filename);
  int rename(const char *_OldFilename,const char *_NewFilename);
  __attribute__ ((__dllimport__)) int _unlink(const char *_Filename);

  int unlink(const char *_Filename) ;


  void rewind(FILE *_File);
  __attribute__ ((__dllimport__)) int _rmtmp(void);
  int scanf(const char * __restrict__ _Format,...) ;
  int _scanf_l(const char * __restrict__ format,_locale_t locale,... ) ;
  void setbuf(FILE * __restrict__ _File,char * __restrict__ _Buffer) ;
  __attribute__ ((__dllimport__)) int _setmaxstdio(int _Max);
  __attribute__ ((__dllimport__)) unsigned int _set_output_format(unsigned int _Format);
  __attribute__ ((__dllimport__)) unsigned int _get_output_format(void);
  unsigned int __mingw_set_output_format(unsigned int _Format);
  unsigned int __mingw_get_output_format(void);




  int setvbuf(FILE * __restrict__ _File,char * __restrict__ _Buf,int _Mode,size_t _Size);
  __attribute__ ((__dllimport__)) int _scprintf(const char * __restrict__ _Format,...);
  int sscanf(const char * __restrict__ _Src,const char * __restrict__ _Format,...) ;
  int _sscanf_l(const char * __restrict__ buffer,const char * __restrict__ format,_locale_t locale,...) ;
  __attribute__ ((__dllimport__)) int _snscanf(const char * __restrict__ _Src,size_t _MaxCount,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _snscanf_l(const char * __restrict__ input,size_t length,const char * __restrict__ format,_locale_t locale,...) ;
  FILE * tmpfile(void) ;
  char * tmpnam(char *_Buffer);
  int ungetc(int _Ch,FILE *_File);
  int vfprintf(FILE * __restrict__ _File,const char * __restrict__ _Format,va_list _ArgList);
  int vprintf(const char * __restrict__ _Format,va_list _ArgList);


  extern
    __attribute__((__format__ (gnu_printf, 3, 0))) __attribute__ ((__nonnull__ (3)))
    int __mingw_vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,
      va_list _ArgList);
  extern
    __attribute__((__format__ (gnu_printf, 3, 4))) __attribute__ ((__nonnull__ (3)))
    int __mingw_snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
  extern
    __attribute__((__format__ (gnu_printf, 1, 2))) __attribute__ ((__nonnull__ (1)))
    int __mingw_printf(const char * __restrict__ , ... ) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 1, 0))) __attribute__ ((__nonnull__ (1)))
    int __mingw_vprintf (const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
    int __mingw_fprintf (FILE * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
    int __mingw_vfprintf (FILE * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 2, 3))) __attribute__ ((__nonnull__ (2)))
    int __mingw_sprintf (char * __restrict__ , const char * __restrict__ , ...) __attribute__ ((__nothrow__));
  extern
    __attribute__((__format__ (gnu_printf, 2, 0))) __attribute__ ((__nonnull__ (2)))
    int __mingw_vsprintf (char * __restrict__ , const char * __restrict__ , va_list) __attribute__ ((__nothrow__));

  __attribute__ ((__dllimport__)) int _snprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _snprintf_l(char * __restrict__ buffer,size_t count,const char * __restrict__ format,_locale_t locale,...) ;
  __attribute__ ((__dllimport__)) int _vsnprintf(char * __restrict__ _Dest,size_t _Count,const char * __restrict__ _Format,va_list _Args) ;
  __attribute__ ((__dllimport__)) int _vsnprintf_l(char * __restrict__ buffer,size_t count,const char * __restrict__ format,_locale_t locale,va_list argptr) ;
  int sprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,...) ;
  int _sprintf_l(char * __restrict__ buffer,const char * __restrict__ format,_locale_t locale,...) ;
  int vsprintf(char * __restrict__ _Dest,const char * __restrict__ _Format,va_list _Args) ;







  int vsnprintf(char * __restrict__ _DstBuf,size_t _MaxCount,const char * __restrict__ _Format,va_list _ArgList) ;

  int snprintf(char * __restrict__ s, size_t n, const char * __restrict__ format, ...);
# 312 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  int vscanf(const char * __restrict__ Format, va_list argp);
  int vfscanf (FILE * __restrict__ fp, const char * __restrict__ Format,va_list argp);
  int vsscanf (const char * __restrict__ _Str,const char * __restrict__ Format,va_list argp);

  __attribute__ ((__dllimport__)) int _vscprintf(const char * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _set_printf_count_output(int _Value);
  __attribute__ ((__dllimport__)) int _get_printf_count_output(void);
# 330 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __attribute__ ((__dllimport__)) FILE * _wfsopen(const wchar_t *_Filename,const wchar_t *_Mode,int _ShFlag);


  wint_t fgetwc(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fgetwchar(void);
  wint_t fputwc(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fputwchar(wchar_t _Ch);
  wint_t getwc(FILE *_File);
  wint_t getwchar(void);
  wint_t putwc(wchar_t _Ch,FILE *_File);
  wint_t putwchar(wchar_t _Ch);
  wint_t ungetwc(wint_t _Ch,FILE *_File);
  wchar_t * fgetws(wchar_t * __restrict__ _Dst,int _SizeInWords,FILE * __restrict__ _File);
  int fputws(const wchar_t * __restrict__ _Str,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) wchar_t * _getws(wchar_t *_String) ;
  __attribute__ ((__dllimport__)) int _putws(const wchar_t *_Str);
  int fwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  int wprintf(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _scwprintf(const wchar_t * __restrict__ _Format,...);
  int vfwprintf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  int vwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int swprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ , ...) ;
  __attribute__ ((__dllimport__)) int _swprintf_l(wchar_t * __restrict__ buffer,size_t count,const wchar_t * __restrict__ format,_locale_t locale,... ) ;
  __attribute__ ((__dllimport__)) int vswprintf(wchar_t * __restrict__ , const wchar_t * __restrict__ ,va_list) ;
  __attribute__ ((__dllimport__)) int _swprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf_c(wchar_t * __restrict__ _DstBuf,size_t _SizeInWords,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _snwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _vsnwprintf(wchar_t * __restrict__ _Dest,size_t _Count,const wchar_t * __restrict__ _Format,va_list _Args) ;





  int snwprintf (wchar_t * __restrict__ s, size_t n, const wchar_t * __restrict__ format, ...);
  int vsnwprintf (wchar_t * __restrict__ , size_t, const wchar_t * __restrict__ , va_list);
# 373 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  int vwscanf (const wchar_t * __restrict__ , va_list);
  int vfwscanf (FILE * __restrict__ ,const wchar_t * __restrict__ ,va_list);
  int vswscanf (const wchar_t * __restrict__ ,const wchar_t * __restrict__ ,va_list);

  __attribute__ ((__dllimport__)) int _fwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _wprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vfwprintf_p(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _swprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf_p(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _scwprintf_p(const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vscwprintf_p(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _wprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _wprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _fwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _fwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vfwprintf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vfwprintf_p_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _swprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _swprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vswprintf_c_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vswprintf_p_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _scwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _scwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vscwprintf_p_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _snwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  __attribute__ ((__dllimport__)) int _vsnwprintf_l(wchar_t * __restrict__ _DstBuf,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList) ;
  __attribute__ ((__dllimport__)) int _swprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _vswprintf(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,va_list _Args);
  __attribute__ ((__dllimport__)) int __swprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,...) ;
  __attribute__ ((__dllimport__)) int _vswprintf_l(wchar_t * __restrict__ buffer,size_t count,const wchar_t * __restrict__ format,_locale_t locale,va_list argptr) ;
  __attribute__ ((__dllimport__)) int __vswprintf_l(wchar_t * __restrict__ _Dest,const wchar_t * __restrict__ _Format,_locale_t _Plocinfo,va_list _Args) ;
# 417 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __attribute__ ((__dllimport__)) wchar_t * _wtempnam(const wchar_t *_Directory,const wchar_t *_FilePrefix);
  __attribute__ ((__dllimport__)) int _vscwprintf(const wchar_t * __restrict__ _Format,va_list _ArgList);
  __attribute__ ((__dllimport__)) int _vscwprintf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,va_list _ArgList);
  int fwscanf(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _fwscanf_l(FILE * __restrict__ _File,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  int swscanf(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _swscanf_l(const wchar_t * __restrict__ _Src,const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) int _snwscanf(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,...);
  __attribute__ ((__dllimport__)) int _snwscanf_l(const wchar_t * __restrict__ _Src,size_t _MaxCount,const wchar_t * __restrict__ _Format,_locale_t _Locale,...);
  int wscanf(const wchar_t * __restrict__ _Format,...) ;
  __attribute__ ((__dllimport__)) int _wscanf_l(const wchar_t * __restrict__ _Format,_locale_t _Locale,...) ;
  __attribute__ ((__dllimport__)) FILE * _wfdopen(int _FileHandle ,const wchar_t *_Mode);
  __attribute__ ((__dllimport__)) FILE * _wfopen(const wchar_t * __restrict__ _Filename,const wchar_t *__restrict__ _Mode) ;
  __attribute__ ((__dllimport__)) FILE * _wfreopen(const wchar_t * __restrict__ _Filename,const wchar_t * __restrict__ _Mode,FILE * __restrict__ _OldFile) ;



  __attribute__ ((__dllimport__)) void _wperror(const wchar_t *_ErrMsg);

  __attribute__ ((__dllimport__)) FILE * _wpopen(const wchar_t *_Command,const wchar_t *_Mode);




  __attribute__ ((__dllimport__)) int _wremove(const wchar_t *_Filename);
  __attribute__ ((__dllimport__)) wchar_t * _wtmpnam(wchar_t *_Buffer);
  __attribute__ ((__dllimport__)) wint_t _fgetwc_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _fputwc_nolock(wchar_t _Ch,FILE *_File);
  __attribute__ ((__dllimport__)) wint_t _ungetwc_nolock(wint_t _Ch,FILE *_File);
# 475 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 3
  __attribute__ ((__dllimport__)) void _lock_file(FILE *_File);
  __attribute__ ((__dllimport__)) void _unlock_file(FILE *_File);
  __attribute__ ((__dllimport__)) int _fclose_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) int _fflush_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t _fread_nolock(void * __restrict__ _DstBuf,size_t _ElementSize,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int _fseek_nolock(FILE *_File,long _Offset,int _Origin);
  __attribute__ ((__dllimport__)) long _ftell_nolock(FILE *_File);
  __extension__ __attribute__ ((__dllimport__)) int _fseeki64_nolock(FILE *_File,long long _Offset,int _Origin);
  __extension__ __attribute__ ((__dllimport__)) long long _ftelli64_nolock(FILE *_File);
  __attribute__ ((__dllimport__)) size_t _fwrite_nolock(const void * __restrict__ _DstBuf,size_t _Size,size_t _Count,FILE * __restrict__ _File);
  __attribute__ ((__dllimport__)) int _ungetc_nolock(int _Ch,FILE *_File);





  char * tempnam(const char *_Directory,const char *_FilePrefix) ;
  int fcloseall(void) ;
  FILE * fdopen(int _FileHandle,const char *_Format) ;
  int fgetchar(void) ;
  int fileno(FILE *_File) ;
  int flushall(void) ;
  int fputchar(int _Ch) ;
  int getw(FILE *_File) ;
  int putw(int _Ch,FILE *_File) ;
  int rmtmp(void) ;



}


#pragma pack(pop)


# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/stdio_s.h" 1 3








# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 1 3
# 9 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\sec_api/stdio_s.h" 2 3
# 509 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 2 3


# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw_print_pop.h" 1 3
# 511 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\stdio.h" 2 3
# 5 "my_net/src/my_net.h" 2
# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 1 3
# 10 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
# 10 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3


# 1 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\_mingw.h" 1 3
# 12 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 2 3


struct _exception;

#pragma pack(push,_CRT_PACKING)
# 75 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
extern "C" {



  extern double * __imp__HUGE;
# 91 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  struct _exception {
    int type;
    const char *name;
    double arg1;
    double arg2;
    double retval;
  };

  void __mingw_raise_matherr (int typ, const char *name, double a1, double a2,
         double rslt);
  void __mingw_setusermatherr (int ( *)(struct _exception *));
  __attribute__ ((__dllimport__)) void __setusermatherr(int ( *)(struct _exception *));



  double sin(double _X);
  double cos(double _X);
  double tan(double _X);
  double sinh(double _X);
  double cosh(double _X);
  double tanh(double _X);
  double asin(double _X);
  double acos(double _X);
  double atan(double _X);
  double atan2(double _Y,double _X);
  double exp(double _X);
  double log(double _X);
  double log10(double _X);
  double pow(double _X,double _Y);
  double sqrt(double _X);
  double ceil(double _X);
  double floor(double _X);
  double fabs(double _X);
# 135 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  double ldexp(double _X,int _Y);
  double frexp(double _X,int *_Y);
  double modf(double _X,double *_Y);
  double fmod(double _X,double _Y);

  void sincos (double __x, double *p_sin, double *p_cos);
  void sincosl (long double __x, long double *p_sin, long double *p_cos);
  void sincosf (float __x, float *p_sin, float *p_cos);



  int abs(int _X);
  long labs(long _X);



  double atof(const char *_String);
  double _atof_l(const char *_String,_locale_t _Locale);
# 162 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  struct _complex {
    double x;
    double y;
  };


  __attribute__ ((__dllimport__)) double _cabs(struct _complex _ComplexA);
  double _hypot(double _X,double _Y);
  __attribute__ ((__dllimport__)) double _j0(double _X);
  __attribute__ ((__dllimport__)) double _j1(double _X);
  __attribute__ ((__dllimport__)) double _jn(int _X,double _Y);
  __attribute__ ((__dllimport__)) double _y0(double _X);
  __attribute__ ((__dllimport__)) double _y1(double _X);
  __attribute__ ((__dllimport__)) double _yn(int _X,double _Y);


  __attribute__ ((__dllimport__)) int _matherr (struct _exception *);
# 189 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  __attribute__ ((__dllimport__)) double _chgsign (double _X);
  __attribute__ ((__dllimport__)) double _copysign (double _Number,double _Sign);
  __attribute__ ((__dllimport__)) double _logb (double);
  __attribute__ ((__dllimport__)) double _nextafter (double, double);
  __attribute__ ((__dllimport__)) double _scalb (double, long);
  __attribute__ ((__dllimport__)) int _finite (double);
  __attribute__ ((__dllimport__)) int _fpclass (double);
  __attribute__ ((__dllimport__)) int _isnan (double);






__attribute__ ((__dllimport__)) double j0 (double) ;
__attribute__ ((__dllimport__)) double j1 (double) ;
__attribute__ ((__dllimport__)) double jn (int, double) ;
__attribute__ ((__dllimport__)) double y0 (double) ;
__attribute__ ((__dllimport__)) double y1 (double) ;
__attribute__ ((__dllimport__)) double yn (int, double) ;

__attribute__ ((__dllimport__)) double chgsign (double);
# 219 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  __attribute__ ((__dllimport__)) int finite (double);
  __attribute__ ((__dllimport__)) int fpclass (double);
# 264 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
typedef float float_t;
typedef double double_t;
# 299 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern int __fpclassifyl (long double);
  extern int __fpclassifyf (float);
  extern int __fpclassify (double);
# 335 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern int __isnan (double);
  extern int __isnanf (float);
  extern int __isnanl (long double);
# 376 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern int __signbit (double);
  extern int __signbitf (float);
  extern int __signbitl (long double);
# 404 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern float sinf(float _X);
  extern long double sinl(long double);

  extern float cosf(float _X);
  extern long double cosl(long double);

  extern float tanf(float _X);
  extern long double tanl(long double);
  extern float asinf(float _X);
  extern long double asinl(long double);

  extern float acosf (float);
  extern long double acosl (long double);

  extern float atanf (float);
  extern long double atanl (long double);

  extern float atan2f (float, float);
  extern long double atan2l (long double, long double);


  extern float sinhf(float _X);



  extern long double sinhl(long double);

  extern float coshf(float _X);



  extern long double coshl(long double);

  extern float tanhf(float _X);



  extern long double tanhl(long double);



  extern double acosh (double);
  extern float acoshf (float);
  extern long double acoshl (long double);


  extern double asinh (double);
  extern float asinhf (float);
  extern long double asinhl (long double);


  extern double atanh (double);
  extern float atanhf (float);
  extern long double atanhl (long double);



  extern float expf(float _X);



  extern long double expl(long double);


  extern double exp2(double);
  extern float exp2f(float);
  extern long double exp2l(long double);



  extern double expm1(double);
  extern float expm1f(float);
  extern long double expm1l(long double);


  extern float frexpf(float _X,int *_Y);



  extern long double frexpl(long double,int *);




  extern int ilogb (double);
  extern int ilogbf (float);
  extern int ilogbl (long double);


  extern float ldexpf(float _X,int _Y);



  extern long double ldexpl (long double, int);


  extern float logf (float);
  extern long double logl(long double);


  extern float log10f (float);
  extern long double log10l(long double);


  extern double log1p(double);
  extern float log1pf(float);
  extern long double log1pl(long double);


  extern double log2 (double);
  extern float log2f (float);
  extern long double log2l (long double);


  extern double logb (double);
  extern float logbf (float);
  extern long double logbl (long double);
# 553 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern float modff (float, float*);
  extern long double modfl (long double, long double*);


  extern double scalbn (double, int);
  extern float scalbnf (float, int);
  extern long double scalbnl (long double, int);

  extern double scalbln (double, long);
  extern float scalblnf (float, long);
  extern long double scalblnl (long double, long);



  extern double cbrt (double);
  extern float cbrtf (float);
  extern long double cbrtl (long double);


  extern float fabsf (float x);
# 583 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern long double fabsl (long double);
# 595 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern double hypot (double, double) ;
  extern float hypotf (float x, float y);



  extern long double hypotl (long double, long double);


  extern float powf(float _X,float _Y);



  extern long double powl (long double, long double);


  extern float sqrtf (float);
  extern long double sqrtl(long double);


  extern double erf (double);
  extern float erff (float);
  extern long double erfl (long double);


  extern double erfc (double);
  extern float erfcf (float);
  extern long double erfcl (long double);


  extern double lgamma (double);
  extern float lgammaf (float);
  extern long double lgammal (long double);


  extern double tgamma (double);
  extern float tgammaf (float);
  extern long double tgammal (long double);


  extern float ceilf (float);
  extern long double ceill (long double);


  extern float floorf (float);
  extern long double floorl (long double);


  extern double nearbyint ( double);
  extern float nearbyintf (float);
  extern long double nearbyintl (long double);



extern double rint (double);
extern float rintf (float);
extern long double rintl (long double);


extern long lrint (double);
extern long lrintf (float);
extern long lrintl (long double);

__extension__ long long llrint (double);
__extension__ long long llrintf (float);
__extension__ long long llrintl (long double);
# 739 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern double round (double);
  extern float roundf (float);
  extern long double roundl (long double);


  extern long lround (double);
  extern long lroundf (float);
  extern long lroundl (long double);
  __extension__ long long llround (double);
  __extension__ long long llroundf (float);
  __extension__ long long llroundl (long double);



  extern double trunc (double);
  extern float truncf (float);
  extern long double truncl (long double);


  extern float fmodf (float, float);
  extern long double fmodl (long double, long double);


  extern double remainder (double, double);
  extern float remainderf (float, float);
  extern long double remainderl (long double, long double);


  extern double remquo(double, double, int *);
  extern float remquof(float, float, int *);
  extern long double remquol(long double, long double, int *);


  extern double copysign (double, double);
  extern float copysignf (float, float);
  extern long double copysignl (long double, long double);


  extern double nan(const char *tagp);
  extern float nanf(const char *tagp);
  extern long double nanl(const char *tagp);
# 788 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
  extern double nextafter (double, double);
  extern float nextafterf (float, float);
  extern long double nextafterl (long double, long double);


  extern double nexttoward (double, long double);
  extern float nexttowardf (float, long double);
  extern long double nexttowardl (long double, long double);



  extern double fdim (double x, double y);
  extern float fdimf (float x, float y);
  extern long double fdiml (long double x, long double y);







  extern double fmax (double, double);
  extern float fmaxf (float, float);
  extern long double fmaxl (long double, long double);


  extern double fmin (double, double);
  extern float fminf (float, float);
  extern long double fminl (long double, long double);



  extern double fma (double, double, double);
  extern float fmaf (float, float, float);
  extern long double fmal (long double, long double, long double);
# 871 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
   __attribute__ ((__dllimport__)) float _copysignf (float _Number,float _Sign);
   __attribute__ ((__dllimport__)) float _chgsignf (float _X);
   __attribute__ ((__dllimport__)) float _logbf(float _X);
   __attribute__ ((__dllimport__)) float _nextafterf(float _X,float _Y);
   __attribute__ ((__dllimport__)) int _finitef(float _X);
   __attribute__ ((__dllimport__)) int _isnanf(float _X);
   __attribute__ ((__dllimport__)) int _fpclassf(float _X);



   extern long double _chgsignl (long double);
# 893 "E:/design/vivado2019/Vivado/2019.1/win64/tools/clang/bin/../lib/clang/3.1/../../../x86_64-w64-mingw32/include\\math.h" 3
}




#pragma pack(pop)
# 6 "my_net/src/my_net.h" 2
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\hls_half.h" 1
# 37 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\hls_half.h"
typedef __fp16 half;
# 3274 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\hls_half.h"
extern half half_nan(const char *tagp);





extern half half_atan(half t);
extern half half_atan2(half y, half x);
extern half half_copysign(half x, half y);

extern half half_fabs(half x);

extern half half_abs(half x);
extern half half_fma(half x, half y, half z);
extern half half_mad(half x, half y, half z);
extern half half_frexp (half x, int* exp);
extern half half_ldexp (half x, int exp);
extern half half_fmax(half x, half y);

extern half half_fmin(half x, half y);

extern half half_asin(half t_in);
extern half half_acos(half t_in);
extern half half_sin(half t_in);
extern half half_cos(half t_in);
extern void half_sincos(half x, half *sin, half *cos);
extern half half_sinh(half t_in);
extern half half_cosh(half t_in);
extern half half_sinpi(half t_in);
extern half half_cospi(half t_in);
extern half half_recip(half x);
extern half half_sqrt(half x);
extern half half_rsqrt(half x);
extern half half_cbrt(half x);
extern half half_hypot(half x, half y);
extern half half_log(half x);
extern half half_log10(half x);
extern half half_log2(half x);
extern half half_logb(half x);
extern half half_log1p(half x);
extern int half_ilogb(half x);
extern half half_exp(half x);
extern half half_exp10(half x);
extern half half_exp2(half x);
extern half half_expm1(half x);
extern half half_pow(half x, half y);
extern half half_powr(half x, half y);
extern half half_pown(half x, int y);
extern half half_rootn(half x, int y);
extern half half_floor(half x);

extern half half_ceil(half x);

extern half half_trunc(half x);

extern half half_round(half x);

extern half half_nearbyint(half x);
extern half half_rint(half x);
extern long int half_lrint(half x);
extern long long int half_llrint(half x);
extern long int half_lround(half x);
extern long long int half_llround(half x);
extern half half_modf(half x, half *intpart);

extern half half_fract(half x, half *intpart);
extern half half_nextafter(half x, half y);
extern half half_fmod(half x, half y);
extern half half_remainder(half x, half y);
extern half half_remquo(half x, half y, int* quo);
extern half half_divide(half x, half y);
# 7 "my_net/src/my_net.h" 2
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 1
# 54 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h"
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h" 1
# 57 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_decl.h" 1
# 100 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 122 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 179 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 233 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 58 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h" 2
# 157 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 220 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;
# 238 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot/etc/autopilot_dt.def" 1


template <> struct ssdm_int<1 + 1024 * 0, true> { int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<2 + 1024 * 0, true> { int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<2 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(2 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<2 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<3 + 1024 * 0, true> { int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<3 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(3 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<3 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<4 + 1024 * 0, true> { int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<4 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(4 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<4 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<5 + 1024 * 0, true> { int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<5 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(5 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<5 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<6 + 1024 * 0, true> { int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<6 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(6 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<6 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<7 + 1024 * 0, true> { int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<7 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(7 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<7 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<8 + 1024 * 0, true> { int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<8 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(8 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<8 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<9 + 1024 * 0, true> { int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<9 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(9 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<9 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<10 + 1024 * 0, true> { int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<10 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(10 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<10 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<11 + 1024 * 0, true> { int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<11 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(11 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<11 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<12 + 1024 * 0, true> { int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<12 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(12 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<12 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<13 + 1024 * 0, true> { int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<13 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(13 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<13 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<14 + 1024 * 0, true> { int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<14 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(14 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<14 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<15 + 1024 * 0, true> { int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<15 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(15 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<15 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<16 + 1024 * 0, true> { int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<16 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(16 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<16 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<17 + 1024 * 0, true> { int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<17 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(17 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<17 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<18 + 1024 * 0, true> { int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<18 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(18 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<18 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<19 + 1024 * 0, true> { int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<19 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(19 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<19 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<20 + 1024 * 0, true> { int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<20 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(20 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<20 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<21 + 1024 * 0, true> { int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<21 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(21 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<21 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<22 + 1024 * 0, true> { int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<22 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(22 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<22 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<23 + 1024 * 0, true> { int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<23 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(23 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<23 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<24 + 1024 * 0, true> { int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<24 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(24 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<24 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<25 + 1024 * 0, true> { int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<25 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(25 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<25 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<26 + 1024 * 0, true> { int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<26 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(26 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<26 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<27 + 1024 * 0, true> { int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<27 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(27 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<27 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<28 + 1024 * 0, true> { int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<28 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(28 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<28 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<29 + 1024 * 0, true> { int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<29 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(29 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<29 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<30 + 1024 * 0, true> { int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<30 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(30 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<30 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<31 + 1024 * 0, true> { int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<31 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(31 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<31 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<32 + 1024 * 0, true> { int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<32 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(32 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<32 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<33 + 1024 * 0, true> { int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<33 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(33 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<33 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<34 + 1024 * 0, true> { int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<34 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(34 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<34 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<35 + 1024 * 0, true> { int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<35 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(35 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<35 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<36 + 1024 * 0, true> { int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<36 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(36 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<36 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<37 + 1024 * 0, true> { int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<37 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(37 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<37 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<38 + 1024 * 0, true> { int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<38 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(38 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<38 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<39 + 1024 * 0, true> { int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<39 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(39 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<39 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<40 + 1024 * 0, true> { int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<40 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(40 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<40 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<41 + 1024 * 0, true> { int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<41 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(41 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<41 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<42 + 1024 * 0, true> { int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<42 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(42 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<42 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<43 + 1024 * 0, true> { int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<43 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(43 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<43 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<44 + 1024 * 0, true> { int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<44 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(44 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<44 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<45 + 1024 * 0, true> { int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<45 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(45 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<45 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<46 + 1024 * 0, true> { int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<46 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(46 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<46 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<47 + 1024 * 0, true> { int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<47 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(47 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<47 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<48 + 1024 * 0, true> { int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<48 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(48 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<48 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<49 + 1024 * 0, true> { int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<49 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(49 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<49 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<50 + 1024 * 0, true> { int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<50 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(50 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<50 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<51 + 1024 * 0, true> { int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<51 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(51 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<51 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<52 + 1024 * 0, true> { int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<52 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(52 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<52 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<53 + 1024 * 0, true> { int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<53 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(53 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<53 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<54 + 1024 * 0, true> { int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<54 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(54 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<54 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<55 + 1024 * 0, true> { int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<55 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(55 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<55 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<56 + 1024 * 0, true> { int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<56 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(56 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<56 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<57 + 1024 * 0, true> { int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<57 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(57 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<57 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<58 + 1024 * 0, true> { int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<58 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(58 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<58 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<59 + 1024 * 0, true> { int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<59 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(59 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<59 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<60 + 1024 * 0, true> { int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<60 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(60 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<60 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<61 + 1024 * 0, true> { int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<61 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(61 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<61 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<62 + 1024 * 0, true> { int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<62 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(62 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<62 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<63 + 1024 * 0, true> { int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<63 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(63 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<63 + 1024 * 0, false>(){}; };


template <> struct ssdm_int<64 + 1024 * 0, true> { int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<64 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(64 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<64 + 1024 * 0, false>(){}; };




template <> struct ssdm_int<65 + 1024 * 0, true> { int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<65 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(65 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<65 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<66 + 1024 * 0, true> { int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<66 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(66 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<66 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<67 + 1024 * 0, true> { int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<67 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(67 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<67 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<68 + 1024 * 0, true> { int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<68 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(68 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<68 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<69 + 1024 * 0, true> { int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<69 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(69 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<69 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<70 + 1024 * 0, true> { int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<70 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(70 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<70 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<71 + 1024 * 0, true> { int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<71 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(71 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<71 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<72 + 1024 * 0, true> { int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<72 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(72 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<72 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<73 + 1024 * 0, true> { int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<73 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(73 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<73 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<74 + 1024 * 0, true> { int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<74 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(74 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<74 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<75 + 1024 * 0, true> { int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<75 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(75 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<75 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<76 + 1024 * 0, true> { int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<76 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(76 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<76 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<77 + 1024 * 0, true> { int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<77 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(77 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<77 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<78 + 1024 * 0, true> { int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<78 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(78 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<78 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<79 + 1024 * 0, true> { int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<79 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(79 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<79 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<80 + 1024 * 0, true> { int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<80 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(80 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<80 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<81 + 1024 * 0, true> { int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<81 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(81 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<81 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<82 + 1024 * 0, true> { int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<82 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(82 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<82 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<83 + 1024 * 0, true> { int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<83 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(83 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<83 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<84 + 1024 * 0, true> { int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<84 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(84 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<84 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<85 + 1024 * 0, true> { int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<85 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(85 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<85 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<86 + 1024 * 0, true> { int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<86 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(86 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<86 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<87 + 1024 * 0, true> { int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<87 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(87 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<87 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<88 + 1024 * 0, true> { int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<88 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(88 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<88 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<89 + 1024 * 0, true> { int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<89 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(89 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<89 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<90 + 1024 * 0, true> { int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<90 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(90 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<90 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<91 + 1024 * 0, true> { int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<91 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(91 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<91 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<92 + 1024 * 0, true> { int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<92 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(92 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<92 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<93 + 1024 * 0, true> { int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<93 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(93 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<93 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<94 + 1024 * 0, true> { int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<94 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(94 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<94 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<95 + 1024 * 0, true> { int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<95 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(95 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<95 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<96 + 1024 * 0, true> { int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<96 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(96 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<96 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<97 + 1024 * 0, true> { int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<97 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(97 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<97 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<98 + 1024 * 0, true> { int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<98 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(98 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<98 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<99 + 1024 * 0, true> { int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<99 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(99 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<99 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<100 + 1024 * 0, true> { int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<100 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(100 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<100 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<101 + 1024 * 0, true> { int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<101 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(101 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<101 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<102 + 1024 * 0, true> { int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<102 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(102 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<102 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<103 + 1024 * 0, true> { int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<103 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(103 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<103 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<104 + 1024 * 0, true> { int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<104 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(104 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<104 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<105 + 1024 * 0, true> { int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<105 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(105 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<105 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<106 + 1024 * 0, true> { int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<106 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(106 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<106 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<107 + 1024 * 0, true> { int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<107 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(107 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<107 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<108 + 1024 * 0, true> { int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<108 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(108 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<108 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<109 + 1024 * 0, true> { int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<109 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(109 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<109 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<110 + 1024 * 0, true> { int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<110 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(110 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<110 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<111 + 1024 * 0, true> { int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<111 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(111 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<111 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<112 + 1024 * 0, true> { int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<112 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(112 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<112 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<113 + 1024 * 0, true> { int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<113 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(113 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<113 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<114 + 1024 * 0, true> { int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<114 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(114 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<114 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<115 + 1024 * 0, true> { int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<115 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(115 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<115 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<116 + 1024 * 0, true> { int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<116 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(116 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<116 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<117 + 1024 * 0, true> { int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<117 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(117 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<117 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<118 + 1024 * 0, true> { int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<118 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(118 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<118 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<119 + 1024 * 0, true> { int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<119 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(119 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<119 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<120 + 1024 * 0, true> { int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<120 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(120 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<120 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<121 + 1024 * 0, true> { int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<121 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(121 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<121 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<122 + 1024 * 0, true> { int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<122 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(122 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<122 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<123 + 1024 * 0, true> { int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<123 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(123 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<123 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<124 + 1024 * 0, true> { int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<124 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(124 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<124 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<125 + 1024 * 0, true> { int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<125 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(125 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<125 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<126 + 1024 * 0, true> { int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<126 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(126 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<126 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<127 + 1024 * 0, true> { int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<127 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(127 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<127 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<128 + 1024 * 0, true> { int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<128 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(128 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<128 + 1024 * 0, false>(){}; };






template <> struct ssdm_int<129 + 1024 * 0, true> { int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<129 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(129 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<129 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<130 + 1024 * 0, true> { int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<130 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(130 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<130 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<131 + 1024 * 0, true> { int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<131 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(131 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<131 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<132 + 1024 * 0, true> { int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<132 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(132 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<132 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<133 + 1024 * 0, true> { int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<133 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(133 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<133 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<134 + 1024 * 0, true> { int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<134 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(134 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<134 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<135 + 1024 * 0, true> { int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<135 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(135 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<135 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<136 + 1024 * 0, true> { int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<136 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(136 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<136 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<137 + 1024 * 0, true> { int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<137 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(137 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<137 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<138 + 1024 * 0, true> { int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<138 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(138 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<138 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<139 + 1024 * 0, true> { int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<139 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(139 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<139 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<140 + 1024 * 0, true> { int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<140 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(140 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<140 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<141 + 1024 * 0, true> { int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<141 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(141 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<141 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<142 + 1024 * 0, true> { int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<142 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(142 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<142 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<143 + 1024 * 0, true> { int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<143 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(143 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<143 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<144 + 1024 * 0, true> { int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<144 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(144 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<144 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<145 + 1024 * 0, true> { int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<145 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(145 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<145 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<146 + 1024 * 0, true> { int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<146 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(146 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<146 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<147 + 1024 * 0, true> { int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<147 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(147 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<147 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<148 + 1024 * 0, true> { int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<148 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(148 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<148 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<149 + 1024 * 0, true> { int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<149 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(149 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<149 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<150 + 1024 * 0, true> { int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<150 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(150 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<150 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<151 + 1024 * 0, true> { int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<151 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(151 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<151 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<152 + 1024 * 0, true> { int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<152 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(152 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<152 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<153 + 1024 * 0, true> { int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<153 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(153 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<153 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<154 + 1024 * 0, true> { int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<154 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(154 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<154 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<155 + 1024 * 0, true> { int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<155 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(155 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<155 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<156 + 1024 * 0, true> { int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<156 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(156 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<156 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<157 + 1024 * 0, true> { int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<157 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(157 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<157 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<158 + 1024 * 0, true> { int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<158 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(158 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<158 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<159 + 1024 * 0, true> { int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<159 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(159 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<159 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<160 + 1024 * 0, true> { int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<160 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(160 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<160 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<161 + 1024 * 0, true> { int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<161 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(161 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<161 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<162 + 1024 * 0, true> { int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<162 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(162 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<162 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<163 + 1024 * 0, true> { int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<163 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(163 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<163 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<164 + 1024 * 0, true> { int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<164 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(164 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<164 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<165 + 1024 * 0, true> { int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<165 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(165 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<165 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<166 + 1024 * 0, true> { int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<166 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(166 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<166 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<167 + 1024 * 0, true> { int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<167 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(167 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<167 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<168 + 1024 * 0, true> { int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<168 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(168 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<168 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<169 + 1024 * 0, true> { int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<169 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(169 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<169 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<170 + 1024 * 0, true> { int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<170 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(170 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<170 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<171 + 1024 * 0, true> { int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<171 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(171 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<171 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<172 + 1024 * 0, true> { int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<172 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(172 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<172 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<173 + 1024 * 0, true> { int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<173 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(173 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<173 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<174 + 1024 * 0, true> { int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<174 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(174 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<174 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<175 + 1024 * 0, true> { int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<175 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(175 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<175 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<176 + 1024 * 0, true> { int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<176 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(176 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<176 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<177 + 1024 * 0, true> { int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<177 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(177 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<177 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<178 + 1024 * 0, true> { int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<178 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(178 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<178 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<179 + 1024 * 0, true> { int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<179 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(179 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<179 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<180 + 1024 * 0, true> { int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<180 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(180 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<180 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<181 + 1024 * 0, true> { int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<181 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(181 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<181 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<182 + 1024 * 0, true> { int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<182 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(182 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<182 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<183 + 1024 * 0, true> { int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<183 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(183 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<183 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<184 + 1024 * 0, true> { int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<184 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(184 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<184 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<185 + 1024 * 0, true> { int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<185 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(185 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<185 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<186 + 1024 * 0, true> { int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<186 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(186 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<186 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<187 + 1024 * 0, true> { int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<187 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(187 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<187 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<188 + 1024 * 0, true> { int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<188 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(188 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<188 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<189 + 1024 * 0, true> { int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<189 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(189 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<189 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<190 + 1024 * 0, true> { int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<190 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(190 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<190 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<191 + 1024 * 0, true> { int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<191 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(191 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<191 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<192 + 1024 * 0, true> { int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<192 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(192 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<192 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<193 + 1024 * 0, true> { int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<193 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(193 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<193 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<194 + 1024 * 0, true> { int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<194 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(194 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<194 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<195 + 1024 * 0, true> { int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<195 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(195 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<195 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<196 + 1024 * 0, true> { int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<196 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(196 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<196 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<197 + 1024 * 0, true> { int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<197 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(197 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<197 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<198 + 1024 * 0, true> { int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<198 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(198 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<198 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<199 + 1024 * 0, true> { int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<199 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(199 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<199 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<200 + 1024 * 0, true> { int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<200 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(200 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<200 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<201 + 1024 * 0, true> { int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<201 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(201 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<201 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<202 + 1024 * 0, true> { int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<202 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(202 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<202 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<203 + 1024 * 0, true> { int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<203 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(203 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<203 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<204 + 1024 * 0, true> { int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<204 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(204 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<204 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<205 + 1024 * 0, true> { int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<205 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(205 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<205 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<206 + 1024 * 0, true> { int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<206 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(206 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<206 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<207 + 1024 * 0, true> { int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<207 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(207 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<207 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<208 + 1024 * 0, true> { int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<208 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(208 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<208 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<209 + 1024 * 0, true> { int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<209 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(209 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<209 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<210 + 1024 * 0, true> { int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<210 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(210 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<210 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<211 + 1024 * 0, true> { int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<211 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(211 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<211 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<212 + 1024 * 0, true> { int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<212 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(212 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<212 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<213 + 1024 * 0, true> { int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<213 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(213 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<213 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<214 + 1024 * 0, true> { int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<214 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(214 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<214 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<215 + 1024 * 0, true> { int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<215 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(215 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<215 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<216 + 1024 * 0, true> { int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<216 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(216 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<216 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<217 + 1024 * 0, true> { int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<217 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(217 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<217 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<218 + 1024 * 0, true> { int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<218 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(218 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<218 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<219 + 1024 * 0, true> { int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<219 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(219 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<219 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<220 + 1024 * 0, true> { int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<220 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(220 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<220 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<221 + 1024 * 0, true> { int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<221 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(221 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<221 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<222 + 1024 * 0, true> { int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<222 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(222 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<222 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<223 + 1024 * 0, true> { int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<223 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(223 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<223 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<224 + 1024 * 0, true> { int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<224 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(224 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<224 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<225 + 1024 * 0, true> { int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<225 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(225 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<225 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<226 + 1024 * 0, true> { int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<226 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(226 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<226 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<227 + 1024 * 0, true> { int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<227 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(227 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<227 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<228 + 1024 * 0, true> { int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<228 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(228 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<228 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<229 + 1024 * 0, true> { int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<229 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(229 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<229 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<230 + 1024 * 0, true> { int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<230 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(230 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<230 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<231 + 1024 * 0, true> { int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<231 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(231 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<231 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<232 + 1024 * 0, true> { int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<232 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(232 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<232 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<233 + 1024 * 0, true> { int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<233 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(233 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<233 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<234 + 1024 * 0, true> { int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<234 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(234 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<234 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<235 + 1024 * 0, true> { int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<235 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(235 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<235 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<236 + 1024 * 0, true> { int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<236 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(236 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<236 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<237 + 1024 * 0, true> { int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<237 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(237 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<237 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<238 + 1024 * 0, true> { int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<238 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(238 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<238 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<239 + 1024 * 0, true> { int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<239 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(239 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<239 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<240 + 1024 * 0, true> { int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<240 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(240 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<240 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<241 + 1024 * 0, true> { int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<241 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(241 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<241 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<242 + 1024 * 0, true> { int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<242 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(242 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<242 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<243 + 1024 * 0, true> { int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<243 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(243 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<243 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<244 + 1024 * 0, true> { int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<244 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(244 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<244 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<245 + 1024 * 0, true> { int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<245 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(245 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<245 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<246 + 1024 * 0, true> { int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<246 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(246 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<246 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<247 + 1024 * 0, true> { int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<247 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(247 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<247 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<248 + 1024 * 0, true> { int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<248 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(248 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<248 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<249 + 1024 * 0, true> { int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<249 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(249 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<249 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<250 + 1024 * 0, true> { int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<250 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(250 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<250 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<251 + 1024 * 0, true> { int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<251 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(251 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<251 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<252 + 1024 * 0, true> { int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<252 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(252 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<252 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<253 + 1024 * 0, true> { int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<253 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(253 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<253 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<254 + 1024 * 0, true> { int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<254 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(254 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<254 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<255 + 1024 * 0, true> { int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<255 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(255 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<255 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<256 + 1024 * 0, true> { int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<256 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(256 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<256 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<257 + 1024 * 0, true> { int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<257 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(257 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<257 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<258 + 1024 * 0, true> { int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<258 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(258 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<258 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<259 + 1024 * 0, true> { int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<259 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(259 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<259 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<260 + 1024 * 0, true> { int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<260 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(260 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<260 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<261 + 1024 * 0, true> { int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<261 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(261 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<261 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<262 + 1024 * 0, true> { int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<262 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(262 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<262 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<263 + 1024 * 0, true> { int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<263 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(263 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<263 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<264 + 1024 * 0, true> { int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<264 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(264 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<264 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<265 + 1024 * 0, true> { int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<265 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(265 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<265 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<266 + 1024 * 0, true> { int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<266 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(266 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<266 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<267 + 1024 * 0, true> { int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<267 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(267 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<267 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<268 + 1024 * 0, true> { int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<268 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(268 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<268 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<269 + 1024 * 0, true> { int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<269 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(269 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<269 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<270 + 1024 * 0, true> { int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<270 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(270 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<270 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<271 + 1024 * 0, true> { int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<271 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(271 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<271 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<272 + 1024 * 0, true> { int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<272 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(272 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<272 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<273 + 1024 * 0, true> { int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<273 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(273 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<273 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<274 + 1024 * 0, true> { int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<274 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(274 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<274 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<275 + 1024 * 0, true> { int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<275 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(275 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<275 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<276 + 1024 * 0, true> { int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<276 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(276 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<276 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<277 + 1024 * 0, true> { int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<277 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(277 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<277 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<278 + 1024 * 0, true> { int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<278 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(278 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<278 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<279 + 1024 * 0, true> { int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<279 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(279 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<279 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<280 + 1024 * 0, true> { int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<280 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(280 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<280 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<281 + 1024 * 0, true> { int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<281 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(281 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<281 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<282 + 1024 * 0, true> { int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<282 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(282 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<282 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<283 + 1024 * 0, true> { int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<283 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(283 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<283 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<284 + 1024 * 0, true> { int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<284 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(284 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<284 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<285 + 1024 * 0, true> { int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<285 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(285 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<285 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<286 + 1024 * 0, true> { int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<286 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(286 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<286 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<287 + 1024 * 0, true> { int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<287 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(287 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<287 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<288 + 1024 * 0, true> { int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<288 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(288 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<288 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<289 + 1024 * 0, true> { int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<289 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(289 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<289 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<290 + 1024 * 0, true> { int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<290 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(290 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<290 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<291 + 1024 * 0, true> { int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<291 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(291 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<291 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<292 + 1024 * 0, true> { int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<292 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(292 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<292 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<293 + 1024 * 0, true> { int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<293 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(293 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<293 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<294 + 1024 * 0, true> { int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<294 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(294 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<294 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<295 + 1024 * 0, true> { int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<295 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(295 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<295 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<296 + 1024 * 0, true> { int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<296 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(296 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<296 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<297 + 1024 * 0, true> { int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<297 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(297 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<297 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<298 + 1024 * 0, true> { int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<298 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(298 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<298 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<299 + 1024 * 0, true> { int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<299 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(299 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<299 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<300 + 1024 * 0, true> { int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<300 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(300 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<300 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<301 + 1024 * 0, true> { int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<301 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(301 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<301 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<302 + 1024 * 0, true> { int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<302 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(302 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<302 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<303 + 1024 * 0, true> { int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<303 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(303 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<303 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<304 + 1024 * 0, true> { int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<304 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(304 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<304 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<305 + 1024 * 0, true> { int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<305 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(305 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<305 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<306 + 1024 * 0, true> { int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<306 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(306 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<306 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<307 + 1024 * 0, true> { int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<307 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(307 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<307 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<308 + 1024 * 0, true> { int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<308 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(308 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<308 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<309 + 1024 * 0, true> { int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<309 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(309 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<309 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<310 + 1024 * 0, true> { int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<310 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(310 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<310 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<311 + 1024 * 0, true> { int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<311 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(311 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<311 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<312 + 1024 * 0, true> { int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<312 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(312 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<312 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<313 + 1024 * 0, true> { int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<313 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(313 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<313 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<314 + 1024 * 0, true> { int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<314 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(314 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<314 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<315 + 1024 * 0, true> { int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<315 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(315 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<315 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<316 + 1024 * 0, true> { int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<316 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(316 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<316 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<317 + 1024 * 0, true> { int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<317 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(317 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<317 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<318 + 1024 * 0, true> { int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<318 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(318 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<318 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<319 + 1024 * 0, true> { int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<319 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(319 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<319 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<320 + 1024 * 0, true> { int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<320 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(320 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<320 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<321 + 1024 * 0, true> { int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<321 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(321 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<321 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<322 + 1024 * 0, true> { int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<322 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(322 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<322 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<323 + 1024 * 0, true> { int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<323 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(323 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<323 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<324 + 1024 * 0, true> { int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<324 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(324 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<324 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<325 + 1024 * 0, true> { int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<325 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(325 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<325 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<326 + 1024 * 0, true> { int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<326 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(326 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<326 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<327 + 1024 * 0, true> { int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<327 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(327 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<327 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<328 + 1024 * 0, true> { int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<328 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(328 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<328 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<329 + 1024 * 0, true> { int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<329 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(329 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<329 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<330 + 1024 * 0, true> { int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<330 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(330 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<330 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<331 + 1024 * 0, true> { int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<331 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(331 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<331 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<332 + 1024 * 0, true> { int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<332 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(332 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<332 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<333 + 1024 * 0, true> { int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<333 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(333 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<333 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<334 + 1024 * 0, true> { int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<334 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(334 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<334 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<335 + 1024 * 0, true> { int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<335 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(335 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<335 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<336 + 1024 * 0, true> { int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<336 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(336 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<336 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<337 + 1024 * 0, true> { int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<337 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(337 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<337 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<338 + 1024 * 0, true> { int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<338 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(338 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<338 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<339 + 1024 * 0, true> { int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<339 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(339 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<339 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<340 + 1024 * 0, true> { int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<340 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(340 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<340 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<341 + 1024 * 0, true> { int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<341 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(341 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<341 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<342 + 1024 * 0, true> { int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<342 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(342 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<342 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<343 + 1024 * 0, true> { int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<343 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(343 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<343 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<344 + 1024 * 0, true> { int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<344 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(344 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<344 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<345 + 1024 * 0, true> { int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<345 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(345 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<345 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<346 + 1024 * 0, true> { int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<346 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(346 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<346 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<347 + 1024 * 0, true> { int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<347 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(347 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<347 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<348 + 1024 * 0, true> { int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<348 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(348 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<348 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<349 + 1024 * 0, true> { int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<349 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(349 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<349 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<350 + 1024 * 0, true> { int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<350 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(350 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<350 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<351 + 1024 * 0, true> { int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<351 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(351 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<351 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<352 + 1024 * 0, true> { int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<352 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(352 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<352 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<353 + 1024 * 0, true> { int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<353 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(353 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<353 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<354 + 1024 * 0, true> { int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<354 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(354 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<354 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<355 + 1024 * 0, true> { int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<355 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(355 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<355 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<356 + 1024 * 0, true> { int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<356 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(356 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<356 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<357 + 1024 * 0, true> { int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<357 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(357 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<357 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<358 + 1024 * 0, true> { int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<358 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(358 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<358 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<359 + 1024 * 0, true> { int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<359 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(359 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<359 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<360 + 1024 * 0, true> { int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<360 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(360 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<360 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<361 + 1024 * 0, true> { int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<361 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(361 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<361 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<362 + 1024 * 0, true> { int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<362 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(362 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<362 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<363 + 1024 * 0, true> { int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<363 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(363 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<363 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<364 + 1024 * 0, true> { int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<364 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(364 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<364 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<365 + 1024 * 0, true> { int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<365 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(365 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<365 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<366 + 1024 * 0, true> { int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<366 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(366 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<366 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<367 + 1024 * 0, true> { int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<367 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(367 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<367 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<368 + 1024 * 0, true> { int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<368 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(368 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<368 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<369 + 1024 * 0, true> { int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<369 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(369 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<369 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<370 + 1024 * 0, true> { int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<370 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(370 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<370 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<371 + 1024 * 0, true> { int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<371 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(371 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<371 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<372 + 1024 * 0, true> { int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<372 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(372 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<372 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<373 + 1024 * 0, true> { int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<373 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(373 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<373 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<374 + 1024 * 0, true> { int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<374 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(374 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<374 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<375 + 1024 * 0, true> { int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<375 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(375 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<375 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<376 + 1024 * 0, true> { int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<376 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(376 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<376 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<377 + 1024 * 0, true> { int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<377 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(377 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<377 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<378 + 1024 * 0, true> { int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<378 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(378 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<378 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<379 + 1024 * 0, true> { int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<379 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(379 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<379 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<380 + 1024 * 0, true> { int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<380 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(380 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<380 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<381 + 1024 * 0, true> { int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<381 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(381 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<381 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<382 + 1024 * 0, true> { int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<382 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(382 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<382 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<383 + 1024 * 0, true> { int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<383 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(383 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<383 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<384 + 1024 * 0, true> { int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<384 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(384 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<384 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<385 + 1024 * 0, true> { int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<385 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(385 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<385 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<386 + 1024 * 0, true> { int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<386 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(386 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<386 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<387 + 1024 * 0, true> { int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<387 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(387 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<387 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<388 + 1024 * 0, true> { int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<388 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(388 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<388 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<389 + 1024 * 0, true> { int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<389 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(389 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<389 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<390 + 1024 * 0, true> { int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<390 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(390 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<390 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<391 + 1024 * 0, true> { int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<391 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(391 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<391 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<392 + 1024 * 0, true> { int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<392 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(392 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<392 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<393 + 1024 * 0, true> { int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<393 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(393 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<393 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<394 + 1024 * 0, true> { int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<394 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(394 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<394 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<395 + 1024 * 0, true> { int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<395 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(395 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<395 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<396 + 1024 * 0, true> { int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<396 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(396 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<396 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<397 + 1024 * 0, true> { int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<397 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(397 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<397 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<398 + 1024 * 0, true> { int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<398 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(398 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<398 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<399 + 1024 * 0, true> { int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<399 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(399 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<399 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<400 + 1024 * 0, true> { int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<400 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(400 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<400 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<401 + 1024 * 0, true> { int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<401 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(401 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<401 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<402 + 1024 * 0, true> { int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<402 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(402 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<402 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<403 + 1024 * 0, true> { int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<403 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(403 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<403 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<404 + 1024 * 0, true> { int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<404 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(404 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<404 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<405 + 1024 * 0, true> { int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<405 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(405 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<405 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<406 + 1024 * 0, true> { int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<406 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(406 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<406 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<407 + 1024 * 0, true> { int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<407 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(407 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<407 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<408 + 1024 * 0, true> { int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<408 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(408 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<408 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<409 + 1024 * 0, true> { int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<409 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(409 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<409 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<410 + 1024 * 0, true> { int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<410 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(410 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<410 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<411 + 1024 * 0, true> { int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<411 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(411 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<411 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<412 + 1024 * 0, true> { int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<412 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(412 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<412 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<413 + 1024 * 0, true> { int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<413 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(413 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<413 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<414 + 1024 * 0, true> { int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<414 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(414 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<414 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<415 + 1024 * 0, true> { int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<415 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(415 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<415 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<416 + 1024 * 0, true> { int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<416 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(416 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<416 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<417 + 1024 * 0, true> { int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<417 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(417 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<417 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<418 + 1024 * 0, true> { int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<418 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(418 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<418 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<419 + 1024 * 0, true> { int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<419 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(419 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<419 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<420 + 1024 * 0, true> { int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<420 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(420 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<420 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<421 + 1024 * 0, true> { int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<421 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(421 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<421 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<422 + 1024 * 0, true> { int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<422 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(422 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<422 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<423 + 1024 * 0, true> { int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<423 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(423 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<423 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<424 + 1024 * 0, true> { int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<424 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(424 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<424 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<425 + 1024 * 0, true> { int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<425 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(425 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<425 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<426 + 1024 * 0, true> { int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<426 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(426 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<426 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<427 + 1024 * 0, true> { int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<427 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(427 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<427 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<428 + 1024 * 0, true> { int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<428 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(428 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<428 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<429 + 1024 * 0, true> { int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<429 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(429 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<429 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<430 + 1024 * 0, true> { int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<430 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(430 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<430 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<431 + 1024 * 0, true> { int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<431 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(431 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<431 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<432 + 1024 * 0, true> { int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<432 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(432 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<432 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<433 + 1024 * 0, true> { int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<433 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(433 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<433 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<434 + 1024 * 0, true> { int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<434 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(434 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<434 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<435 + 1024 * 0, true> { int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<435 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(435 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<435 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<436 + 1024 * 0, true> { int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<436 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(436 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<436 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<437 + 1024 * 0, true> { int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<437 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(437 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<437 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<438 + 1024 * 0, true> { int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<438 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(438 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<438 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<439 + 1024 * 0, true> { int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<439 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(439 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<439 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<440 + 1024 * 0, true> { int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<440 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(440 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<440 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<441 + 1024 * 0, true> { int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<441 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(441 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<441 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<442 + 1024 * 0, true> { int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<442 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(442 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<442 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<443 + 1024 * 0, true> { int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<443 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(443 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<443 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<444 + 1024 * 0, true> { int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<444 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(444 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<444 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<445 + 1024 * 0, true> { int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<445 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(445 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<445 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<446 + 1024 * 0, true> { int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<446 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(446 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<446 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<447 + 1024 * 0, true> { int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<447 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(447 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<447 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<448 + 1024 * 0, true> { int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<448 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(448 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<448 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<449 + 1024 * 0, true> { int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<449 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(449 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<449 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<450 + 1024 * 0, true> { int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<450 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(450 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<450 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<451 + 1024 * 0, true> { int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<451 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(451 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<451 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<452 + 1024 * 0, true> { int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<452 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(452 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<452 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<453 + 1024 * 0, true> { int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<453 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(453 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<453 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<454 + 1024 * 0, true> { int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<454 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(454 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<454 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<455 + 1024 * 0, true> { int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<455 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(455 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<455 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<456 + 1024 * 0, true> { int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<456 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(456 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<456 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<457 + 1024 * 0, true> { int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<457 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(457 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<457 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<458 + 1024 * 0, true> { int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<458 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(458 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<458 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<459 + 1024 * 0, true> { int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<459 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(459 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<459 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<460 + 1024 * 0, true> { int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<460 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(460 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<460 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<461 + 1024 * 0, true> { int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<461 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(461 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<461 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<462 + 1024 * 0, true> { int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<462 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(462 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<462 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<463 + 1024 * 0, true> { int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<463 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(463 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<463 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<464 + 1024 * 0, true> { int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<464 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(464 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<464 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<465 + 1024 * 0, true> { int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<465 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(465 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<465 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<466 + 1024 * 0, true> { int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<466 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(466 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<466 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<467 + 1024 * 0, true> { int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<467 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(467 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<467 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<468 + 1024 * 0, true> { int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<468 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(468 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<468 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<469 + 1024 * 0, true> { int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<469 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(469 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<469 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<470 + 1024 * 0, true> { int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<470 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(470 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<470 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<471 + 1024 * 0, true> { int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<471 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(471 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<471 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<472 + 1024 * 0, true> { int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<472 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(472 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<472 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<473 + 1024 * 0, true> { int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<473 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(473 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<473 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<474 + 1024 * 0, true> { int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<474 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(474 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<474 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<475 + 1024 * 0, true> { int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<475 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(475 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<475 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<476 + 1024 * 0, true> { int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<476 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(476 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<476 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<477 + 1024 * 0, true> { int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<477 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(477 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<477 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<478 + 1024 * 0, true> { int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<478 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(478 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<478 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<479 + 1024 * 0, true> { int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<479 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(479 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<479 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<480 + 1024 * 0, true> { int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<480 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(480 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<480 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<481 + 1024 * 0, true> { int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<481 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(481 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<481 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<482 + 1024 * 0, true> { int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<482 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(482 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<482 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<483 + 1024 * 0, true> { int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<483 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(483 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<483 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<484 + 1024 * 0, true> { int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<484 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(484 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<484 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<485 + 1024 * 0, true> { int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<485 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(485 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<485 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<486 + 1024 * 0, true> { int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<486 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(486 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<486 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<487 + 1024 * 0, true> { int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<487 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(487 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<487 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<488 + 1024 * 0, true> { int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<488 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(488 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<488 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<489 + 1024 * 0, true> { int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<489 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(489 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<489 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<490 + 1024 * 0, true> { int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<490 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(490 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<490 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<491 + 1024 * 0, true> { int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<491 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(491 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<491 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<492 + 1024 * 0, true> { int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<492 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(492 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<492 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<493 + 1024 * 0, true> { int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<493 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(493 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<493 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<494 + 1024 * 0, true> { int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<494 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(494 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<494 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<495 + 1024 * 0, true> { int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<495 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(495 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<495 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<496 + 1024 * 0, true> { int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<496 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(496 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<496 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<497 + 1024 * 0, true> { int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<497 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(497 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<497 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<498 + 1024 * 0, true> { int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<498 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(498 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<498 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<499 + 1024 * 0, true> { int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<499 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(499 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<499 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<500 + 1024 * 0, true> { int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<500 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(500 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<500 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<501 + 1024 * 0, true> { int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<501 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(501 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<501 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<502 + 1024 * 0, true> { int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<502 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(502 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<502 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<503 + 1024 * 0, true> { int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<503 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(503 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<503 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<504 + 1024 * 0, true> { int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<504 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(504 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<504 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<505 + 1024 * 0, true> { int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<505 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(505 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<505 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<506 + 1024 * 0, true> { int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<506 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(506 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<506 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<507 + 1024 * 0, true> { int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<507 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(507 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<507 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<508 + 1024 * 0, true> { int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<508 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(508 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<508 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<509 + 1024 * 0, true> { int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<509 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(509 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<509 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<510 + 1024 * 0, true> { int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<510 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(510 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<510 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<511 + 1024 * 0, true> { int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<511 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(511 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<511 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<512 + 1024 * 0, true> { int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<512 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(512 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<512 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<513 + 1024 * 0, true> { int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<513 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(513 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<513 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<514 + 1024 * 0, true> { int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<514 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(514 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<514 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<515 + 1024 * 0, true> { int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<515 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(515 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<515 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<516 + 1024 * 0, true> { int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<516 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(516 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<516 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<517 + 1024 * 0, true> { int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<517 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(517 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<517 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<518 + 1024 * 0, true> { int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<518 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(518 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<518 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<519 + 1024 * 0, true> { int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<519 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(519 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<519 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<520 + 1024 * 0, true> { int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<520 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(520 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<520 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<521 + 1024 * 0, true> { int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<521 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(521 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<521 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<522 + 1024 * 0, true> { int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<522 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(522 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<522 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<523 + 1024 * 0, true> { int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<523 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(523 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<523 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<524 + 1024 * 0, true> { int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<524 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(524 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<524 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<525 + 1024 * 0, true> { int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<525 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(525 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<525 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<526 + 1024 * 0, true> { int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<526 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(526 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<526 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<527 + 1024 * 0, true> { int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<527 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(527 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<527 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<528 + 1024 * 0, true> { int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<528 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(528 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<528 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<529 + 1024 * 0, true> { int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<529 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(529 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<529 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<530 + 1024 * 0, true> { int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<530 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(530 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<530 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<531 + 1024 * 0, true> { int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<531 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(531 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<531 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<532 + 1024 * 0, true> { int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<532 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(532 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<532 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<533 + 1024 * 0, true> { int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<533 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(533 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<533 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<534 + 1024 * 0, true> { int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<534 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(534 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<534 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<535 + 1024 * 0, true> { int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<535 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(535 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<535 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<536 + 1024 * 0, true> { int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<536 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(536 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<536 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<537 + 1024 * 0, true> { int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<537 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(537 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<537 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<538 + 1024 * 0, true> { int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<538 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(538 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<538 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<539 + 1024 * 0, true> { int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<539 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(539 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<539 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<540 + 1024 * 0, true> { int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<540 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(540 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<540 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<541 + 1024 * 0, true> { int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<541 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(541 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<541 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<542 + 1024 * 0, true> { int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<542 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(542 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<542 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<543 + 1024 * 0, true> { int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<543 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(543 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<543 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<544 + 1024 * 0, true> { int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<544 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(544 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<544 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<545 + 1024 * 0, true> { int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<545 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(545 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<545 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<546 + 1024 * 0, true> { int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<546 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(546 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<546 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<547 + 1024 * 0, true> { int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<547 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(547 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<547 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<548 + 1024 * 0, true> { int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<548 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(548 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<548 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<549 + 1024 * 0, true> { int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<549 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(549 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<549 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<550 + 1024 * 0, true> { int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<550 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(550 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<550 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<551 + 1024 * 0, true> { int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<551 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(551 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<551 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<552 + 1024 * 0, true> { int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<552 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(552 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<552 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<553 + 1024 * 0, true> { int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<553 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(553 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<553 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<554 + 1024 * 0, true> { int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<554 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(554 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<554 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<555 + 1024 * 0, true> { int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<555 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(555 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<555 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<556 + 1024 * 0, true> { int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<556 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(556 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<556 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<557 + 1024 * 0, true> { int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<557 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(557 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<557 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<558 + 1024 * 0, true> { int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<558 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(558 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<558 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<559 + 1024 * 0, true> { int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<559 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(559 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<559 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<560 + 1024 * 0, true> { int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<560 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(560 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<560 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<561 + 1024 * 0, true> { int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<561 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(561 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<561 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<562 + 1024 * 0, true> { int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<562 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(562 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<562 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<563 + 1024 * 0, true> { int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<563 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(563 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<563 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<564 + 1024 * 0, true> { int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<564 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(564 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<564 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<565 + 1024 * 0, true> { int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<565 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(565 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<565 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<566 + 1024 * 0, true> { int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<566 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(566 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<566 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<567 + 1024 * 0, true> { int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<567 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(567 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<567 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<568 + 1024 * 0, true> { int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<568 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(568 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<568 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<569 + 1024 * 0, true> { int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<569 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(569 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<569 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<570 + 1024 * 0, true> { int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<570 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(570 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<570 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<571 + 1024 * 0, true> { int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<571 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(571 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<571 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<572 + 1024 * 0, true> { int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<572 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(572 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<572 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<573 + 1024 * 0, true> { int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<573 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(573 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<573 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<574 + 1024 * 0, true> { int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<574 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(574 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<574 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<575 + 1024 * 0, true> { int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<575 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(575 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<575 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<576 + 1024 * 0, true> { int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<576 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(576 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<576 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<577 + 1024 * 0, true> { int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<577 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(577 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<577 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<578 + 1024 * 0, true> { int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<578 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(578 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<578 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<579 + 1024 * 0, true> { int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<579 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(579 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<579 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<580 + 1024 * 0, true> { int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<580 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(580 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<580 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<581 + 1024 * 0, true> { int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<581 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(581 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<581 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<582 + 1024 * 0, true> { int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<582 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(582 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<582 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<583 + 1024 * 0, true> { int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<583 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(583 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<583 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<584 + 1024 * 0, true> { int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<584 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(584 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<584 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<585 + 1024 * 0, true> { int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<585 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(585 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<585 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<586 + 1024 * 0, true> { int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<586 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(586 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<586 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<587 + 1024 * 0, true> { int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<587 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(587 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<587 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<588 + 1024 * 0, true> { int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<588 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(588 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<588 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<589 + 1024 * 0, true> { int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<589 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(589 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<589 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<590 + 1024 * 0, true> { int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<590 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(590 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<590 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<591 + 1024 * 0, true> { int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<591 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(591 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<591 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<592 + 1024 * 0, true> { int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<592 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(592 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<592 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<593 + 1024 * 0, true> { int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<593 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(593 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<593 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<594 + 1024 * 0, true> { int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<594 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(594 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<594 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<595 + 1024 * 0, true> { int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<595 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(595 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<595 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<596 + 1024 * 0, true> { int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<596 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(596 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<596 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<597 + 1024 * 0, true> { int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<597 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(597 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<597 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<598 + 1024 * 0, true> { int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<598 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(598 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<598 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<599 + 1024 * 0, true> { int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<599 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(599 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<599 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<600 + 1024 * 0, true> { int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<600 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(600 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<600 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<601 + 1024 * 0, true> { int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<601 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(601 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<601 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<602 + 1024 * 0, true> { int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<602 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(602 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<602 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<603 + 1024 * 0, true> { int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<603 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(603 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<603 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<604 + 1024 * 0, true> { int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<604 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(604 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<604 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<605 + 1024 * 0, true> { int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<605 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(605 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<605 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<606 + 1024 * 0, true> { int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<606 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(606 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<606 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<607 + 1024 * 0, true> { int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<607 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(607 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<607 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<608 + 1024 * 0, true> { int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<608 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(608 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<608 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<609 + 1024 * 0, true> { int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<609 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(609 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<609 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<610 + 1024 * 0, true> { int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<610 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(610 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<610 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<611 + 1024 * 0, true> { int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<611 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(611 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<611 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<612 + 1024 * 0, true> { int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<612 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(612 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<612 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<613 + 1024 * 0, true> { int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<613 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(613 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<613 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<614 + 1024 * 0, true> { int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<614 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(614 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<614 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<615 + 1024 * 0, true> { int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<615 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(615 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<615 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<616 + 1024 * 0, true> { int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<616 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(616 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<616 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<617 + 1024 * 0, true> { int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<617 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(617 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<617 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<618 + 1024 * 0, true> { int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<618 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(618 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<618 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<619 + 1024 * 0, true> { int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<619 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(619 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<619 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<620 + 1024 * 0, true> { int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<620 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(620 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<620 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<621 + 1024 * 0, true> { int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<621 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(621 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<621 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<622 + 1024 * 0, true> { int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<622 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(622 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<622 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<623 + 1024 * 0, true> { int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<623 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(623 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<623 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<624 + 1024 * 0, true> { int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<624 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(624 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<624 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<625 + 1024 * 0, true> { int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<625 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(625 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<625 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<626 + 1024 * 0, true> { int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<626 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(626 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<626 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<627 + 1024 * 0, true> { int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<627 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(627 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<627 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<628 + 1024 * 0, true> { int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<628 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(628 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<628 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<629 + 1024 * 0, true> { int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<629 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(629 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<629 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<630 + 1024 * 0, true> { int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<630 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(630 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<630 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<631 + 1024 * 0, true> { int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<631 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(631 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<631 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<632 + 1024 * 0, true> { int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<632 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(632 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<632 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<633 + 1024 * 0, true> { int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<633 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(633 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<633 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<634 + 1024 * 0, true> { int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<634 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(634 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<634 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<635 + 1024 * 0, true> { int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<635 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(635 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<635 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<636 + 1024 * 0, true> { int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<636 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(636 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<636 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<637 + 1024 * 0, true> { int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<637 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(637 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<637 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<638 + 1024 * 0, true> { int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<638 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(638 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<638 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<639 + 1024 * 0, true> { int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<639 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(639 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<639 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<640 + 1024 * 0, true> { int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<640 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(640 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<640 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<641 + 1024 * 0, true> { int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<641 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(641 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<641 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<642 + 1024 * 0, true> { int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<642 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(642 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<642 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<643 + 1024 * 0, true> { int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<643 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(643 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<643 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<644 + 1024 * 0, true> { int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<644 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(644 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<644 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<645 + 1024 * 0, true> { int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<645 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(645 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<645 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<646 + 1024 * 0, true> { int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<646 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(646 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<646 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<647 + 1024 * 0, true> { int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<647 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(647 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<647 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<648 + 1024 * 0, true> { int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<648 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(648 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<648 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<649 + 1024 * 0, true> { int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<649 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(649 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<649 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<650 + 1024 * 0, true> { int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<650 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(650 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<650 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<651 + 1024 * 0, true> { int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<651 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(651 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<651 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<652 + 1024 * 0, true> { int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<652 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(652 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<652 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<653 + 1024 * 0, true> { int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<653 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(653 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<653 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<654 + 1024 * 0, true> { int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<654 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(654 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<654 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<655 + 1024 * 0, true> { int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<655 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(655 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<655 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<656 + 1024 * 0, true> { int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<656 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(656 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<656 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<657 + 1024 * 0, true> { int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<657 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(657 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<657 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<658 + 1024 * 0, true> { int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<658 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(658 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<658 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<659 + 1024 * 0, true> { int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<659 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(659 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<659 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<660 + 1024 * 0, true> { int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<660 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(660 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<660 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<661 + 1024 * 0, true> { int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<661 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(661 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<661 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<662 + 1024 * 0, true> { int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<662 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(662 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<662 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<663 + 1024 * 0, true> { int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<663 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(663 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<663 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<664 + 1024 * 0, true> { int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<664 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(664 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<664 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<665 + 1024 * 0, true> { int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<665 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(665 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<665 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<666 + 1024 * 0, true> { int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<666 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(666 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<666 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<667 + 1024 * 0, true> { int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<667 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(667 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<667 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<668 + 1024 * 0, true> { int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<668 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(668 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<668 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<669 + 1024 * 0, true> { int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<669 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(669 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<669 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<670 + 1024 * 0, true> { int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<670 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(670 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<670 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<671 + 1024 * 0, true> { int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<671 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(671 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<671 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<672 + 1024 * 0, true> { int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<672 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(672 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<672 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<673 + 1024 * 0, true> { int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<673 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(673 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<673 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<674 + 1024 * 0, true> { int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<674 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(674 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<674 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<675 + 1024 * 0, true> { int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<675 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(675 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<675 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<676 + 1024 * 0, true> { int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<676 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(676 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<676 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<677 + 1024 * 0, true> { int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<677 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(677 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<677 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<678 + 1024 * 0, true> { int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<678 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(678 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<678 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<679 + 1024 * 0, true> { int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<679 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(679 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<679 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<680 + 1024 * 0, true> { int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<680 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(680 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<680 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<681 + 1024 * 0, true> { int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<681 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(681 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<681 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<682 + 1024 * 0, true> { int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<682 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(682 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<682 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<683 + 1024 * 0, true> { int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<683 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(683 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<683 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<684 + 1024 * 0, true> { int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<684 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(684 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<684 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<685 + 1024 * 0, true> { int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<685 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(685 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<685 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<686 + 1024 * 0, true> { int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<686 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(686 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<686 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<687 + 1024 * 0, true> { int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<687 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(687 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<687 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<688 + 1024 * 0, true> { int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<688 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(688 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<688 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<689 + 1024 * 0, true> { int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<689 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(689 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<689 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<690 + 1024 * 0, true> { int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<690 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(690 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<690 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<691 + 1024 * 0, true> { int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<691 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(691 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<691 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<692 + 1024 * 0, true> { int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<692 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(692 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<692 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<693 + 1024 * 0, true> { int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<693 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(693 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<693 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<694 + 1024 * 0, true> { int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<694 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(694 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<694 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<695 + 1024 * 0, true> { int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<695 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(695 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<695 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<696 + 1024 * 0, true> { int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<696 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(696 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<696 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<697 + 1024 * 0, true> { int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<697 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(697 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<697 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<698 + 1024 * 0, true> { int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<698 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(698 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<698 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<699 + 1024 * 0, true> { int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<699 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(699 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<699 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<700 + 1024 * 0, true> { int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<700 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(700 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<700 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<701 + 1024 * 0, true> { int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<701 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(701 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<701 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<702 + 1024 * 0, true> { int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<702 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(702 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<702 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<703 + 1024 * 0, true> { int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<703 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(703 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<703 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<704 + 1024 * 0, true> { int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<704 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(704 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<704 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<705 + 1024 * 0, true> { int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<705 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(705 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<705 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<706 + 1024 * 0, true> { int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<706 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(706 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<706 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<707 + 1024 * 0, true> { int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<707 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(707 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<707 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<708 + 1024 * 0, true> { int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<708 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(708 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<708 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<709 + 1024 * 0, true> { int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<709 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(709 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<709 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<710 + 1024 * 0, true> { int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<710 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(710 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<710 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<711 + 1024 * 0, true> { int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<711 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(711 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<711 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<712 + 1024 * 0, true> { int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<712 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(712 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<712 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<713 + 1024 * 0, true> { int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<713 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(713 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<713 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<714 + 1024 * 0, true> { int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<714 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(714 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<714 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<715 + 1024 * 0, true> { int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<715 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(715 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<715 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<716 + 1024 * 0, true> { int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<716 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(716 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<716 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<717 + 1024 * 0, true> { int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<717 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(717 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<717 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<718 + 1024 * 0, true> { int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<718 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(718 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<718 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<719 + 1024 * 0, true> { int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<719 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(719 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<719 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<720 + 1024 * 0, true> { int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<720 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(720 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<720 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<721 + 1024 * 0, true> { int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<721 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(721 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<721 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<722 + 1024 * 0, true> { int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<722 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(722 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<722 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<723 + 1024 * 0, true> { int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<723 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(723 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<723 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<724 + 1024 * 0, true> { int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<724 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(724 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<724 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<725 + 1024 * 0, true> { int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<725 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(725 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<725 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<726 + 1024 * 0, true> { int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<726 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(726 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<726 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<727 + 1024 * 0, true> { int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<727 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(727 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<727 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<728 + 1024 * 0, true> { int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<728 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(728 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<728 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<729 + 1024 * 0, true> { int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<729 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(729 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<729 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<730 + 1024 * 0, true> { int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<730 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(730 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<730 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<731 + 1024 * 0, true> { int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<731 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(731 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<731 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<732 + 1024 * 0, true> { int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<732 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(732 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<732 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<733 + 1024 * 0, true> { int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<733 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(733 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<733 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<734 + 1024 * 0, true> { int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<734 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(734 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<734 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<735 + 1024 * 0, true> { int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<735 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(735 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<735 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<736 + 1024 * 0, true> { int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<736 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(736 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<736 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<737 + 1024 * 0, true> { int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<737 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(737 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<737 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<738 + 1024 * 0, true> { int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<738 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(738 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<738 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<739 + 1024 * 0, true> { int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<739 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(739 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<739 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<740 + 1024 * 0, true> { int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<740 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(740 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<740 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<741 + 1024 * 0, true> { int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<741 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(741 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<741 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<742 + 1024 * 0, true> { int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<742 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(742 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<742 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<743 + 1024 * 0, true> { int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<743 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(743 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<743 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<744 + 1024 * 0, true> { int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<744 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(744 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<744 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<745 + 1024 * 0, true> { int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<745 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(745 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<745 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<746 + 1024 * 0, true> { int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<746 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(746 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<746 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<747 + 1024 * 0, true> { int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<747 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(747 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<747 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<748 + 1024 * 0, true> { int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<748 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(748 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<748 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<749 + 1024 * 0, true> { int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<749 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(749 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<749 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<750 + 1024 * 0, true> { int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<750 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(750 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<750 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<751 + 1024 * 0, true> { int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<751 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(751 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<751 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<752 + 1024 * 0, true> { int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<752 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(752 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<752 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<753 + 1024 * 0, true> { int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<753 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(753 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<753 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<754 + 1024 * 0, true> { int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<754 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(754 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<754 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<755 + 1024 * 0, true> { int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<755 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(755 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<755 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<756 + 1024 * 0, true> { int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<756 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(756 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<756 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<757 + 1024 * 0, true> { int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<757 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(757 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<757 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<758 + 1024 * 0, true> { int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<758 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(758 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<758 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<759 + 1024 * 0, true> { int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<759 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(759 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<759 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<760 + 1024 * 0, true> { int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<760 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(760 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<760 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<761 + 1024 * 0, true> { int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<761 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(761 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<761 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<762 + 1024 * 0, true> { int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<762 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(762 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<762 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<763 + 1024 * 0, true> { int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<763 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(763 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<763 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<764 + 1024 * 0, true> { int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<764 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(764 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<764 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<765 + 1024 * 0, true> { int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<765 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(765 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<765 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<766 + 1024 * 0, true> { int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<766 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(766 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<766 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<767 + 1024 * 0, true> { int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<767 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(767 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<767 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<768 + 1024 * 0, true> { int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<768 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(768 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<768 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<769 + 1024 * 0, true> { int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<769 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(769 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<769 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<770 + 1024 * 0, true> { int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<770 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(770 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<770 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<771 + 1024 * 0, true> { int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<771 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(771 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<771 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<772 + 1024 * 0, true> { int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<772 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(772 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<772 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<773 + 1024 * 0, true> { int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<773 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(773 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<773 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<774 + 1024 * 0, true> { int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<774 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(774 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<774 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<775 + 1024 * 0, true> { int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<775 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(775 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<775 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<776 + 1024 * 0, true> { int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<776 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(776 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<776 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<777 + 1024 * 0, true> { int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<777 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(777 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<777 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<778 + 1024 * 0, true> { int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<778 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(778 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<778 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<779 + 1024 * 0, true> { int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<779 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(779 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<779 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<780 + 1024 * 0, true> { int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<780 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(780 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<780 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<781 + 1024 * 0, true> { int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<781 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(781 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<781 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<782 + 1024 * 0, true> { int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<782 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(782 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<782 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<783 + 1024 * 0, true> { int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<783 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(783 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<783 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<784 + 1024 * 0, true> { int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<784 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(784 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<784 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<785 + 1024 * 0, true> { int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<785 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(785 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<785 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<786 + 1024 * 0, true> { int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<786 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(786 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<786 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<787 + 1024 * 0, true> { int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<787 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(787 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<787 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<788 + 1024 * 0, true> { int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<788 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(788 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<788 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<789 + 1024 * 0, true> { int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<789 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(789 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<789 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<790 + 1024 * 0, true> { int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<790 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(790 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<790 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<791 + 1024 * 0, true> { int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<791 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(791 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<791 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<792 + 1024 * 0, true> { int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<792 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(792 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<792 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<793 + 1024 * 0, true> { int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<793 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(793 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<793 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<794 + 1024 * 0, true> { int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<794 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(794 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<794 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<795 + 1024 * 0, true> { int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<795 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(795 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<795 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<796 + 1024 * 0, true> { int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<796 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(796 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<796 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<797 + 1024 * 0, true> { int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<797 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(797 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<797 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<798 + 1024 * 0, true> { int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<798 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(798 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<798 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<799 + 1024 * 0, true> { int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<799 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(799 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<799 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<800 + 1024 * 0, true> { int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<800 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(800 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<800 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<801 + 1024 * 0, true> { int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<801 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(801 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<801 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<802 + 1024 * 0, true> { int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<802 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(802 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<802 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<803 + 1024 * 0, true> { int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<803 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(803 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<803 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<804 + 1024 * 0, true> { int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<804 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(804 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<804 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<805 + 1024 * 0, true> { int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<805 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(805 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<805 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<806 + 1024 * 0, true> { int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<806 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(806 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<806 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<807 + 1024 * 0, true> { int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<807 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(807 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<807 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<808 + 1024 * 0, true> { int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<808 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(808 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<808 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<809 + 1024 * 0, true> { int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<809 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(809 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<809 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<810 + 1024 * 0, true> { int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<810 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(810 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<810 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<811 + 1024 * 0, true> { int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<811 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(811 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<811 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<812 + 1024 * 0, true> { int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<812 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(812 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<812 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<813 + 1024 * 0, true> { int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<813 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(813 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<813 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<814 + 1024 * 0, true> { int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<814 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(814 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<814 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<815 + 1024 * 0, true> { int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<815 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(815 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<815 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<816 + 1024 * 0, true> { int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<816 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(816 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<816 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<817 + 1024 * 0, true> { int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<817 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(817 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<817 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<818 + 1024 * 0, true> { int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<818 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(818 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<818 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<819 + 1024 * 0, true> { int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<819 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(819 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<819 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<820 + 1024 * 0, true> { int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<820 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(820 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<820 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<821 + 1024 * 0, true> { int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<821 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(821 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<821 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<822 + 1024 * 0, true> { int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<822 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(822 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<822 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<823 + 1024 * 0, true> { int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<823 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(823 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<823 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<824 + 1024 * 0, true> { int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<824 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(824 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<824 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<825 + 1024 * 0, true> { int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<825 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(825 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<825 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<826 + 1024 * 0, true> { int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<826 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(826 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<826 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<827 + 1024 * 0, true> { int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<827 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(827 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<827 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<828 + 1024 * 0, true> { int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<828 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(828 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<828 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<829 + 1024 * 0, true> { int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<829 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(829 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<829 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<830 + 1024 * 0, true> { int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<830 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(830 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<830 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<831 + 1024 * 0, true> { int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<831 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(831 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<831 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<832 + 1024 * 0, true> { int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<832 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(832 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<832 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<833 + 1024 * 0, true> { int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<833 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(833 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<833 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<834 + 1024 * 0, true> { int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<834 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(834 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<834 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<835 + 1024 * 0, true> { int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<835 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(835 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<835 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<836 + 1024 * 0, true> { int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<836 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(836 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<836 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<837 + 1024 * 0, true> { int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<837 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(837 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<837 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<838 + 1024 * 0, true> { int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<838 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(838 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<838 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<839 + 1024 * 0, true> { int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<839 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(839 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<839 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<840 + 1024 * 0, true> { int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<840 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(840 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<840 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<841 + 1024 * 0, true> { int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<841 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(841 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<841 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<842 + 1024 * 0, true> { int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<842 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(842 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<842 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<843 + 1024 * 0, true> { int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<843 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(843 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<843 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<844 + 1024 * 0, true> { int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<844 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(844 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<844 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<845 + 1024 * 0, true> { int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<845 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(845 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<845 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<846 + 1024 * 0, true> { int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<846 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(846 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<846 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<847 + 1024 * 0, true> { int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<847 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(847 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<847 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<848 + 1024 * 0, true> { int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<848 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(848 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<848 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<849 + 1024 * 0, true> { int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<849 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(849 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<849 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<850 + 1024 * 0, true> { int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<850 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(850 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<850 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<851 + 1024 * 0, true> { int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<851 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(851 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<851 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<852 + 1024 * 0, true> { int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<852 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(852 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<852 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<853 + 1024 * 0, true> { int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<853 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(853 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<853 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<854 + 1024 * 0, true> { int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<854 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(854 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<854 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<855 + 1024 * 0, true> { int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<855 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(855 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<855 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<856 + 1024 * 0, true> { int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<856 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(856 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<856 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<857 + 1024 * 0, true> { int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<857 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(857 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<857 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<858 + 1024 * 0, true> { int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<858 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(858 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<858 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<859 + 1024 * 0, true> { int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<859 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(859 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<859 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<860 + 1024 * 0, true> { int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<860 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(860 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<860 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<861 + 1024 * 0, true> { int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<861 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(861 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<861 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<862 + 1024 * 0, true> { int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<862 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(862 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<862 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<863 + 1024 * 0, true> { int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<863 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(863 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<863 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<864 + 1024 * 0, true> { int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<864 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(864 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<864 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<865 + 1024 * 0, true> { int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<865 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(865 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<865 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<866 + 1024 * 0, true> { int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<866 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(866 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<866 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<867 + 1024 * 0, true> { int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<867 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(867 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<867 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<868 + 1024 * 0, true> { int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<868 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(868 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<868 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<869 + 1024 * 0, true> { int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<869 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(869 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<869 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<870 + 1024 * 0, true> { int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<870 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(870 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<870 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<871 + 1024 * 0, true> { int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<871 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(871 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<871 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<872 + 1024 * 0, true> { int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<872 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(872 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<872 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<873 + 1024 * 0, true> { int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<873 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(873 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<873 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<874 + 1024 * 0, true> { int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<874 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(874 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<874 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<875 + 1024 * 0, true> { int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<875 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(875 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<875 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<876 + 1024 * 0, true> { int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<876 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(876 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<876 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<877 + 1024 * 0, true> { int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<877 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(877 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<877 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<878 + 1024 * 0, true> { int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<878 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(878 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<878 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<879 + 1024 * 0, true> { int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<879 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(879 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<879 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<880 + 1024 * 0, true> { int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<880 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(880 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<880 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<881 + 1024 * 0, true> { int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<881 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(881 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<881 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<882 + 1024 * 0, true> { int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<882 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(882 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<882 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<883 + 1024 * 0, true> { int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<883 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(883 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<883 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<884 + 1024 * 0, true> { int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<884 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(884 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<884 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<885 + 1024 * 0, true> { int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<885 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(885 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<885 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<886 + 1024 * 0, true> { int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<886 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(886 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<886 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<887 + 1024 * 0, true> { int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<887 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(887 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<887 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<888 + 1024 * 0, true> { int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<888 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(888 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<888 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<889 + 1024 * 0, true> { int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<889 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(889 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<889 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<890 + 1024 * 0, true> { int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<890 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(890 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<890 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<891 + 1024 * 0, true> { int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<891 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(891 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<891 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<892 + 1024 * 0, true> { int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<892 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(892 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<892 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<893 + 1024 * 0, true> { int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<893 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(893 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<893 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<894 + 1024 * 0, true> { int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<894 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(894 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<894 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<895 + 1024 * 0, true> { int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<895 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(895 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<895 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<896 + 1024 * 0, true> { int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<896 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(896 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<896 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<897 + 1024 * 0, true> { int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<897 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(897 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<897 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<898 + 1024 * 0, true> { int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<898 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(898 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<898 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<899 + 1024 * 0, true> { int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<899 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(899 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<899 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<900 + 1024 * 0, true> { int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<900 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(900 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<900 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<901 + 1024 * 0, true> { int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<901 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(901 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<901 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<902 + 1024 * 0, true> { int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<902 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(902 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<902 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<903 + 1024 * 0, true> { int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<903 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(903 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<903 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<904 + 1024 * 0, true> { int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<904 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(904 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<904 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<905 + 1024 * 0, true> { int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<905 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(905 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<905 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<906 + 1024 * 0, true> { int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<906 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(906 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<906 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<907 + 1024 * 0, true> { int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<907 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(907 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<907 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<908 + 1024 * 0, true> { int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<908 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(908 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<908 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<909 + 1024 * 0, true> { int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<909 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(909 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<909 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<910 + 1024 * 0, true> { int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<910 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(910 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<910 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<911 + 1024 * 0, true> { int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<911 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(911 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<911 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<912 + 1024 * 0, true> { int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<912 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(912 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<912 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<913 + 1024 * 0, true> { int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<913 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(913 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<913 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<914 + 1024 * 0, true> { int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<914 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(914 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<914 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<915 + 1024 * 0, true> { int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<915 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(915 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<915 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<916 + 1024 * 0, true> { int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<916 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(916 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<916 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<917 + 1024 * 0, true> { int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<917 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(917 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<917 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<918 + 1024 * 0, true> { int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<918 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(918 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<918 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<919 + 1024 * 0, true> { int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<919 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(919 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<919 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<920 + 1024 * 0, true> { int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<920 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(920 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<920 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<921 + 1024 * 0, true> { int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<921 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(921 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<921 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<922 + 1024 * 0, true> { int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<922 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(922 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<922 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<923 + 1024 * 0, true> { int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<923 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(923 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<923 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<924 + 1024 * 0, true> { int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<924 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(924 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<924 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<925 + 1024 * 0, true> { int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<925 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(925 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<925 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<926 + 1024 * 0, true> { int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<926 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(926 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<926 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<927 + 1024 * 0, true> { int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<927 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(927 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<927 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<928 + 1024 * 0, true> { int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<928 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(928 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<928 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<929 + 1024 * 0, true> { int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<929 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(929 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<929 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<930 + 1024 * 0, true> { int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<930 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(930 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<930 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<931 + 1024 * 0, true> { int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<931 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(931 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<931 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<932 + 1024 * 0, true> { int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<932 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(932 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<932 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<933 + 1024 * 0, true> { int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<933 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(933 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<933 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<934 + 1024 * 0, true> { int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<934 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(934 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<934 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<935 + 1024 * 0, true> { int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<935 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(935 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<935 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<936 + 1024 * 0, true> { int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<936 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(936 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<936 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<937 + 1024 * 0, true> { int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<937 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(937 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<937 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<938 + 1024 * 0, true> { int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<938 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(938 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<938 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<939 + 1024 * 0, true> { int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<939 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(939 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<939 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<940 + 1024 * 0, true> { int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<940 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(940 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<940 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<941 + 1024 * 0, true> { int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<941 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(941 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<941 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<942 + 1024 * 0, true> { int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<942 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(942 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<942 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<943 + 1024 * 0, true> { int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<943 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(943 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<943 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<944 + 1024 * 0, true> { int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<944 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(944 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<944 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<945 + 1024 * 0, true> { int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<945 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(945 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<945 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<946 + 1024 * 0, true> { int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<946 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(946 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<946 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<947 + 1024 * 0, true> { int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<947 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(947 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<947 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<948 + 1024 * 0, true> { int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<948 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(948 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<948 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<949 + 1024 * 0, true> { int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<949 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(949 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<949 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<950 + 1024 * 0, true> { int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<950 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(950 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<950 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<951 + 1024 * 0, true> { int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<951 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(951 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<951 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<952 + 1024 * 0, true> { int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<952 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(952 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<952 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<953 + 1024 * 0, true> { int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<953 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(953 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<953 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<954 + 1024 * 0, true> { int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<954 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(954 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<954 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<955 + 1024 * 0, true> { int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<955 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(955 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<955 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<956 + 1024 * 0, true> { int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<956 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(956 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<956 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<957 + 1024 * 0, true> { int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<957 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(957 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<957 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<958 + 1024 * 0, true> { int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<958 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(958 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<958 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<959 + 1024 * 0, true> { int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<959 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(959 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<959 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<960 + 1024 * 0, true> { int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<960 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(960 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<960 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<961 + 1024 * 0, true> { int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<961 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(961 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<961 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<962 + 1024 * 0, true> { int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<962 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(962 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<962 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<963 + 1024 * 0, true> { int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<963 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(963 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<963 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<964 + 1024 * 0, true> { int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<964 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(964 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<964 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<965 + 1024 * 0, true> { int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<965 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(965 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<965 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<966 + 1024 * 0, true> { int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<966 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(966 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<966 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<967 + 1024 * 0, true> { int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<967 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(967 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<967 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<968 + 1024 * 0, true> { int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<968 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(968 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<968 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<969 + 1024 * 0, true> { int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<969 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(969 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<969 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<970 + 1024 * 0, true> { int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<970 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(970 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<970 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<971 + 1024 * 0, true> { int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<971 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(971 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<971 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<972 + 1024 * 0, true> { int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<972 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(972 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<972 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<973 + 1024 * 0, true> { int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<973 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(973 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<973 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<974 + 1024 * 0, true> { int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<974 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(974 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<974 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<975 + 1024 * 0, true> { int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<975 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(975 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<975 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<976 + 1024 * 0, true> { int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<976 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(976 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<976 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<977 + 1024 * 0, true> { int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<977 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(977 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<977 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<978 + 1024 * 0, true> { int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<978 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(978 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<978 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<979 + 1024 * 0, true> { int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<979 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(979 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<979 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<980 + 1024 * 0, true> { int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<980 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(980 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<980 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<981 + 1024 * 0, true> { int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<981 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(981 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<981 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<982 + 1024 * 0, true> { int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<982 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(982 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<982 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<983 + 1024 * 0, true> { int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<983 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(983 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<983 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<984 + 1024 * 0, true> { int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<984 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(984 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<984 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<985 + 1024 * 0, true> { int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<985 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(985 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<985 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<986 + 1024 * 0, true> { int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<986 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(986 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<986 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<987 + 1024 * 0, true> { int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<987 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(987 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<987 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<988 + 1024 * 0, true> { int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<988 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(988 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<988 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<989 + 1024 * 0, true> { int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<989 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(989 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<989 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<990 + 1024 * 0, true> { int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<990 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(990 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<990 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<991 + 1024 * 0, true> { int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<991 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(991 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<991 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<992 + 1024 * 0, true> { int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<992 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(992 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<992 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<993 + 1024 * 0, true> { int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<993 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(993 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<993 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<994 + 1024 * 0, true> { int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<994 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(994 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<994 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<995 + 1024 * 0, true> { int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<995 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(995 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<995 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<996 + 1024 * 0, true> { int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<996 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(996 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<996 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<997 + 1024 * 0, true> { int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<997 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(997 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<997 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<998 + 1024 * 0, true> { int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<998 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(998 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<998 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<999 + 1024 * 0, true> { int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<999 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(999 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<999 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1000 + 1024 * 0, true> { int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1000 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1000 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1000 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1001 + 1024 * 0, true> { int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1001 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1001 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1001 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1002 + 1024 * 0, true> { int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1002 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1002 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1002 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1003 + 1024 * 0, true> { int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1003 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1003 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1003 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1004 + 1024 * 0, true> { int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1004 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1004 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1004 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1005 + 1024 * 0, true> { int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1005 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1005 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1005 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1006 + 1024 * 0, true> { int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1006 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1006 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1006 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1007 + 1024 * 0, true> { int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1007 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1007 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1007 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1008 + 1024 * 0, true> { int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1008 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1008 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1008 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1009 + 1024 * 0, true> { int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1009 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1009 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1009 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1010 + 1024 * 0, true> { int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1010 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1010 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1010 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1011 + 1024 * 0, true> { int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1011 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1011 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1011 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1012 + 1024 * 0, true> { int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1012 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1012 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1012 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1013 + 1024 * 0, true> { int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1013 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1013 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1013 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1014 + 1024 * 0, true> { int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1014 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1014 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1014 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1015 + 1024 * 0, true> { int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1015 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1015 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1015 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1016 + 1024 * 0, true> { int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1016 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1016 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1016 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1017 + 1024 * 0, true> { int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1017 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1017 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1017 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1018 + 1024 * 0, true> { int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1018 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1018 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1018 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1019 + 1024 * 0, true> { int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1019 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1019 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1019 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1020 + 1024 * 0, true> { int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1020 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1020 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1020 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1021 + 1024 * 0, true> { int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1021 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1021 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1021 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1022 + 1024 * 0, true> { int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1022 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1022 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1022 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1023 + 1024 * 0, true> { int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1023 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1023 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1023 + 1024 * 0, false>(){}; };
template <> struct ssdm_int<1024 + 1024 * 0, true> { int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, true>(){}; }; template <> struct ssdm_int<1024 + 1024 * 0, false> { unsigned int V __attribute__((bitwidth(1024 + 1024 * 0))); inline __attribute__((always_inline)) ssdm_int<1024 + 1024 * 0, false>(){}; };
# 239 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h" 2
# 562 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 563 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 574 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 691 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 55 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 2
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h" 1
# 80 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 237 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const bool op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const signed char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned char op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned short op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned int op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const unsigned long op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_slong op) { Base::V = op; }
  inline __attribute__((always_inline)) ap_int_base(const ap_ulong op) { Base::V = op; }




  inline __attribute__((always_inline)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1L << (8 - 1L)) - 1L);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - ((1L << (11 - 1L)) - 1L);

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          Base::V = man.V >> sh_amt;
        } else {
          if (is_neg)
            Base::V = -1;
          else
            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {
          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 391 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    Base::V = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    Base::V = op2.V;
  }

  inline __attribute__((always_inline)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    Base::V = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }
# 482 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





  inline __attribute__((always_inline)) operator RetType() const { return (RetType)(Base::V); }




  inline __attribute__((always_inline)) bool to_bool() const { return (bool)(Base::V); }
  inline __attribute__((always_inline)) char to_char() const { return (char)(Base::V); }
  inline __attribute__((always_inline)) signed char to_schar() const { return (signed char)(Base::V); }
  inline __attribute__((always_inline)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
  inline __attribute__((always_inline)) short to_short() const { return (short)(Base::V); }
  inline __attribute__((always_inline)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
  inline __attribute__((always_inline)) int to_int() const { return (int)(Base::V); }
  inline __attribute__((always_inline)) unsigned to_uint() const { return (unsigned)(Base::V); }
  inline __attribute__((always_inline)) long to_long() const { return (long)(Base::V); }
  inline __attribute__((always_inline)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
  inline __attribute__((always_inline)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) float to_float() const { return (float)(Base::V); }
  inline __attribute__((always_inline)) double to_double() const { return (double)(Base::V); }
# 586 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int length() const volatile { return _AP_W; }


  inline __attribute__((always_inline)) bool iszero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }


  inline __attribute__((always_inline)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) void b_not() { Base::V = ~Base::V; }
# 699 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 717 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


  inline __attribute__((always_inline)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }





  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r;
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 828 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 877 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 986 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1053 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1293 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    return 0;
  }

};
# 1352 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mult_base ret; ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: plus_base ret; ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: minus_base ret; ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: logic_base ret; ret.V = lhs.V ^ rhs.V; return ret; }
# 1371 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: div_base ret; ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>:: mod_base ret; ret.V = op.V % op2.V; return ret; }
# 1399 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1427 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1461 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1500 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r; if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r; if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1524 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r; r.V = op.V >> op2; return r; }
# 1555 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1592 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1629 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1659 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1690 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1722 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1741 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1768 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1799 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1831 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1850 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 1958 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 56 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 2
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h" 1
# 73 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 116 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 304 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }
# 385 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    for (unsigned i = low; i != high; ++i) {

_ssdm_Unroll(0,0,0, "");

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 733 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char radix = 2) const {
    return 0;
  }

};
# 772 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 810 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 832 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
  inline __attribute__((always_inline)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 1030 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1089 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1112 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1140 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1189 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1336 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1360 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 57 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) ap_int() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }
# 95 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_int(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_int(ap_ulong val) { Base::V = val; }

  ap_int(double val) : Base(val) {}
  ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_int& operator=(const ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_int<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) ap_uint() : Base() {}
  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    Base::V = op.V;
  }
# 236 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}



  inline __attribute__((always_inline)) ap_uint(bool val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(signed char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned char val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned short val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned int val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(unsigned long val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_slong val) { Base::V = val; }
  inline __attribute__((always_inline)) ap_uint(ap_ulong val) { Base::V = val; }

  ap_uint(double val) : Base(val) {}
  ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}




  inline __attribute__((always_inline)) ap_uint& operator=(const ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) void operator=(const ap_uint<_AP_W>& op2) volatile { Base::V = op2.V; }

  inline __attribute__((always_inline)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    Base::V = op2.V;
  }

};
# 359 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h"
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_special.h" 1
# 61 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 222 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int_special.h"
template <int _AP_W>
inline bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 360 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 2







# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 1
# 55 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h" 1
# 62 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 1
# 63 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h" 2
# 133 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 154 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 333 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) void report() {}




  inline __attribute__((always_inline)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

  inline __attribute__((always_inline)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


 public:



  inline __attribute__((always_inline)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 477 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 535 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp;
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V =
        ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - ((1L << (11 - 1L)) - 1L);
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 688 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2;
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1;
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }





  inline __attribute__((always_inline)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret;
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 848 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != 0))

        ++ret;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


  inline __attribute__((always_inline)) char to_char() const { return to_ap_int_base().to_char(); }

  inline __attribute__((always_inline)) int to_int() const { return to_ap_int_base().to_int(); }

  inline __attribute__((always_inline)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

  inline __attribute__((always_inline)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }



  inline __attribute__((always_inline)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (11 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (8 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1L << (5 - 1L)) - 1L);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) operator half() const { return to_half(); }

  inline __attribute__((always_inline)) operator bool() const { return (bool)Base::V != 0; }

  inline __attribute__((always_inline)) operator char() const { return (char)to_int(); }

  inline __attribute__((always_inline)) operator signed char() const { return (signed char)to_int(); }

  inline __attribute__((always_inline)) operator unsigned char() const { return (unsigned char)to_uint(); }

  inline __attribute__((always_inline)) operator short() const { return (short)to_int(); }

  inline __attribute__((always_inline)) operator unsigned short() const { return (unsigned short)to_uint(); }

  inline __attribute__((always_inline)) operator int() const { return to_int(); }

  inline __attribute__((always_inline)) operator unsigned int() const { return to_uint(); }



  inline __attribute__((always_inline)) operator long() const { return (long)to_int64(); }

  inline __attribute__((always_inline)) operator unsigned long() const { return (unsigned long)to_uint64(); }






  inline __attribute__((always_inline)) operator ap_ulong() const { return to_uint64(); }

  inline __attribute__((always_inline)) operator ap_slong() const { return to_int64(); }

  inline __attribute__((always_inline)) int length() const { return _AP_W; };
# 1074 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) int countLeadingZeros() {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r, t;
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1144 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1177 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }
# 1192 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: plus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: minus_base ret, lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>:: logic_base ret, lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1210 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) ap_fixed_base operator+() { return *this; }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W + 1, _AP_I + 1, true> operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



  inline __attribute__((always_inline)) bool operator!() const { return Base::V == 0; }




  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r;
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
  inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r;
    r.V = Base::V;
    return r;
  }





  inline __attribute__((always_inline)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V << sh;
# 1328 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r;
    r.V = Base::V >> sh;
# 1350 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
    return r;
  }


  inline __attribute__((always_inline)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r;
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

  inline __attribute__((always_inline)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1494 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

  inline __attribute__((always_inline)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

  inline __attribute__((always_inline)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1580 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  template <int _AP_W2>
  inline __attribute__((always_inline)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) bool is_zero() const { return Base::V == 0; }

  inline __attribute__((always_inline)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

  inline __attribute__((always_inline)) int wl() const { return _AP_W; }

  inline __attribute__((always_inline)) int iwl() const { return _AP_I; }

  inline __attribute__((always_inline)) ap_q_mode q_mode() const { return _AP_Q; }

  inline __attribute__((always_inline)) ap_o_mode o_mode() const { return _AP_O; }

  inline __attribute__((always_inline)) int n_bits() const { return _AP_N; }
# 1763 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
  inline __attribute__((always_inline)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t;
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
inline __attribute__((always_inline)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t;
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2213 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2301 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
inline __attribute__((always_inline)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 56 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 2
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h" 1
# 70 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) int length() const { return 1; }





  inline __attribute__((always_inline)) char* to_string() const { return 0; }

};
# 257 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 287 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 299 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
  }
# 311 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 633 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
  inline __attribute__((always_inline)) char* to_string(signed char rd = 2) const {
    return 0;
  }

};
# 696 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 742 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 57 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 111 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 145 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





  inline __attribute__((always_inline)) ap_fixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}






  inline __attribute__((always_inline)) ap_fixed& operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 276 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}
# 307 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




  inline __attribute__((always_inline)) ap_ufixed(bool v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(signed char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned char v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned short v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned int v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(unsigned long v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_slong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}


  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 398 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h"
# 1 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_special.h" 1
# 61 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 89 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}





  _Tp& real() { return _M_real; }
  const _Tp& real() const { return _M_real; }
  _Tp& imag() { return _M_imag; }
  const _Tp& imag() const { return _M_imag; }


  void real(_Tp __val) { _M_real = __val; }

  void imag(_Tp __val) { _M_imag = __val; }



  complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 221 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 399 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_fixed.h" 2
# 368 "E:/design/vivado2019/Vivado/2019.1/common/technology/autopilot\\ap_int.h" 2
# 8 "my_net/src/my_net.h" 2

void my_net(int input[3072],float output[10]);
void conv2(half *input,half *weight,half *output,int in_row,int out_row,int core);
void Sigmoid1( half *a,int size);
void pool(half *input,half *output,int in_row,int out_row);
# 2 "my_net/src/my_net.cpp" 2




void conv2(half* input,const half* weight, half* output, int in_row, int out_row, int core) {
Row:
 for (int r = 0; r < out_row; r++)
 {
 Column:
  for (int c = 0; c < out_row; c++)
  {
  Kernel_Row:
   for (int kr = 0; kr < core; kr++)
   {
   Kernel_Column:
    for (int kc = 0; kc < core; kc++)
    {
     output[r * out_row + c] += input[(r + kr) * in_row + (c + kc)] * weight[kr * core + kc];
    }
   }
  }

 }
}

void pool(half* input, half* output, int in_row, int out_row) {
 for (int i = 0; i < out_row; i++) {
  for (int j = 0; j < out_row; j++) {
   output[i * out_row + j] = input[i * 2 * in_row + j * 2];
   for (int k = 0; k < 2; k++) {
    for (int m = 0; m < 2; m++) {
     output[i * out_row + j] = ((output[i * out_row + j]<input[(i*2 + k) * in_row + (j*2 + m)])?input[(i*2 + k) * in_row + (j*2 + m)]:output[i * out_row + j]);;
    }
   }
  }
 }

}

void Sigmoid1(half* a, int size)
{
 for (int i = 0; i < size; i++)
  a[i] = 1 / (1 + expf(-a[i]));
}

void my_net(int input[3072], float output[10]) {_ssdm_SpecArrayDimSize(input, 3072);_ssdm_SpecArrayDimSize(output, 10);
_ssdm_op_SpecInterface(output, "bram", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(input, "bram", 0, 0, "", 0, 0, "", "", "", 0, 0, 0, 0, "", "");
_ssdm_op_SpecInterface(0, "s_axilite", 0, 0, "", 0, 0, "CRTL_BUS", "", "", 0, 0, 0, 0, "", "");

 half input1[3][1024];

 for (int i = 0; i < 3; i++) {
  for (int j = 0; j < 1024; j++) {
   input1[i][j] = half(input[i + j * 3]);
  }
 }

 const half conv1_weight[16][3][25] = {

# 1 "my_net/src/./weight/conv1_weight.dat" 1
{{9.5803e-02,5.5239e-02,1.0288e-01,7.5048e-02,1.6195e-01,
5.1581e-03,2.3891e-01,2.9071e-01,7.2389e-02,3.2870e-02,
1.2892e-01,-2.4238e-02,2.2148e-02,4.4590e-02,-1.7992e-01,
-8.1017e-02,-2.2018e-01,-1.9814e-01,-1.4945e-01,-1.9766e-01,
4.8322e-02,-2.7193e-03,-1.1966e-01,-4.9346e-02,-1.5816e-02},
{-1.0290e-01,-2.5498e-02,-4.0403e-02,1.3622e-02,-5.6298e-02,
2.1140e-02,1.4635e-01,-1.2658e-02,9.6755e-02,8.4838e-03,
1.5997e-02,-3.9567e-02,-9.2227e-02,-1.3738e-01,-1.9495e-02,
-1.4476e-01,-2.8756e-02,-1.8236e-01,-6.7748e-02,-2.7482e-02,
-4.3342e-02,-9.1109e-02,7.4808e-02,3.6240e-02,8.8675e-02},
{-1.6678e-01,-2.8875e-03,-1.2045e-01,4.2056e-02,-1.0014e-01,
9.2429e-02,7.2163e-03,1.5210e-01,8.0952e-02,7.4164e-02,
6.2761e-02,1.4735e-01,-2.9008e-02,1.0105e-01,-1.2899e-02,
-1.0417e-01,-1.2973e-02,2.5826e-02,-8.4108e-02,-7.9515e-02,
-8.8542e-03,3.5951e-02,2.2815e-02,7.3007e-03,7.6190e-02}},
{{4.9647e-02,-4.7677e-02,-1.2556e-01,-1.8151e-02,-7.8757e-02,
5.8584e-05,-7.7284e-02,-6.3612e-02,4.0103e-02,-1.2191e-01,
-3.0743e-02,-8.4706e-02,3.4786e-02,-3.8942e-02,-1.6018e-01,
-8.4418e-02,-7.1694e-02,1.7575e-02,-4.6435e-02,-1.4714e-01,
4.7523e-02,5.0159e-02,1.0210e-01,-9.1299e-02,-5.0084e-02},
{-1.0582e-01,-7.7462e-02,6.0593e-02,2.0125e-02,2.8795e-02,
-1.0773e-01,-1.2952e-01,1.6829e-01,1.4312e-01,-8.9122e-02,
-2.8271e-01,-3.4598e-02,1.5175e-01,1.0764e-01,1.6088e-02,
-1.9024e-01,7.4350e-02,1.7280e-01,5.6751e-02,3.9461e-02,
-1.8794e-01,1.2338e-01,1.4396e-01,1.3006e-01,3.6663e-02},
{-2.3916e-02,-4.5440e-02,1.1811e-01,1.7259e-01,-2.3288e-02,
-1.2148e-01,-3.2976e-02,1.0471e-01,8.8208e-02,-4.3554e-02,
-1.4073e-01,6.6889e-02,1.6989e-01,9.7100e-02,-6.1072e-02,
-1.1653e-01,1.1394e-01,2.8006e-01,1.5553e-01,4.1521e-02,
-4.4889e-02,1.0738e-01,2.2284e-01,1.3241e-01,-1.0651e-01}},
{{3.1953e-02,1.2859e-02,-8.8607e-02,-3.0938e-02,-1.4722e-03,
8.6625e-02,-1.1958e-01,-3.2354e-02,2.6459e-03,-1.3761e-01,
-7.9353e-02,1.4028e-01,3.3619e-01,1.8456e-01,1.4955e-01,
-5.0379e-02,-2.5756e-01,-4.9816e-02,3.7318e-02,-8.2912e-02,
1.4634e-01,-9.3956e-02,-3.1258e-02,-1.6271e-01,-1.0545e-01},
{1.2560e-01,1.1684e-02,1.0592e-01,-1.5762e-01,-8.1934e-02,
-7.4475e-02,3.9156e-02,5.9724e-02,-1.4245e-01,-9.4990e-02,
-3.4771e-02,1.9542e-01,3.2132e-01,2.9961e-01,1.4171e-01,
-5.3335e-02,-2.6106e-01,5.7006e-02,6.0077e-02,7.7858e-02,
1.1198e-03,-5.3518e-02,-5.9059e-02,-1.4339e-01,1.3828e-02},
{-4.5425e-02,-3.1599e-02,3.4822e-02,-1.0609e-01,-1.2560e-01,
1.7046e-02,-1.1772e-01,-8.2456e-02,-8.0478e-02,1.2305e-02,
8.2801e-02,1.0143e-01,2.9479e-01,1.9318e-01,1.7778e-01,
-7.0018e-03,-2.0917e-01,-7.0045e-02,8.9782e-03,8.4122e-02,
1.0258e-01,-8.8231e-02,-1.3905e-01,-1.1975e-01,-1.3177e-01}},
{{4.2777e-02,-2.0269e-02,1.3800e-01,4.8678e-02,1.1970e-02,
-8.1434e-02,-3.7147e-02,-1.1105e-02,4.4299e-02,1.2428e-01,
-1.2737e-01,-1.4937e-01,-3.1536e-02,1.8532e-01,1.3202e-01,
-6.5383e-02,-1.2183e-01,-1.9605e-01,7.8508e-02,1.5383e-01,
1.7085e-01,-2.5043e-02,-1.2079e-01,-1.8399e-01,7.0624e-02},
{-1.4464e-01,4.9639e-02,-3.9810e-02,1.0839e-02,2.8719e-02,
-1.6410e-01,-1.6179e-01,4.2420e-02,2.1818e-02,8.2711e-02,
-1.2822e-01,-7.8243e-02,-1.0812e-01,3.0520e-02,2.0896e-01,
-5.5074e-02,-2.0557e-02,-1.6875e-01,4.4664e-02,2.4045e-01,
2.5290e-02,-5.1414e-02,-1.5861e-01,-2.6014e-02,9.9959e-02},
{4.3654e-02,-8.5283e-02,-6.3753e-02,1.1991e-01,3.8844e-02,
-1.6962e-01,-7.9448e-03,4.6369e-02,2.0730e-01,1.9803e-01,
-1.5917e-01,-8.8559e-02,-1.3847e-01,9.9058e-02,1.2738e-01,
-4.2794e-02,-1.5388e-01,-1.5834e-01,4.6760e-02,1.2047e-01,
9.1338e-02,6.7868e-02,-8.1804e-02,-7.0676e-02,3.0202e-02}},
{{1.3312e-02,1.4079e-01,2.5087e-01,8.1103e-02,1.6950e-01,
1.0786e-01,1.7824e-01,2.7203e-01,9.3942e-02,1.2405e-01,
1.0826e-02,2.7511e-02,-9.1513e-02,-9.9783e-02,-1.3080e-02,
-2.2523e-01,-2.2713e-01,-8.1947e-02,-1.3129e-01,-1.4084e-01,
-4.5307e-02,-1.6646e-01,-4.4348e-02,1.7349e-02,-1.0078e-01},
{2.6726e-02,-1.7169e-01,-1.6383e-01,-1.8250e-01,-1.6404e-01,
1.7530e-02,-7.7566e-02,-7.7973e-02,-1.9394e-02,-1.3872e-01,
7.2647e-02,4.9801e-02,1.6104e-01,1.1100e-01,9.0203e-02,
-1.4353e-01,-3.2779e-02,-1.3831e-01,-7.0129e-02,-4.1382e-02,
6.8734e-02,8.8810e-02,6.5021e-03,-4.4013e-02,9.1415e-02},
{-1.1312e-01,-1.6437e-01,-2.3270e-01,-4.8306e-02,-9.6409e-02,
-6.0106e-02,3.6109e-02,-3.8507e-02,8.7361e-02,2.4944e-02,
1.4002e-01,1.3229e-01,1.5342e-01,1.8267e-01,-4.5113e-02,
3.3311e-02,1.0345e-01,-2.9471e-02,2.2162e-03,3.8376e-02,
1.1552e-01,8.3342e-02,1.2815e-01,1.4261e-01,1.3839e-01}},
{{-1.4040e-01,-1.2970e-01,-1.4500e-01,-1.9904e-01,-7.5253e-02,
1.0405e-01,5.1298e-02,-7.6366e-02,-2.7801e-02,-3.9066e-02,
1.8688e-01,1.9924e-01,8.6583e-02,1.4037e-01,7.7057e-02,
4.6940e-02,1.7556e-01,2.1323e-01,6.7531e-02,8.3065e-02,
6.8241e-02,1.5556e-01,1.8880e-01,9.8486e-02,-1.2624e-01},
{1.0336e-01,1.5370e-01,9.4389e-02,6.5441e-02,-5.7226e-02,
-9.6188e-02,-4.2054e-02,-4.1764e-02,-7.3856e-02,-1.0512e-01,
-1.2318e-01,-1.0615e-01,-9.6899e-02,-5.3728e-02,-1.2307e-02,
-4.7536e-02,-4.1674e-02,-1.1719e-01,1.2136e-02,-4.7050e-02,
-4.8567e-02,-1.1115e-01,-9.9246e-02,-1.2321e-01,1.3704e-01},
{3.9257e-02,-4.6264e-02,4.9383e-02,1.4757e-01,1.4933e-01,
-3.1122e-02,1.7070e-02,1.0782e-01,6.9352e-02,1.6608e-01,
-5.6419e-02,-1.3422e-01,-8.7415e-03,-4.1291e-02,-2.5358e-02,
3.5611e-02,-1.4937e-01,-1.2480e-01,-1.3695e-01,2.3305e-02,
-2.2963e-02,-8.9617e-02,-1.7480e-01,2.1580e-02,-2.1220e-02}},
{{8.2225e-02,5.9992e-02,8.7392e-02,-1.0268e-02,-1.3174e-02,
-6.0502e-02,1.0727e-02,2.0813e-02,2.3054e-02,7.4924e-02,
1.8812e-02,1.0780e-01,9.7829e-02,3.7713e-02,1.9398e-02,
7.8905e-02,-2.2103e-02,-1.3383e-02,-5.2015e-02,4.6822e-02,
6.4746e-02,-9.2529e-02,-8.7445e-02,-4.3859e-02,6.9850e-02},
{-8.3680e-02,5.9384e-02,-9.3002e-02,-1.4040e-01,-1.5087e-01,
6.7420e-02,8.4064e-02,7.1579e-02,3.8255e-02,-1.4898e-01,
-2.0675e-02,4.0358e-02,-5.6264e-02,2.8310e-02,-6.4923e-02,
1.7677e-02,-1.0571e-01,7.7573e-02,9.4254e-02,-6.1627e-02,
-1.0630e-01,-2.4863e-02,-1.3893e-01,5.6885e-02,-2.4730e-02},
{2.7280e-02,4.4489e-02,1.0994e-01,-8.9280e-03,4.0668e-02,
5.1440e-02,1.6488e-01,2.0930e-01,5.7644e-02,-1.2695e-01,
-1.2129e-02,5.6330e-02,1.1654e-01,1.4577e-01,-3.5917e-02,
-4.8580e-02,6.2816e-02,1.6895e-02,9.3701e-03,1.1840e-01,
6.2324e-02,-8.4113e-02,3.2559e-02,-1.2571e-02,8.4963e-02}},
{{-5.4928e-02,-2.9489e-02,-7.2404e-02,1.1695e-02,1.1839e-01,
-2.6728e-02,-6.2514e-02,-1.0952e-01,1.2052e-01,4.0837e-02,
7.3606e-02,1.5518e-01,-3.5154e-01,1.1068e-01,6.9192e-02,
1.4999e-02,-2.6740e-02,-2.8886e-01,8.1416e-02,8.0128e-02,
-8.1689e-03,6.7167e-02,-1.6413e-01,1.3423e-01,1.6661e-01},
{-4.7899e-03,9.7224e-02,-6.3430e-02,5.7016e-02,-1.2207e-01,
1.1478e-01,-2.3766e-02,-1.9193e-01,1.5071e-01,-2.2616e-02,
1.4886e-01,1.1981e-01,-3.7080e-01,1.8131e-01,1.1519e-01,
1.3336e-01,3.0079e-02,-3.6796e-01,1.8968e-01,-2.3635e-04,
9.3832e-02,-3.9009e-03,-2.6451e-01,5.6952e-03,-6.2199e-05},
{6.8703e-02,1.5421e-02,-1.7832e-01,7.8641e-02,9.9903e-03,
8.4151e-02,4.6163e-02,-2.0958e-01,1.0328e-01,-8.1938e-02,
1.1914e-01,-2.7809e-03,-2.4264e-01,1.8988e-01,-3.3487e-02,
3.5502e-02,1.2955e-01,-2.5421e-01,5.2901e-02,5.1715e-02,
1.4702e-01,-4.9173e-02,-1.3285e-01,4.8001e-02,-3.0450e-02}},
{{5.1354e-02,3.9864e-02,2.4447e-03,-4.7000e-02,1.2665e-01,
-1.3225e-01,-1.0053e-01,1.3136e-01,1.7656e-02,-1.1362e-01,
-5.0939e-02,2.5053e-02,-4.2629e-02,-8.5383e-03,-7.4556e-02,
1.4038e-01,5.3574e-02,-1.0685e-01,-1.1367e-01,1.7974e-01,
-6.8925e-02,-9.8688e-02,-9.8673e-03,1.0056e-01,-8.2678e-02},
{-8.6920e-02,1.0328e-01,-1.2910e-01,4.7876e-02,1.2460e-01,
5.6960e-02,-1.1963e-02,9.6752e-02,1.8377e-01,-4.6047e-02,
4.8757e-02,3.8543e-02,1.9175e-01,3.4736e-02,-7.9238e-02,
-2.2548e-02,1.2502e-01,2.8660e-03,-1.5178e-01,1.2028e-02,
9.6728e-02,-1.5575e-01,-1.1771e-01,-3.9413e-02,-1.0167e-01},
{8.3806e-02,-3.8367e-03,-9.9750e-02,-5.9299e-02,1.5055e-01,
3.5923e-02,-1.2784e-01,8.1292e-02,2.4192e-01,-3.8939e-02,
-7.8523e-02,7.6095e-02,1.7919e-01,-2.9515e-02,-5.4579e-02,
4.9204e-02,2.9085e-03,-1.6332e-01,-1.1998e-01,9.8001e-02,
3.2562e-02,6.9885e-03,-1.2487e-02,-9.7542e-02,5.0686e-02}},
{{2.3223e-01,2.1978e-02,-1.9220e-01,-9.9248e-02,-6.4864e-02,
1.6877e-01,-1.9443e-01,-1.8309e-01,-2.2803e-02,1.7873e-01,
-2.2865e-01,-1.6846e-01,1.5448e-02,1.4800e-01,4.8721e-02,
-1.9337e-01,1.4777e-01,2.2746e-01,1.2884e-01,-9.6352e-02,
8.9985e-02,1.4156e-01,1.3345e-01,8.6994e-03,-7.9362e-02},
{2.2036e-01,8.6868e-02,-1.6813e-01,-1.5702e-01,5.5194e-02,
-2.2877e-02,-1.9764e-01,-2.3045e-01,-6.5258e-02,1.7575e-01,
-2.5608e-01,-1.7525e-01,2.3061e-01,2.0496e-01,-2.2920e-02,
-1.0295e-01,1.1758e-01,1.1531e-01,5.2951e-02,-6.3685e-02,
-2.0945e-02,3.3058e-02,7.3336e-02,-1.0027e-01,1.4071e-02},
{1.2486e-01,-2.1927e-02,-1.6196e-01,-1.4664e-01,1.2587e-01,
1.0719e-01,-1.3347e-01,-2.9013e-02,-3.0049e-02,-1.9721e-02,
-1.3476e-01,-1.1970e-01,1.4945e-01,7.1714e-02,-3.7166e-02,
-1.7923e-01,1.1795e-01,6.5524e-02,1.0858e-01,1.7524e-02,
1.0426e-01,1.4755e-01,-6.5633e-02,-8.7562e-02,-1.6126e-02}},
{{-5.7123e-02,-1.0712e-01,-8.2516e-02,-1.1852e-02,1.2723e-02,
-1.4119e-01,-3.8320e-02,-1.3820e-01,-1.3522e-01,-1.3899e-01,
-9.8031e-02,-1.6526e-01,-1.6244e-02,-9.4410e-03,6.2164e-03,
-1.7509e-01,-1.6072e-01,-1.3278e-01,-8.4313e-04,-3.5436e-02,
-8.2260e-02,3.7760e-02,3.8355e-02,2.2956e-02,4.8637e-02},
{-9.7674e-04,1.9195e-02,7.1905e-02,1.0636e-01,8.9925e-02,
9.0581e-02,3.0750e-02,-9.3452e-02,-3.5579e-02,-6.1461e-02,
6.1340e-02,1.0657e-01,3.6919e-02,4.4400e-02,1.0568e-01,
-1.1870e-01,2.1720e-02,-8.4489e-02,7.1425e-02,-1.4387e-01,
-3.5459e-02,2.0891e-02,3.1135e-02,-1.2606e-01,5.6968e-02},
{2.3310e-02,1.3771e-01,1.3907e-01,3.8731e-02,8.6733e-02,
1.4375e-01,-6.9465e-02,1.6950e-02,-9.0392e-02,-1.0520e-02,
1.0516e-01,1.4998e-01,1.2864e-01,1.4033e-01,-1.0329e-02,
1.4568e-01,5.8386e-02,1.0347e-01,4.9515e-02,6.3593e-02,
1.2418e-01,6.5897e-02,3.1692e-02,-6.5123e-02,-1.5406e-01}},
{{-4.7648e-03,-4.0303e-02,-8.2904e-02,8.2602e-02,-1.8991e-01,
5.5551e-02,-9.5008e-02,-1.2739e-01,8.9727e-02,-9.3669e-03,
3.8692e-02,-2.3383e-02,9.0782e-04,-6.3472e-03,7.4129e-02,
1.0219e-02,5.0235e-02,1.4837e-01,5.4218e-02,-4.7542e-02,
8.4668e-02,3.8318e-02,4.4678e-02,-1.1142e-01,1.2224e-02},
{-3.3303e-02,8.3508e-02,1.3210e-01,1.2235e-01,8.4388e-02,
1.2201e-01,8.7432e-02,-4.0656e-02,1.4277e-01,1.1539e-01,
-3.5899e-02,1.1078e-01,-3.5993e-02,-6.7832e-02,9.4905e-02,
-6.9068e-02,3.1999e-02,1.9940e-01,1.2004e-01,-3.9040e-02,
1.8565e-02,8.6062e-02,-1.3721e-02,-3.6130e-02,-4.6846e-02},
{-2.9248e-02,-1.1200e-01,-1.1852e-01,6.8350e-02,-1.4210e-01,
5.1600e-02,-8.5707e-02,-1.3199e-01,-5.3441e-02,-3.8022e-02,
8.7729e-02,-6.1939e-02,5.6659e-02,-1.1569e-01,7.3533e-02,
-2.0264e-03,-1.1462e-01,-8.7403e-02,-2.7811e-02,-1.6206e-02,
-4.3123e-02,-7.9467e-02,3.6729e-02,-1.4785e-01,-2.0350e-02}},
{{3.2174e-02,1.4747e-01,5.3599e-02,-7.4352e-02,-5.0319e-02,
3.3412e-02,-4.5559e-02,-1.4369e-01,-1.3687e-01,1.1971e-01,
5.1135e-02,-3.7159e-02,-2.7122e-01,2.0973e-01,6.6940e-02,
-5.5509e-03,-1.2138e-01,-3.5721e-02,2.3116e-01,-5.1426e-02,
-4.0683e-02,-6.9927e-02,2.6231e-01,1.7361e-03,-9.2863e-02},
{6.1739e-02,8.8814e-02,-4.6090e-02,-1.6985e-01,-4.2769e-02,
1.6959e-01,5.5005e-02,-8.4342e-02,-5.1771e-02,6.3868e-02,
4.4842e-02,-7.9850e-02,-1.1279e-01,5.2500e-02,-1.1024e-02,
-1.0227e-01,-3.7587e-02,5.0174e-02,5.6016e-02,-1.0736e-01,
-8.2151e-02,-6.9604e-02,2.6409e-01,-3.1577e-02,-1.5485e-01},
{-1.5198e-01,-2.8774e-02,2.1779e-02,-1.5258e-01,1.1519e-01,
6.0148e-02,-5.0183e-02,-1.3468e-01,2.0463e-02,1.5388e-02,
9.4488e-02,-1.7393e-01,-2.1619e-01,1.9336e-01,1.2450e-01,
-1.5900e-01,-1.1874e-01,1.5629e-01,2.2989e-01,6.7890e-02,
-5.1555e-02,-5.4645e-02,2.7532e-01,-7.6317e-02,6.5424e-02}},
{{-6.7704e-02,1.0544e-01,9.0556e-02,3.8557e-02,3.3487e-02,
1.1027e-01,8.1597e-02,5.9753e-02,3.6452e-02,-2.0252e-01,
3.6150e-02,2.1925e-01,5.4992e-02,-7.6318e-02,-2.0761e-01,
1.0464e-01,-4.1775e-02,-7.3388e-03,-1.6827e-02,-5.7933e-03,
8.2355e-02,8.0996e-03,7.5482e-03,-1.0173e-01,1.4617e-02},
{4.8142e-02,-9.5452e-02,1.0790e-02,-1.1932e-01,-2.1308e-01,
2.7927e-02,4.3848e-03,-5.8386e-02,-5.8869e-02,-1.6322e-01,
3.0479e-02,1.3338e-01,-4.8644e-02,1.1048e-02,-2.0772e-01,
1.0553e-01,6.0434e-02,-8.7416e-03,1.0431e-02,-9.7113e-02,
-1.4888e-03,1.4750e-01,-5.6712e-02,-7.6413e-02,-5.1609e-02},
{8.4157e-02,9.4615e-02,5.1863e-02,-1.3700e-01,-2.1833e-01,
1.4062e-01,-1.1845e-02,1.4119e-01,-1.3700e-02,-2.2963e-01,
1.0184e-01,4.1676e-02,-3.2489e-02,-1.5124e-01,-1.6460e-01,
1.3765e-01,1.8928e-01,3.4703e-02,2.4730e-02,-8.8921e-02,
-6.9279e-03,1.4620e-01,6.0983e-02,-8.4994e-02,-3.3923e-02}},
{{-3.2460e-03,-5.8495e-02,-8.0972e-02,1.7811e-02,-1.0131e-01,
-1.6587e-01,-1.3048e-01,-2.3494e-01,-1.5008e-01,-1.2997e-01,
7.8783e-02,-1.3746e-01,-6.6656e-02,-1.0403e-01,-4.5560e-02,
1.1892e-01,1.8117e-01,2.0023e-01,1.6483e-02,1.3208e-01,
1.8011e-01,6.2547e-02,1.8501e-01,7.8382e-02,1.7288e-01},
{-1.3179e-01,-1.5342e-01,-1.4147e-01,-7.5990e-02,7.8243e-02,
-1.0204e-01,-2.6818e-02,-1.4365e-01,-9.3514e-02,-1.0740e-01,
2.2554e-02,5.7408e-02,3.7156e-03,8.3770e-02,-6.8963e-02,
1.1264e-01,9.0750e-02,1.0626e-01,5.9148e-02,-4.0230e-02,
8.2106e-02,6.7518e-02,1.4448e-01,9.6659e-02,2.1140e-02},
{1.0628e-01,-1.7534e-02,5.8216e-02,-6.9990e-02,1.3128e-01,
1.7548e-03,-1.5364e-01,-6.5555e-02,-3.5912e-02,3.7454e-03,
2.5739e-02,-3.4525e-02,-2.8227e-02,3.1609e-02,1.9199e-02,
1.7586e-02,9.4700e-02,-3.3647e-02,3.1120e-02,7.7099e-02,
-4.5265e-02,7.4651e-02,-1.3148e-02,1.1887e-01,-8.5124e-03}},
{{1.1155e-02,-7.2624e-02,-7.3185e-02,-1.0449e-01,5.2180e-02,
5.8198e-02,-9.5078e-02,-3.6182e-02,1.8268e-02,-8.9883e-02,
1.0449e-01,1.0660e-01,-2.5519e-02,-2.1463e-01,-2.0637e-01,
1.3135e-01,6.2634e-02,-1.8468e-01,-1.2361e-01,-1.1868e-01,
8.6965e-02,-6.1310e-02,-1.8512e-01,-1.3347e-01,-8.6687e-02},
{1.0178e-01,4.6435e-02,2.0055e-02,1.0129e-01,2.7701e-02,
8.1593e-02,-5.7997e-02,4.2291e-02,1.0968e-01,5.6566e-02,
2.1711e-01,-2.1744e-02,9.3579e-02,-5.4606e-02,-8.7278e-02,
1.3833e-01,5.3198e-02,1.1278e-02,-1.1478e-01,-7.9056e-02,
1.2355e-01,-4.3375e-02,-1.0783e-01,-7.9694e-02,-3.4786e-02},
{-9.0320e-03,-2.2935e-02,6.1671e-02,1.4887e-03,-1.1840e-01,
1.4056e-01,1.6518e-01,-2.1538e-02,-7.8194e-02,-5.8895e-02,
4.6231e-02,1.7034e-02,-8.8574e-02,2.9629e-02,-3.2782e-02,
-1.1456e-02,1.3175e-01,-3.3245e-02,8.1347e-02,8.0915e-03,
7.8682e-02,-1.0420e-01,1.4349e-01,1.4453e-01,7.1404e-02}},
# 62 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(conv1_weight);
# 60 "my_net/src/my_net.cpp"


 const half conv2_weight[32][16][25] = {

# 1 "my_net/src/./weight/conv2_weight.dat" 1
{{-5.0483e-02,-3.3918e-02,8.8873e-02,5.9583e-02,1.5513e-01,
2.0884e-03,7.6907e-02,3.4686e-02,1.8210e-03,-7.0590e-03,
6.8588e-02,1.5153e-01,-3.8343e-02,-3.1474e-02,2.2661e-02,
7.8521e-02,-1.0240e-01,-2.3194e-01,-1.3646e-01,4.8144e-02,
-1.7098e-01,-1.1297e-01,-8.4777e-02,-1.0072e-01,-8.3504e-02},
{-1.9548e-01,1.8145e-02,-1.1374e-01,-1.3254e-01,-7.1906e-03,
-1.3841e-01,-6.7072e-02,-1.7184e-01,-1.4419e-01,-1.4065e-01,
-1.3537e-01,-2.6293e-02,-1.2618e-01,-1.4038e-01,-1.3495e-01,
-1.3202e-01,4.9383e-02,8.4849e-02,-1.0445e-01,-1.0689e-01,
4.0317e-02,1.1683e-01,1.4566e-01,-1.9966e-02,5.5799e-02},
{-9.8314e-02,8.5476e-02,9.9862e-02,9.6954e-02,5.7516e-02,
1.0501e-01,2.9813e-02,-5.7741e-02,-1.4563e-01,-5.9019e-03,
2.5699e-01,1.2488e-01,-1.0465e-01,-8.6906e-02,4.3560e-02,
4.1160e-02,-3.8412e-03,-5.1956e-02,2.9174e-02,4.3125e-03,
-7.3438e-02,-8.7361e-02,-1.2758e-01,-1.5044e-01,-1.9544e-02},
{-2.5443e-01,-1.4738e-01,-1.2047e-01,-1.0032e-01,-2.6384e-01,
-2.9006e-01,-4.2070e-01,-3.0861e-01,-2.7143e-01,-3.4140e-01,
-7.1918e-02,-1.2471e-01,-2.2744e-01,-2.5375e-01,-3.3614e-01,
1.9200e-02,4.0490e-02,-1.9219e-01,-2.8180e-01,-3.6297e-01,
-6.4771e-02,-4.1602e-02,-1.3804e-01,-2.4150e-01,-2.3171e-01},
{-1.9406e-02,2.9259e-02,-1.3340e-02,3.6477e-02,2.9190e-02,
-5.1743e-02,-4.4251e-02,-2.4582e-03,-2.0377e-02,7.5731e-02,
-4.6518e-02,-4.8061e-02,-7.8644e-02,-1.4526e-02,-4.6762e-02,
3.9906e-02,2.3556e-02,4.3218e-02,2.4665e-02,1.1166e-01,
1.4946e-01,1.5238e-01,1.1482e-02,-3.9369e-02,-2.5284e-02},
{1.0556e-01,1.8750e-01,2.1562e-01,2.5101e-01,8.4718e-02,
-3.5159e-02,1.3261e-03,5.0024e-02,7.3565e-03,8.4180e-02,
9.9922e-02,5.0978e-02,-9.6352e-02,-3.2624e-02,-6.9454e-03,
1.4133e-02,-5.0504e-02,-7.5158e-02,-8.0383e-02,-4.5381e-02,
-1.2043e-01,-1.2943e-01,-1.2469e-01,-1.0781e-01,-8.5397e-02},
{5.7201e-02,1.1415e-02,-2.5436e-02,-8.0316e-02,-1.3908e-01,
1.1810e-01,4.8933e-02,-9.3048e-02,-1.1226e-01,-9.1714e-02,
1.5584e-01,6.1567e-02,-2.8079e-02,-5.8488e-02,-2.6292e-02,
9.5351e-02,5.8410e-02,9.4819e-03,-1.5351e-02,-1.3028e-01,
1.2832e-02,2.9491e-02,1.3485e-01,-3.0562e-02,-7.3771e-02},
{-7.9719e-02,-2.0796e-01,-1.9635e-01,-2.5127e-01,-3.0256e-01,
-1.5595e-01,-1.6149e-01,-1.7635e-01,-1.5257e-01,-2.4255e-01,
-2.7397e-02,1.6539e-02,-6.1434e-02,-1.0512e-01,-2.4437e-01,
5.0456e-02,9.7914e-02,-9.6696e-02,-9.9153e-02,-1.3037e-01,
9.0028e-03,-3.7754e-02,-3.2082e-02,9.2358e-02,-2.0739e-02},
{1.1318e-02,3.5781e-02,1.2066e-01,1.3402e-01,1.6496e-01,
1.0583e-01,8.9211e-02,9.5617e-02,-1.6722e-02,-1.0081e-01,
1.7284e-01,5.0139e-02,-1.2353e-01,-1.7001e-01,3.4907e-02,
7.9107e-02,-1.1693e-01,-1.6408e-01,-3.1688e-02,4.7220e-02,
-8.4683e-02,-4.9147e-02,5.9671e-02,-3.1612e-02,-5.7990e-02},
{-1.4369e-01,-1.2625e-02,-2.2008e-02,-3.5592e-02,-8.0129e-02,
-3.7365e-03,6.2685e-02,-9.0964e-03,-1.1650e-02,5.6221e-02,
-6.7761e-02,7.4711e-02,9.4276e-02,4.9264e-02,1.1406e-01,
7.2593e-03,5.1286e-02,-5.5699e-03,-1.7507e-02,2.3641e-02,
1.1078e-01,7.6752e-02,-1.7636e-02,-8.2728e-02,1.1755e-01},
{1.3413e-01,1.4703e-01,1.2265e-01,1.6154e-01,1.7681e-01,
8.6619e-02,-1.3453e-02,4.0899e-02,1.4208e-02,8.4822e-02,
1.0187e-01,5.9423e-02,2.4396e-02,-3.4985e-02,1.4567e-02,
1.5805e-01,7.1922e-02,-1.3068e-03,3.5293e-02,1.7263e-02,
1.4396e-01,3.9199e-02,1.0901e-01,1.4965e-01,1.5779e-01},
{2.4460e-02,4.8117e-02,-5.1985e-02,-1.8910e-02,-1.2549e-01,
1.3398e-01,4.0075e-02,4.0487e-02,7.5659e-04,9.8894e-03,
1.6331e-02,7.2367e-02,7.9860e-02,3.2434e-02,1.0775e-01,
5.5774e-02,8.1275e-02,9.1944e-02,1.0470e-01,1.0965e-01,
8.4216e-02,5.2880e-02,-2.3875e-02,3.9898e-02,8.3026e-02},
{-2.6202e-01,-1.9257e-01,-1.6827e-01,-1.0424e-01,-1.2161e-01,
-2.0270e-01,-2.5972e-01,-2.2242e-01,-1.9479e-01,-6.0025e-02,
-2.1654e-01,-7.3360e-02,-1.8653e-01,-8.8603e-02,-9.8813e-02,
-8.2512e-02,-9.8097e-02,-7.9308e-02,-1.6997e-01,-3.4832e-02,
1.9345e-02,-9.9265e-02,-1.4246e-01,3.0946e-02,4.7182e-02},
{1.7522e-01,9.0690e-02,1.4530e-01,2.5842e-02,-6.5380e-02,
1.5150e-01,1.3133e-01,1.5013e-01,8.5329e-02,-3.0132e-02,
1.5801e-01,1.9096e-01,1.1595e-01,5.0681e-02,-1.5933e-03,
4.5422e-02,1.5971e-02,2.1686e-03,1.9021e-02,4.9875e-02,
-9.4642e-02,-1.3854e-01,2.1595e-02,2.2029e-03,8.4645e-02},
{3.2482e-02,1.2784e-01,1.3833e-01,5.8065e-02,1.3761e-01,
7.7281e-02,1.2008e-01,1.1627e-01,9.4332e-02,8.5334e-02,
6.3015e-02,5.9012e-02,1.0914e-01,9.1910e-02,6.1053e-02,
-6.4324e-02,6.8834e-02,4.2058e-02,9.2855e-02,8.1729e-02,
3.0285e-02,7.7574e-02,6.3595e-02,-1.7380e-02,9.3477e-02},
{6.2548e-02,1.2428e-02,5.2519e-02,4.8568e-02,1.4346e-01,
7.8148e-02,1.7129e-02,-2.9810e-02,-4.0669e-02,-4.8997e-02,
1.1080e-01,7.3534e-03,-1.2470e-01,-9.8478e-02,-1.9311e-02,
1.6273e-02,-1.0181e-01,-1.5867e-01,-7.0788e-03,6.5502e-03,
-1.4424e-02,-1.0310e-01,-9.7044e-02,5.9556e-03,4.0836e-02}},
{{-8.9159e-02,-1.6365e-02,1.1184e-02,-2.6497e-02,-3.4737e-03,
-3.2201e-02,4.1673e-03,-5.0011e-02,-7.4604e-02,-6.2348e-02,
3.1728e-03,3.2796e-02,7.2055e-04,3.1090e-02,-2.5778e-02,
-5.1669e-03,2.9354e-02,-8.2296e-03,-9.0373e-03,-4.8835e-02,
-7.4929e-03,-1.6358e-02,3.5698e-02,-2.5924e-02,4.2740e-02},
{-3.5593e-02,2.7415e-02,-4.6560e-02,3.5100e-02,-4.5075e-02,
-5.1817e-02,-5.4445e-02,-9.6851e-03,3.9063e-02,-1.8327e-02,
1.9534e-02,3.8045e-02,-5.1915e-02,2.6296e-02,5.9141e-03,
4.8928e-03,-8.2225e-03,2.6607e-02,-5.0924e-02,-5.8064e-02,
-2.3641e-03,3.7978e-03,-1.4707e-02,5.2818e-03,3.0726e-02},
{-3.1229e-02,-2.1283e-02,-4.9609e-02,1.9864e-02,4.0002e-02,
4.3923e-03,-1.8040e-02,-4.4747e-02,3.6999e-02,-2.9905e-02,
-1.5185e-02,1.0506e-02,-4.2892e-02,3.1444e-02,2.7727e-02,
-4.5457e-02,-5.8843e-02,-3.6091e-02,5.4098e-03,-1.1005e-02,
2.4694e-02,-2.6703e-02,-1.1983e-02,-5.8581e-02,-3.1993e-02},
{-3.3908e-02,2.0229e-02,-8.2408e-02,-1.1393e-02,-7.1394e-02,
-4.8865e-02,-5.5851e-02,-2.9246e-02,-7.0497e-02,6.4714e-03,
-3.8267e-02,3.2863e-02,-5.0965e-02,-3.3374e-02,3.2181e-02,
2.6846e-02,1.5291e-02,-4.3592e-02,-3.8895e-02,3.1844e-02,
-4.0781e-02,-5.3843e-02,1.4816e-02,1.2268e-02,-4.6493e-02},
{-3.3739e-02,-2.7714e-04,1.9095e-02,2.0182e-02,-1.7309e-02,
1.9991e-03,4.6723e-03,-5.1024e-02,-1.6728e-02,3.2722e-02,
-3.0286e-02,-1.0639e-02,1.3264e-02,-4.0389e-02,-2.9900e-02,
-3.3148e-02,-1.9891e-02,9.9699e-03,2.9427e-02,8.1551e-03,
-2.8320e-02,-7.8596e-03,-4.2552e-02,7.6211e-03,1.0878e-02},
{3.4027e-02,-1.8575e-02,-9.0078e-03,-4.5661e-02,-1.7561e-02,
-2.7488e-02,7.8729e-03,-4.0346e-02,-3.7482e-02,1.2678e-03,
2.8097e-02,-2.2983e-02,-2.0568e-03,1.0534e-02,-3.1729e-03,
1.1131e-02,-7.3900e-03,7.9135e-03,4.7000e-02,3.2240e-02,
-4.2202e-02,5.7889e-03,1.5312e-02,6.7608e-03,-8.9545e-03},
{1.3518e-02,-3.5557e-02,-5.1448e-02,4.0952e-02,3.4171e-02,
-2.8037e-02,-3.0086e-02,1.6009e-02,-1.7136e-02,4.0932e-02,
1.6071e-03,1.0532e-02,-5.3780e-02,-2.7199e-02,3.7392e-02,
-1.8687e-02,-2.7599e-02,2.2321e-02,-4.8237e-03,-1.2961e-02,
-3.2943e-02,1.3679e-02,-1.5740e-02,-1.1725e-02,-3.0496e-02},
{-3.4909e-02,2.2798e-02,-1.0623e-02,-2.5238e-03,-5.9426e-02,
-4.5727e-03,-4.4535e-02,-4.0644e-02,3.3043e-02,-4.0130e-02,
1.5844e-02,-1.5799e-02,-2.7710e-02,-3.3271e-02,-5.7284e-03,
8.1350e-03,2.1979e-02,-4.2845e-02,-1.7265e-02,-4.4581e-02,
-3.0414e-02,-2.3289e-02,-1.8956e-02,-2.5244e-02,-7.1118e-03},
{-2.5822e-02,-7.4074e-03,-7.8230e-02,-5.8260e-02,-7.9703e-02,
6.1910e-03,-4.4162e-02,-5.3433e-02,-5.4537e-02,2.0029e-02,
5.0493e-04,1.9404e-02,-4.5908e-02,-5.4825e-02,1.7680e-02,
2.5862e-02,2.5086e-02,2.5112e-02,-4.4953e-02,-3.8780e-02,
9.0867e-03,1.8696e-02,4.3000e-02,3.7190e-02,2.3051e-02},
{-2.3853e-03,-2.3571e-02,3.3249e-02,3.1840e-03,-9.8059e-03,
1.3973e-02,-2.2067e-02,-3.0096e-02,-4.6913e-02,-2.2420e-03,
1.8489e-02,1.0080e-02,-6.7552e-02,-6.2588e-02,1.1313e-02,
-2.8601e-02,-4.1482e-02,1.8981e-02,-3.0337e-02,-4.4636e-02,
7.6192e-03,-6.2924e-02,-3.3711e-02,-3.9740e-02,-3.8734e-02},
{-1.9284e-02,-3.2161e-02,3.9965e-02,3.9039e-02,-6.2399e-02,
-1.9416e-02,-6.6310e-02,-3.4736e-02,-3.4145e-03,3.6332e-02,
-2.0498e-03,4.9102e-03,-1.9258e-02,2.5746e-02,-6.0045e-02,
-5.3608e-02,1.2020e-05,-5.2561e-02,-3.9980e-02,-5.2367e-02,
-7.3775e-03,-6.4171e-02,1.4538e-02,1.9551e-02,-2.5929e-02},
{-7.0504e-02,-2.8597e-03,-1.0587e-02,-5.8702e-02,-5.8943e-02,
-5.5164e-02,1.2254e-02,-3.3582e-02,-5.3543e-02,1.9797e-02,
-5.7461e-02,-5.5065e-02,4.8082e-03,5.4272e-03,7.5707e-04,
-5.0166e-02,-5.1108e-02,-5.0020e-02,-3.2740e-02,3.4270e-02,
-6.3257e-02,-6.5759e-03,-2.5407e-02,-4.4514e-03,1.5170e-02},
{2.2514e-02,-6.0921e-03,1.6110e-02,1.5025e-02,-5.8501e-03,
-3.5735e-02,-6.0721e-02,-1.8639e-02,-9.6731e-03,-1.2151e-02,
-2.3212e-02,-4.4984e-02,-1.3200e-02,-6.1223e-02,-1.9204e-02,
-5.8028e-02,1.4960e-02,2.5287e-03,-2.7108e-02,-8.0673e-02,
-7.1850e-02,-4.8369e-02,-6.1810e-02,-6.8294e-02,-2.1486e-03},
{-8.8038e-03,-3.9911e-02,-5.6614e-02,-2.4933e-02,-6.4490e-02,
-3.5455e-02,-3.4975e-02,-5.7430e-02,-1.4698e-02,-5.5812e-02,
-1.9915e-02,-7.1010e-02,-8.5316e-03,-4.3614e-02,2.7069e-03,
-4.2580e-02,2.1271e-02,1.8375e-02,-5.8962e-02,-4.2553e-02,
-4.6487e-02,-2.8020e-02,1.7376e-03,-3.5260e-02,-5.0000e-03},
{-2.2064e-02,-2.7348e-02,-1.9566e-02,2.4468e-02,-4.1384e-02,
1.4533e-02,-1.6718e-02,-4.1455e-04,5.6455e-03,-4.0066e-02,
1.7077e-02,-3.9102e-02,-3.5315e-02,-6.4508e-02,-5.7238e-02,
-3.8196e-02,2.9213e-02,-4.9757e-03,-6.5622e-02,-3.7380e-02,
-3.3852e-02,-8.8574e-03,1.1120e-02,-3.2190e-02,-2.1242e-02},
{1.0671e-02,-3.4226e-05,-2.7047e-02,-1.0706e-02,-3.4888e-02,
5.6275e-03,-2.9226e-02,3.2278e-02,1.2063e-02,-5.3695e-02,
-2.1270e-02,-2.7964e-02,-5.5911e-02,1.5284e-02,-9.0108e-03,
-2.2079e-02,-3.1920e-02,-1.9888e-02,1.3537e-02,-4.9039e-02,
-1.2861e-02,3.0496e-02,-2.1891e-02,2.2619e-02,-4.5184e-02}},
{{3.6667e-02,1.1884e-01,1.1637e-01,1.5492e-01,8.9161e-02,
1.0810e-04,5.6037e-02,1.6795e-01,-1.6112e-02,-1.5633e-01,
-4.0300e-02,-1.1425e-03,1.0141e-01,3.5151e-02,-4.7067e-02,
3.3118e-02,5.8508e-02,1.8577e-03,-8.6081e-02,-1.1845e-01,
1.5781e-02,-4.9822e-02,-1.4617e-01,-1.7375e-01,-1.8524e-01},
{-4.0308e-02,-7.0287e-02,-3.2250e-03,-6.6515e-02,-1.4179e-01,
-2.1876e-02,7.5697e-03,-8.7193e-02,-1.2104e-01,-9.0430e-02,
6.1262e-02,6.7248e-02,-1.5748e-01,-9.1609e-02,-1.3593e-01,
-1.4384e-02,1.9745e-01,-1.3201e-01,-9.1380e-03,-1.4361e-01,
-1.3601e-02,1.5092e-01,-1.0384e-01,-7.6671e-02,-4.8054e-02},
{4.8467e-02,1.1257e-02,1.8923e-02,-4.5835e-03,5.5157e-03,
-1.2686e-01,3.0931e-02,2.2808e-02,-1.4530e-01,-3.5470e-03,
-1.2301e-01,-1.5125e-01,-7.4484e-02,-1.1962e-01,-1.0056e-01,
-8.8775e-02,-6.6358e-02,-6.9067e-02,-1.1841e-01,-2.7245e-01,
-3.8234e-01,-2.5486e-01,-1.4785e-01,-1.2061e-01,-3.7369e-01},
{2.0637e-02,-6.1148e-03,5.5767e-02,-2.7802e-02,-1.8258e-02,
3.1603e-02,-3.5686e-02,4.1471e-02,3.2508e-02,6.0325e-02,
6.4675e-02,-1.1353e-01,4.5370e-02,1.3732e-01,4.5917e-02,
3.0158e-02,-3.9442e-02,8.6428e-02,9.7210e-02,7.8911e-02,
-5.4108e-02,-1.6165e-01,-9.4824e-02,-3.5153e-02,-9.2323e-02},
{1.4815e-01,4.6331e-02,2.4052e-02,-4.2005e-02,-6.9144e-02,
5.5746e-02,1.9363e-02,6.9978e-02,-5.4714e-02,-4.2341e-02,
1.0204e-01,-2.8890e-02,-3.2409e-02,-1.6003e-01,-7.7722e-02,
-2.6638e-02,-1.0108e-02,-8.6745e-02,-1.8056e-01,-1.1328e-01,
-1.1168e-01,-6.4570e-02,-3.4746e-02,-1.0615e-01,-1.4895e-01},
{1.7009e-01,1.1369e-01,-2.4740e-03,-6.1278e-02,-7.9398e-02,
1.3857e-01,2.3411e-02,-9.2103e-02,-1.5785e-01,-1.0704e-01,
1.0540e-01,5.5341e-02,2.2152e-02,-4.1950e-02,2.7063e-02,
1.5175e-01,1.0159e-01,3.3412e-03,-1.2327e-01,-1.0535e-01,
-5.2587e-02,-4.7735e-02,-1.7030e-01,-2.7357e-01,-1.9127e-01},
{-1.0133e-01,-1.4296e-01,-1.1112e-01,-1.4849e-01,-1.8985e-01,
-8.6862e-02,-1.0196e-01,-1.2675e-01,-3.0894e-01,-2.3027e-01,
-8.7599e-02,-4.5535e-02,-8.2528e-02,-1.8908e-01,-1.8489e-01,
-1.1586e-01,-8.4644e-02,-7.5225e-02,-8.3672e-02,-1.7336e-01,
-1.9433e-01,-1.2058e-01,-1.4494e-01,-1.7005e-01,-2.1958e-01},
{-4.2511e-03,-5.4583e-02,3.3702e-02,3.6489e-02,9.9376e-02,
-7.9023e-03,-3.2270e-02,8.5188e-02,9.6697e-02,1.9329e-01,
-5.6206e-03,-1.8208e-02,8.2070e-02,3.7601e-02,1.2302e-01,
4.7523e-02,-4.8310e-02,7.5312e-02,-2.9389e-02,-5.3948e-02,
-1.6930e-01,-2.4990e-01,-2.1222e-02,-1.6358e-01,-2.1608e-01},
{-5.6042e-02,-5.3519e-02,-1.0153e-02,-3.3878e-02,-9.6060e-02,
-7.8692e-02,-4.2355e-02,1.0442e-02,-1.0572e-01,-2.3668e-01,
-1.1003e-01,-1.1776e-01,-8.4037e-03,-1.7826e-01,-1.9360e-01,
-4.6815e-02,-1.0559e-01,-1.4360e-01,-2.1584e-01,-2.4238e-01,
-6.0923e-02,-5.2914e-02,-7.9366e-02,-1.3318e-01,-1.8704e-01},
{-6.1512e-02,-3.4307e-02,-1.3088e-01,-3.4913e-02,5.8947e-02,
-3.3478e-02,1.3437e-02,-3.7546e-02,2.7818e-02,1.2561e-01,
-6.6415e-02,-4.9455e-02,1.8065e-02,8.0269e-02,7.5340e-02,
-1.5036e-01,5.1418e-02,6.4607e-02,1.0575e-01,6.6584e-02,
-3.7674e-02,2.8921e-03,-3.4056e-02,2.0114e-02,-6.4719e-03},
{-4.4564e-02,6.5922e-04,1.0540e-02,3.3572e-02,1.4207e-02,
1.2142e-01,1.3499e-01,1.4184e-01,1.2742e-02,-1.1939e-01,
1.3347e-01,9.8840e-02,2.6535e-02,-1.3400e-01,-2.2395e-01,
8.9359e-02,6.3929e-02,2.5764e-03,-1.6996e-01,-1.2765e-01,
1.2515e-01,1.3834e-01,9.8024e-03,-4.9291e-02,-1.0830e-01},
{5.6534e-02,4.0042e-02,-3.9508e-02,-1.4517e-01,-1.0770e-01,
1.9404e-02,-3.9774e-02,-1.5035e-01,-2.7517e-01,-4.3504e-02,
-5.2004e-02,-1.0294e-01,-1.9660e-01,-1.9589e-01,-5.7394e-02,
-8.9339e-02,-7.6185e-02,-1.2426e-01,-1.3363e-01,4.0837e-02,
-9.9340e-02,-1.8068e-01,-9.8642e-02,-7.9206e-02,4.6904e-02},
{1.4434e-01,3.1454e-02,9.2767e-02,4.1646e-02,1.6482e-01,
8.9650e-02,9.0516e-02,1.3904e-01,1.5781e-01,1.2915e-01,
-8.0817e-02,4.0498e-02,1.7066e-02,6.7998e-02,6.0959e-03,
-1.7803e-02,6.4122e-02,-9.5068e-02,-5.3253e-02,-3.9524e-02,
-2.7734e-02,-1.6238e-02,-6.0100e-02,-6.3069e-02,-3.6485e-02},
{2.2036e-01,1.4267e-01,1.1233e-01,1.3107e-01,2.2282e-01,
1.2711e-01,3.9623e-02,8.8177e-02,9.0273e-03,9.3919e-02,
1.6085e-01,1.4604e-01,8.2863e-02,-9.5295e-02,5.0949e-02,
7.6026e-02,3.0746e-02,3.5276e-02,-1.4979e-01,-2.0840e-02,
-5.0937e-02,-2.8121e-04,-7.2011e-02,-2.7192e-01,-8.0634e-02},
{1.9017e-02,3.1081e-02,7.8480e-02,-6.4870e-02,-1.2370e-01,
-6.2377e-02,-1.9219e-03,1.7152e-02,-2.4855e-02,4.6010e-02,
3.8715e-02,3.3355e-02,9.8651e-02,1.3395e-01,1.0611e-01,
-1.8542e-02,1.3678e-01,1.9306e-01,1.5619e-01,1.2277e-01,
3.8435e-02,-1.8977e-02,1.4572e-02,1.8986e-02,8.6201e-02},
{-5.2155e-02,-2.3803e-02,-3.3746e-02,-3.5288e-02,-1.5819e-01,
-1.2497e-02,-2.6866e-02,-2.0550e-01,-1.9501e-01,-9.8912e-02,
2.3380e-02,-3.2954e-02,-8.3242e-02,-9.2769e-02,9.8001e-02,
3.1318e-02,-8.6098e-02,3.7995e-02,-1.7085e-01,3.6058e-02,
-9.2637e-02,-1.4800e-01,-2.7534e-02,-1.2114e-01,2.2758e-02}},
{{-5.2346e-02,-1.1024e-02,-5.3036e-02,-7.9164e-02,-6.7797e-03,
-7.2215e-03,-2.9374e-02,-5.3320e-02,-1.7662e-02,-2.1935e-02,
-1.7480e-02,-7.9318e-02,-8.0863e-02,7.0536e-03,-6.1433e-02,
-7.3220e-02,-1.6565e-02,-4.8838e-02,9.3120e-03,-4.7447e-02,
-5.9314e-02,2.9598e-02,1.4549e-02,-2.7115e-02,2.9231e-03},
{-3.1423e-02,-3.5855e-02,-2.6244e-02,-8.3829e-02,-8.9212e-02,
-8.9159e-02,-5.7273e-02,-7.7233e-03,-8.5389e-02,-3.7623e-02,
-4.8968e-02,-4.2462e-02,-4.3581e-03,4.3965e-03,3.6157e-03,
-7.9009e-03,-2.0825e-02,1.1632e-02,8.9233e-03,-7.1403e-02,
4.8451e-03,-4.6926e-02,-3.6329e-02,-1.7787e-02,-9.4455e-03},
{-1.6712e-02,-4.3257e-02,-7.4473e-02,-7.2750e-02,-6.6336e-02,
-1.3728e-03,-1.5156e-02,-9.3726e-02,-5.1399e-02,-4.7808e-02,
-1.7511e-02,-5.3160e-02,-7.5971e-02,6.6404e-03,-6.6154e-02,
-9.0503e-02,-2.4791e-02,-3.4354e-02,-5.1770e-02,-4.3006e-03,
-1.1730e-02,-1.9512e-02,1.8759e-03,-4.3577e-02,-1.7236e-02},
{-4.6875e-02,-8.2795e-02,-1.0911e-02,-6.8905e-02,-8.5070e-02,
-1.6714e-02,-1.0092e-01,-5.9937e-02,-1.0392e-01,-4.1126e-02,
-9.3089e-02,-7.4631e-02,-1.0893e-01,-9.9745e-02,-1.0998e-01,
-5.9956e-02,-4.0087e-02,-9.0156e-02,-6.5191e-02,-6.6858e-02,
1.3365e-02,-5.1938e-02,-7.9299e-02,-4.6832e-02,-6.8243e-02},
{1.9324e-02,-3.1702e-02,-1.4435e-02,-4.8030e-02,-3.1689e-02,
-2.4116e-02,1.1629e-04,-3.8204e-02,-2.9828e-02,1.5235e-02,
-2.9722e-02,-5.2353e-02,4.2429e-02,4.0443e-02,4.8394e-03,
-7.3819e-02,-2.2637e-02,1.3412e-02,-5.6129e-02,3.2039e-03,
2.3709e-02,-5.3735e-02,-3.6316e-02,2.1901e-02,9.0407e-03},
{2.4529e-03,5.0082e-03,-3.6193e-02,-1.5746e-02,-2.4024e-02,
-5.6375e-02,8.3437e-03,2.3328e-02,-7.7823e-03,-9.6779e-03,
-5.8699e-02,-2.8252e-02,-3.5239e-02,5.9791e-03,6.7363e-03,
-5.7259e-02,-3.1034e-02,-3.2486e-02,-7.5657e-02,1.4975e-03,
-2.8805e-02,-4.6846e-02,-1.5607e-02,1.9104e-02,-3.4388e-02},
{-6.5403e-02,-1.2120e-02,-6.4072e-02,-1.1322e-01,-9.9406e-02,
-8.2680e-02,-8.1348e-02,-1.6669e-02,-6.5958e-02,-7.1053e-02,
-2.6565e-02,-4.8253e-02,-9.6172e-02,-4.9454e-02,-7.0397e-02,
-2.9922e-02,-7.1289e-03,-3.6601e-02,-4.3812e-02,-4.2462e-02,
-7.1627e-02,-7.1649e-02,-4.2428e-02,-4.1758e-02,4.6420e-03},
{-1.0335e-01,-4.5205e-02,-8.2000e-02,-1.1467e-01,-6.2194e-02,
-1.2863e-02,-4.6920e-02,-1.6821e-02,-9.5868e-02,-5.0160e-02,
-5.8627e-02,-1.0273e-01,-9.1362e-02,-8.4685e-02,-3.5724e-02,
-3.9674e-02,-1.1386e-01,-3.2977e-02,-1.2013e-01,-1.0938e-01,
-5.4238e-02,-1.9461e-02,-1.0439e-01,-8.4598e-02,-4.3404e-02},
{-7.9597e-02,-3.6274e-02,-5.7792e-02,-9.3808e-02,-4.9954e-02,
-5.6290e-02,-1.8411e-02,-4.6568e-02,-5.3304e-02,-2.3416e-02,
-6.5076e-02,-1.1095e-01,-2.5937e-02,-2.7516e-02,-1.1592e-01,
-2.3101e-02,-5.2805e-02,-5.2710e-02,-9.7285e-02,-6.5230e-02,
2.8798e-02,-5.9513e-03,-2.3720e-02,-6.5679e-02,-1.2862e-03},
{-4.2391e-02,-1.5043e-02,-1.0313e-01,-9.9999e-02,-1.2749e-01,
-2.8518e-02,-5.9915e-02,-7.3586e-02,-3.9795e-02,-3.8873e-02,
-9.4741e-02,-1.1468e-02,-6.8457e-03,-3.9161e-02,-1.0399e-02,
-3.4969e-03,-6.4033e-02,-7.5870e-02,-6.1831e-02,-5.3215e-02,
-8.3227e-03,1.7953e-02,4.2390e-02,-2.9564e-02,2.0841e-02},
{-4.9757e-02,-1.6468e-02,-5.4510e-02,-3.2995e-02,-9.6812e-02,
-3.7002e-02,-5.5007e-02,-6.4677e-02,-2.9892e-02,-5.3599e-02,
-3.5105e-02,-6.5224e-03,-4.7512e-02,-9.0809e-02,-3.1335e-02,
-6.9069e-02,-9.4989e-02,-5.9740e-02,-5.7486e-02,-7.0170e-02,
-6.8773e-02,-8.6014e-03,-5.4955e-02,-5.4637e-02,-8.3158e-02},
{-3.8206e-02,9.2889e-03,9.9758e-03,-4.9419e-02,1.1034e-02,
-1.1670e-02,-8.5595e-02,1.3153e-02,-7.2471e-02,-2.1590e-02,
-6.6277e-02,-3.6465e-02,-6.2578e-02,-3.0775e-02,-1.0479e-01,
-6.8900e-02,-5.5943e-02,-1.7494e-02,-6.5423e-02,-1.2705e-02,
-2.8332e-02,-7.6034e-02,-1.5978e-03,-6.9700e-02,-6.8651e-02},
{-6.0036e-02,-1.7724e-02,-5.8974e-02,-9.3024e-02,-5.3941e-02,
-9.5547e-02,-5.2313e-02,-2.4400e-02,-1.8531e-02,-9.3048e-02,
-9.1197e-02,-8.2951e-02,-4.9729e-04,-1.6632e-02,-2.4830e-02,
-6.7302e-02,-1.8085e-02,-5.4688e-02,-3.0865e-02,-3.0223e-02,
-4.2098e-02,2.0162e-02,-6.1305e-02,-3.0448e-02,-8.3951e-02},
{-4.5094e-02,-6.4541e-02,-7.6514e-02,-2.1739e-02,-1.9037e-02,
-7.9773e-02,-2.8783e-02,-4.0731e-02,-7.2040e-02,-4.5483e-02,
-7.1372e-02,-4.7057e-02,-3.8501e-02,-8.9219e-02,-3.6987e-02,
-3.7450e-02,-3.7262e-02,-5.0909e-02,-1.0318e-02,-8.5585e-02,
-1.2546e-03,-3.1924e-02,-2.4285e-03,-2.1662e-02,1.8581e-02},
{-5.3871e-02,-4.7528e-02,-5.8770e-02,-1.0328e-01,-6.0569e-02,
-9.7252e-02,-9.8462e-02,-1.5289e-02,-4.1632e-02,-4.3708e-02,
-5.4294e-02,-1.8159e-02,-7.3946e-02,-5.9092e-02,1.5314e-03,
-4.5535e-02,-9.0562e-02,-9.3793e-02,-7.9629e-02,-4.6540e-02,
1.6611e-02,5.4077e-02,5.6299e-02,9.6205e-03,-2.5891e-02},
{-8.2009e-02,-2.1478e-02,3.3044e-02,-3.7294e-02,-3.5460e-03,
-6.1050e-02,-7.5618e-03,-1.2653e-02,-3.2012e-02,-9.8552e-03,
-8.2065e-02,-4.0235e-02,-3.8078e-02,-5.8899e-03,-8.0093e-02,
-1.0682e-01,4.6300e-04,3.8668e-02,-6.2007e-02,-6.6630e-02,
-4.3874e-02,4.5895e-02,-8.9623e-02,-1.9548e-02,-4.2755e-02}},
{{-6.3570e-02,-2.0824e-01,-1.3929e-01,-2.3385e-01,-1.1813e-01,
-5.8100e-02,-6.0012e-02,-5.4594e-02,8.0225e-02,8.8831e-02,
5.7773e-02,2.0163e-02,2.2506e-02,4.2429e-02,5.8534e-02,
4.6186e-02,7.5337e-02,1.5216e-01,1.3849e-01,9.7032e-02,
6.8718e-02,2.2023e-01,2.1455e-01,1.8687e-01,6.7888e-02},
{7.5356e-03,-4.3424e-04,8.5195e-02,4.8464e-02,1.2067e-01,
4.2640e-03,-3.4643e-02,2.6550e-02,4.8675e-02,6.2404e-02,
-7.0781e-02,-1.2004e-01,-5.2516e-02,-7.5974e-02,-1.2929e-01,
-1.3224e-01,-2.2927e-01,-2.2804e-01,-3.1699e-01,-3.1912e-01,
-2.7161e-01,-3.3463e-01,-2.8550e-01,-1.9650e-01,-2.0821e-01},
{2.8478e-02,-4.8149e-02,-2.9787e-02,-5.8461e-02,1.2734e-02,
1.2425e-01,7.3758e-02,4.1938e-03,4.5815e-02,1.1737e-01,
1.9476e-01,1.7861e-01,1.3257e-01,8.9024e-02,1.2524e-01,
2.0016e-01,3.0837e-01,2.4613e-01,1.2358e-01,-3.0872e-02,
2.9537e-01,2.5613e-01,2.2164e-01,2.5536e-01,1.2865e-01},
{-8.9894e-02,8.4918e-03,9.3335e-03,7.4974e-02,-6.9156e-02,
4.5158e-02,-4.6915e-02,-1.5255e-02,-2.6366e-02,-5.9053e-02,
1.5076e-02,-4.8899e-02,-6.8863e-02,-4.0774e-02,-4.3484e-02,
5.1701e-02,4.8000e-02,3.6430e-03,-8.8512e-02,-5.8883e-02,
-4.0994e-02,2.2280e-02,1.0987e-01,7.9860e-02,-1.8939e-02},
{-1.5050e-02,-8.5906e-03,-6.3458e-03,-7.8885e-02,-8.9251e-02,
6.1284e-02,1.1811e-01,7.9181e-02,4.9067e-02,3.6837e-02,
1.4949e-01,1.8088e-01,8.3866e-02,4.5753e-02,-4.9026e-02,
1.6204e-02,2.5998e-02,1.4735e-01,9.2275e-02,3.9780e-02,
9.6530e-02,1.8955e-01,2.0101e-01,1.2072e-01,8.4947e-03},
{-2.5171e-03,-1.3922e-02,-5.7111e-03,1.5943e-03,1.4560e-02,
9.5999e-03,-1.4182e-03,5.6999e-03,2.1211e-02,3.0755e-02,
-1.3899e-02,6.2083e-02,1.7301e-01,1.0206e-01,1.7270e-01,
1.3898e-02,1.7371e-02,1.4852e-01,9.0352e-02,8.2813e-02,
-1.1736e-01,-8.6133e-02,-1.5512e-01,-4.8432e-02,-1.0583e-02},
{-4.7647e-02,-7.9592e-02,-6.7442e-02,-7.7615e-02,-1.1834e-02,
-5.0108e-02,-5.1724e-02,-3.9783e-02,-6.8381e-02,-5.0075e-02,
-2.5640e-02,1.7821e-02,-7.0211e-02,1.4685e-02,-3.8698e-02,
-5.9772e-02,-5.0633e-02,-2.1160e-02,4.7549e-03,4.2234e-02,
-1.0664e-01,-5.0887e-02,-7.6836e-02,5.5265e-02,-8.2323e-03},
{1.6151e-01,1.4309e-01,7.5089e-02,1.0437e-01,7.9539e-02,
2.5814e-02,1.2676e-01,3.9373e-02,6.5745e-02,4.6963e-02,
3.6125e-02,4.2112e-02,1.9680e-02,-2.1855e-02,4.4696e-02,
-8.8915e-02,-4.3135e-02,-8.9013e-02,-4.0917e-02,-8.0386e-03,
-8.6625e-02,-6.9307e-02,-5.2873e-02,-7.0473e-02,-2.8377e-02},
{-1.3438e-01,-7.7270e-02,-1.2956e-01,-8.7981e-02,-6.8211e-02,
-6.0302e-02,-8.7736e-03,-9.3350e-02,-1.8838e-02,4.5256e-02,
-5.6263e-02,-8.4653e-02,3.2816e-02,7.7493e-02,1.0905e-01,
3.6556e-02,7.1034e-02,8.6913e-02,5.7054e-02,5.6397e-02,
6.2706e-02,4.4972e-02,1.2197e-01,8.4759e-02,2.2226e-02},
{-1.4549e-01,-1.7501e-01,-1.2508e-01,-1.0979e-01,-9.6738e-02,
-7.9588e-02,-1.1688e-01,-1.1384e-01,-1.8194e-02,-1.9188e-02,
-8.3984e-02,-7.4955e-02,6.3922e-03,-1.4250e-02,-4.7700e-03,
-7.6937e-02,-3.6099e-02,-2.6770e-03,1.9767e-02,1.6884e-01,
-1.2336e-02,-1.4447e-02,8.1791e-02,9.7076e-02,1.0107e-01},
{6.5234e-03,-4.9356e-03,-3.1314e-02,-1.5197e-02,-5.6133e-02,
-2.6986e-02,2.6820e-02,-5.2571e-02,1.2764e-02,3.9790e-02,
3.5300e-02,1.1053e-01,5.6239e-02,2.8988e-02,4.1385e-02,
1.3042e-02,-3.4508e-02,1.0135e-02,2.6778e-02,-5.2396e-02,
-1.3882e-02,1.5918e-02,-2.9501e-02,-4.4234e-02,-3.2940e-02},
{-5.1819e-02,-7.5804e-02,-5.4002e-02,-5.2303e-02,-7.8916e-02,
-2.3581e-02,-5.6693e-03,-4.5561e-02,3.2667e-02,-1.9036e-02,
-7.7285e-02,7.0666e-03,4.7445e-02,3.2462e-02,-2.7727e-02,
5.0025e-02,3.8526e-02,4.3230e-02,-3.5274e-04,-7.4603e-02,
-5.7806e-02,2.2152e-02,-8.2086e-02,-1.0977e-01,-3.7669e-02},
{-5.6314e-02,-8.3174e-02,-6.0267e-03,-2.2129e-02,6.3310e-02,
3.1766e-02,-5.4276e-02,-6.3307e-02,-4.6501e-02,2.3451e-02,
-4.6919e-03,-4.5781e-03,2.9366e-02,-3.9419e-02,4.6673e-02,
-8.1831e-02,-6.5083e-02,-4.7484e-03,9.7806e-02,4.1675e-02,
-6.6965e-02,9.7299e-03,8.6233e-02,3.1974e-02,1.1203e-01},
{5.3011e-02,2.1546e-02,-1.0140e-02,-5.0377e-02,-6.9903e-02,
6.6102e-03,-3.0581e-02,-9.7659e-02,-8.7528e-02,4.5580e-02,
-6.2798e-02,-4.5442e-02,-1.2870e-02,-4.9043e-02,1.3869e-02,
-4.7704e-02,-8.8899e-03,-6.5675e-02,-1.1390e-01,-4.5162e-02,
1.3009e-01,3.8557e-02,-3.3645e-03,-5.0592e-02,-1.1278e-01},
{-4.3067e-03,-2.0923e-02,-6.2804e-02,-8.4322e-02,-2.5869e-02,
-1.0862e-02,-3.3090e-03,-2.9245e-02,-3.9475e-02,-5.7747e-02,
3.5674e-02,1.3056e-02,-2.1265e-02,-9.5668e-02,-3.7314e-02,
9.2425e-02,-3.2968e-02,1.3611e-02,-1.0496e-01,-9.4732e-02,
1.1861e-01,7.7686e-02,-6.2520e-03,3.1623e-02,3.5359e-02},
{9.1625e-03,-3.3675e-02,1.2976e-02,-7.2172e-02,-2.2621e-02,
-2.1950e-04,-5.6044e-02,-5.2899e-02,-1.1006e-01,-1.0645e-02,
-1.3975e-01,-1.6494e-01,-9.2323e-02,-6.5679e-03,4.8154e-03,
-8.6782e-02,-8.9879e-02,-3.3016e-03,-1.1385e-01,-5.7653e-02,
-5.1706e-02,-7.5801e-02,-7.4747e-03,-1.4063e-01,-1.6712e-01}},
{{-1.8981e-01,-1.9392e-01,-1.3092e-01,-1.0411e-01,-8.7534e-02,
1.4590e-01,5.8716e-02,1.5516e-01,1.1148e-01,8.2853e-02,
1.6813e-01,1.3345e-01,1.8131e-01,2.6064e-01,1.7224e-01,
1.8866e-01,1.4565e-01,1.1706e-01,1.0574e-01,1.4140e-01,
4.4363e-02,9.0925e-02,-3.8412e-02,5.4376e-02,9.2075e-02},
{2.2753e-02,7.6482e-02,8.9179e-03,7.1959e-03,-1.6012e-03,
-2.4854e-02,-4.6476e-03,-4.4680e-03,-3.1352e-02,-1.0440e-01,
-6.0255e-04,3.5303e-02,-7.9135e-02,-1.2302e-01,-8.7698e-02,
-8.5782e-03,2.8966e-02,-5.5080e-02,-1.2024e-01,-1.3280e-01,
5.7696e-02,-3.8912e-02,-2.1583e-02,-2.7546e-02,8.6902e-04},
{-1.7462e-01,-1.6274e-01,-1.8564e-01,-1.8009e-01,-1.4158e-01,
-7.3403e-02,-7.3693e-02,4.3061e-02,9.9742e-03,7.4229e-02,
-5.0007e-02,-2.3489e-02,-5.5910e-02,4.9158e-02,1.8351e-01,
-8.5495e-03,2.7761e-03,-7.7220e-02,-3.6590e-02,1.2613e-01,
-5.6202e-03,1.0363e-01,6.9698e-02,5.7447e-03,-1.1024e-01},
{-2.5106e-01,-1.7324e-01,-3.1324e-01,-3.5490e-01,-2.8306e-01,
-3.7738e-02,-1.0606e-01,-1.9635e-01,-1.6783e-01,-4.0549e-02,
4.7561e-02,-9.0277e-02,-9.9818e-02,5.0195e-03,4.4332e-02,
7.2752e-02,5.8360e-02,-2.9362e-02,5.1649e-02,-1.4759e-03,
-3.3503e-02,-1.1851e-02,6.4375e-02,-1.5649e-03,-3.6447e-02},
{-2.0702e-01,-2.1758e-01,-2.3959e-01,-2.5229e-01,-2.2988e-01,
-1.7409e-01,-3.0149e-01,-2.3371e-01,-2.0124e-01,-1.2110e-01,
-3.6009e-04,2.4324e-02,4.0083e-02,1.3439e-01,1.6458e-01,
1.2392e-02,-7.6472e-02,-1.4444e-02,-8.0547e-02,3.6932e-02,
2.7227e-02,-1.8113e-02,-2.8000e-02,-3.2270e-02,1.3828e-01},
{4.6547e-02,-3.7695e-02,6.9062e-04,-1.6713e-02,5.3835e-03,
4.9914e-02,-8.8136e-02,-5.3027e-02,-8.9084e-02,5.2624e-02,
-1.6462e-03,-2.5678e-01,-1.9072e-01,-1.0430e-01,1.1743e-01,
-6.9616e-02,-1.3246e-01,-1.9256e-01,-9.6497e-02,4.6540e-02,
-1.1239e-01,1.5607e-02,3.4434e-02,-2.8108e-02,-4.1629e-02},
{1.4606e-01,9.7659e-02,2.8334e-02,6.7673e-02,7.3836e-02,
3.6962e-02,2.3327e-02,-1.3961e-02,4.7421e-02,3.2010e-02,
-1.9878e-02,-4.7257e-02,-2.2950e-02,-7.0290e-02,-1.1696e-02,
8.2931e-02,-1.1188e-02,-9.1078e-03,-9.0853e-02,-8.3434e-02,
5.4377e-02,2.4342e-02,8.2983e-02,-3.1977e-02,-5.1610e-02},
{-2.0243e-01,-1.3873e-01,-2.8216e-01,-3.5893e-01,-2.4975e-01,
-5.8130e-02,-1.1096e-01,-1.8210e-01,-2.7019e-01,-1.1696e-01,
3.3447e-02,6.6373e-03,-1.2553e-03,3.0606e-02,5.4218e-02,
1.4547e-01,1.1372e-01,6.4961e-02,3.5291e-02,9.8366e-02,
1.5345e-01,1.9816e-01,1.9757e-01,9.8697e-02,1.1432e-01},
{-8.8716e-02,-3.2294e-02,-7.0008e-02,2.3412e-02,-1.1000e-02,
5.0428e-02,2.9269e-02,1.0369e-01,6.8128e-02,1.4469e-01,
8.3667e-02,-8.3476e-03,1.6859e-02,1.1374e-01,4.2659e-02,
5.0890e-02,5.7647e-02,6.0372e-02,9.8659e-02,7.1475e-02,
6.5120e-02,6.1096e-03,2.4382e-02,-3.4733e-02,-1.1899e-02},
{-4.3288e-01,-3.5723e-01,-3.7068e-01,-3.9259e-01,-3.9524e-01,
-2.6696e-01,-2.3074e-01,-2.5879e-01,-2.3380e-01,-1.2181e-01,
-5.5222e-02,-7.4341e-02,-1.1338e-01,-5.8589e-02,-6.3798e-02,
7.3446e-02,-8.4374e-03,-1.3205e-02,-4.3917e-02,-1.0909e-01,
5.2076e-02,-3.5689e-02,-6.6641e-02,-5.1197e-02,-2.7114e-02},
{6.0050e-02,5.4428e-02,1.7069e-02,1.3875e-02,2.8831e-02,
4.8223e-03,1.3488e-02,-1.8713e-02,2.7903e-02,7.4457e-02,
4.6558e-03,3.9947e-03,-2.8888e-02,4.3502e-02,-6.3396e-03,
1.3042e-02,2.4030e-02,2.7792e-03,3.8138e-02,1.1949e-02,
2.5941e-02,-8.7394e-02,-6.4653e-03,-2.9401e-02,2.3996e-02},
{-2.5366e-02,3.3873e-02,-2.0240e-03,3.0167e-02,3.8142e-02,
5.1203e-02,-2.4114e-02,8.1939e-03,3.3789e-03,1.0868e-03,
-1.1434e-02,9.6608e-03,-6.3692e-03,4.8489e-02,7.6854e-02,
4.6121e-02,3.7887e-02,8.4340e-02,8.3696e-02,9.0577e-02,
1.1694e-01,8.2980e-02,1.6254e-02,7.5928e-03,-1.3434e-02},
{-3.0614e-01,-3.8835e-01,-3.4678e-01,-3.4771e-01,-3.4359e-01,
-2.0365e-01,-2.1146e-01,-2.6620e-01,-2.2014e-01,-1.6334e-01,
-2.7225e-02,2.2846e-03,-1.2283e-01,-1.0198e-01,2.9743e-02,
2.6178e-02,7.2170e-02,1.1690e-01,1.0551e-01,7.5919e-02,
6.9527e-02,5.5307e-02,1.4785e-01,1.5958e-01,5.1261e-02},
{7.5937e-03,4.9316e-03,-6.9374e-02,-1.3778e-01,-1.6103e-01,
8.5347e-02,-4.6596e-02,-7.7204e-03,-8.4352e-02,-2.3050e-01,
5.6544e-02,-5.0823e-02,6.7481e-02,8.4451e-03,-1.3894e-01,
3.7052e-02,4.6610e-02,4.0605e-02,1.4312e-01,-2.8532e-02,
2.4953e-02,8.0259e-02,6.9842e-02,6.3376e-02,2.3875e-02},
{-6.6258e-02,-5.4646e-02,-7.9251e-02,-1.6688e-01,-2.0429e-01,
-3.6638e-02,-9.5495e-02,-7.1563e-02,-1.2445e-02,-1.8068e-02,
2.5293e-02,-1.0690e-02,-1.8590e-02,-4.2312e-02,9.3903e-03,
1.0644e-01,-3.8339e-02,-5.9488e-02,-6.0102e-02,-5.3497e-02,
3.5455e-02,-2.6888e-02,-8.1932e-02,4.1857e-03,9.3065e-02},
{-2.9189e-02,-1.4526e-02,-3.6212e-02,-5.0905e-02,-1.2633e-01,
2.4701e-02,-4.4816e-02,3.6358e-02,2.3024e-02,-1.0104e-01,
-4.0129e-02,-3.8351e-02,5.1573e-02,-6.0706e-03,-8.9163e-02,
-1.1267e-01,-7.5878e-02,8.3459e-02,2.1606e-02,-3.3441e-02,
-5.5606e-02,4.9957e-03,9.1932e-02,-3.4665e-02,-9.7963e-02}},
{{-6.2277e-03,-9.7114e-02,-5.5938e-03,6.6887e-03,9.6203e-02,
-9.0905e-02,-6.7720e-02,-1.0135e-02,2.3256e-02,7.3331e-02,
-9.1863e-02,-3.5794e-02,7.4571e-02,5.4402e-02,1.2299e-01,
7.3122e-02,-4.5018e-02,6.0768e-03,1.5412e-02,5.2888e-02,
1.2620e-02,-7.7922e-03,6.1463e-03,9.8200e-02,2.0637e-01},
{2.8374e-02,-2.6711e-03,1.2283e-02,1.0773e-02,5.8999e-02,
-6.8090e-02,-9.2739e-02,-5.5951e-02,-4.3651e-02,-6.6894e-02,
-1.2187e-01,-6.1272e-02,-1.0261e-01,2.5821e-02,-8.4657e-03,
-9.2192e-02,-3.0764e-02,-8.0311e-02,-7.6539e-02,-9.2587e-02,
-5.2947e-04,3.1589e-02,-1.3762e-02,-1.5014e-02,-1.3615e-01},
{-7.5682e-02,-7.6304e-02,-2.4360e-02,1.5432e-02,1.2723e-02,
4.1731e-02,-6.8765e-03,3.4528e-02,8.3210e-02,1.2513e-01,
2.7779e-02,4.7027e-02,8.3571e-02,6.1824e-02,6.8148e-02,
2.8670e-02,-6.0042e-02,3.9754e-02,1.1692e-01,2.4467e-01,
-3.0762e-02,2.2689e-02,-3.2689e-02,8.0943e-03,1.9435e-01},
{-7.1879e-02,-1.1453e-02,-5.7622e-02,3.3347e-02,5.1537e-02,
-1.2717e-01,-1.2584e-01,-8.4357e-02,-6.2350e-02,-9.3371e-02,
-7.1050e-02,-8.6038e-02,-4.3344e-02,-1.0197e-01,-1.7235e-01,
-4.0566e-02,-2.6435e-02,-4.0026e-02,2.5888e-02,-1.5033e-01,
3.9723e-02,1.1221e-02,-7.3838e-02,-4.6306e-02,-9.6548e-02},
{-8.8839e-02,-1.1904e-01,-3.4368e-02,-3.4159e-02,7.6712e-03,
-9.4438e-02,-7.0781e-02,-1.8994e-02,7.0925e-03,1.0823e-01,
-8.3748e-02,-9.3070e-02,-5.5225e-02,2.5756e-02,1.0421e-01,
-1.3985e-02,-6.3112e-02,-2.1752e-02,7.4752e-02,8.9689e-02,
-1.0921e-01,-1.1838e-01,-1.4315e-01,3.4838e-02,4.1976e-02},
{-2.6729e-01,-4.3677e-02,3.0139e-02,-8.1941e-02,-1.5585e-01,
-3.2701e-01,-1.7436e-01,-1.1198e-01,-1.5733e-01,-2.6797e-01,
-3.8307e-01,-1.9216e-01,-9.7390e-02,-1.3120e-01,-1.0799e-01,
-3.1800e-01,-8.3188e-02,-5.9416e-02,-1.2535e-01,-1.9895e-01,
-2.5144e-01,-5.8954e-02,-1.7752e-02,-4.2537e-02,-9.5995e-02},
{8.8002e-02,2.3845e-02,1.1226e-01,8.9535e-02,1.0665e-01,
3.6154e-02,1.7710e-02,2.9488e-02,6.4191e-02,5.0452e-02,
2.5995e-02,-6.5027e-02,-3.9087e-02,-1.2158e-02,1.2824e-02,
2.6094e-02,-4.4205e-02,-4.9553e-03,-1.7571e-02,8.8911e-02,
9.6654e-03,-3.3324e-04,-2.0308e-02,-1.0405e-02,5.2816e-03},
{6.7234e-02,-1.4131e-01,-1.3057e-01,-2.1221e-02,-4.9198e-02,
7.2877e-02,7.7323e-02,6.3884e-02,-1.7017e-02,-7.4660e-02,
9.9546e-02,7.8682e-02,7.9774e-02,-1.3948e-03,-1.3602e-01,
2.2322e-01,8.5162e-02,-1.0606e-02,3.5574e-02,-6.7780e-02,
2.8599e-01,2.2535e-01,2.2485e-02,4.3670e-02,-6.2100e-02},
{1.5289e-01,1.0332e-01,6.8368e-02,1.1320e-01,1.3349e-01,
2.6535e-02,4.3677e-02,8.2157e-02,1.6882e-02,2.5305e-02,
7.1252e-02,6.7925e-02,-4.5983e-02,-2.8023e-02,-9.9374e-02,
1.1619e-01,1.2084e-02,-8.4226e-02,-1.4606e-02,-3.0107e-03,
5.3545e-02,-5.0317e-02,-1.2323e-01,-3.0242e-02,1.5625e-02},
{-3.3077e-02,9.0026e-03,-5.1491e-02,-7.7879e-02,-1.2876e-01,
4.7314e-02,4.6688e-02,-5.0089e-02,5.8969e-02,5.3114e-02,
-4.1824e-02,2.0447e-02,7.4376e-02,8.7361e-02,3.9232e-02,
4.8608e-03,3.4467e-02,1.3278e-02,9.5814e-03,-5.0295e-03,
4.2114e-03,3.0225e-02,1.0012e-01,5.9404e-02,-2.9920e-02},
{2.5779e-01,2.1461e-01,1.2658e-01,8.2538e-02,1.4766e-01,
1.8425e-01,3.9815e-02,5.6023e-02,3.8008e-02,6.0348e-02,
9.3486e-02,6.5435e-02,-2.7900e-02,2.7042e-02,7.2267e-03,
8.2706e-02,6.4248e-02,1.4972e-02,-5.3815e-02,-1.1161e-02,
4.3588e-02,-1.1519e-02,-1.1972e-01,-7.8969e-02,-9.0331e-02},
{-2.0064e-01,-1.9049e-01,-1.5565e-01,-5.1557e-02,-1.0510e-01,
-4.7597e-02,-2.0467e-02,-9.2585e-03,-3.3322e-02,2.3586e-02,
-3.3483e-02,6.8024e-02,-1.7368e-02,1.9171e-02,4.3198e-02,
-6.4308e-02,5.2267e-02,7.0143e-02,-1.2187e-02,7.8759e-02,
-7.3947e-03,3.9051e-02,2.1644e-02,1.9226e-02,-1.0726e-02},
{-3.1791e-02,9.4932e-03,-3.0419e-02,-6.3946e-02,-5.4817e-02,
-1.5422e-02,-9.7182e-03,-5.0485e-02,2.1820e-02,-7.8758e-02,
-2.8694e-02,-6.0104e-02,9.5606e-02,4.3311e-02,-3.7165e-02,
4.3392e-02,3.7006e-02,9.8874e-03,-1.1669e-01,-5.1834e-02,
5.3614e-02,5.5833e-02,9.1366e-02,1.0217e-03,-6.0929e-02},
{-6.9331e-02,-1.0447e-01,7.9869e-03,1.0334e-02,-1.1879e-01,
-1.6912e-01,-2.0017e-01,-6.3761e-02,-3.3014e-02,-5.7473e-02,
-1.1988e-01,-1.9269e-01,-1.3257e-01,-1.9062e-01,-1.2050e-01,
-1.4582e-01,-5.2028e-02,-6.2309e-02,-1.7297e-01,-1.3522e-02,
-1.6579e-01,-4.2849e-02,-2.6617e-02,-1.4952e-01,-1.4786e-01},
{7.6889e-02,2.9848e-02,2.7810e-02,-9.3315e-02,-9.1626e-02,
5.6439e-02,2.1608e-02,-3.6812e-02,8.3017e-02,8.2050e-02,
3.1232e-02,-1.8063e-02,4.4636e-02,3.9922e-02,9.7108e-02,
5.1638e-02,9.3239e-03,-9.7407e-03,7.0597e-02,2.8626e-02,
9.2908e-02,8.2045e-02,1.4286e-02,5.8485e-02,1.0174e-01},
{-1.2692e-02,-8.1437e-02,-9.7049e-02,8.2792e-02,-3.3681e-02,
-1.2128e-01,-1.6188e-01,-3.0441e-02,3.4937e-02,-3.1090e-02,
-1.1602e-01,-4.2125e-02,-1.4212e-01,-1.3708e-01,-4.2625e-02,
-1.3826e-01,-1.1647e-02,-6.2356e-02,-4.1579e-02,-8.4172e-02,
-1.8893e-01,-4.0636e-02,-3.0099e-02,-7.7839e-02,-1.4727e-01}},
{{1.6896e-01,3.5570e-02,-8.5383e-02,-7.0809e-02,2.7674e-03,
6.1843e-02,-9.8144e-03,1.7125e-02,1.7440e-02,-1.4906e-02,
-2.3313e-02,-4.0561e-02,-6.9747e-02,-2.1646e-02,3.6304e-02,
-4.8139e-02,-3.7875e-02,5.4308e-02,9.0412e-02,2.4241e-02,
1.3310e-01,9.7960e-02,6.0685e-02,3.6454e-02,3.3310e-02},
{-2.7514e-02,-8.1760e-02,1.7934e-02,4.9355e-02,1.5078e-01,
-9.9701e-02,-1.2377e-01,9.0108e-03,-9.4995e-03,8.1687e-02,
-6.0393e-02,5.6161e-02,1.8183e-02,2.1892e-02,2.4032e-02,
-2.2842e-02,3.5445e-02,6.7993e-02,8.0212e-02,2.1752e-02,
1.4544e-01,1.6226e-02,2.2011e-02,-9.0950e-03,6.8640e-02},
{-2.9446e-02,-1.1289e-01,-6.6831e-02,-1.0162e-01,-1.5468e-01,
-8.2224e-02,-8.9732e-02,-6.3546e-02,-1.0347e-02,-8.4430e-02,
-2.0622e-01,-2.4100e-01,-1.8061e-01,-1.3449e-01,-2.8051e-02,
-9.1003e-02,-4.6099e-02,-1.9917e-02,-4.7618e-02,-1.0963e-01,
9.0845e-02,3.2551e-02,2.7981e-02,-8.0957e-02,-2.9434e-02},
{1.1044e-01,6.3722e-02,2.5018e-02,3.5929e-02,8.8907e-02,
2.2904e-02,1.1783e-01,6.2018e-02,6.2014e-02,2.2115e-03,
4.8365e-02,8.5253e-02,3.7990e-02,4.8256e-02,-2.2100e-02,
3.0840e-02,9.3444e-02,3.8056e-02,2.4342e-02,-1.1285e-01,
5.8256e-02,7.4239e-02,3.0608e-02,3.8512e-03,-1.8976e-01},
{-2.1279e-02,-1.8652e-01,-1.5692e-01,-2.5260e-01,-2.6248e-01,
-4.0289e-02,-1.1076e-01,-1.7656e-01,-1.0556e-01,-7.3502e-02,
-9.9814e-03,-1.9199e-01,-2.4673e-01,-2.2409e-01,-2.2839e-01,
-7.5006e-02,1.9073e-03,2.2485e-02,-3.1751e-02,-6.2796e-02,
1.3979e-01,3.8221e-02,3.6945e-02,-3.3467e-03,8.3274e-02},
{7.2376e-03,-2.9640e-02,-8.4207e-02,-1.5307e-02,4.1709e-02,
1.3924e-02,-1.1320e-01,-1.4424e-01,-4.2072e-02,4.8878e-02,
2.1461e-02,-1.0061e-01,-1.9825e-01,-7.3572e-02,2.3005e-02,
-5.1016e-03,-9.2182e-02,-9.2128e-02,-2.1112e-02,2.0131e-03,
9.0721e-02,7.9873e-02,2.0354e-01,1.1198e-01,1.4832e-01},
{1.6747e-01,1.0882e-01,1.0669e-01,5.3956e-02,1.5560e-01,
3.8217e-02,5.4591e-03,3.5496e-02,8.3444e-02,8.0648e-02,
-8.6163e-02,-1.3628e-01,-5.3318e-02,-7.2691e-02,4.5113e-02,
-9.2146e-02,-5.8613e-02,8.3850e-03,3.7254e-02,-3.3539e-02,
-1.1924e-01,-2.9192e-02,-1.5200e-02,-6.6383e-02,-1.7912e-02},
{-4.4866e-02,-9.7314e-03,-8.7529e-02,-1.8239e-01,-1.8703e-01,
1.3642e-01,-7.0139e-02,-4.0127e-02,-1.0628e-01,-1.2962e-01,
2.9304e-01,1.0855e-01,1.6105e-01,-5.9842e-02,-1.1773e-01,
1.9653e-01,2.1278e-02,1.6532e-01,-3.6464e-02,-1.0195e-01,
1.6817e-01,-1.1067e-02,1.2273e-01,4.3570e-02,-1.4731e-01},
{1.3775e-01,9.7964e-03,-3.1424e-02,1.6348e-03,1.1506e-01,
4.0639e-02,2.3162e-02,-1.2507e-02,1.1667e-02,6.5864e-04,
-2.1365e-02,-4.4968e-02,3.8510e-02,5.9665e-02,8.0817e-02,
1.1239e-03,3.7496e-02,5.0117e-02,-1.7132e-04,5.6775e-02,
1.3756e-01,2.0222e-02,4.1953e-02,-1.3529e-05,-3.8530e-03},
{-4.1020e-02,-1.5423e-01,-1.4231e-01,-2.9682e-02,-1.2469e-01,
-4.3888e-02,4.9384e-03,-2.9971e-04,-1.5229e-03,-1.9189e-01,
4.4361e-02,1.4547e-01,7.7674e-02,1.2553e-02,-1.4454e-01,
7.4806e-02,1.4377e-01,5.5547e-02,-2.1732e-02,-1.2503e-01,
1.0946e-01,-7.3206e-02,6.3232e-03,-1.3647e-01,-1.6996e-01},
{2.3883e-02,1.9706e-02,-6.2958e-03,9.5407e-03,8.4539e-02,
-9.1195e-02,-1.0743e-01,-5.5806e-02,-1.2376e-02,6.8780e-02,
-2.5512e-02,-4.5120e-02,-1.7696e-02,7.3859e-03,-1.9021e-02,
-1.6387e-02,-3.3042e-02,-1.0715e-01,-2.3964e-02,-4.3207e-02,
1.8146e-02,4.5033e-02,3.1121e-02,1.9389e-02,7.5631e-02},
{-1.3473e-01,-9.4620e-02,-1.3084e-02,-2.5623e-02,-4.1839e-02,
2.2128e-02,-8.6745e-03,3.9245e-02,-3.2946e-02,-2.6645e-02,
-1.1820e-02,4.7010e-02,-2.6566e-02,-8.3124e-02,-4.5123e-02,
3.6938e-02,1.4834e-02,-1.0420e-02,-5.9536e-02,-1.5408e-02,
5.7632e-02,3.2197e-02,9.8051e-03,-4.6107e-02,7.5283e-03},
{-6.1210e-02,-1.2078e-01,-8.1547e-02,-1.2210e-01,-7.3355e-02,
-9.1127e-02,1.6386e-02,8.5893e-03,-7.5675e-02,-1.3941e-01,
7.7144e-02,1.5499e-01,7.4273e-02,-7.7325e-02,-1.8154e-01,
1.4339e-01,6.1826e-02,1.0336e-01,-5.8477e-02,-1.4511e-01,
1.4135e-01,3.3790e-02,-6.5563e-02,-5.1011e-02,-1.1042e-01},
{1.7842e-03,-5.5958e-02,-9.0308e-02,-1.0007e-01,-2.4802e-01,
-1.1859e-01,-1.0599e-01,-1.4698e-01,-6.9696e-02,-9.5822e-02,
-1.3634e-01,-5.5357e-02,4.5584e-02,-6.3566e-02,-5.4906e-02,
-9.5453e-02,9.3816e-02,1.2545e-01,2.7704e-02,3.1363e-02,
-1.3314e-01,1.1919e-01,1.0324e-01,-5.4685e-05,1.1176e-01},
{-1.3805e-01,-2.7641e-01,-2.8571e-01,-1.2543e-01,-1.9851e-01,
-1.0110e-01,-1.2633e-01,-1.1982e-01,-1.5814e-01,-1.7694e-01,
-1.1274e-01,-2.4921e-02,3.9901e-03,-5.0548e-02,-1.4051e-01,
3.4900e-02,-5.9658e-02,2.3021e-02,1.5908e-02,-2.2532e-03,
4.2359e-02,-6.4003e-02,-1.5763e-01,-1.2613e-01,-4.6453e-02},
{5.7670e-02,3.4826e-02,-7.1160e-02,-4.5620e-03,-5.4670e-02,
-1.1193e-01,-8.5794e-02,-2.2737e-02,-1.3076e-02,-9.6032e-02,
-1.3015e-01,-5.5787e-02,8.0947e-02,-1.9589e-02,-2.8412e-02,
-9.3286e-02,1.4026e-04,9.5875e-02,-6.2597e-02,3.9884e-02,
-7.1028e-02,3.0018e-02,1.2537e-01,-8.6568e-02,4.1580e-02}},
{{1.0616e-03,6.1167e-02,1.8480e-03,6.4695e-02,-1.1137e-02,
1.7127e-01,1.5974e-01,3.8951e-02,1.0737e-01,1.5833e-01,
1.0874e-01,4.2372e-02,-3.3410e-02,7.1874e-02,6.9270e-02,
-4.6195e-02,-6.0946e-02,-1.0149e-01,-7.9025e-02,-1.7927e-02,
-3.5168e-02,-6.5852e-02,-1.6842e-01,-1.3162e-01,-3.8338e-02},
{6.6855e-02,-8.0649e-02,-1.2215e-01,-2.1095e-02,7.2813e-02,
-3.4074e-02,-1.5260e-01,-6.0665e-02,7.7558e-02,5.3306e-02,
-1.2240e-01,-4.5990e-02,3.6494e-02,3.6013e-02,4.5121e-02,
-6.4073e-02,-2.3708e-02,3.1219e-02,8.0421e-02,1.6793e-01,
-2.6403e-02,5.7762e-03,1.7199e-02,1.1019e-01,1.4974e-01},
{-2.3482e-02,-1.7213e-01,-2.1907e-01,-1.7854e-01,-6.2642e-02,
-1.4070e-01,-2.8989e-01,-2.0651e-01,-1.0924e-01,-7.2334e-02,
-1.8684e-01,-2.3570e-01,-2.0282e-01,-1.3839e-01,9.6760e-03,
-2.6779e-01,-3.0377e-01,-2.9372e-01,-1.5296e-01,-1.3977e-01,
-2.5355e-01,-3.4949e-01,-1.5988e-01,-6.4280e-02,-3.1471e-02},
{1.4742e-02,-2.0087e-01,-8.5892e-02,1.3353e-02,6.3164e-03,
-4.6494e-02,-3.1002e-02,5.8731e-02,4.4276e-02,1.7231e-02,
-5.2430e-02,9.0343e-02,2.5379e-02,-7.9593e-03,-4.9082e-02,
4.2735e-03,7.8036e-02,2.0063e-02,1.0226e-02,-5.7637e-02,
1.0140e-01,5.4268e-02,-2.0222e-02,4.0580e-03,-3.0069e-02},
{-7.1010e-02,-1.5059e-01,-2.1046e-01,-6.4629e-02,1.1368e-01,
-3.7346e-02,-1.4156e-01,-1.8980e-01,-3.5906e-03,2.5839e-01,
-3.8477e-02,-1.9363e-01,-9.2150e-02,7.6800e-02,1.3507e-01,
-5.0743e-02,-1.8269e-01,-1.2783e-01,-4.8138e-02,1.8233e-02,
-1.8739e-01,-2.8854e-01,-2.7409e-01,-2.1904e-02,1.8823e-02},
{-3.9254e-02,-1.7074e-02,7.5796e-02,6.4875e-02,1.9944e-02,
-1.6432e-02,-1.6240e-02,-6.7075e-02,1.6323e-02,5.0275e-02,
6.5741e-02,-1.0106e-02,1.3074e-03,1.4455e-04,7.4223e-02,
-2.2428e-02,-7.7455e-02,-1.0317e-01,-1.5398e-02,5.2215e-02,
-7.5586e-04,-5.9042e-02,-9.4825e-02,-4.7133e-02,-4.2583e-03},
{-8.0509e-02,-1.6422e-02,-1.3411e-01,1.8860e-02,1.5442e-02,
-6.3949e-02,-1.0115e-01,-1.4470e-01,-3.0381e-02,1.2269e-01,
-7.9916e-02,-1.0500e-01,-3.0266e-02,8.3478e-06,5.1621e-02,
-9.8002e-02,-9.6307e-02,-2.3824e-02,3.7956e-02,7.7412e-02,
-9.8073e-02,-7.5539e-02,-3.8951e-02,1.8340e-02,8.8215e-02},
{-2.0289e-01,-3.0053e-02,-4.7410e-02,-1.0369e-01,-1.5311e-01,
-1.7756e-01,4.8701e-02,3.9238e-02,-9.0973e-02,-1.4384e-01,
-4.6256e-02,1.1307e-01,-1.0845e-02,-8.0734e-02,-2.7124e-02,
4.4632e-02,5.4506e-02,1.5435e-02,8.2696e-03,1.9184e-04,
1.1932e-01,1.7425e-01,1.1484e-01,4.8889e-02,8.2072e-02},
{7.5886e-02,9.6250e-02,3.8666e-02,-1.5287e-02,-6.2103e-02,
1.0205e-01,1.1520e-02,2.7345e-02,-1.0265e-02,4.7529e-02,
5.1235e-02,-2.0908e-02,-7.4075e-02,3.1705e-02,4.8055e-02,
-6.6942e-02,-1.1345e-01,-1.3663e-01,-9.6173e-02,-3.0098e-02,
-6.9661e-02,-8.2748e-02,-9.5563e-02,4.8051e-02,3.2219e-02},
{-1.4495e-01,-1.5541e-01,7.5381e-03,9.5989e-02,1.8662e-01,
-1.8589e-01,-2.7583e-02,1.7778e-01,1.9360e-01,8.4442e-02,
-6.0638e-02,9.4452e-02,1.2347e-01,-1.9097e-03,-1.6825e-01,
5.0202e-02,7.3524e-02,-1.2683e-02,-1.3943e-02,1.8381e-02,
3.7755e-02,9.0606e-03,-5.1994e-02,-1.1678e-02,-4.6545e-02},
{-8.0564e-04,-1.0883e-01,-1.1508e-01,-3.0898e-02,8.3029e-02,
-5.8095e-02,-1.3350e-01,-1.7626e-01,-1.9940e-02,1.4485e-01,
-1.2655e-01,-1.8225e-01,-1.2331e-01,-1.0148e-02,2.0976e-01,
-7.8133e-02,-1.9317e-01,-1.6489e-01,8.9219e-02,2.5832e-01,
-2.1743e-01,-1.9171e-01,-5.9179e-02,1.3189e-01,2.6463e-01},
{1.0427e-01,6.5752e-02,1.2049e-02,-5.4168e-02,-1.9617e-02,
5.6595e-02,-2.7271e-02,-1.8646e-02,3.1751e-02,-4.2718e-02,
4.1053e-04,-1.5151e-02,-3.9188e-02,-2.5976e-02,-5.8064e-02,
-3.9396e-02,1.2222e-02,3.0121e-02,3.3588e-02,-2.0473e-02,
1.1627e-01,7.4804e-02,2.5122e-02,6.8895e-02,1.5537e-02},
{-1.2229e-01,-9.4942e-02,1.0088e-01,1.5446e-01,1.5900e-01,
-1.4563e-01,6.9837e-02,1.9254e-01,1.5231e-01,6.4024e-03,
-6.4829e-02,1.1754e-01,1.5987e-01,5.8819e-03,-5.5445e-02,
6.0629e-02,1.2490e-01,1.9624e-02,5.6176e-03,-6.3331e-02,
1.6026e-02,8.6648e-02,8.9906e-02,2.5623e-02,1.7852e-02},
{3.8628e-02,3.3535e-02,-5.6038e-02,-2.9947e-02,4.9460e-02,
2.7636e-02,1.0036e-01,1.0070e-01,-7.0390e-02,-2.6067e-02,
1.1482e-01,1.0080e-01,7.5642e-02,-4.9776e-02,1.4381e-03,
3.4957e-02,1.2745e-02,9.0442e-02,-2.6586e-02,-2.7269e-02,
9.1186e-02,-8.0535e-03,-3.3198e-02,6.3815e-02,2.5767e-02},
{-1.9834e-02,-1.5332e-01,-1.7163e-01,-3.3702e-02,1.3443e-01,
-7.4329e-03,-1.1784e-01,-5.5812e-02,1.0283e-01,9.7509e-02,
-1.0988e-01,-1.2953e-01,-4.9755e-02,-9.0225e-02,2.8414e-02,
-1.0328e-01,-9.8887e-02,-7.9912e-02,-5.8305e-02,6.1928e-02,
-1.0802e-01,-1.5854e-01,-9.0762e-02,-3.2490e-02,5.7310e-02},
{1.1290e-03,-5.5030e-02,-4.2183e-04,8.3837e-02,1.0016e-03,
-3.0319e-02,-3.2993e-02,-1.1279e-02,1.1920e-01,3.8111e-02,
-6.4751e-02,2.2802e-02,3.2390e-02,1.4305e-01,5.0359e-02,
-1.3741e-02,-2.4157e-04,7.3712e-02,-1.5778e-02,5.0888e-02,
9.3903e-04,4.0696e-02,-6.9248e-03,5.9614e-02,-5.2122e-03}},
{{1.4059e-01,6.8027e-02,1.6545e-02,1.0463e-01,1.4285e-01,
1.9913e-01,1.3931e-01,7.1737e-02,7.5439e-02,2.4207e-02,
7.8486e-02,1.2949e-01,5.4581e-02,8.8973e-02,1.4909e-01,
8.8087e-02,1.0939e-01,1.0166e-01,1.1623e-01,4.9730e-02,
1.6497e-01,4.9269e-02,9.2020e-02,6.6502e-02,-1.5105e-02},
{-4.9164e-02,4.7920e-02,-1.7423e-02,7.7267e-02,2.0609e-02,
-8.7784e-02,8.9463e-03,-1.2237e-01,-7.3397e-02,-9.7116e-02,
-1.1758e-01,-6.7517e-02,-1.4791e-01,-1.2886e-01,-1.1961e-01,
-2.0721e-01,-1.2033e-01,-1.6777e-01,-6.0098e-02,-3.6473e-02,
-1.8097e-01,-7.2271e-02,-1.1733e-01,-6.8245e-02,1.4142e-01},
{5.9090e-02,2.0233e-02,-2.3018e-02,2.5540e-02,-1.0933e-02,
9.9999e-02,8.3337e-02,1.2074e-01,6.4628e-02,8.8796e-02,
1.0288e-01,6.9801e-02,2.8981e-02,7.7313e-02,1.4561e-01,
7.6778e-02,4.6240e-02,1.4403e-02,7.9960e-02,1.7162e-02,
1.5129e-01,1.1168e-01,3.1642e-02,4.1439e-02,5.6639e-03},
{-4.0561e-02,1.5036e-03,8.6585e-03,1.3136e-01,-5.3686e-02,
-3.2862e-02,-9.6809e-02,-5.6379e-02,-6.0435e-03,-1.3128e-01,
-2.3682e-01,-1.7243e-01,-2.4528e-01,-2.2584e-01,-1.9649e-01,
-1.8612e-01,-2.6979e-01,-2.9959e-01,-1.9057e-01,-1.7687e-01,
-3.1236e-02,-7.6912e-02,-1.4347e-01,3.1954e-02,-6.7301e-02},
{1.3251e-02,1.5207e-02,4.5558e-02,9.5856e-02,-1.7018e-02,
8.6571e-02,1.1555e-01,9.6279e-02,6.6422e-02,-1.1366e-02,
6.3077e-02,1.4476e-01,1.4761e-01,3.3860e-02,1.2041e-01,
7.5163e-02,1.1828e-02,1.1047e-01,9.0733e-02,5.8033e-02,
2.8567e-02,3.1815e-02,5.0526e-02,6.6173e-02,6.4383e-02},
{-1.3964e-01,-2.3282e-03,1.8584e-02,-2.5654e-02,-9.8037e-03,
-1.7573e-01,-1.2153e-01,-6.1259e-02,3.0429e-02,2.5394e-02,
-1.3620e-02,7.4980e-02,6.9817e-02,1.5958e-01,9.0455e-02,
-3.6367e-02,1.3817e-02,8.0984e-02,3.6968e-02,2.1705e-02,
-2.5304e-03,-1.4040e-02,1.6268e-02,4.6260e-03,-3.6507e-02},
{4.4247e-02,5.4637e-02,6.1455e-02,-2.0198e-02,1.1902e-01,
7.3101e-02,7.5870e-03,1.7352e-02,-1.6980e-02,-1.0327e-02,
-1.6948e-02,-5.8154e-02,-5.9959e-03,-6.2898e-02,-5.2703e-02,
-5.2271e-02,-1.1014e-01,-1.5509e-01,-1.6663e-01,-1.4030e-01,
-2.0062e-02,-1.2898e-01,-1.4647e-01,-1.7170e-01,-8.6933e-02},
{4.6724e-02,1.6514e-02,7.0098e-02,8.9058e-03,-6.0184e-02,
-4.5842e-02,-3.9359e-03,-4.2156e-02,-1.6516e-01,-1.0311e-01,
-1.2225e-01,-2.3593e-01,-2.7168e-01,-2.6288e-01,-2.7950e-01,
-2.1107e-01,-3.6138e-01,-3.3228e-01,-3.1222e-01,-3.1604e-01,
-1.1309e-01,-2.9542e-01,-2.2102e-01,-2.0686e-01,-2.6114e-01},
{8.2846e-02,1.5285e-01,4.5695e-02,1.2313e-01,1.1379e-01,
7.3028e-02,2.1740e-02,-2.3755e-02,6.4162e-02,3.4648e-02,
7.7422e-02,4.1548e-02,3.9008e-02,4.7625e-02,1.7349e-01,
4.1404e-02,6.5931e-02,5.2976e-02,5.9999e-02,2.3451e-02,
2.7455e-02,-1.1284e-02,4.0688e-02,-4.5312e-02,4.8798e-02},
{8.1641e-02,1.2060e-01,1.3683e-01,1.8095e-01,2.0693e-02,
8.3703e-02,3.0659e-02,2.6219e-02,1.7129e-02,5.3008e-02,
8.2522e-02,1.1401e-01,4.0945e-02,1.6628e-02,3.6270e-02,
-4.5126e-02,-3.1743e-02,-6.5012e-02,-7.6905e-02,1.6120e-02,
-8.5908e-02,-9.1651e-02,-1.0007e-01,-1.2727e-01,-5.2453e-03},
{-1.1654e-02,-1.7082e-02,2.4926e-02,4.1972e-02,1.2237e-02,
-2.7228e-02,2.3788e-02,8.7611e-02,9.9358e-02,1.8666e-02,
-1.6775e-02,5.8689e-02,8.5888e-02,2.0141e-03,-3.0464e-02,
-1.2451e-02,2.0761e-02,1.4451e-02,2.9265e-02,5.7769e-02,
6.6874e-02,1.0390e-01,9.7447e-02,2.1430e-02,3.1396e-02},
{-5.6379e-02,1.3977e-02,4.8510e-03,3.0277e-02,1.8733e-02,
-8.5712e-03,-4.2655e-03,-3.3485e-02,4.2291e-02,7.1326e-02,
2.7122e-02,-8.0827e-03,7.5918e-03,7.7362e-02,8.6348e-02,
-4.8950e-03,1.0446e-02,-3.9504e-02,2.4634e-02,1.7536e-02,
-3.5606e-02,-3.6921e-03,1.1280e-02,1.8547e-02,-1.1761e-02},
{1.2727e-01,3.0811e-02,1.3995e-01,7.5781e-02,1.1422e-03,
3.1806e-02,7.5520e-02,-2.2797e-02,-2.8744e-02,-5.3503e-02,
-1.1291e-02,-8.0368e-02,-1.4397e-01,-1.8451e-01,-1.0208e-01,
-1.3946e-01,-1.1841e-01,-1.7876e-01,-9.1026e-02,3.9397e-02,
-3.6639e-02,-4.4849e-02,-5.1716e-02,9.3249e-03,4.9463e-02},
{5.0270e-02,1.3158e-01,1.2388e-01,7.6662e-04,2.2783e-02,
-3.8685e-02,-1.7548e-02,-3.4592e-02,-3.8872e-02,-1.0047e-01,
-1.9812e-01,-2.3032e-01,-1.8684e-01,-1.8101e-01,-1.0555e-01,
-1.3675e-01,-2.2399e-01,-2.0754e-01,-1.6885e-01,-2.4604e-01,
-6.5507e-02,-1.6560e-01,-1.2318e-01,-9.1023e-02,-1.0679e-01},
{9.2511e-02,7.0518e-02,-2.3038e-02,-4.5537e-03,3.2489e-02,
7.3332e-02,2.6512e-02,4.4072e-02,-3.1345e-02,1.0352e-01,
1.9535e-01,1.7911e-01,1.3742e-01,1.7858e-01,2.2469e-01,
7.7321e-02,4.7262e-02,7.8938e-02,6.2629e-02,8.1022e-02,
6.8373e-02,3.5930e-02,-3.1630e-02,5.2091e-03,-3.5582e-02},
{-4.0959e-02,1.4557e-03,-4.5991e-02,-9.5423e-02,-1.5361e-01,
-1.1646e-01,-1.1941e-01,-6.9485e-02,-1.4813e-01,-1.0527e-01,
-1.1742e-01,-4.7274e-02,-6.9758e-03,2.5172e-03,-6.9353e-02,
3.5673e-02,1.1943e-02,-2.9525e-02,-2.1554e-02,-1.2101e-01,
2.9587e-02,-2.9921e-02,2.1059e-02,-7.6897e-03,-7.7122e-02}},
{{5.5744e-02,4.3682e-02,2.2946e-02,-2.3469e-03,1.3232e-02,
1.2468e-01,3.1794e-02,5.0415e-02,3.9019e-02,9.4029e-03,
1.5074e-03,-2.4531e-03,4.6351e-03,6.8727e-03,-4.7646e-02,
1.7678e-02,3.6571e-02,6.2080e-02,1.6296e-02,-5.8417e-02,
-1.8702e-01,-9.9151e-02,3.9134e-02,3.4136e-02,7.8212e-02},
{-1.0521e-01,-8.2791e-02,-3.8680e-02,-3.8005e-02,7.0515e-02,
-1.1289e-01,-9.0034e-02,-3.7464e-02,-4.9128e-02,1.5081e-01,
-1.4708e-01,-1.1437e-01,-1.0677e-01,2.0550e-02,1.9387e-01,
-2.0539e-01,-1.4050e-01,-2.0100e-02,1.0821e-01,1.9634e-01,
-1.2913e-01,-6.3584e-02,7.7193e-03,6.7052e-02,1.8439e-01},
{5.7016e-02,6.1268e-02,-6.5445e-03,4.4529e-02,-8.5216e-02,
3.6992e-02,3.8669e-02,9.7780e-02,7.2029e-02,-4.1513e-02,
1.1465e-01,4.4032e-02,-2.6570e-02,-6.2906e-02,5.6670e-02,
-4.5199e-02,-5.8154e-02,-7.0836e-02,-9.8692e-03,-7.8705e-02,
-4.1854e-02,1.2219e-02,-1.3337e-02,3.6960e-02,5.0519e-02},
{-6.5660e-02,-3.7200e-02,3.6902e-02,3.6821e-02,1.9825e-01,
-3.2581e-02,1.0115e-02,2.3183e-02,9.7514e-02,2.0356e-01,
3.8823e-02,2.1301e-02,3.3676e-02,7.3791e-02,1.1594e-01,
-1.0976e-01,3.8751e-02,5.2500e-02,5.6706e-02,7.3050e-02,
-1.4315e-01,-2.9717e-02,-1.0341e-02,5.5815e-02,2.1617e-02},
{1.3576e-01,1.4119e-01,1.5322e-01,7.8198e-02,5.4992e-02,
1.8931e-02,3.5724e-02,5.9611e-03,-3.7982e-02,-2.6963e-02,
-1.1205e-02,4.2706e-03,1.7450e-02,-1.6181e-02,-2.5231e-02,
3.4826e-02,2.7839e-02,4.2944e-02,-6.0021e-02,-7.0201e-02,
-3.0573e-02,1.8061e-02,8.6909e-02,1.3882e-02,7.5171e-02},
{2.0218e-01,2.0343e-01,2.1677e-01,1.8796e-01,2.0558e-01,
1.8904e-01,1.7730e-01,1.8398e-01,1.4280e-01,1.1071e-01,
1.5721e-01,1.0755e-01,6.6985e-03,2.9296e-02,-1.2876e-02,
7.0552e-02,4.6789e-02,-1.0172e-01,-1.5607e-01,-6.1264e-03,
-6.6934e-02,-1.1033e-01,-1.1545e-01,-2.0546e-01,-8.9316e-02},
{-1.3656e-01,-1.2951e-01,9.9920e-03,-2.0806e-02,2.1601e-02,
-1.2262e-01,-8.7525e-02,-3.2090e-02,7.4548e-02,5.8595e-03,
-5.0428e-02,-8.2533e-02,8.9911e-02,7.7649e-02,4.8325e-02,
-2.0599e-01,-1.1606e-01,-4.7264e-02,-4.5912e-02,4.1977e-02,
-1.5606e-01,-7.7537e-02,-6.2745e-02,-4.6807e-02,1.9593e-02},
{-1.0986e-01,-8.7311e-02,-1.5157e-01,-4.6337e-02,1.0694e-01,
-1.7679e-01,-1.9505e-01,-2.3766e-01,-1.3407e-01,7.2439e-02,
-1.9350e-01,-2.6135e-01,-2.9319e-01,-1.6103e-01,-1.5741e-01,
-2.4312e-01,-2.0109e-01,-3.2920e-01,-2.5783e-01,-2.3279e-01,
-3.0285e-01,-2.7521e-01,-3.7002e-01,-2.3266e-01,-7.5997e-02},
{2.8376e-02,3.1995e-02,2.5538e-02,4.8036e-02,7.2500e-03,
7.6987e-03,-4.9149e-04,2.8501e-02,1.5346e-02,-1.6428e-02,
-3.0724e-02,7.0287e-03,4.9484e-02,8.7988e-03,4.2785e-02,
3.6519e-02,6.3785e-02,1.0911e-05,1.0857e-01,1.4197e-01,
-1.3816e-01,-7.5135e-03,3.5028e-02,2.1983e-01,1.7393e-01},
{-4.1653e-02,8.1363e-03,-4.8901e-02,-2.7423e-02,1.9265e-02,
-2.8238e-02,4.8848e-03,-4.4062e-02,-4.3760e-02,9.1886e-02,
-3.9728e-02,-7.5831e-02,-2.3517e-02,4.8086e-02,7.1306e-02,
-7.4445e-02,1.9665e-02,4.0748e-02,9.0601e-02,6.4767e-02,
-1.0170e-01,-2.7932e-02,-5.3201e-02,-4.5369e-02,-7.3695e-02},
{-5.2933e-02,-3.4400e-02,-5.5157e-02,-7.2390e-03,-6.8362e-02,
-2.9620e-02,5.3413e-02,8.0645e-02,8.6821e-02,8.6696e-03,
5.4971e-02,6.8835e-02,4.3042e-02,6.2677e-02,1.3546e-01,
-3.1837e-03,-4.0842e-02,-1.9912e-03,1.1692e-01,1.8425e-01,
-1.3109e-02,3.6225e-03,4.2991e-02,1.9144e-01,2.7315e-01},
{6.6800e-02,1.1594e-03,2.4049e-02,-3.9131e-02,-2.6135e-02,
-3.0081e-02,-1.0534e-01,-1.1826e-01,-9.2644e-02,-4.8823e-02,
-6.8839e-02,-1.4987e-01,-1.9318e-01,-1.5584e-01,-4.2886e-02,
-1.0740e-01,-1.7148e-01,-2.0315e-01,-6.3965e-02,-3.2704e-02,
-1.0446e-01,-1.8634e-01,-1.4218e-01,-1.0328e-01,-1.3218e-01},
{3.2942e-02,4.5623e-02,1.6096e-02,-1.2133e-03,9.2901e-02,
-5.0256e-02,1.7669e-02,-5.0150e-02,-1.1086e-02,1.5322e-01,
1.9271e-02,-1.9918e-02,-4.4469e-02,2.0417e-02,1.7204e-01,
7.4537e-03,-3.4810e-02,7.2589e-02,1.0994e-01,1.2931e-01,
2.2959e-02,-2.0051e-02,1.2098e-02,-1.5219e-02,7.4698e-02},
{-3.8412e-02,-1.5498e-01,-1.6350e-01,-4.8152e-02,2.5446e-02,
-5.9079e-02,-8.9618e-02,-1.9338e-01,-8.1602e-02,2.6738e-03,
1.2387e-02,-7.6122e-02,-1.1721e-01,-1.3411e-01,-1.3548e-01,
-8.3220e-02,-2.3977e-01,-1.7678e-01,-1.5775e-01,-6.7031e-02,
-1.3628e-01,-3.1003e-01,-2.3371e-01,-4.8912e-02,2.5291e-02},
{-9.8695e-02,-4.8167e-03,-1.7821e-02,4.4158e-02,-2.3614e-02,
1.0581e-02,-1.9999e-02,-6.3590e-02,-4.3774e-02,1.9097e-02,
6.1260e-02,1.0595e-01,1.1386e-01,4.8873e-02,1.3312e-03,
1.2288e-01,1.4722e-01,1.1912e-01,5.3565e-02,6.3520e-02,
9.5263e-02,2.9161e-02,6.5459e-02,5.4153e-03,1.1473e-02},
{-3.1035e-02,-7.7981e-02,-2.2162e-01,-2.1323e-01,-1.1403e-01,
4.0041e-02,-9.3675e-03,-2.1898e-01,-2.9516e-01,-7.3068e-02,
-5.2070e-02,-1.3251e-01,-2.6211e-01,-2.5031e-01,-1.0993e-01,
-6.6287e-03,-2.7780e-01,-2.1649e-01,-2.1787e-01,-4.2714e-02,
-3.1514e-02,-1.0345e-01,-1.0667e-01,3.9054e-02,1.4462e-01}},
{{-2.2317e-02,8.7584e-02,1.0055e-02,-4.6788e-02,-4.2825e-02,
1.7134e-02,6.2829e-02,2.9351e-02,8.8273e-02,3.0064e-02,
1.2787e-01,1.8886e-01,1.0953e-01,7.1179e-02,-2.7240e-02,
1.3189e-01,5.1988e-02,2.5521e-02,-1.0079e-02,-3.4827e-02,
2.1203e-01,1.0975e-01,-3.4362e-03,3.9411e-02,8.2007e-02},
{-5.0085e-02,-1.4280e-01,3.9177e-02,4.8890e-02,6.2474e-02,
-7.9691e-02,2.7775e-02,9.5796e-03,3.6970e-02,-4.9220e-02,
-7.0417e-02,-5.7071e-03,6.4621e-02,-1.2804e-01,-9.3998e-02,
1.0268e-01,9.6173e-02,-2.1685e-02,-1.1413e-01,-1.2200e-02,
1.6833e-01,1.2793e-01,1.0744e-02,-4.9515e-02,3.8156e-02},
{-5.8137e-02,-8.3020e-03,-3.6186e-02,-8.7328e-02,-1.8100e-01,
-1.6868e-01,-2.1220e-01,-1.2563e-01,-1.0655e-01,-1.3270e-01,
-7.6576e-02,-2.5765e-02,-9.5064e-02,-1.9933e-01,-2.9786e-01,
-5.5432e-02,-1.6044e-01,-2.9913e-01,-2.2200e-01,-2.5164e-01,
-7.6662e-02,-5.6412e-02,-1.9081e-01,-2.5551e-01,-3.5775e-01},
{-3.3644e-02,-5.4096e-04,-2.2069e-02,2.6444e-02,-6.3780e-02,
-8.0088e-02,-6.9614e-02,-7.0797e-02,-6.1428e-02,-1.5870e-01,
3.0627e-02,-1.3291e-02,-1.1916e-01,-2.0563e-01,-2.3060e-01,
7.3351e-02,-2.7351e-02,-2.8634e-01,-3.3318e-01,-2.3507e-01,
7.3724e-02,5.4557e-02,-3.3138e-02,-2.0605e-01,-3.1245e-01},
{3.6040e-02,4.2882e-02,2.0178e-02,-9.1439e-02,-1.3724e-01,
-1.7737e-02,-9.0665e-02,-2.6429e-02,-2.1596e-02,1.4803e-02,
4.4958e-02,1.0485e-01,1.2134e-01,5.6266e-02,-2.8818e-02,
-4.0663e-02,-1.2916e-02,-7.3892e-02,-7.2439e-02,-2.8940e-02,
1.8455e-02,-6.0174e-02,-1.8885e-02,3.7822e-02,-1.4191e-02},
{1.0332e-01,1.6022e-01,7.2114e-02,7.9309e-02,5.9445e-02,
1.8700e-01,1.6667e-01,1.1953e-01,7.6862e-02,1.5925e-01,
7.1630e-02,1.4336e-01,1.0484e-01,1.3881e-01,8.4363e-02,
5.2665e-02,-2.6000e-02,-4.7836e-02,-5.0132e-03,-2.4342e-02,
-1.1793e-01,-6.7189e-02,-1.1403e-02,1.5827e-02,-8.1899e-02},
{5.6050e-02,1.3374e-02,1.9177e-02,-4.5145e-02,1.5653e-02,
-9.4335e-03,-1.0799e-01,2.4838e-02,-2.4077e-02,8.9964e-03,
5.3170e-02,-1.3214e-02,3.9098e-02,-5.2277e-04,-3.9952e-02,
-7.5642e-03,-1.9273e-02,2.0244e-02,-2.4403e-02,1.8402e-02,
7.0501e-02,2.3564e-02,8.9613e-03,5.9389e-02,7.3685e-02},
{-6.7013e-02,1.2262e-01,6.7691e-02,7.3064e-02,-1.3428e-01,
-8.6553e-02,5.9009e-02,-2.2357e-01,-3.4643e-01,-2.4267e-01,
-8.4786e-02,-1.7155e-01,-3.4162e-01,-2.8813e-01,-1.6307e-01,
-2.2333e-01,-3.7069e-01,-2.5240e-01,-1.9555e-01,-2.1306e-01,
-2.1258e-01,-2.1487e-01,-1.8150e-01,-3.4264e-01,-3.5555e-01},
{8.4425e-02,7.8610e-02,6.6165e-02,-7.9159e-02,-9.8987e-02,
1.3143e-01,2.5346e-02,-9.5763e-03,-7.3231e-02,2.2087e-02,
1.3460e-01,3.9813e-02,9.8140e-02,1.1762e-01,-1.1622e-02,
9.9371e-02,9.7764e-02,3.1654e-02,-3.9250e-02,-5.8274e-02,
1.9185e-01,1.3291e-01,3.2103e-02,-7.0368e-02,4.2517e-04},
{1.5427e-01,7.3582e-02,1.3250e-01,2.3032e-01,1.3143e-01,
8.9792e-02,2.0855e-01,2.0806e-01,1.3151e-01,-4.7347e-02,
1.7356e-01,1.8665e-01,1.1517e-01,7.9438e-03,1.0233e-04,
2.2591e-01,1.2053e-01,1.5573e-02,-1.3818e-02,8.2316e-03,
1.1561e-01,-3.8605e-02,1.9942e-02,-3.4088e-02,-1.1299e-02},
{4.8169e-03,2.6678e-02,7.5588e-03,5.7073e-02,-3.5920e-02,
6.4491e-02,-1.8927e-03,4.9366e-02,-2.4817e-02,-3.6291e-02,
-4.9360e-03,3.5442e-02,-2.3892e-02,4.0490e-02,-1.6047e-02,
5.7597e-02,6.8566e-02,6.1232e-02,9.9352e-03,-5.1362e-03,
1.0675e-01,1.9607e-01,1.2858e-01,1.0926e-02,-2.1312e-02},
{1.7123e-01,1.0558e-01,2.5771e-02,3.7444e-03,6.8415e-02,
3.8968e-02,6.3749e-02,2.7338e-02,1.1142e-02,-5.0951e-02,
7.9078e-02,6.4300e-02,1.9612e-03,-4.1322e-02,-5.5500e-02,
-1.6096e-02,-6.2550e-02,-1.2277e-01,-1.0837e-01,-9.5368e-02,
4.0015e-03,-1.0849e-01,-8.8660e-02,-8.3191e-02,-6.4410e-02},
{3.7961e-02,1.1369e-01,1.8944e-01,2.1737e-01,6.6165e-02,
6.4334e-02,1.2638e-01,2.3745e-01,8.5112e-02,1.2651e-02,
1.8827e-01,2.2909e-01,1.2953e-01,-1.3389e-02,1.0026e-01,
2.0889e-01,1.5832e-01,8.6792e-02,5.7517e-02,4.4338e-02,
3.6392e-02,2.9853e-02,1.4486e-02,2.1094e-03,-6.0483e-02},
{3.2030e-02,8.7683e-03,1.0508e-01,1.2847e-01,-4.9689e-02,
-5.6185e-03,-4.4079e-02,-1.8240e-02,9.0099e-02,-1.4314e-01,
2.4910e-02,-1.0206e-01,3.0950e-02,5.9487e-02,-1.1734e-01,
-6.2106e-02,-4.2015e-03,5.8532e-02,1.6931e-02,-2.5347e-01,
4.3515e-02,1.3737e-01,7.9028e-02,-5.0355e-02,-1.2934e-01},
{-6.7129e-03,4.4728e-03,-1.2234e-02,-2.1825e-03,-1.2024e-02,
-3.8584e-02,6.5097e-02,8.3290e-02,-2.1810e-02,-1.8873e-01,
1.4887e-02,9.4626e-02,-2.4616e-02,-1.0360e-01,-2.5365e-01,
1.3956e-01,3.0444e-02,-8.4811e-02,-8.0926e-02,-7.3386e-02,
6.1395e-02,-8.3875e-02,-6.7183e-02,-2.6650e-02,1.1152e-02},
{5.1686e-02,3.2464e-02,-1.1808e-01,-2.3415e-04,-8.6146e-02,
9.0349e-02,-9.9749e-02,-4.8396e-02,5.9787e-02,-4.4894e-02,
2.1518e-02,1.6629e-02,6.2202e-02,9.7457e-02,-1.0214e-01,
4.8192e-03,2.8887e-02,8.1951e-02,2.6721e-02,-7.8821e-02,
2.3168e-01,3.8830e-02,6.7856e-02,1.1519e-02,6.3059e-02}},
{{-1.5431e-01,-5.3454e-02,-5.3470e-02,-1.2539e-01,-1.4176e-01,
5.7920e-02,1.9737e-02,-4.6379e-02,-8.3375e-02,-5.5076e-03,
-1.0262e-02,2.6045e-02,-1.9329e-01,-3.3147e-02,5.9595e-03,
-8.7978e-02,-6.1019e-02,-9.6450e-02,-3.3095e-02,-3.1379e-02,
-1.3053e-01,-1.7815e-01,-1.1854e-01,-3.2909e-02,-1.5824e-02},
{1.3312e-01,1.2437e-01,-1.3833e-01,-5.0609e-02,-1.3439e-03,
2.3806e-02,-9.2101e-02,-9.9684e-02,-5.8012e-02,-1.1372e-01,
5.4485e-02,-8.9738e-02,3.6425e-02,-5.5057e-02,8.7030e-03,
4.7179e-03,-3.4010e-02,1.6869e-03,1.8835e-02,3.5712e-02,
-3.6098e-02,-3.5315e-02,-2.4228e-03,1.3457e-02,5.3256e-02},
{5.8365e-03,-1.2323e-01,-5.2459e-02,-9.8557e-02,-9.3542e-02,
-5.7247e-02,-8.1230e-02,-1.8457e-01,-2.0332e-01,-1.9368e-01,
3.8750e-03,-1.1878e-01,-2.1831e-01,-2.4929e-01,-2.4166e-01,
-8.1809e-02,-5.1038e-02,-1.2349e-01,-8.8887e-02,-5.2212e-02,
-3.5360e-01,-2.4308e-01,-2.1811e-01,-1.5895e-01,-1.5910e-01},
{2.6434e-01,-5.1955e-02,-4.6622e-02,8.9599e-02,-6.4188e-02,
1.0449e-01,-1.7209e-01,-2.6923e-02,2.2377e-02,-6.9529e-02,
-8.8777e-02,-1.5054e-01,9.9874e-02,-5.0766e-02,-5.3911e-02,
-2.1797e-01,-4.3885e-02,3.6824e-02,-5.7906e-02,-2.0408e-02,
-2.2748e-01,4.8919e-03,-4.7309e-02,-1.9656e-01,-1.2216e-01},
{-9.2789e-02,-4.7883e-02,-7.9644e-02,-1.0481e-02,6.2445e-02,
3.6454e-02,5.3462e-02,-6.1413e-02,-5.3660e-02,3.2837e-02,
3.4173e-02,-2.5594e-02,-3.7114e-02,-4.8615e-02,-3.0599e-02,
1.3747e-01,9.3112e-02,-8.3522e-02,-2.9663e-02,-5.7620e-02,
-7.3200e-02,-1.0345e-01,5.4614e-02,-4.9723e-02,-4.0561e-02},
{-6.5771e-02,-1.2638e-01,-4.8800e-02,-3.0473e-03,9.6452e-02,
-6.2154e-02,-5.1650e-02,-7.4258e-02,1.1200e-02,-3.1570e-03,
1.0140e-02,-2.1913e-02,-2.4720e-02,4.4013e-02,6.5017e-02,
4.3952e-02,-4.5980e-04,2.3069e-02,1.0892e-01,2.8811e-02,
6.6322e-02,5.1152e-02,5.5755e-02,5.2474e-02,7.2960e-02},
{-1.3408e-01,-3.3610e-03,3.8376e-02,-6.4530e-02,-3.7957e-02,
-7.9856e-02,4.1026e-02,9.0954e-03,1.7440e-02,4.7387e-02,
2.3554e-02,-1.9373e-02,3.3166e-02,3.5741e-02,6.5515e-02,
4.6122e-02,3.1342e-02,8.4845e-02,9.3749e-02,1.0070e-01,
9.0030e-02,5.2527e-02,1.1443e-01,1.3077e-01,9.9699e-02},
{3.0208e-01,1.0626e-01,2.7478e-01,1.7307e-01,1.8476e-01,
1.4433e-01,4.0144e-02,1.2162e-01,-6.3022e-02,1.2526e-01,
-3.7601e-02,1.6983e-02,1.0153e-01,-3.1077e-02,4.4168e-02,
-6.7562e-02,3.4020e-02,-4.5896e-02,-1.2143e-02,2.9767e-02,
-1.5854e-01,-4.0428e-02,-1.8321e-01,-1.5787e-02,-1.4821e-02},
{-1.6204e-02,-3.5545e-03,-5.9989e-02,-1.4098e-01,-1.7469e-01,
-5.1147e-02,5.7327e-03,-2.9156e-02,-8.3091e-02,-8.5665e-02,
-6.9178e-02,-6.8106e-02,4.5674e-02,-4.0216e-02,-7.4965e-02,
-4.6987e-02,-1.4417e-02,-6.3477e-02,-6.4284e-02,6.4853e-04,
-5.0743e-02,3.2421e-02,-5.5705e-02,-2.3402e-02,-6.4720e-02},
{1.6275e-01,4.0682e-02,-9.1996e-03,1.8613e-01,1.1693e-01,
-1.8350e-03,-4.5130e-02,1.2885e-01,9.7382e-02,-7.4837e-04,
-2.3434e-02,1.0646e-02,1.5910e-01,-5.4872e-03,1.0535e-01,
-4.8350e-02,-6.3839e-02,1.5394e-01,1.7391e-02,9.0146e-02,
-2.3442e-02,1.0935e-01,-7.0095e-03,1.6749e-03,7.0272e-02},
{1.8124e-03,-1.0638e-02,4.6351e-02,8.1048e-02,-2.9283e-02,
-1.2814e-02,2.8142e-02,8.9163e-02,1.6395e-03,5.2487e-02,
-2.0530e-02,3.6617e-02,2.0712e-03,5.5567e-02,5.2808e-02,
-8.7508e-03,1.2113e-02,6.6585e-02,-1.9287e-02,1.6507e-02,
-1.6345e-02,-4.9990e-02,-3.8774e-02,-8.9198e-02,-5.7430e-02},
{2.8360e-02,-1.9959e-02,1.2343e-02,-1.1991e-01,-4.9295e-02,
1.5205e-02,-6.5481e-02,-7.2597e-02,1.6824e-02,-6.9654e-02,
6.1851e-02,-5.3648e-02,-4.8514e-03,-1.1141e-02,-5.8048e-03,
-3.4839e-02,-3.3563e-02,-2.3663e-02,-7.9546e-03,-3.0900e-02,
5.4531e-02,9.6207e-03,-2.4824e-02,9.4649e-03,1.7434e-02},
{1.8746e-01,3.7621e-02,2.0977e-01,1.6067e-01,5.8403e-02,
9.3065e-02,-1.4740e-02,1.4637e-01,7.0680e-02,8.7575e-02,
6.0546e-03,1.2976e-02,1.4638e-01,9.8082e-03,1.8609e-01,
-1.2350e-01,8.8964e-02,6.6487e-02,6.0376e-02,1.4148e-01,
-1.8939e-01,-8.4295e-03,-1.0811e-01,-3.0971e-02,-1.7298e-02},
{-8.9300e-02,1.0587e-01,5.6454e-02,-9.6246e-02,6.7081e-02,
-1.1121e-01,1.4150e-01,-3.6993e-02,-6.2318e-02,4.1728e-02,
5.3825e-02,3.0770e-02,-2.1814e-01,4.8379e-02,3.5836e-02,
1.5101e-02,-1.1521e-01,-2.5748e-03,1.1307e-01,-3.1933e-02,
4.2316e-02,-1.5175e-01,-2.9162e-02,6.7098e-02,5.0904e-04},
{1.1294e-01,2.7036e-02,-3.6084e-02,8.9860e-02,3.9784e-02,
3.7630e-02,3.1300e-02,1.1921e-02,4.3110e-02,1.4180e-03,
9.5818e-02,1.1602e-01,5.8119e-02,9.5927e-02,-6.5151e-03,
7.9542e-02,7.1501e-02,5.6195e-02,5.6439e-02,7.7360e-02,
1.5305e-01,1.5707e-02,4.0004e-02,4.1252e-02,6.6893e-02},
{-2.1536e-01,-1.9873e-01,-9.1900e-02,-1.7960e-01,-1.2463e-01,
-2.2390e-01,-1.5292e-01,-9.4168e-02,-7.0198e-02,-1.4085e-01,
-1.6153e-01,-1.4986e-01,-5.2480e-02,-7.5434e-02,-6.4307e-02,
-3.7012e-02,-6.0501e-02,-1.5674e-02,1.3987e-02,-3.6319e-02,
-9.7736e-02,-1.7695e-03,-8.5750e-05,-3.2538e-02,-4.1977e-02}},
{{-1.8033e-02,3.2477e-02,-5.3979e-02,-1.0323e-01,-7.5932e-02,
7.0311e-02,1.5073e-01,3.2680e-02,-9.0684e-02,2.7542e-02,
7.4165e-03,-9.4016e-02,-1.9944e-02,4.6972e-03,4.8207e-02,
1.1404e-01,-4.6989e-02,-3.8672e-02,7.6368e-02,6.1091e-02,
-2.3998e-02,-3.8447e-02,-2.5388e-02,5.2780e-03,-1.7130e-02},
{2.7406e-02,3.7915e-02,4.2214e-02,1.2444e-01,1.0739e-01,
-4.0475e-02,-6.1856e-02,5.7852e-02,-8.2879e-03,1.6272e-02,
-4.1187e-02,-5.9131e-02,-4.0842e-02,-9.4846e-02,-1.0537e-01,
6.7796e-03,-3.1484e-02,-1.2487e-01,-1.8209e-01,-1.3360e-01,
1.5050e-01,8.4517e-02,-4.8475e-03,-9.7531e-02,-6.1887e-02},
{-7.1064e-02,-2.2916e-02,-7.4806e-02,1.6848e-02,-2.8741e-02,
-6.3966e-02,5.2924e-03,5.0785e-03,2.6634e-02,9.1232e-02,
4.3656e-02,1.4438e-02,1.5580e-02,4.3229e-03,5.8078e-02,
-8.0677e-02,-1.0929e-01,-7.3515e-02,2.7716e-03,-2.2862e-02,
-1.4474e-01,-1.4827e-01,-9.8054e-02,-3.5932e-03,1.7699e-01},
{-1.3958e-02,-3.9358e-02,-1.6124e-02,7.5348e-02,6.6936e-02,
-2.8537e-02,-3.4699e-02,5.6452e-02,1.4741e-02,-1.6947e-03,
-1.7834e-03,3.1495e-02,1.0076e-02,-4.5151e-02,-6.5109e-05,
1.4700e-01,8.5897e-02,-4.2302e-02,2.4966e-02,2.7369e-02,
1.0235e-01,1.1202e-01,1.1681e-01,9.2939e-02,1.0103e-01},
{-8.4279e-02,5.5758e-02,1.3082e-01,4.4793e-02,8.0393e-02,
1.8395e-01,1.0764e-01,-6.6477e-02,-3.3568e-02,-4.3823e-03,
-1.4579e-02,1.7553e-02,-1.5354e-02,-6.4520e-02,-8.2393e-02,
1.1055e-01,6.6763e-02,3.8010e-02,8.4906e-02,9.2355e-02,
8.7926e-02,1.9548e-02,5.1167e-02,1.1598e-01,9.1534e-02},
{-1.4557e-01,-2.1809e-01,-1.6176e-01,-1.3933e-01,-8.5740e-03,
5.1508e-02,-2.1858e-02,-4.4914e-02,1.2704e-02,1.6324e-01,
1.7537e-01,7.0548e-02,1.9496e-01,2.2459e-01,2.0644e-01,
-2.6470e-02,8.6796e-02,1.4592e-01,1.1431e-01,5.6500e-03,
-9.6677e-02,-7.1523e-02,3.2875e-02,1.4077e-01,4.9551e-02},
{-1.0098e-01,-9.1990e-02,-6.2694e-02,3.4944e-02,4.3178e-02,
-3.4321e-02,-3.4480e-02,-1.2466e-03,2.8790e-02,5.7456e-02,
-5.6740e-02,-8.4420e-02,-2.9644e-02,-5.8558e-05,7.6229e-02,
-2.4664e-02,3.7587e-02,-6.1915e-02,1.0631e-02,2.9458e-03,
-1.9620e-01,-1.3739e-01,-1.3254e-01,-1.2731e-01,-2.9562e-02},
{-6.6561e-02,-7.1491e-02,-2.4006e-02,7.0203e-02,1.2744e-02,
-1.2582e-01,4.5657e-03,-5.7926e-02,-1.1174e-01,-1.4419e-01,
-1.0623e-01,-4.4127e-02,-9.8776e-02,-6.8485e-02,-5.0542e-02,
1.1061e-02,-4.2999e-02,1.3134e-01,1.0826e-01,1.2851e-02,
5.6712e-02,6.9450e-02,1.5679e-01,1.3732e-01,8.9043e-02},
{4.2268e-02,7.8308e-02,-3.8717e-02,-2.8938e-02,8.6250e-03,
2.7655e-02,-3.0207e-02,-7.0348e-02,-2.3353e-02,5.5656e-02,
-7.9286e-02,-6.3487e-02,-4.8729e-02,-2.5472e-02,2.0962e-02,
-1.2650e-02,-4.9697e-03,6.9614e-05,-1.2133e-02,-8.2001e-02,
1.5813e-02,8.6288e-02,2.0481e-02,-1.4389e-01,-1.3425e-01},
{1.3546e-02,-2.6444e-02,4.0462e-02,7.4773e-02,8.6179e-02,
3.3747e-02,6.3634e-02,1.3985e-01,1.7625e-01,9.0435e-02,
-6.5612e-02,4.2984e-02,4.3079e-02,-2.4737e-03,-4.8910e-02,
-4.5045e-02,-4.7474e-02,-1.6346e-01,6.1917e-02,-3.4460e-02,
-2.1771e-02,-1.0201e-01,-1.3744e-01,-3.4130e-03,2.1751e-02},
{1.6311e-01,2.1882e-01,9.6460e-02,8.2283e-02,8.6725e-02,
1.5145e-01,1.9189e-01,2.8466e-02,6.7985e-02,-4.2953e-02,
1.9466e-01,5.7951e-02,-4.1161e-02,-9.8211e-02,-1.2312e-01,
2.2549e-01,7.4305e-02,-2.9831e-02,-1.6234e-01,-1.8557e-01,
2.6178e-01,5.7278e-02,2.6652e-03,-1.2859e-01,-2.9057e-01},
{-2.5217e-01,-2.8497e-01,-2.1265e-01,-5.5664e-04,1.1082e-01,
-1.8543e-01,-1.7044e-01,-6.6309e-02,4.2618e-02,1.1253e-01,
-2.0067e-01,-1.7523e-01,-2.7586e-02,5.4239e-02,1.6896e-01,
-2.0172e-01,-8.5300e-02,4.9224e-03,1.1039e-01,1.7336e-01,
-2.6171e-01,-8.6372e-02,-2.8423e-02,1.0190e-01,1.3978e-01},
{-1.6706e-02,-4.5619e-02,1.5834e-02,9.7338e-02,-5.7187e-02,
-9.6758e-03,1.0604e-02,2.9861e-02,-1.5752e-02,-1.8208e-01,
5.0874e-02,-2.2849e-02,-1.1954e-01,-1.8330e-01,-1.0193e-01,
2.6442e-02,-5.0519e-02,-1.1948e-02,-3.2545e-02,6.7971e-03,
2.2597e-02,5.4639e-03,4.3251e-02,2.0191e-02,-6.3860e-02},
{4.3036e-02,-4.2555e-02,-6.9039e-02,-1.2500e-01,-5.1894e-02,
-1.6074e-02,-1.0040e-01,-7.4108e-02,-1.2763e-01,-8.5823e-03,
-8.7077e-02,-8.1736e-02,-7.4451e-02,-3.2870e-02,8.8733e-02,
3.0405e-02,1.2800e-01,6.0553e-02,1.0616e-01,1.8279e-01,
6.5041e-02,1.4431e-01,1.3401e-01,-1.3442e-02,1.1146e-01},
{1.0962e-01,1.0524e-02,-2.1219e-02,6.5321e-02,1.0632e-01,
7.5284e-02,1.2074e-01,6.4944e-02,5.5210e-02,-4.8519e-02,
-4.7054e-02,1.0240e-01,3.2659e-02,-5.3677e-02,-1.7484e-01,
-1.0372e-01,-1.4332e-01,-8.2797e-02,-1.5813e-01,-8.4094e-02,
-1.0647e-01,-1.2710e-01,-1.8591e-01,-7.1083e-02,-5.9931e-03},
{8.9811e-02,2.9423e-02,9.8200e-03,-8.2741e-02,-3.8634e-02,
7.9995e-02,-7.3151e-02,-1.9264e-01,-1.4790e-01,-1.2954e-01,
-2.2336e-02,-3.3547e-02,-1.0270e-01,-5.3427e-02,-1.1467e-01,
-7.0434e-02,-1.4461e-02,5.0219e-03,-1.3228e-01,-1.3656e-01,
1.4853e-01,5.6136e-02,2.6931e-02,-5.9310e-02,-1.7853e-01}},
{{3.1335e-03,-1.9690e-02,-1.5096e-02,9.7915e-03,5.7656e-02,
7.0466e-02,7.7592e-04,2.2290e-02,3.6464e-02,1.4730e-01,
1.5546e-02,-6.6767e-02,-7.1383e-03,1.1817e-01,1.2133e-01,
5.2538e-03,7.3264e-02,1.2469e-01,1.9953e-01,5.8707e-02,
1.3656e-01,2.1579e-01,1.4431e-01,6.3483e-02,-1.8161e-01},
{-2.9802e-02,1.2644e-01,1.2204e-01,1.9961e-02,3.5376e-02,
4.1767e-02,4.4994e-02,5.4684e-02,4.3365e-02,-3.6827e-02,
1.5334e-01,1.0917e-01,1.1266e-01,-8.1221e-02,-8.7441e-02,
1.2487e-01,3.8735e-02,-3.0926e-02,-7.5596e-02,2.8480e-03,
-6.0367e-02,-1.0136e-01,7.9265e-03,-3.4235e-03,7.6088e-02},
{6.5115e-02,6.1010e-02,-1.1673e-02,-2.7060e-02,-1.4668e-02,
7.5457e-02,8.6289e-03,2.7301e-02,1.9391e-02,8.0820e-03,
2.4292e-02,-5.3829e-02,1.1990e-02,1.4068e-01,-1.6190e-02,
8.9991e-02,4.9965e-02,5.1586e-02,-7.2293e-02,-1.4600e-01,
1.7537e-01,9.4247e-03,3.1461e-03,-2.8870e-02,-6.4946e-02},
{-8.1537e-02,1.3187e-02,-3.1472e-02,-1.5348e-01,-1.7103e-01,
4.3677e-02,-8.4537e-03,-8.7303e-02,-1.4358e-01,-1.0199e-01,
7.7810e-02,-1.7230e-03,-1.0078e-01,-1.9179e-01,5.2198e-02,
3.7712e-02,1.0733e-02,-1.5752e-01,-4.5430e-02,1.1705e-01,
2.2142e-03,-1.0796e-01,-9.7551e-02,4.3935e-02,1.3725e-01},
{1.2849e-01,1.0522e-01,1.2457e-01,1.0378e-01,2.1530e-02,
9.4232e-02,8.2604e-02,7.4095e-02,4.3252e-02,3.6071e-02,
-6.0539e-02,-7.2859e-02,1.5025e-02,2.3469e-02,5.0716e-02,
-1.9748e-02,2.0306e-02,1.2372e-01,1.4110e-01,8.5071e-02,
3.4721e-02,2.1162e-01,1.3163e-01,-2.8347e-02,-1.0679e-01},
{1.6200e-02,6.8385e-02,9.7488e-02,1.0840e-01,1.6114e-01,
4.8776e-02,9.7571e-02,1.2177e-01,1.2738e-01,7.7803e-02,
-1.7251e-02,4.2713e-02,9.8760e-02,4.6136e-02,-1.3791e-01,
6.9102e-02,1.3401e-03,3.9149e-02,-1.2377e-01,-2.1892e-01,
4.1553e-02,1.5881e-02,-5.1086e-02,4.6059e-04,-7.1355e-02},
{-4.9143e-02,-7.9870e-03,3.4243e-03,-7.5740e-02,7.9755e-03,
-3.9319e-02,7.1921e-02,3.7009e-02,-4.6583e-02,-3.7945e-02,
6.9390e-03,5.6121e-02,-1.0540e-01,-1.2797e-01,-9.4951e-02,
-8.2918e-02,-1.1271e-01,-1.3936e-01,-1.6716e-01,-1.3650e-01,
-1.0491e-01,-8.7627e-02,-9.0827e-02,-1.3592e-02,-3.4679e-02},
{-1.4260e-01,-1.0947e-01,-5.9687e-02,-9.0338e-02,-2.2991e-01,
5.7527e-03,-1.5165e-02,-2.9330e-02,-1.9137e-01,-1.2256e-01,
1.0444e-01,1.0488e-01,-2.8186e-02,-4.6980e-02,1.0966e-01,
5.6110e-02,8.3584e-02,2.9851e-02,1.5172e-01,1.9280e-01,
1.0908e-02,-3.5857e-02,1.2230e-02,5.7547e-02,9.1625e-02},
{-5.4003e-02,-1.0116e-02,-4.0188e-02,5.0296e-02,1.9753e-02,
-3.8120e-02,2.0496e-02,-6.7074e-02,3.8556e-02,1.2003e-01,
-9.2771e-02,-6.8790e-02,-2.3942e-02,7.2436e-02,5.6638e-02,
-1.1236e-01,-5.4124e-02,9.4856e-02,6.7435e-02,-7.3647e-02,
-8.5842e-02,2.1366e-02,2.3960e-02,-9.9424e-02,-1.8283e-01},
{-1.4831e-01,-7.1078e-02,-3.1129e-02,1.5752e-02,1.8617e-02,
1.2286e-02,-3.5200e-02,-3.9413e-02,1.3108e-02,8.1753e-02,
-1.8757e-02,3.4751e-02,-3.7317e-02,2.6319e-02,9.6684e-02,
-5.8483e-02,-4.6182e-03,-2.9002e-02,7.7845e-02,3.1401e-01,
-6.2379e-02,5.8512e-03,2.1715e-01,2.6897e-01,2.2887e-01},
{-3.4280e-03,1.1961e-02,6.3443e-02,1.0314e-01,7.5486e-02,
-5.3753e-02,6.6548e-02,6.3750e-02,1.2099e-01,1.0467e-01,
-1.0879e-01,2.3029e-02,7.4795e-02,1.2499e-02,5.8818e-03,
-1.8692e-01,-1.2511e-02,-3.5791e-02,-1.9913e-02,-2.3046e-02,
-1.1857e-01,1.4841e-02,4.0346e-02,-3.9031e-02,-3.7157e-02},
{3.2581e-02,5.6333e-02,9.5370e-02,2.5986e-02,1.9922e-03,
9.0297e-02,6.5000e-02,4.0970e-02,8.3298e-02,6.3611e-03,
8.4500e-03,-1.4656e-03,5.7593e-02,7.3524e-02,-7.0732e-02,
4.0752e-02,5.0864e-02,-4.1218e-02,-1.6256e-01,-1.5754e-01,
1.8316e-02,-9.7292e-02,-1.2260e-01,-1.7135e-01,-1.4195e-01},
{-3.7549e-02,-3.7568e-02,-1.5339e-02,-4.9146e-03,-2.8214e-02,
6.4812e-02,1.0175e-01,-7.8341e-03,1.0464e-02,2.4142e-02,
5.4706e-02,1.3845e-02,-5.7219e-02,1.7726e-01,1.7107e-01,
-3.5073e-02,-5.7115e-03,1.2315e-01,2.1588e-01,2.8254e-01,
1.8767e-02,2.5688e-02,1.6821e-01,1.1247e-01,1.7622e-01},
{-5.4404e-02,-7.5011e-02,-7.2688e-02,-9.7937e-02,6.2769e-02,
-4.8727e-02,-9.2710e-02,-6.9854e-02,4.8544e-03,4.8946e-02,
-2.3738e-02,-8.2737e-02,3.6312e-02,-2.6464e-02,1.7498e-01,
1.2089e-02,7.2030e-03,2.6854e-02,-2.5335e-02,1.5657e-02,
-2.1900e-02,4.4107e-03,-3.2331e-02,-1.0939e-01,-1.8195e-01},
{2.6681e-02,1.2325e-02,8.4348e-04,2.0755e-02,3.0038e-02,
-2.7059e-02,-6.3526e-02,-1.3974e-02,-8.1493e-02,-1.7287e-01,
-1.0446e-01,-1.0672e-01,-1.2295e-01,-2.2618e-01,-1.5686e-01,
-2.0582e-01,-2.3947e-01,-2.4899e-01,-1.9519e-01,-5.9861e-03,
3.4346e-02,-1.6571e-02,1.0586e-01,7.6816e-02,-4.8199e-02},
{1.4502e-01,1.0447e-01,9.7210e-02,1.7129e-03,-1.0622e-01,
1.1343e-01,1.1694e-01,2.9077e-03,-6.0892e-02,-2.6277e-02,
3.3699e-02,4.3876e-02,3.5540e-02,1.3180e-02,-1.9650e-02,
1.1006e-02,9.1090e-02,2.4018e-02,2.6903e-02,2.7936e-02,
4.0318e-02,3.3985e-02,-3.2149e-02,1.1156e-01,1.6583e-01}},
{{3.1492e-02,-3.2492e-02,-2.8700e-02,6.8034e-02,2.5100e-02,
-4.0586e-02,-6.9526e-02,-7.1986e-02,-8.7908e-02,1.6555e-02,
-1.0366e-01,-1.1142e-01,-1.4208e-02,-1.3252e-02,9.8543e-04,
-1.3614e-01,-7.1110e-02,-3.9524e-02,-3.5075e-02,-7.9851e-02,
-2.8173e-02,-3.0281e-02,-1.3950e-01,-1.8793e-01,-3.5135e-03},
{-1.9177e-03,9.2827e-02,-4.9045e-02,-5.1000e-02,-6.7782e-02,
-4.1724e-02,1.1481e-01,-8.2542e-02,-1.9457e-02,-7.7017e-02,
-8.2156e-02,1.1850e-01,-1.1165e-01,5.0995e-02,-4.8318e-02,
-5.9740e-02,4.3144e-02,-1.7969e-01,-9.8103e-02,-1.6060e-01,
-1.1325e-01,-1.4614e-01,-2.1379e-01,-1.3677e-01,-2.2309e-01},
{4.5707e-02,3.8954e-02,3.6700e-02,-1.3091e-02,-3.7144e-02,
5.2801e-02,2.2211e-02,6.9077e-02,-1.7369e-02,-2.0034e-02,
-4.9337e-02,3.6713e-02,1.1978e-03,2.3327e-02,8.0658e-02,
1.7769e-01,2.0694e-01,8.2462e-02,-2.4480e-02,3.5185e-02,
7.9773e-02,1.2212e-01,1.7300e-02,9.1617e-02,1.4049e-01},
{-5.2912e-02,-5.0281e-02,1.3326e-02,5.6871e-03,4.3557e-03,
-7.7419e-02,-4.8753e-02,-2.1490e-02,1.7023e-02,1.2060e-02,
2.5684e-02,-6.3902e-02,-9.9534e-02,-4.9702e-02,2.5456e-02,
-9.0701e-02,-3.2569e-02,-2.3110e-01,-1.5487e-01,-6.0904e-02,
-1.3818e-01,-1.1260e-01,-8.5905e-02,-1.6763e-01,-1.8203e-01},
{-2.6948e-02,-5.7603e-02,-1.7233e-02,-1.0219e-02,5.5175e-02,
4.3563e-02,-2.8291e-02,-4.3223e-02,-7.3438e-02,5.7835e-03,
-1.2631e-01,-7.3219e-02,-1.3176e-01,-3.8265e-02,5.3911e-02,
-1.6429e-01,-1.5948e-01,-1.3979e-01,-1.7137e-01,-1.8927e-01,
-2.1153e-01,-2.4871e-01,-2.4514e-01,-2.9501e-01,-1.6946e-01},
{2.8359e-03,1.7493e-02,7.7844e-03,1.9145e-02,-4.5982e-03,
-7.5043e-02,-2.9268e-02,-1.0144e-01,-4.7633e-02,5.9188e-02,
-1.4693e-01,-1.9763e-01,-1.3539e-01,-9.2322e-02,-1.0472e-01,
-1.7949e-01,-1.2507e-01,-1.8260e-01,-1.6941e-01,-3.8417e-02,
-1.9176e-01,-1.9687e-01,-1.1713e-01,-1.3871e-01,-2.9523e-02},
{-1.8778e-01,-8.4802e-02,-9.8417e-03,-2.7078e-02,6.2710e-02,
-7.3306e-02,-1.7991e-01,-1.2778e-01,-3.5615e-02,-3.4141e-02,
-1.2611e-01,-1.4640e-01,-1.8219e-01,-2.3106e-01,-6.7150e-02,
-5.8512e-02,-1.8827e-01,-1.7007e-01,-1.7937e-01,-1.0078e-01,
-8.2469e-02,-1.3363e-01,-1.1931e-01,-1.6738e-01,-1.4935e-01},
{-7.8068e-03,8.2316e-02,-4.2007e-02,6.1701e-02,-5.5230e-02,
7.2427e-02,5.0318e-02,7.2619e-02,4.5470e-02,2.2509e-02,
1.2265e-01,9.3723e-02,9.3654e-02,1.2863e-01,9.3186e-02,
1.3727e-01,1.4018e-01,1.2950e-01,5.3672e-02,1.8285e-01,
9.6653e-02,1.7414e-01,1.6242e-01,8.5016e-02,2.2637e-01},
{1.8071e-02,1.4195e-02,6.3777e-02,4.0721e-02,5.2337e-02,
2.8610e-02,2.3859e-03,8.9066e-02,9.9013e-02,8.6532e-02,
4.4766e-02,3.6453e-02,4.7895e-02,9.0243e-02,4.1011e-02,
-2.0239e-02,4.6333e-02,7.9296e-02,7.8314e-02,6.4754e-02,
-8.3098e-03,7.1638e-03,-3.6968e-02,-1.0795e-02,1.4553e-01},
{2.2630e-02,3.2527e-02,-4.9059e-02,4.5120e-02,5.4342e-02,
-5.3304e-02,5.9312e-03,-4.8097e-03,6.8882e-02,1.3679e-02,
1.1450e-01,6.9859e-02,-9.8379e-03,-6.3823e-03,5.4452e-02,
-1.0298e-03,-5.8226e-03,5.8519e-02,2.6280e-02,1.5425e-02,
5.6053e-02,-1.9441e-02,1.2371e-01,1.4475e-01,5.3314e-02},
{-6.7926e-02,8.2804e-02,8.9152e-02,6.9458e-02,1.4971e-01,
1.9571e-02,-2.7978e-02,6.9663e-02,1.6385e-01,1.4784e-01,
-5.9412e-02,4.1444e-02,3.6603e-02,9.6126e-02,1.2787e-01,
-2.0513e-02,-4.5127e-02,7.2055e-03,-5.3808e-02,2.6289e-03,
-1.1956e-01,-1.4334e-01,-1.3931e-01,-1.0159e-01,-8.3278e-02},
{7.7792e-02,1.0166e-02,5.2560e-02,2.7041e-02,-4.4310e-02,
4.3685e-02,3.3154e-02,4.4963e-02,5.8977e-02,-2.2543e-02,
1.0682e-01,6.9813e-02,5.2658e-02,1.9042e-02,9.3871e-03,
1.8961e-01,1.7312e-01,1.2640e-01,1.0049e-01,9.7692e-02,
1.7693e-01,1.2105e-01,7.6311e-02,1.4575e-01,1.3425e-01},
{-8.6332e-03,8.5262e-02,6.7822e-02,1.0623e-01,8.5201e-02,
-1.8824e-02,9.4261e-02,8.5336e-02,7.9817e-02,-2.2629e-02,
5.2959e-02,2.8559e-02,3.2851e-02,7.0303e-02,8.5098e-02,
-1.2798e-03,5.6622e-02,3.3795e-02,1.1413e-01,2.1499e-02,
1.8922e-03,1.6309e-02,6.2645e-02,7.1905e-02,1.0272e-01},
{-4.2782e-02,1.7401e-02,-6.1150e-02,-5.0306e-02,-3.0873e-03,
-4.8886e-02,1.0279e-02,-1.7789e-02,4.4006e-02,-4.1608e-02,
-1.5540e-01,-9.3688e-02,-3.8732e-02,-7.5463e-02,5.3036e-03,
-1.6522e-01,-3.3207e-02,9.9952e-03,-4.7255e-02,-8.8558e-03,
-2.0238e-01,-1.6214e-02,-1.0898e-01,-3.4407e-02,-1.6851e-02},
{3.2674e-02,2.5964e-02,4.7970e-02,2.8765e-02,5.4555e-02,
-1.3772e-01,-7.5398e-02,1.1562e-02,1.0635e-02,5.1443e-02,
-8.2976e-02,-2.6125e-02,-1.0202e-02,3.4440e-02,9.1235e-02,
-5.1521e-02,-6.8796e-02,2.4361e-02,8.8162e-03,1.1373e-01,
-8.0023e-02,-3.4774e-02,-4.3066e-02,-3.7059e-02,4.5069e-02},
{-1.3815e-01,-6.9657e-02,8.9787e-02,9.9825e-02,4.5673e-02,
-7.9810e-02,1.7563e-02,7.1071e-02,7.4178e-02,1.2224e-02,
-1.4893e-01,-3.5968e-03,7.4934e-02,8.3241e-02,-1.9256e-02,
-2.0796e-01,5.2009e-02,-9.1003e-02,-4.4838e-02,5.7369e-02,
-1.3641e-01,-9.7347e-03,-1.0573e-01,-2.7092e-02,-5.1176e-02}},
{{4.7021e-02,3.0464e-02,1.2578e-02,-2.2859e-02,-4.5418e-02,
-3.0113e-02,1.9726e-02,-2.7735e-02,-2.1133e-03,9.7178e-03,
-1.3884e-02,-2.2742e-02,-6.2297e-02,-5.7213e-02,-3.9423e-02,
-2.7657e-02,-1.0479e-02,1.4766e-02,1.3753e-02,1.2193e-02,
-5.7609e-02,3.5953e-02,-2.8840e-02,-6.5406e-03,-3.9597e-02},
{-1.5417e-02,-6.8259e-02,-7.0053e-02,-4.4060e-02,-6.9753e-02,
-1.9560e-02,-3.3571e-02,-4.1670e-02,2.2570e-02,1.4624e-02,
2.1340e-02,-5.6093e-02,-2.7511e-02,-2.6244e-02,3.6041e-02,
2.9259e-02,-3.4134e-02,-3.7718e-02,1.3534e-02,3.3255e-02,
-2.5545e-02,-1.2545e-02,-2.4877e-03,-3.1523e-02,3.2353e-02},
{-5.4180e-02,-2.9562e-02,-5.7073e-03,-3.3541e-02,-6.0721e-02,
-7.4840e-02,-1.7925e-02,-4.1195e-02,-5.0299e-02,-5.0408e-02,
5.6907e-02,2.0510e-02,2.6451e-02,-7.0566e-03,1.0246e-02,
-4.1827e-02,-2.8392e-02,-5.0511e-02,-6.1805e-02,3.1365e-02,
-1.3679e-02,3.6396e-02,1.3408e-02,-1.5326e-02,-2.6026e-02},
{-3.4172e-03,-3.0686e-02,-5.0451e-02,1.0977e-02,-1.6456e-02,
-1.6737e-02,-3.4695e-02,-4.0883e-02,-3.3761e-02,1.3021e-02,
-6.6413e-02,-2.5029e-03,5.3916e-03,-3.1559e-02,-2.1657e-02,
3.9553e-03,2.1050e-03,3.1191e-02,4.4468e-02,-1.4691e-02,
-1.8488e-02,-1.6892e-03,1.2058e-02,2.2302e-02,9.2814e-03},
{-3.3751e-02,-9.8445e-03,3.5177e-02,2.4641e-02,-1.0286e-02,
1.1287e-02,-5.6286e-02,-5.7786e-02,-5.2017e-02,2.1127e-02,
-3.6711e-02,2.7494e-02,-2.0395e-04,2.3239e-02,2.1872e-02,
-3.9251e-02,-4.6087e-02,-4.5795e-02,2.6783e-02,2.2297e-02,
-3.9851e-02,-3.4066e-02,-3.5200e-02,-6.1023e-02,3.9421e-02},
{-2.3010e-02,4.0547e-02,2.3341e-02,1.8874e-02,-1.7390e-02,
2.4984e-02,1.7343e-02,2.6459e-02,-1.1175e-02,-7.3327e-02,
1.1192e-02,-3.7496e-03,-3.5653e-02,-1.3630e-03,-3.9873e-02,
-5.5655e-02,-5.8129e-02,-3.8660e-02,2.6607e-02,-2.5567e-02,
2.4930e-02,8.9761e-03,4.0897e-02,-3.4290e-02,-6.5316e-02},
{-3.5022e-02,-4.8274e-02,3.3794e-02,-2.0850e-02,-5.7797e-02,
3.5442e-03,-3.3429e-02,-3.5955e-02,-6.2084e-02,5.8860e-03,
3.6696e-02,-4.9154e-02,3.1554e-02,2.1701e-02,1.7133e-02,
1.9999e-02,-3.1706e-02,1.3421e-02,-6.9048e-03,-4.5680e-02,
5.0103e-03,-4.8193e-02,-7.3704e-03,-1.8560e-02,-1.5904e-02},
{-5.5180e-02,-1.8128e-02,-7.0878e-02,-7.0146e-02,2.1285e-02,
-9.9985e-03,-3.6758e-02,3.7909e-03,-6.0773e-02,-2.1007e-03,
-8.3599e-03,-6.1628e-02,2.1391e-02,-4.6115e-02,-5.4263e-02,
-5.4134e-02,-4.0543e-02,6.9446e-03,8.1953e-03,-3.7721e-03,
-5.4932e-02,-1.5022e-02,-4.5570e-02,-2.0414e-02,-5.3478e-02},
{-4.7444e-03,-1.6969e-02,-2.8237e-02,2.3388e-02,-2.2453e-02,
3.4973e-02,-4.9300e-02,2.5456e-02,8.0048e-03,-5.2156e-02,
1.8275e-02,-4.3418e-02,-3.4870e-02,-9.4195e-03,1.4018e-02,
3.3446e-02,-1.9411e-02,-9.4349e-03,-2.4859e-02,-3.1557e-02,
-2.6462e-02,-5.3814e-02,-3.8549e-02,2.3265e-02,7.7205e-03},
{-1.0660e-02,-4.4304e-02,-8.9839e-02,-5.8926e-02,-3.4210e-02,
7.9619e-03,3.0518e-02,-9.0728e-03,-5.1215e-02,1.7328e-02,
-7.1798e-02,-2.7726e-02,2.1917e-02,3.2708e-02,-4.3957e-02,
7.0781e-03,-3.9820e-02,-5.2348e-02,-8.5842e-03,-6.9691e-02,
-2.1862e-02,-1.6049e-02,-1.8757e-02,-4.0633e-02,-6.9708e-02},
{-2.0642e-02,-6.4307e-02,-3.5906e-02,-1.0585e-02,-6.4417e-02,
-3.4387e-03,1.8229e-02,2.7831e-02,2.9192e-02,-5.9155e-02,
-5.0363e-02,-1.4408e-04,-2.3454e-02,2.1526e-02,-4.1189e-02,
1.9333e-02,3.7937e-02,-4.9775e-02,2.6800e-02,1.2439e-02,
-6.0223e-02,-3.9014e-02,2.0561e-02,1.7934e-02,-5.2907e-02},
{-4.2459e-02,-6.9923e-02,-1.9792e-02,-8.4687e-02,-2.3622e-02,
-7.8494e-03,-4.7351e-02,-7.8267e-02,-6.5936e-02,-2.9144e-02,
-1.5818e-02,1.2443e-02,-6.2979e-02,-3.4464e-02,7.4111e-04,
2.3485e-02,-3.7385e-02,-3.0570e-03,-5.7382e-03,-4.5880e-02,
1.9031e-02,-2.3298e-02,-6.4759e-02,-4.0895e-03,-2.0992e-02},
{-1.0809e-02,-4.7344e-02,7.3010e-03,-2.3827e-02,-3.2549e-03,
-4.0258e-02,-7.7808e-03,-1.7677e-02,-5.8492e-02,-2.4830e-02,
-1.0155e-02,-4.4787e-02,-5.0808e-02,2.7631e-02,2.8456e-02,
1.4212e-03,-1.3930e-02,-4.1421e-02,-5.2731e-02,-3.3872e-02,
-7.0187e-02,-7.2602e-02,-2.5075e-02,6.5558e-03,-7.6200e-02},
{1.7317e-02,-1.9450e-03,-3.8728e-02,3.3940e-02,1.5775e-02,
-2.7366e-02,2.7388e-02,-3.3113e-02,-4.0049e-02,-5.9001e-02,
-4.8030e-02,-8.6479e-04,1.0591e-02,-9.0702e-02,-6.4663e-02,
-6.6863e-02,2.5702e-03,1.4326e-02,-5.4800e-02,1.7370e-02,
-8.5232e-02,-1.8986e-02,-3.0854e-02,-5.7313e-02,-6.3488e-02},
{-7.1953e-02,-8.5017e-02,-9.1227e-02,-5.6558e-02,-6.2763e-02,
1.9809e-02,1.0407e-02,-2.9610e-02,-3.3425e-02,-3.9621e-02,
6.4996e-03,1.5579e-02,-3.5427e-02,-4.1549e-02,-2.2541e-02,
-3.4861e-02,5.7005e-03,3.6561e-02,-1.3306e-02,3.0333e-02,
3.8863e-03,1.7979e-02,2.7487e-02,-7.1625e-02,2.5493e-03},
{-4.1251e-02,1.6781e-02,-3.8050e-02,-3.3065e-02,-2.0928e-02,
-4.4177e-02,1.3121e-02,-6.5493e-02,-7.1289e-02,2.2327e-02,
-3.7087e-02,2.1579e-02,2.4088e-02,2.5867e-03,-6.6281e-02,
-4.1885e-02,-6.2129e-03,5.9869e-03,-1.1582e-02,1.0381e-02,
-3.9147e-02,-5.2627e-02,4.1345e-04,-4.7775e-02,-3.9282e-02}},
{{-4.7773e-04,-6.0323e-02,-1.0525e-01,-5.6118e-02,1.7936e-02,
-8.6266e-03,-5.7931e-02,-1.6101e-01,1.7159e-02,6.8953e-02,
-1.0864e-01,-5.2149e-02,-4.9127e-02,-8.4064e-02,-5.2738e-02,
-2.1585e-01,-6.6458e-03,7.0475e-02,-7.3483e-02,-1.8579e-01,
-1.0838e-02,-1.3879e-02,1.6223e-01,1.3098e-01,-6.5478e-03},
{2.0206e-01,-1.4132e-02,-2.9541e-03,7.8897e-02,-5.9139e-02,
6.9011e-02,1.1112e-01,9.8027e-02,9.9252e-02,-7.0282e-02,
-8.2944e-02,-4.9592e-02,1.3663e-01,5.6769e-02,4.0041e-02,
-1.5347e-01,-5.1475e-02,-7.2396e-02,-5.5336e-02,-4.8284e-02,
-2.0648e-01,-1.9984e-01,-2.0565e-01,-1.7698e-01,-8.4185e-02},
{6.7966e-03,-1.3585e-01,-1.1568e-01,3.0673e-02,1.9742e-02,
9.2967e-02,4.1651e-02,-9.2850e-02,-2.5123e-02,3.5493e-02,
-4.5258e-02,2.0108e-01,1.6811e-01,-3.2406e-02,-8.3224e-02,
-5.6753e-02,4.9186e-02,1.7515e-01,1.0317e-01,-1.0841e-01,
-6.7262e-03,-1.0807e-01,-4.7058e-02,3.5510e-02,-6.7374e-02},
{1.5100e-01,-1.1117e-01,-6.0164e-02,-3.6675e-02,2.2764e-03,
3.3740e-01,7.5615e-02,-9.4097e-02,-7.3355e-02,3.9843e-02,
1.9945e-01,2.3966e-01,8.3360e-02,-2.2570e-02,2.0185e-03,
-9.6020e-02,1.4592e-01,2.1973e-01,9.1929e-02,4.7008e-02,
-1.3258e-01,-2.8386e-01,2.7589e-02,7.2888e-02,-2.1519e-02},
{-9.4837e-03,-1.1900e-01,-4.7906e-02,-4.3400e-02,9.6190e-02,
-5.2021e-02,-1.1258e-02,-7.3017e-02,4.1393e-03,1.4959e-01,
-2.0028e-02,5.1022e-03,9.1072e-03,-1.1150e-01,1.8714e-02,
8.2811e-02,3.5957e-02,7.8998e-02,-3.5035e-02,-1.0708e-01,
-2.9928e-02,7.9798e-02,4.7050e-02,1.2436e-01,1.0718e-01},
{7.3633e-02,4.5399e-02,1.5805e-02,-1.2833e-02,-9.6374e-02,
-3.2228e-01,-1.3654e-01,-8.7364e-02,-1.4562e-01,-2.8036e-01,
-3.7112e-01,-2.7065e-01,-1.2303e-01,-1.7747e-01,-3.1353e-01,
-1.8936e-01,-1.2919e-01,-1.3611e-01,-8.2391e-02,-1.0509e-01,
-5.6186e-02,-3.4889e-02,-1.6367e-02,-4.5867e-02,-4.6690e-02},
{9.1037e-02,-1.3210e-03,-6.4055e-02,-1.6610e-02,3.7064e-02,
3.7695e-02,2.3543e-02,-1.0256e-01,-6.0835e-02,-6.1197e-02,
-5.8394e-02,3.2849e-02,-7.8175e-02,-8.8982e-02,-1.3128e-01,
8.5869e-02,-3.8137e-02,2.7053e-02,-3.7243e-02,-1.0593e-01,
6.7095e-02,2.7833e-02,-9.5196e-03,9.1476e-02,-2.3173e-02},
{7.0129e-02,-2.6638e-02,4.5255e-02,4.9252e-02,1.6615e-01,
1.9002e-01,4.1799e-02,1.5513e-01,8.6431e-02,1.3135e-01,
1.7521e-01,1.6632e-02,8.4434e-02,1.4387e-01,1.2532e-01,
-7.6281e-02,-8.5994e-02,-7.8689e-02,-1.1415e-01,-2.0379e-02,
-4.3037e-01,-5.1628e-01,-4.4644e-01,-4.7100e-01,-4.4101e-01},
{-2.9190e-03,-7.6017e-02,-4.4077e-02,-5.6883e-02,5.6479e-02,
4.2752e-02,1.9136e-04,-7.2757e-02,-3.6999e-02,2.5474e-02,
-3.9083e-02,-4.7819e-02,-3.7840e-02,-3.0836e-02,-6.9842e-02,
-1.8161e-01,-5.0306e-03,1.3095e-01,-2.0192e-02,-1.9804e-01,
-3.6886e-02,-2.3327e-02,2.0785e-02,-4.5000e-02,-1.4476e-01},
{-1.1547e-01,-9.0148e-02,-5.4906e-02,-7.8183e-02,-2.1971e-02,
-9.3329e-02,-5.8387e-02,-2.7619e-02,1.9511e-02,-6.9399e-04,
8.6830e-03,-1.0500e-01,-4.1926e-02,4.2256e-02,9.2219e-02,
2.0759e-02,-5.3294e-02,8.4947e-03,8.6028e-02,1.1162e-01,
8.8539e-03,1.1023e-01,4.5509e-02,5.4815e-02,7.9277e-02},
{5.7980e-03,5.7725e-02,5.9916e-02,1.1211e-01,3.5628e-02,
5.1525e-02,4.7868e-02,8.2130e-02,8.0549e-02,2.3060e-03,
-1.8922e-02,-2.2966e-02,1.1040e-02,3.9214e-02,1.3612e-02,
-5.4847e-02,-6.3295e-03,7.5494e-03,-2.5000e-02,-1.1898e-01,
4.8305e-02,1.8909e-02,4.2282e-02,-2.1914e-02,-1.1116e-01},
{-7.6981e-02,-3.8895e-02,4.1585e-02,-6.3471e-03,-8.1154e-02,
3.3588e-02,7.2177e-03,3.2641e-02,-2.4322e-02,-1.1974e-01,
6.3269e-02,-8.9343e-03,-3.7810e-02,-2.4638e-02,-9.2019e-02,
-1.9125e-02,5.8101e-03,-7.0866e-02,-1.3979e-01,4.2857e-02,
-1.7720e-01,-1.3685e-01,-1.1639e-01,-1.8877e-01,-7.7882e-02},
{5.4430e-02,7.1828e-02,4.9980e-02,4.0430e-02,6.2227e-02,
5.1824e-02,1.1021e-01,1.7919e-01,6.8797e-02,7.8364e-02,
-2.3350e-02,-5.7164e-02,1.1288e-01,2.0163e-01,6.0774e-02,
-8.4764e-02,-1.0094e-01,-4.8326e-02,1.4016e-01,-1.4777e-02,
-6.9177e-02,-4.6706e-02,-1.0276e-01,-1.1064e-01,2.2228e-02},
{-6.2673e-02,-2.1443e-02,1.2445e-02,-3.8606e-02,-2.4338e-02,
-3.0179e-02,4.2179e-03,7.7337e-02,5.3210e-02,-3.8843e-02,
8.2734e-02,1.9179e-03,1.5686e-01,1.3179e-01,-7.9947e-03,
2.3776e-01,2.8697e-02,5.3262e-02,9.0091e-02,2.7380e-02,
1.3208e-01,2.9521e-02,-5.7856e-02,-1.2881e-01,-2.2983e-01},
{-2.1029e-01,-1.2310e-01,-3.8744e-03,-8.0926e-02,-2.4223e-01,
-1.4054e-01,-1.7162e-01,-4.5988e-02,-1.5799e-01,-1.0343e-01,
1.0009e-01,-1.2514e-01,-8.6635e-02,-3.9719e-02,-3.0370e-02,
5.3600e-02,7.9520e-02,-1.3399e-02,-4.0947e-02,-2.6398e-02,
1.6103e-02,1.9489e-01,1.4533e-01,9.1991e-02,1.2175e-02},
{-2.5700e-02,-4.7040e-02,-1.3113e-02,-4.0224e-02,-7.4571e-03,
-8.8596e-02,-1.0985e-01,1.3812e-02,-3.2082e-02,-3.2831e-02,
2.1288e-02,-1.2724e-01,-3.6316e-02,-2.1294e-02,5.4535e-02,
9.8254e-02,-6.4683e-03,-8.0588e-02,8.3424e-03,1.3666e-02,
1.3065e-02,-1.5266e-01,-1.0748e-01,-1.0270e-01,-5.3680e-02}},
{{1.3168e-01,7.4694e-02,2.4086e-03,-5.7809e-02,-2.9946e-02,
-5.0296e-03,-7.6390e-02,-1.0813e-01,-6.6434e-02,-5.6684e-02,
1.1864e-02,1.2940e-02,-3.0915e-02,5.5739e-02,2.8848e-02,
-3.5080e-02,7.6900e-03,5.9729e-02,5.6080e-02,1.2124e-02,
1.1956e-02,-8.9120e-05,4.4979e-02,1.6133e-02,-2.3569e-02},
{9.4366e-02,4.2351e-02,7.9582e-02,1.0898e-01,2.6610e-02,
8.0721e-02,-5.3635e-02,4.4443e-02,1.4626e-01,7.1395e-02,
-2.9359e-02,-7.4578e-02,-2.2130e-02,-3.9266e-02,-2.9244e-02,
-8.7356e-02,-1.2770e-02,-5.2746e-02,-2.1036e-02,-3.4034e-02,
5.1820e-02,7.8940e-02,4.4543e-03,6.4569e-02,-6.1670e-02},
{7.6483e-02,3.7700e-02,3.9178e-02,-4.5793e-02,9.7697e-02,
-1.2973e-01,-5.9609e-02,-1.1997e-01,-2.2198e-01,-6.1388e-02,
-6.9369e-02,-6.1853e-02,-7.6130e-02,-1.0040e-01,-1.0411e-02,
-2.1762e-01,-1.5018e-01,-5.2803e-02,5.1270e-03,-9.6592e-02,
7.5177e-02,2.5305e-02,1.3190e-03,1.4762e-01,1.6580e-02},
{1.7068e-01,1.2805e-01,8.5760e-02,1.2504e-01,1.4745e-01,
2.0250e-02,6.9484e-02,1.0206e-01,6.9778e-02,1.4232e-01,
-2.8919e-02,4.3147e-02,2.3215e-02,-2.5209e-02,1.7342e-01,
6.1756e-03,3.6538e-02,-3.8716e-02,-7.2561e-02,1.3602e-01,
-4.8635e-02,-1.9734e-02,-4.8796e-02,-5.4051e-02,-3.1486e-02},
{1.1252e-01,1.4559e-01,3.5269e-02,7.7946e-02,1.8752e-01,
4.4425e-02,6.2792e-02,-3.7956e-02,-1.5170e-01,-1.2974e-01,
-3.0217e-02,-1.4700e-01,-1.7897e-01,-2.1652e-01,-1.7921e-01,
-1.6345e-01,-2.2360e-01,-7.9416e-02,-9.5270e-02,-1.0979e-01,
-1.9828e-02,1.4422e-02,8.7351e-03,2.7187e-02,5.8825e-02},
{1.8329e-01,1.8177e-01,2.4650e-01,2.3810e-01,2.3989e-01,
1.0238e-01,1.3159e-01,3.3716e-02,1.2213e-01,1.8985e-01,
-6.0397e-02,5.0081e-02,1.0248e-02,5.7815e-02,1.6081e-01,
-5.5504e-02,-5.4310e-02,-1.9223e-02,-5.3274e-02,2.7783e-02,
9.8742e-03,-5.7409e-03,1.0120e-02,7.8496e-03,5.1768e-02},
{-9.4462e-02,1.2702e-02,3.9569e-02,2.6375e-03,1.0341e-01,
-7.8019e-02,7.5031e-02,7.3857e-02,5.9976e-02,1.3692e-01,
4.2527e-02,3.7879e-02,-8.1564e-03,6.4074e-02,4.5664e-03,
3.7349e-02,6.0566e-03,2.8036e-02,1.4001e-05,-5.4144e-02,
-4.2835e-02,-3.3188e-02,-2.6393e-02,2.5671e-02,-2.5241e-02},
{1.0433e-01,-4.1256e-02,-2.2177e-02,-2.1371e-02,-9.9847e-02,
5.4027e-02,3.3400e-02,-3.2728e-02,8.5204e-02,-8.4731e-02,
-5.7722e-02,8.1596e-02,6.2239e-03,4.7783e-02,5.8405e-02,
5.0187e-02,2.5703e-03,-1.5425e-02,6.5188e-02,3.1661e-02,
7.4563e-02,8.9949e-02,1.8849e-02,-4.9870e-02,1.4144e-01},
{2.0475e-02,-2.0628e-02,-3.7089e-02,2.4064e-02,-6.5185e-02,
-7.5687e-02,-5.2863e-02,-7.1667e-02,-4.5934e-02,-8.7646e-02,
-1.0090e-01,-8.6889e-02,-8.3129e-02,-5.1501e-03,-3.2447e-02,
-1.3039e-01,-5.0600e-02,-9.9488e-02,-6.5698e-02,-1.0222e-01,
-1.3450e-01,-6.9013e-02,-1.2071e-01,-9.6433e-02,-1.4049e-01},
{1.5844e-01,9.9344e-02,1.1048e-02,-1.5467e-01,-5.6073e-02,
1.2934e-01,1.4843e-02,2.3816e-02,-1.2061e-01,-1.4205e-01,
1.0581e-02,-4.7731e-02,-5.1085e-02,2.3356e-02,-1.2307e-01,
-3.5441e-02,-8.4448e-03,-8.8262e-02,-7.2451e-03,-1.9328e-02,
-1.4824e-02,5.8334e-02,-3.0038e-02,9.8878e-02,6.3728e-02},
{7.4386e-02,7.2483e-02,1.5470e-02,4.8008e-02,3.5700e-02,
-1.2344e-02,-1.1651e-02,9.6119e-03,1.9373e-02,6.2900e-02,
-1.5790e-01,-1.2394e-01,-1.2352e-01,-7.0150e-02,6.5189e-02,
-1.0766e-01,-7.1625e-02,-1.6051e-01,-5.9422e-02,-1.6003e-02,
-6.6727e-02,-1.5950e-01,-1.2742e-01,-1.6246e-01,-1.7824e-01},
{5.0123e-02,-8.1499e-03,1.5369e-02,9.8665e-03,-2.1387e-03,
-2.3576e-02,-7.3896e-02,-3.4656e-02,3.0266e-02,-4.5959e-02,
1.1984e-02,-6.1231e-02,-9.3242e-02,5.8944e-03,3.0947e-02,
-1.9868e-02,-5.0219e-02,-5.1474e-02,-7.5683e-02,-1.2153e-02,
3.1654e-02,-3.9513e-02,-1.8483e-02,-6.9429e-02,3.8797e-02},
{1.0729e-01,1.1389e-02,5.9973e-02,-4.7426e-02,-7.0123e-02,
3.1663e-02,-2.8154e-02,2.1491e-02,-6.5135e-02,-6.2023e-02,
8.1976e-03,-1.1630e-02,-5.6760e-02,-4.6540e-03,-1.1382e-01,
1.5520e-02,7.9265e-02,-5.8804e-02,8.6578e-03,-8.6380e-02,
1.5248e-02,8.7413e-04,-6.9814e-02,5.5961e-02,-1.4746e-01},
{-2.8358e-02,1.9903e-02,7.7699e-02,1.9534e-02,3.5325e-02,
2.8580e-02,-4.1924e-02,6.6722e-02,5.8969e-02,-6.5276e-02,
-1.5124e-02,-5.7713e-02,1.0169e-01,-7.6385e-04,-9.7290e-02,
2.2885e-02,-6.5037e-02,6.4517e-02,8.0516e-02,-1.2029e-02,
-1.7027e-02,-3.7475e-02,6.1327e-02,-1.5247e-02,2.8358e-02},
{1.0756e-01,5.6972e-02,4.4593e-02,-9.5040e-03,-5.2533e-02,
1.8172e-01,6.5998e-02,1.5024e-02,-1.4952e-01,-8.4277e-02,
2.7580e-02,2.8040e-02,-3.5952e-02,-1.9589e-02,8.3988e-03,
-7.4857e-02,-1.8732e-02,-6.8318e-02,2.8525e-02,-2.8199e-02,
6.5940e-02,9.4729e-02,-1.8677e-03,7.9260e-02,3.4037e-02},
{2.4394e-02,5.0503e-03,2.9134e-02,-4.3808e-02,5.5448e-02,
3.2982e-03,-1.4583e-01,-7.4797e-02,2.0775e-02,-1.1092e-01,
8.2009e-02,-8.0851e-02,-6.4318e-03,-2.5203e-02,-1.3374e-01,
-4.0145e-02,-6.1487e-02,4.2327e-03,-7.5092e-03,1.5340e-02,
4.0222e-02,7.3783e-03,-7.6817e-02,-8.8422e-02,6.7860e-02}},
{{2.0516e-01,8.0421e-02,7.7404e-02,1.1915e-01,1.0368e-01,
5.1994e-02,2.9243e-02,1.5272e-02,-2.2956e-02,2.7624e-02,
7.3878e-02,8.0100e-02,8.4884e-02,2.9057e-02,4.3702e-02,
8.3080e-02,8.0745e-02,4.7499e-02,-5.2027e-02,-1.2668e-01,
3.6840e-02,2.1163e-01,2.2053e-01,5.4838e-02,4.2858e-02},
{-1.4317e-02,-6.1172e-03,1.0736e-03,7.0609e-02,1.2292e-01,
-5.1358e-03,-6.8414e-02,-5.3947e-03,-6.7598e-02,9.9932e-02,
-4.5740e-03,-1.0321e-01,-4.9410e-02,-6.0894e-03,1.2653e-01,
3.9455e-02,-7.1340e-02,1.5365e-02,-7.4760e-03,2.0372e-01,
-4.1494e-03,-1.5516e-01,-4.5118e-02,-6.8948e-02,7.6847e-02},
{1.1850e-01,-2.8242e-03,1.6296e-02,-3.2317e-02,4.3400e-02,
1.4372e-01,7.1245e-02,3.4607e-02,1.1092e-02,1.2441e-01,
3.5718e-02,-2.0423e-02,-8.9803e-02,-1.4211e-01,-1.6706e-01,
2.6020e-01,3.3707e-01,2.5295e-01,9.1140e-02,3.3840e-02,
1.1706e-01,1.4248e-01,1.6263e-01,2.3607e-02,-2.2639e-02},
{-7.6527e-02,-1.4967e-02,2.9512e-02,4.2152e-02,8.5232e-02,
-1.1392e-02,-1.6354e-02,-1.0186e-01,-5.0170e-02,1.9346e-03,
-2.1440e-02,1.6723e-02,-4.5541e-02,8.1404e-02,2.4491e-03,
-6.1687e-02,3.4356e-02,-1.2055e-01,4.7966e-02,4.9695e-03,
-2.2627e-02,7.3388e-02,-8.7818e-02,1.1728e-01,3.8830e-02},
{7.4735e-02,1.8456e-02,-9.3345e-03,-4.3921e-02,2.0608e-02,
1.8147e-01,1.6102e-01,1.0303e-01,1.1415e-01,8.6507e-02,
3.4975e-02,4.5192e-02,3.2676e-02,-9.6750e-02,-2.0124e-01,
-4.1646e-02,-7.7814e-02,2.6650e-02,-1.3211e-01,-2.0412e-01,
-7.2866e-02,8.1266e-02,1.1482e-01,-8.8038e-04,-1.2946e-01},
{1.1502e-01,1.4582e-01,1.1379e-01,8.1321e-02,1.1972e-01,
4.5426e-02,1.6227e-01,1.1916e-01,1.3720e-01,1.2506e-01,
-8.9791e-02,2.2575e-02,8.9433e-03,9.5391e-02,1.0869e-01,
-1.5871e-01,-1.1821e-01,-4.6319e-02,1.0906e-02,9.3648e-03,
-1.0402e-01,-1.5619e-01,-1.8968e-01,-1.1933e-01,-6.9154e-02},
{1.5202e-01,1.9525e-02,1.1604e-01,3.4961e-02,7.4250e-02,
-2.2480e-02,1.9531e-02,6.8587e-02,6.1445e-03,-2.6277e-02,
-7.6120e-02,-8.3604e-02,-3.5811e-02,-2.5688e-02,-1.2714e-01,
-1.5574e-01,-1.5312e-01,-1.5716e-01,-8.7266e-02,-1.8262e-01,
-1.7128e-01,-2.0436e-01,-3.3054e-01,-2.3315e-01,-2.8939e-01},
{-4.0262e-02,-5.2392e-02,2.9350e-02,9.5653e-02,6.2721e-02,
-5.3090e-02,3.6830e-02,-9.9579e-02,7.7683e-02,1.6637e-02,
8.7907e-02,1.2629e-01,9.2944e-05,2.1899e-01,9.2459e-02,
7.5422e-02,2.2072e-01,1.2346e-02,2.5280e-01,1.1372e-01,
9.8259e-02,7.0033e-02,-5.3639e-02,2.6799e-01,5.7035e-02},
{7.7290e-02,7.6351e-02,-5.0428e-03,9.7554e-02,6.4361e-02,
2.3344e-02,4.0632e-02,2.1436e-02,-2.1836e-03,8.1591e-03,
1.3206e-02,-3.4029e-02,-6.7217e-02,-8.4358e-02,-4.3052e-02,
-8.5669e-03,-2.0984e-02,9.6202e-03,-1.0861e-01,-1.2652e-01,
-7.9900e-03,2.9932e-02,3.8074e-03,-2.6443e-02,-5.0964e-02},
{-5.0442e-02,-1.9168e-02,1.0133e-02,1.1658e-03,-4.4706e-02,
-2.0789e-02,-6.5327e-02,-7.7042e-02,-1.0872e-01,3.9451e-02,
-9.0190e-03,-2.1916e-01,-1.1156e-01,-2.1301e-01,-3.2062e-02,
-9.2327e-02,-1.3791e-01,-8.8873e-02,-2.5175e-01,-1.6349e-01,
-9.8313e-04,6.1271e-02,-3.1786e-02,-9.4152e-02,-2.3005e-01},
{2.7267e-02,5.4285e-02,7.7036e-02,1.1605e-01,1.2441e-01,
-4.8927e-02,3.2129e-02,4.9322e-03,-5.9339e-02,8.0006e-02,
-3.6333e-02,-6.4843e-02,-3.4918e-02,-4.5690e-02,4.6484e-02,
-5.2236e-02,5.4611e-02,3.6497e-02,-4.0120e-02,-1.4571e-02,
-6.4324e-02,-4.9070e-02,1.3013e-02,-2.3853e-02,-2.1363e-02},
{-1.1665e-01,-5.8988e-02,-3.0774e-02,3.5840e-03,-8.0532e-02,
-2.4516e-02,-1.8532e-02,-7.0762e-03,5.2100e-02,4.1426e-02,
-7.1571e-02,-2.2167e-02,-5.2057e-03,-4.2497e-02,-5.4962e-03,
-1.3171e-02,-8.6536e-03,-1.0867e-01,-4.4667e-02,-1.1584e-01,
-1.1024e-01,-5.2212e-02,-1.8820e-01,-1.3118e-01,-2.1501e-01},
{1.1982e-02,-9.6312e-02,-4.1090e-02,-4.1954e-02,-7.8570e-04,
2.2764e-02,-5.7560e-02,-1.0898e-01,1.2627e-02,8.3365e-02,
-6.2226e-02,-4.5925e-02,-1.1536e-01,-4.5918e-03,5.2822e-02,
-6.9021e-03,-7.7684e-02,-4.3624e-02,-4.9717e-02,-2.6958e-02,
-6.7917e-02,-4.3927e-02,-1.0912e-01,-2.0705e-02,-2.8278e-02},
{-7.6425e-02,-6.3086e-02,-3.5187e-02,5.6883e-02,1.6102e-02,
-2.9468e-02,-3.0326e-02,-4.9593e-02,8.8047e-02,4.4028e-02,
-5.8420e-03,-7.3685e-02,-1.1036e-02,5.5059e-02,8.6842e-02,
1.9269e-02,-9.7809e-02,-5.2595e-02,6.3955e-02,1.5470e-01,
1.2710e-01,-4.0085e-02,-2.6753e-02,-3.7826e-02,5.4556e-02},
{4.5836e-02,3.8439e-02,9.6713e-02,1.3269e-02,6.3781e-02,
-1.5428e-02,4.1454e-02,2.4503e-02,-9.4120e-02,-5.6650e-02,
5.9884e-03,-3.2833e-02,-7.8733e-02,-2.5635e-01,-2.7435e-01,
2.0882e-02,3.0434e-04,1.0740e-02,-2.4002e-01,-3.7739e-01,
1.8607e-01,1.2219e-01,9.4281e-02,-4.3303e-02,-2.1068e-01},
{2.5938e-02,-8.7952e-03,-5.7073e-02,1.1215e-01,1.3767e-01,
8.2894e-03,-2.8007e-02,-6.3282e-02,5.0586e-02,1.1784e-01,
-3.4044e-02,-6.9321e-02,-1.1113e-01,-1.7875e-02,1.0904e-01,
8.2348e-03,-9.0866e-02,-1.0127e-01,3.3171e-02,1.2883e-01,
6.4798e-03,-3.4954e-02,-1.3803e-01,-4.2861e-02,3.5223e-02}},
{{2.2697e-03,2.8788e-02,-1.1182e-02,-3.1327e-02,-2.5146e-02,
2.8590e-02,-3.6425e-02,2.2341e-02,3.2256e-02,-7.0973e-02,
-3.3868e-02,1.4292e-02,1.9208e-02,-4.1467e-02,-4.1322e-02,
3.1141e-02,-5.3949e-02,-2.5750e-02,3.4479e-04,-5.6417e-02,
1.4915e-02,3.2438e-03,-3.6854e-02,-3.0457e-03,1.6742e-03},
{-3.3673e-02,-1.4817e-02,-3.8367e-02,3.6552e-03,8.9115e-03,
-6.4035e-02,-5.1106e-02,-5.8169e-03,1.3783e-02,-5.3622e-02,
2.9643e-03,5.5841e-03,-4.0078e-02,-3.0201e-02,-4.2054e-02,
-4.5089e-02,3.6662e-02,-1.3023e-02,2.7521e-02,-5.3738e-03,
-8.4353e-03,3.2863e-02,-5.0175e-02,-5.8830e-02,-5.2066e-02},
{-1.4555e-02,-5.9748e-02,1.7461e-02,5.2168e-03,6.1201e-03,
-5.5389e-02,2.7153e-02,-5.0912e-02,-2.6040e-02,-1.3838e-02,
1.5841e-02,-6.7573e-02,-1.4777e-02,7.3726e-03,9.3557e-03,
3.2806e-02,-5.2035e-02,-3.2440e-02,-9.6940e-03,-3.1636e-02,
3.7423e-03,-3.2869e-02,-1.7063e-02,6.0592e-03,-5.0686e-02},
{4.2297e-02,-1.1793e-02,-4.2322e-02,-2.9374e-03,-2.3882e-02,
1.7209e-02,-2.6223e-02,-2.7574e-02,-5.9794e-02,-3.1929e-03,
-5.0987e-02,-4.8118e-02,3.0888e-02,-5.3736e-02,4.4567e-03,
8.5462e-03,-2.8267e-02,2.3813e-02,-7.7333e-03,-5.7743e-02,
1.9114e-02,-3.5111e-02,2.6681e-03,1.5686e-02,5.1685e-03},
{-3.8017e-02,-5.8070e-02,2.0986e-02,-1.7731e-02,-5.2216e-02,
-2.9231e-02,-1.4651e-02,-2.8942e-02,-2.8050e-02,-3.3755e-02,
4.0372e-02,-2.5609e-02,-7.3951e-03,-9.3133e-03,-4.5618e-02,
-1.5938e-02,-2.4280e-02,8.7283e-03,1.7227e-02,1.0903e-02,
-4.6474e-02,1.3477e-02,1.2563e-02,-3.0809e-02,4.3429e-02},
{1.7781e-02,7.7027e-03,-5.1216e-02,3.6920e-02,-2.5380e-03,
-3.1136e-03,-2.9575e-02,4.9496e-03,2.9386e-02,2.4973e-02,
3.0658e-02,6.2160e-03,1.9352e-02,-2.2821e-02,-4.9078e-02,
-2.3183e-02,2.8834e-02,4.7255e-03,6.9366e-03,-4.5902e-02,
-4.9668e-02,-1.8141e-03,-3.0254e-02,-2.5558e-02,-5.6334e-02},
{-3.5287e-02,-5.4084e-02,-4.2727e-02,-3.2471e-02,-1.1211e-02,
-1.5883e-02,-4.0978e-02,-1.8375e-02,-3.6564e-02,2.0582e-03,
-3.8065e-02,1.5868e-02,-2.4468e-03,-3.1802e-02,2.7486e-02,
-1.8183e-02,1.5088e-03,2.3695e-02,-1.9477e-02,-4.0838e-03,
-3.4038e-02,2.9111e-02,3.7762e-02,-4.6135e-02,3.9183e-02},
{-4.9702e-02,-3.4765e-02,-8.7628e-03,-5.0924e-02,-2.6205e-02,
2.8273e-02,1.2636e-02,-4.9106e-02,-5.7977e-02,-6.2522e-02,
-3.2609e-02,2.2451e-02,-1.8048e-02,-6.7364e-02,-6.3253e-02,
-3.8748e-02,-2.0057e-02,-5.1355e-02,-2.1976e-02,-3.7668e-02,
3.6406e-02,-4.6168e-02,1.4811e-02,-4.7681e-02,-2.1364e-02},
{2.0188e-02,3.1641e-04,2.3005e-02,2.4594e-02,-6.8122e-02,
-1.2377e-02,-2.4614e-03,-6.2238e-02,-5.6594e-02,-3.1524e-02,
-5.4175e-02,-2.2408e-02,-3.2146e-02,-5.9558e-02,-5.5294e-02,
1.5511e-02,-4.2530e-02,2.0235e-02,3.1459e-02,2.6479e-02,
2.1870e-02,-6.0963e-02,-2.3009e-02,7.9117e-03,-7.0163e-03},
{4.3260e-03,-2.9180e-02,-4.3466e-02,5.1008e-02,-4.4956e-02,
-3.2364e-02,-3.3855e-02,-3.5050e-02,-2.2746e-02,-1.2213e-02,
1.8219e-02,-1.0055e-02,-2.0837e-02,-3.7556e-02,-3.4677e-02,
3.2825e-02,-3.1254e-02,-6.5432e-02,-6.9772e-02,-6.3385e-02,
-4.1557e-02,-4.8307e-02,-4.9632e-02,-5.1352e-02,3.7076e-02},
{-4.1381e-02,6.0180e-03,-1.6580e-02,-7.0427e-02,-5.3802e-02,
1.4743e-02,-5.1338e-03,-1.9278e-02,-3.1199e-02,-6.8681e-02,
-5.5361e-02,-4.5214e-02,1.3946e-03,-3.2745e-03,-1.4154e-02,
-3.2970e-02,-2.4972e-02,6.2984e-04,-1.4901e-03,-4.8167e-03,
1.0023e-02,-1.9793e-03,-1.9679e-02,-3.1121e-02,-9.4892e-03},
{-4.8387e-02,-1.6419e-02,-5.2185e-02,-2.5605e-02,-7.8865e-02,
-8.5799e-03,-3.7663e-02,1.6169e-02,-3.1968e-02,-1.0501e-02,
-4.7588e-02,6.7467e-03,-4.3216e-02,-2.0699e-02,-1.4078e-02,
-2.8886e-02,6.8966e-03,-4.7513e-02,-6.3608e-02,4.8510e-04,
1.3915e-02,-4.4374e-02,-4.2386e-02,-2.8009e-02,-1.3451e-02},
{-2.9782e-02,-3.1534e-02,-3.6853e-02,-2.6487e-02,-3.9766e-02,
-5.5227e-02,5.5848e-05,1.6467e-02,-4.9791e-02,-4.8165e-03,
-6.8410e-03,2.5632e-02,-7.4912e-03,1.6915e-02,5.8817e-03,
1.1299e-02,7.4979e-03,-2.2026e-02,6.7062e-03,1.0455e-02,
3.0673e-02,1.5212e-02,-5.2035e-02,-6.3912e-02,-5.8786e-02},
{8.0024e-03,2.2721e-02,-3.6100e-02,3.5617e-03,-4.8463e-03,
-1.9473e-02,-6.0334e-02,-6.6765e-03,6.3441e-03,-4.4484e-02,
9.3011e-03,-2.0632e-02,1.4534e-03,-2.5962e-02,-2.1217e-02,
3.1253e-02,-1.2573e-02,-3.1066e-02,1.5578e-02,-6.2860e-02,
8.3780e-04,-5.0592e-02,-8.0297e-06,-5.3776e-02,-3.9975e-02},
{2.1460e-02,-1.4398e-02,-4.7757e-02,2.7717e-02,-1.9047e-02,
2.3333e-02,-1.8009e-02,-4.3263e-02,-5.7918e-03,2.2928e-02,
2.2192e-03,3.2734e-02,-2.1573e-02,-1.9364e-02,-1.9007e-02,
-5.6580e-02,-3.8957e-02,-3.3770e-03,2.0488e-02,-9.6955e-03,
-2.5519e-02,-2.5913e-02,-2.3467e-02,-4.0749e-02,-2.0284e-02},
{-2.3380e-02,-1.8147e-03,-1.8990e-02,4.2241e-02,-1.7915e-02,
-3.9848e-02,1.8015e-02,-3.7104e-02,-2.5984e-02,-6.0282e-02,
-1.4280e-03,-3.2585e-03,-1.0050e-03,-3.4466e-02,-1.8003e-02,
-2.5555e-02,-4.5137e-02,3.2113e-02,4.6915e-02,4.5406e-02,
-2.5216e-02,-2.7324e-02,-1.9069e-02,-2.9846e-02,-3.0071e-02}},
{{-1.2532e-01,-4.9111e-02,-7.3009e-03,-2.5478e-02,1.6386e-02,
-1.8443e-02,-8.4955e-02,-3.0424e-02,3.0987e-02,9.6821e-03,
2.0888e-02,4.3256e-03,-3.6411e-02,-2.8898e-03,3.7815e-02,
-2.9562e-02,-6.1676e-03,4.4433e-02,6.0853e-02,1.3844e-01,
1.9167e-02,8.2855e-03,-7.9604e-02,3.9496e-02,9.6914e-02},
{-9.2862e-04,-9.2432e-02,-3.2233e-02,-7.9597e-02,-7.3105e-03,
-7.3097e-03,-4.5627e-02,-6.8942e-02,-2.7070e-03,-5.0265e-02,
1.4901e-02,-1.6483e-02,8.6575e-03,-5.8050e-02,3.4333e-02,
-3.9999e-02,-1.0397e-01,-8.0514e-02,-4.8630e-02,-1.0156e-02,
-7.2548e-02,-1.1863e-01,-7.7068e-02,8.0749e-02,-9.5253e-03},
{-3.0566e-01,-1.3196e-01,-1.2984e-01,-5.0107e-02,-1.8242e-01,
-3.7925e-01,-4.1065e-01,-2.9363e-01,-2.1861e-01,-2.2576e-01,
-1.9131e-01,-2.2953e-01,-2.3702e-01,-2.1951e-01,-1.1191e-01,
-7.7604e-02,-1.6983e-01,-1.7189e-01,-1.1659e-01,-7.2959e-02,
8.6425e-02,4.5361e-02,8.0873e-02,5.1084e-02,7.1544e-02},
{-1.3755e-01,-1.1085e-02,-7.1748e-02,-2.0713e-01,-5.3390e-02,
-7.6569e-02,-9.7452e-02,-1.1223e-01,-5.0899e-02,-6.4464e-02,
-9.9043e-02,-1.7070e-01,-2.0920e-01,-1.3921e-01,-3.7212e-02,
5.5040e-02,-1.2602e-01,-1.3586e-01,-8.3263e-02,1.4798e-02,
8.0920e-02,-5.0022e-02,2.8974e-02,-2.4105e-02,1.8555e-02},
{-1.5686e-01,-1.4678e-01,-3.6454e-02,-1.7412e-02,5.9173e-02,
-3.0261e-02,-4.9101e-02,-8.5665e-02,-1.0645e-02,-4.1993e-02,
-5.5640e-02,3.4841e-02,-1.7580e-02,-1.0309e-01,1.1788e-02,
-4.1469e-03,2.7969e-03,-1.0282e-01,-5.3479e-02,9.8536e-02,
9.6200e-02,1.3501e-02,1.1086e-03,3.7056e-02,1.3163e-01},
{-7.3230e-02,2.3866e-02,1.4082e-02,-5.6103e-02,-6.5762e-02,
-1.5254e-02,2.3528e-02,5.0867e-02,2.5180e-02,4.5567e-02,
8.3518e-02,6.1769e-02,3.3884e-02,5.1162e-02,5.0958e-02,
6.1917e-02,4.6184e-02,-2.8276e-02,8.2749e-02,3.8937e-02,
6.4420e-02,5.4471e-02,4.5142e-02,1.0677e-01,9.7790e-02},
{-3.8981e-02,-3.5163e-02,-2.4608e-02,3.3345e-02,1.0981e-02,
-4.2049e-02,-6.0408e-02,-2.2146e-02,-6.8617e-02,8.3803e-03,
-9.4895e-03,-2.8532e-02,-1.5764e-02,-2.1749e-02,-2.1926e-02,
3.6793e-02,-3.5941e-02,-5.8534e-03,-5.0269e-02,6.7567e-03,
4.8858e-02,8.9316e-02,1.0298e-01,1.0290e-02,1.8737e-02},
{-1.6801e-01,-1.3713e-01,-1.9654e-01,-1.0431e-01,7.3234e-02,
-2.4965e-01,-2.1303e-01,-2.9051e-01,-3.8823e-02,5.3620e-02,
-1.8141e-01,-2.8806e-01,-2.9505e-01,-3.2233e-02,-2.2798e-02,
-7.6397e-03,-7.7976e-02,-1.4872e-02,1.1878e-02,-5.7853e-02,
8.4612e-02,8.0295e-02,7.0321e-02,1.2853e-01,9.1545e-02},
{1.6303e-02,5.7009e-02,7.6253e-02,1.9101e-02,6.0638e-02,
-7.5275e-02,-7.1815e-02,-7.4057e-02,3.2128e-02,-1.7696e-02,
6.6936e-03,-1.0321e-01,2.9724e-02,-2.9580e-02,-6.1507e-03,
-2.7048e-02,-3.6039e-02,-1.5482e-02,-4.6317e-02,1.6623e-01,
5.9172e-02,-2.2636e-02,-1.3575e-02,1.2937e-01,1.0324e-01},
{-2.0818e-01,-1.6616e-01,-2.2000e-01,-5.7176e-02,-2.6249e-02,
-3.9197e-01,-3.7803e-01,-2.2941e-01,-7.8925e-02,4.4776e-02,
-1.5601e-01,-1.0205e-01,-8.6297e-02,-6.9079e-02,8.3832e-02,
5.3974e-02,-4.3262e-03,8.8822e-03,7.8808e-02,4.0894e-02,
-1.0451e-02,-3.2715e-02,1.4443e-01,1.3594e-01,1.1798e-01},
{6.4166e-02,4.2005e-02,1.7302e-02,4.3431e-02,6.8472e-02,
4.7131e-02,8.2857e-04,4.7526e-02,3.5052e-02,6.4084e-02,
8.7503e-02,3.6947e-02,5.6273e-02,1.3198e-02,2.5554e-02,
2.8465e-02,1.0685e-01,6.7038e-02,5.0501e-02,4.8169e-02,
4.3780e-02,4.9539e-02,1.1710e-02,6.9981e-02,-2.2371e-03},
{-2.5870e-02,-5.0287e-02,2.2055e-02,5.0318e-02,-8.8857e-03,
-3.3632e-02,-3.2846e-02,-2.3241e-02,1.1527e-02,6.0221e-02,
-4.2731e-02,-3.5799e-02,3.2719e-03,4.3602e-02,7.5321e-02,
2.4616e-02,2.5838e-02,6.6240e-02,3.1910e-02,8.8167e-02,
4.8167e-02,4.8197e-02,5.8629e-02,8.6444e-02,2.1383e-02},
{-3.8073e-02,-1.6249e-01,-1.4778e-01,1.3054e-02,5.9976e-03,
-1.4177e-01,-1.0084e-01,-4.8743e-02,-8.3918e-02,1.3924e-01,
-7.3188e-02,-4.6540e-02,-1.1414e-01,6.9210e-02,2.2359e-01,
-4.7898e-02,5.2892e-02,3.3035e-02,1.9801e-01,1.6600e-01,
-1.8097e-02,1.9054e-02,2.4110e-01,2.6519e-01,2.1524e-01},
{-1.2120e-01,-2.2072e-01,-1.6104e-01,-1.6812e-01,7.7981e-02,
-1.6516e-01,-2.3663e-01,-2.5541e-01,-1.4581e-01,2.3061e-02,
-1.0016e-01,-1.8455e-01,-1.3804e-01,-7.0812e-02,9.3838e-03,
-5.5995e-02,-2.3487e-02,-7.3049e-02,-6.6961e-03,1.3770e-01,
1.0374e-01,6.1277e-02,4.9799e-02,1.7091e-01,1.4487e-01},
{-5.7972e-02,-4.4912e-02,-1.8378e-02,-4.8121e-02,-6.5827e-02,
-9.5179e-02,-4.3827e-02,-5.0063e-02,2.3915e-02,-3.7268e-02,
1.0013e-01,1.0974e-01,3.9464e-02,4.2910e-04,5.3882e-02,
8.9011e-02,1.2962e-01,9.7673e-02,7.3429e-02,2.0865e-02,
1.2450e-01,1.3681e-01,7.3573e-02,1.6011e-01,9.0721e-02},
{-1.1246e-01,-3.5559e-02,-4.3270e-02,-6.2334e-02,3.7925e-02,
-7.1989e-02,-3.4260e-02,-6.3546e-02,8.6636e-03,-5.2722e-02,
-6.7090e-02,-4.7161e-02,-5.5262e-02,-3.6306e-02,-6.1532e-02,
-5.3003e-02,-2.9131e-02,-7.2921e-03,-7.7651e-02,4.4371e-02,
-8.9427e-02,-1.0136e-01,-1.7230e-02,4.5201e-02,9.4818e-02}},
{{2.8414e-02,-9.6146e-03,-1.4531e-01,-8.5892e-02,-9.6011e-02,
-9.1835e-02,-2.0182e-01,-1.2943e-01,-8.6529e-02,-2.6427e-02,
-4.5097e-02,-1.5351e-01,-2.3792e-01,-1.8328e-01,-6.8709e-02,
-1.4220e-01,-2.4235e-01,-3.1521e-01,-1.8232e-01,-1.3738e-01,
-1.2684e-01,-2.6747e-01,-2.1098e-01,-2.7929e-01,-1.4009e-01},
{3.8075e-04,8.9302e-03,5.8166e-02,-1.7005e-02,-2.7079e-02,
1.4749e-02,1.2999e-02,7.2066e-02,-3.3053e-02,-1.8599e-02,
-2.8900e-02,3.9782e-02,7.3919e-02,1.1677e-02,-1.7173e-03,
-7.1122e-03,5.0160e-02,3.2204e-02,4.0886e-02,-1.1662e-02,
4.0602e-02,1.0594e-01,1.5115e-01,5.5401e-02,1.6365e-02},
{-1.3845e-01,-1.1733e-01,-7.2117e-02,-5.3905e-02,1.4170e-02,
-3.6325e-02,-1.0859e-01,-2.4549e-01,-1.2031e-01,-3.5461e-02,
-1.7477e-01,-3.3215e-01,-3.6643e-01,-1.7502e-01,-8.3045e-02,
-4.3531e-01,-4.7362e-01,-3.9532e-01,-2.1314e-01,-7.8185e-02,
-2.6767e-01,-3.4509e-01,-1.9309e-01,-1.0556e-01,-5.1210e-02},
{1.3570e-01,1.4159e-01,7.6956e-02,3.5220e-02,1.5897e-02,
8.5299e-02,8.6860e-02,5.0668e-02,3.5884e-02,4.9267e-02,
9.8637e-02,1.0006e-01,1.5729e-02,-2.1502e-02,1.6203e-02,
7.4719e-02,6.2351e-02,1.3057e-01,4.4454e-02,-4.2509e-03,
1.2792e-01,9.7365e-02,1.6165e-01,9.9108e-02,3.4551e-02},
{3.1919e-02,-3.1434e-02,-1.0678e-03,-3.3828e-02,9.1887e-03,
1.0256e-01,8.5480e-02,-2.3278e-02,-3.4514e-02,-1.7000e-02,
8.5216e-02,-7.1409e-02,-1.8373e-01,-1.4513e-01,-4.2022e-02,
-5.5474e-02,-2.3235e-01,-2.0433e-01,-1.3445e-01,2.0598e-02,
1.6316e-01,-2.0557e-02,-1.2406e-01,2.8701e-03,3.4753e-02},
{-1.2058e-01,-1.3002e-01,-1.3836e-01,-1.2658e-02,7.8970e-02,
-8.7035e-02,-1.2102e-01,-1.2230e-01,3.1845e-02,1.2531e-01,
2.3427e-03,-9.1677e-02,-9.1408e-04,1.1292e-02,5.3610e-02,
7.1119e-02,1.0224e-02,-7.4331e-02,-1.3203e-02,2.9966e-02,
4.1147e-02,-4.6404e-03,-8.7038e-02,-8.8345e-02,-8.1217e-02},
{5.2487e-02,5.5445e-02,3.4062e-02,6.6912e-02,1.3857e-03,
5.7893e-02,7.3813e-02,-1.1538e-02,-2.3005e-02,-3.8882e-02,
2.2815e-02,3.9843e-02,3.6612e-02,-2.1020e-02,-3.5860e-02,
4.0344e-02,-3.4727e-02,4.6619e-02,3.6330e-02,2.6800e-02,
7.8062e-03,1.0530e-02,7.3623e-02,8.3713e-02,5.7589e-02},
{5.6404e-02,7.4725e-02,5.3709e-02,5.2673e-02,2.1789e-03,
-5.9785e-02,8.1780e-02,1.7152e-02,7.1977e-02,-4.2624e-03,
-5.9340e-02,1.1652e-01,4.0980e-02,4.5441e-02,1.1433e-02,
-1.0559e-02,7.8119e-02,5.4349e-02,9.4602e-02,6.8337e-02,
-5.4800e-02,5.8463e-02,5.8113e-02,1.0251e-01,5.5557e-02},
{2.3213e-02,3.4477e-02,-3.4690e-02,-2.5790e-02,-2.9616e-02,
-9.2997e-03,-8.5702e-02,-4.2379e-02,-8.3626e-02,-1.4775e-02,
2.5662e-02,-7.6046e-02,-4.5560e-02,-5.9661e-02,-6.9256e-02,
5.3017e-02,-6.3468e-02,-7.2265e-02,-8.7094e-02,-1.0288e-01,
1.5911e-02,-2.9717e-02,-2.3105e-02,-4.0797e-02,-7.9056e-03},
{-8.7585e-02,-6.0714e-02,-7.3995e-03,-5.6967e-02,-3.7190e-02,
-5.1757e-02,-1.1563e-01,-1.5327e-01,-1.1266e-01,-1.6620e-01,
-1.2275e-01,-1.2255e-01,-1.6630e-01,-1.7626e-01,-1.7149e-01,
-3.1100e-02,-1.1823e-01,-1.1409e-01,-1.2266e-01,-1.8984e-01,
-4.5976e-02,-6.0914e-02,-1.2353e-01,-5.0524e-02,-8.4526e-02},
{8.1982e-02,9.8028e-02,1.0668e-01,1.1242e-02,1.4378e-02,
5.7774e-02,2.3265e-02,4.2182e-02,-4.5589e-02,-8.6034e-02,
1.0702e-01,2.7265e-02,3.3599e-03,-5.3196e-02,-3.9810e-02,
1.0520e-01,3.1563e-02,2.0853e-02,7.9580e-03,-6.5733e-03,
1.5622e-01,9.3385e-02,2.4347e-02,3.9719e-02,2.8934e-02},
{-4.0389e-02,3.0566e-03,-9.7187e-03,5.9749e-02,4.9485e-02,
-4.2134e-02,-7.4651e-02,3.0088e-02,4.8439e-02,6.3424e-02,
-3.9874e-02,-5.1965e-02,1.0682e-02,-4.0434e-04,7.4878e-02,
-7.3270e-02,-5.1944e-03,-1.8552e-03,6.7348e-02,3.1491e-02,
-7.9857e-02,2.9670e-02,3.9273e-02,5.9227e-03,3.4474e-02},
{2.8240e-02,7.2575e-03,-9.4866e-03,-1.2737e-01,-8.5554e-02,
-9.9096e-03,-3.8336e-02,-1.2810e-01,-8.6014e-02,-1.6030e-01,
-2.8945e-02,2.7282e-03,-9.8589e-02,-1.2085e-01,-6.0705e-02,
2.1160e-02,4.3520e-02,-2.2178e-02,-5.7595e-02,-5.1133e-02,
6.2817e-02,4.9854e-02,-1.0481e-02,-5.6303e-03,-7.7308e-02},
{3.8988e-02,1.3345e-01,8.3047e-02,1.9099e-01,1.8643e-01,
1.1837e-02,7.8511e-02,1.5086e-01,1.5027e-01,8.9129e-02,
-8.6311e-02,8.2877e-02,6.6895e-02,1.4033e-01,1.6331e-01,
-1.2455e-01,5.5914e-02,1.1985e-01,1.4743e-01,9.1362e-02,
-7.7336e-02,5.2180e-02,1.7706e-01,1.5835e-01,1.2908e-01},
{-4.3685e-02,1.8600e-02,-4.1528e-03,-2.7205e-02,2.4097e-02,
3.6942e-02,-1.5729e-02,-1.1050e-01,-2.6572e-02,-3.6794e-02,
-5.0090e-02,-1.3295e-01,-1.3789e-01,-8.4116e-02,-9.6467e-03,
-1.2928e-01,-1.0607e-01,-1.4334e-01,-1.0957e-01,-1.4343e-02,
4.0957e-03,-6.0603e-02,-1.0664e-01,-3.9847e-04,8.1264e-02},
{7.0788e-02,8.5614e-02,-8.2902e-02,-7.9100e-02,-3.1862e-02,
1.5231e-02,9.0999e-02,-2.7294e-02,-2.2593e-02,-4.7824e-02,
3.7615e-02,5.2636e-02,-3.8203e-02,5.2446e-03,-4.8684e-03,
-9.1494e-03,6.9578e-02,3.7844e-02,1.7450e-02,1.0503e-02,
4.3965e-02,9.4131e-02,7.9288e-02,8.1194e-02,5.9306e-02}},
{{1.5313e-01,9.2168e-02,1.0092e-01,-2.7526e-02,-3.3148e-02,
-4.8030e-02,-2.1066e-02,1.1395e-01,1.7442e-02,-3.4917e-03,
-3.5012e-02,1.0318e-01,1.2670e-01,3.1205e-02,6.9409e-02,
-1.4940e-01,-3.1356e-02,2.2232e-02,2.6007e-02,-2.6242e-02,
-9.1324e-02,-8.2055e-02,-4.9938e-02,-1.6485e-02,2.1787e-02},
{4.3335e-02,-2.8099e-01,-1.9620e-01,-1.3279e-01,-7.8503e-02,
7.7852e-02,-2.0134e-01,-2.6845e-01,-2.2086e-01,-1.9528e-01,
-5.6746e-03,-1.0125e-01,-1.4061e-01,-1.5819e-01,-1.1078e-01,
-2.4315e-02,-3.2377e-02,-6.8811e-02,-1.2338e-01,-3.3122e-02,
3.9295e-02,-3.2130e-02,-4.1178e-04,9.6634e-02,-1.4938e-02},
{-2.5829e-02,-5.6675e-02,5.0515e-02,1.0991e-01,5.8023e-02,
1.6683e-02,4.2949e-02,7.8654e-03,7.3290e-02,6.7355e-02,
4.6938e-02,1.3768e-01,1.6024e-01,9.3938e-02,1.2046e-01,
5.2787e-02,2.4111e-03,1.7167e-01,5.7144e-02,6.2347e-02,
-1.8201e-01,-5.0118e-03,-2.1080e-02,6.5189e-02,7.4581e-02},
{6.2942e-02,2.5290e-02,2.4819e-02,3.8029e-02,-8.9050e-02,
7.2345e-02,9.8457e-04,1.4161e-02,8.0798e-02,6.9063e-03,
8.0794e-02,2.1494e-02,5.8490e-03,4.8100e-02,1.5485e-02,
8.6200e-02,8.8824e-02,1.2675e-01,2.4578e-02,1.4006e-01,
4.8381e-02,-1.8066e-02,5.2313e-02,9.1991e-02,9.3228e-02},
{6.2132e-02,8.9810e-02,6.5725e-02,9.5709e-02,5.8681e-02,
1.0866e-01,1.1648e-01,9.1291e-02,7.4794e-03,-5.3782e-02,
-3.2314e-02,-3.3590e-02,8.8418e-02,5.7694e-02,-3.6666e-02,
-1.1275e-02,-1.2986e-01,-1.1386e-01,-4.4519e-02,-7.2673e-02,
-1.5112e-01,-1.5464e-01,-1.4478e-01,-1.1622e-01,-9.1062e-02},
{2.1265e-01,4.0911e-01,4.4463e-01,3.4387e-01,2.5103e-01,
6.6652e-02,1.9593e-01,1.7443e-01,2.1612e-01,2.6011e-01,
-4.3119e-02,7.6107e-02,6.9533e-02,9.1507e-02,5.1037e-02,
-4.1726e-02,-4.0698e-02,-7.3449e-02,-1.1624e-02,-6.0783e-02,
-3.6557e-02,-7.6765e-02,-1.6146e-01,-1.3550e-01,-1.7686e-01},
{-8.8282e-02,-1.0746e-01,-1.0653e-01,-1.4051e-02,-3.7134e-02,
7.7046e-02,-4.1592e-02,-3.9089e-02,3.2375e-02,-2.8909e-02,
1.4139e-02,1.3094e-02,6.1786e-02,5.1971e-02,3.3004e-02,
2.5002e-02,-1.1612e-02,2.0726e-02,3.5725e-02,-7.7404e-02,
1.8584e-02,1.0208e-02,-1.2526e-02,-1.2830e-01,-1.0610e-01},
{-2.0117e-02,-1.0428e-01,-1.6032e-01,-3.3778e-02,-1.2912e-01,
4.4182e-02,-2.3839e-01,-2.9020e-01,-6.8511e-02,-1.5078e-01,
1.0985e-01,-7.6097e-02,-1.2692e-01,-1.1668e-01,-1.1670e-01,
1.8620e-02,-5.6234e-02,6.5736e-02,-8.0212e-03,6.6015e-02,
6.1840e-02,-2.2859e-02,7.2510e-02,1.8944e-01,7.9821e-02},
{4.8109e-02,-1.9662e-02,-4.0574e-02,-2.8374e-02,-1.0015e-01,
2.9961e-02,-2.4735e-02,-5.8165e-02,-2.4362e-02,-8.5024e-02,
-5.9665e-02,4.4881e-02,1.7169e-02,-3.3045e-02,-1.3232e-01,
1.2611e-02,1.5354e-02,-3.6331e-02,2.6757e-02,-2.1900e-02,
-7.2060e-03,-3.2902e-02,-1.4514e-02,1.2432e-02,5.3880e-02},
{4.0174e-02,-1.7712e-02,-7.8461e-02,-6.3798e-02,-1.4657e-01,
-2.1718e-02,7.9241e-03,-1.1080e-01,-1.2276e-01,-4.0952e-02,
7.3199e-02,1.6010e-02,5.3165e-03,-4.9842e-02,-1.4653e-01,
6.1234e-02,7.8592e-02,-6.0689e-02,-1.0739e-01,-1.3555e-01,
-3.4473e-02,2.5914e-02,-7.1049e-02,-1.7580e-03,-1.9142e-02},
{1.0082e-01,-5.6161e-02,-6.0523e-02,-1.2187e-01,-1.3895e-01,
1.2699e-01,9.0776e-02,-3.2190e-02,-1.1893e-01,-1.4893e-01,
1.6153e-01,6.6760e-02,2.1998e-02,-4.9829e-02,-9.4950e-02,
2.1385e-01,1.1900e-01,4.5521e-02,-2.3935e-02,-7.0908e-02,
1.8465e-01,1.4994e-01,8.7222e-02,1.9163e-02,-8.2984e-03},
{5.7467e-02,7.2027e-02,1.0249e-01,1.2847e-01,7.8827e-02,
6.6933e-03,-4.0131e-02,-2.1340e-02,-6.6597e-03,5.6146e-02,
-7.6165e-02,-9.6325e-02,-5.2380e-02,-4.7144e-02,8.5008e-03,
-1.1269e-01,-9.7883e-02,-6.2548e-02,-2.7249e-02,-2.1614e-02,
-1.4563e-01,-1.8508e-01,-4.7219e-02,-1.3474e-01,-1.7357e-02},
{-5.7940e-02,-5.7738e-03,-1.5594e-01,-1.2323e-01,-1.0564e-01,
6.3855e-02,7.5595e-02,1.6986e-02,-4.5282e-02,-1.2756e-01,
1.2771e-01,9.1095e-02,7.6237e-02,9.1573e-04,-9.7890e-02,
1.1621e-01,1.4265e-01,3.3232e-02,8.4961e-03,-1.5724e-02,
5.9566e-02,1.6399e-01,1.1089e-01,6.0427e-02,-5.4892e-02},
{9.6306e-02,4.0290e-02,5.4570e-02,5.3559e-02,1.9219e-01,
9.5725e-02,-1.0242e-01,-7.1626e-02,1.0348e-01,1.4900e-01,
1.3142e-01,-1.7722e-02,-7.3012e-02,6.3889e-02,1.3024e-01,
5.4375e-02,9.9424e-02,3.0063e-02,-2.2537e-02,-1.5310e-02,
5.7642e-02,5.1445e-02,3.4026e-02,8.4268e-03,-9.4216e-03},
{-1.0207e-01,-1.0520e-01,1.5239e-02,8.1317e-02,7.2643e-02,
-1.2395e-01,-1.0660e-01,-6.1319e-02,-4.2230e-02,-1.1860e-02,
6.3979e-03,4.3428e-02,3.0757e-02,-2.0076e-02,-1.5831e-01,
4.9685e-02,-6.6442e-03,-4.7254e-03,4.2793e-02,-4.4340e-02,
-9.7426e-02,-6.1347e-02,4.5604e-03,4.3435e-02,4.5730e-02},
{4.6254e-02,-8.1463e-02,-2.3591e-01,-1.2976e-01,-4.6278e-02,
9.2002e-02,-1.0222e-01,-2.2530e-01,-1.5194e-01,1.1343e-02,
1.5680e-01,5.4578e-03,-1.3241e-01,-1.2847e-01,-8.1099e-02,
7.3936e-02,-2.0751e-02,-6.9644e-02,-4.9890e-02,-1.5248e-01,
1.4664e-01,-2.6764e-02,4.6235e-02,-2.7099e-02,-2.6038e-02}},
{{5.6900e-02,3.1769e-02,-7.6333e-02,-9.6066e-02,-6.6681e-03,
5.9002e-02,-5.7204e-02,-1.2433e-01,-5.4124e-02,6.5612e-02,
2.2347e-02,1.8116e-02,-3.6346e-02,6.8158e-02,1.4201e-01,
5.9126e-02,-1.7381e-03,-4.3195e-02,-9.4603e-03,-2.5966e-02,
1.1880e-01,4.7218e-02,3.3993e-02,5.3040e-02,4.5534e-02},
{2.7107e-02,-9.1856e-02,-9.2471e-02,-4.1062e-02,4.5927e-02,
-3.3090e-03,-1.1043e-01,-1.4230e-01,-3.0111e-02,-1.5747e-02,
2.3472e-02,5.3364e-03,-3.0861e-02,-1.1369e-01,-9.0214e-02,
-1.3796e-02,1.4177e-02,-4.6164e-02,-3.7272e-02,-3.6425e-02,
-3.9511e-02,-1.4926e-02,-3.5557e-02,-6.0376e-02,3.8122e-02},
{1.7168e-01,-3.0081e-02,2.7868e-02,5.9768e-02,1.4125e-01,
2.0412e-01,1.6492e-01,4.6832e-02,1.3854e-01,1.4900e-01,
1.1811e-01,2.4196e-01,1.9100e-01,1.3881e-01,7.0475e-02,
-7.6192e-02,-3.3076e-02,1.1613e-01,1.0550e-01,3.2635e-02,
-3.0942e-02,-8.1054e-02,-4.9289e-02,-1.9061e-02,9.2359e-02},
{-3.0080e-02,4.8367e-02,7.8698e-02,7.3054e-02,2.1703e-02,
-3.2107e-02,-9.1370e-02,-2.3729e-02,6.6642e-03,4.4369e-02,
-2.8384e-02,-1.2419e-01,-1.2922e-01,1.0116e-02,3.5333e-02,
2.2950e-02,2.9577e-02,-4.4184e-02,-8.6675e-03,-1.7777e-01,
1.2137e-01,6.6433e-02,9.9885e-03,5.7866e-02,2.2480e-02},
{1.2072e-01,1.2088e-01,2.7612e-02,8.4164e-02,1.9582e-01,
1.0388e-01,1.2062e-01,-1.2636e-02,2.7414e-02,1.3378e-01,
1.0870e-01,1.8998e-01,2.1874e-01,1.9524e-01,1.0496e-01,
2.1693e-02,-1.1794e-02,6.7819e-02,1.3766e-01,5.5153e-02,
6.5539e-02,-1.2809e-01,-1.2890e-01,-6.2986e-02,5.1755e-02},
{-4.5475e-01,-4.1134e-01,-3.5750e-01,-2.8381e-01,-3.7969e-01,
-1.0864e-01,-7.6338e-02,-1.8175e-01,-1.9206e-01,-1.4401e-01,
7.9780e-02,1.1201e-01,1.1791e-01,7.6772e-02,9.6127e-02,
8.1247e-02,1.7325e-01,2.4621e-01,2.4085e-01,2.1577e-01,
3.6070e-02,1.2055e-01,1.1113e-01,9.8206e-02,7.2142e-02},
{6.8068e-02,-9.4968e-02,-1.1301e-01,-2.3719e-02,7.1397e-02,
5.9632e-02,-6.5340e-02,-1.6918e-01,-1.0559e-01,-6.9192e-03,
-1.4622e-02,1.9922e-02,-2.6398e-02,-4.3823e-02,-9.3725e-02,
4.8533e-02,6.8731e-02,1.0969e-01,9.7066e-02,3.7179e-02,
2.0780e-02,6.7283e-02,1.1916e-02,1.2415e-01,8.9486e-02},
{-1.5560e-01,-9.2837e-02,-1.3530e-01,-9.4384e-02,-9.8861e-03,
-6.5743e-02,-8.7173e-02,-1.0595e-01,-8.3608e-02,5.5202e-03,
8.5205e-03,-4.8124e-02,-7.2268e-02,-1.6934e-01,-7.4209e-02,
-2.4365e-02,-1.7141e-01,-1.6679e-01,-1.3170e-01,-5.3180e-02,
6.5219e-02,-3.4966e-03,-1.0766e-01,-1.9018e-02,-1.1209e-01},
{4.2552e-02,3.6999e-02,5.7619e-02,7.8438e-02,8.4733e-02,
8.5876e-03,-7.0273e-02,-5.7777e-02,3.0579e-02,5.1617e-02,
-6.5917e-02,-1.0388e-01,-1.1764e-01,-2.5909e-02,-2.4462e-02,
-1.0161e-02,-1.0572e-01,-6.9347e-02,-9.1434e-02,-7.6197e-02,
3.0683e-02,2.4231e-02,1.0533e-03,-3.0734e-02,2.3478e-02},
{-1.9717e-02,-1.1018e-01,-2.3176e-01,-1.0919e-01,-7.6484e-02,
8.5180e-03,4.4210e-02,-8.2548e-02,-4.0050e-02,9.9474e-04,
3.7807e-02,8.7282e-02,5.5091e-02,4.7038e-02,3.1834e-02,
8.4808e-02,3.3871e-02,2.0417e-03,2.7368e-02,1.0887e-01,
-2.4781e-02,-1.9807e-01,-2.3237e-01,-1.4285e-01,-4.0503e-02},
{-1.7866e-02,-1.9745e-02,-2.1442e-02,4.0753e-02,-3.2560e-02,
-4.7800e-02,1.8403e-03,-2.7151e-02,4.7210e-02,2.6104e-02,
1.7160e-02,2.8915e-02,5.9392e-02,4.5756e-02,6.3179e-02,
-5.3611e-02,3.4823e-02,1.0073e-01,1.0344e-01,8.9824e-02,
-4.6027e-02,-7.5897e-02,-4.1750e-02,9.2558e-03,-3.4034e-02},
{-1.9967e-02,-5.6731e-02,-1.2922e-01,-3.4396e-02,3.7027e-02,
-1.1119e-02,-1.0662e-01,-4.8160e-02,-6.0302e-02,-6.6865e-02,
-5.1009e-03,1.1323e-02,3.7255e-02,3.7204e-02,8.3310e-04,
7.3938e-02,3.6408e-02,4.6024e-02,2.4587e-03,6.8654e-02,
2.4966e-02,1.9040e-02,-1.0372e-02,5.2095e-02,2.6859e-02},
{-7.3702e-02,-1.4130e-01,-1.3437e-01,-8.0263e-02,-3.4456e-02,
-6.0105e-02,-1.6123e-02,-1.1204e-01,-6.5238e-02,-4.0841e-02,
3.9458e-02,-4.9026e-02,-8.5472e-02,-9.0048e-02,-4.2839e-02,
5.6716e-04,-1.0726e-01,-8.3716e-02,-1.6779e-01,2.0722e-02,
-3.4895e-02,-9.0477e-02,-1.3953e-01,-1.3990e-01,-7.1037e-02},
{1.0615e-01,4.9450e-02,-7.7644e-03,-6.2235e-02,4.7732e-02,
-5.1633e-02,3.3383e-02,-6.8446e-02,-3.8983e-02,-5.7547e-02,
-7.6596e-02,-3.6201e-02,-4.5705e-02,-3.5919e-02,1.4265e-02,
-1.3997e-01,-4.2712e-02,3.8533e-02,-1.1752e-02,4.2884e-03,
-1.1620e-02,-5.5168e-02,-3.1255e-02,-4.9470e-02,5.8300e-02},
{4.7225e-02,-1.0566e-02,-1.0517e-01,-1.3213e-01,-9.4542e-02,
1.0037e-01,6.3925e-02,8.3670e-02,-3.6753e-02,-7.1950e-02,
1.2877e-01,1.2084e-01,9.6395e-02,1.6888e-01,1.5816e-01,
2.5481e-04,-4.1440e-03,5.8369e-02,8.3625e-02,1.4359e-01,
-8.2736e-02,-2.1895e-01,-1.6928e-01,-8.1581e-02,5.8080e-02},
{1.2005e-01,1.5681e-01,-3.0180e-02,-6.7826e-02,2.4409e-02,
5.7162e-02,1.0671e-01,1.4956e-02,-1.1323e-01,-7.0980e-02,
1.5563e-02,3.4607e-02,5.9582e-02,2.4885e-02,-2.7785e-02,
-4.3617e-02,-9.7863e-03,9.8034e-02,1.0319e-01,3.1124e-02,
7.6155e-04,3.3906e-02,-4.5153e-03,-6.3473e-02,-8.8367e-02}},
{{9.0803e-02,-1.2852e-02,-3.7069e-03,-4.8411e-02,-1.7392e-02,
-6.1652e-02,-8.8388e-03,-5.9590e-02,-4.0397e-03,-3.6514e-02,
-1.6848e-02,-5.9526e-03,1.0197e-02,-3.0500e-02,-1.2845e-02,
1.2864e-01,2.5015e-01,1.2755e-01,8.0702e-02,2.0177e-02,
7.7547e-02,1.5626e-01,1.5437e-01,1.0388e-01,-5.8245e-03},
{-2.6882e-02,-1.5144e-02,8.6915e-02,-7.3634e-02,-2.5645e-02,
-4.1869e-02,3.2249e-02,-1.0252e-01,-7.2713e-02,5.8375e-02,
-3.3262e-02,-5.1481e-02,-1.2004e-01,4.3577e-02,7.4209e-02,
-5.0484e-03,-1.0472e-01,-2.4571e-01,-1.0406e-01,-6.9072e-02,
4.9697e-02,-1.3515e-02,-2.6477e-01,-1.8842e-01,-1.4656e-01},
{8.3802e-02,8.0086e-02,3.2733e-02,-2.2130e-02,5.1234e-02,
-8.1244e-02,-6.8978e-02,-9.1172e-02,-4.7822e-02,-4.7855e-02,
-3.4510e-02,-3.8754e-02,-8.3390e-02,-3.8533e-02,-3.9953e-02,
-1.9776e-01,4.6302e-02,-9.8938e-03,-3.4577e-02,-1.5258e-01,
1.7792e-01,1.5208e-01,1.8466e-01,7.5326e-02,-1.9244e-02},
{6.1221e-02,2.8458e-02,-9.8308e-02,-5.9998e-02,-5.0267e-03,
4.2080e-02,-2.8484e-02,-2.0037e-01,-1.7463e-01,-4.7748e-02,
6.5007e-02,-3.8007e-02,-1.7778e-01,-1.2686e-01,-4.1957e-03,
-3.9213e-03,-1.4047e-01,-1.3805e-01,-7.1558e-02,9.6736e-02,
-1.5668e-02,-1.4701e-01,-1.8393e-01,-7.6159e-02,-3.7408e-02},
{1.0941e-01,9.1021e-02,5.9833e-02,8.9907e-03,4.3184e-02,
-7.5543e-02,-3.8349e-02,-5.3020e-03,-6.3530e-02,-2.6608e-03,
-2.2236e-01,-1.3799e-01,-1.6630e-01,-2.0974e-02,-4.9276e-02,
-4.0806e-02,1.0167e-01,1.2356e-01,-6.4685e-02,-1.7655e-01,
9.1767e-02,1.5724e-01,1.8608e-01,1.3643e-01,-5.0308e-02},
{5.6681e-02,4.4411e-02,8.0669e-02,4.1565e-02,-2.2433e-02,
1.2549e-02,-2.5542e-02,3.7613e-02,-4.1373e-02,-1.1793e-01,
-1.1598e-01,-6.0013e-02,2.3009e-02,-3.5439e-02,-1.4564e-01,
-2.0518e-01,-1.1681e-01,-2.7099e-02,-5.0201e-02,-1.3806e-01,
-5.3753e-02,-5.2503e-02,1.3754e-02,-4.3482e-02,-2.5811e-02},
{5.4337e-02,5.0071e-02,6.5156e-02,-6.3757e-02,-4.4955e-02,
-8.7629e-02,1.7380e-03,-9.2319e-03,-8.1803e-02,-5.6368e-02,
-1.1421e-01,-8.3751e-02,-1.0731e-01,-8.5232e-02,-1.7311e-01,
-1.8747e-01,-1.0538e-01,-1.4700e-01,-8.0142e-02,-5.6272e-02,
-6.5971e-02,-8.4208e-02,-2.0986e-02,1.2827e-02,-3.3918e-02},
{1.0217e-01,5.8293e-03,4.5526e-02,5.3643e-02,5.9601e-02,
1.5474e-01,-8.2978e-02,2.9345e-03,-9.3582e-02,8.3024e-02,
9.6742e-02,-2.3248e-01,-1.1597e-01,-1.1237e-01,1.3052e-01,
1.5645e-01,-1.6688e-01,-1.3903e-01,-6.6730e-02,1.4369e-01,
2.0273e-01,-1.2015e-01,-2.0939e-01,-5.7269e-02,1.7168e-01},
{6.6298e-02,9.4034e-02,5.8214e-02,8.3534e-03,9.1748e-02,
6.7844e-03,8.8729e-03,-4.4608e-02,1.7096e-02,-2.0514e-02,
3.8924e-02,6.8307e-02,-4.0357e-02,2.8146e-02,1.0058e-02,
-7.1654e-02,1.3699e-02,-8.4037e-02,-1.2248e-01,-5.1179e-02,
-1.2185e-01,-1.0272e-01,-1.1051e-01,-1.3252e-01,-1.7193e-01},
{3.2036e-02,9.2262e-02,7.6282e-03,4.6273e-02,5.6004e-02,
-1.1482e-01,-5.4906e-02,-1.7767e-01,-1.1730e-01,-1.1553e-01,
-1.9428e-01,-3.2334e-01,-3.5658e-01,-2.4269e-01,-1.0635e-01,
7.3945e-02,7.9630e-02,7.9445e-02,8.4473e-02,6.6059e-02,
1.7764e-01,1.1466e-01,7.2638e-02,-1.9274e-02,-4.1719e-02},
{1.3993e-02,1.3337e-01,1.1268e-01,3.9660e-02,6.8105e-02,
-3.2805e-02,1.8703e-02,-2.4017e-02,-2.7480e-02,4.0038e-02,
-1.2857e-01,4.2658e-02,-3.5693e-02,-8.3600e-03,4.8978e-02,
-1.5702e-01,-4.9708e-02,-5.2060e-03,-4.7170e-02,3.6901e-02,
5.9569e-02,8.4080e-02,5.4509e-02,-6.2808e-02,-4.0876e-02},
{-4.8331e-02,2.6503e-02,2.2811e-02,1.0208e-02,1.1225e-03,
6.0936e-02,8.3808e-02,4.3502e-02,4.9025e-02,-8.7702e-03,
-2.8382e-03,2.6418e-03,-2.8313e-02,-9.6856e-02,-1.1347e-01,
-4.2867e-02,-3.0006e-02,-8.5914e-02,-2.4517e-02,-8.6015e-02,
-1.0463e-01,-1.2317e-02,5.4221e-02,-1.9108e-02,2.2210e-03},
{4.0646e-02,-1.4485e-02,-1.8333e-02,4.2058e-02,3.9495e-02,
-7.6310e-02,-7.4272e-02,-1.0830e-01,-5.4841e-02,8.1549e-02,
3.9851e-03,-1.4667e-01,-1.4186e-01,-1.3309e-03,1.2944e-01,
1.2622e-01,5.0342e-02,-4.4773e-02,4.7634e-02,8.1667e-02,
1.1575e-01,-2.0831e-02,-8.0810e-02,-5.3752e-02,2.1555e-02},
{-1.2668e-02,-5.0280e-02,2.1540e-02,-6.3865e-02,5.2243e-02,
-6.0244e-02,-4.9680e-02,-3.2814e-02,-2.0658e-03,2.8295e-02,
1.5745e-02,-1.1720e-01,-9.6416e-02,2.0477e-02,4.4712e-02,
4.4769e-02,-1.5452e-01,-3.0313e-02,1.8253e-02,1.5206e-01,
-5.0522e-02,-2.1242e-01,-3.8232e-02,7.6854e-02,1.4157e-01},
{1.2185e-01,1.4550e-01,7.9833e-02,2.3073e-02,6.4309e-02,
-2.2876e-01,-1.6095e-01,-8.1491e-02,-2.6816e-02,-5.2262e-02,
-2.9246e-01,-3.2905e-01,-3.4146e-01,-2.7326e-01,-1.8412e-01,
1.1491e-01,1.6973e-01,1.2784e-01,1.5369e-01,1.4984e-01,
1.1879e-01,1.2902e-01,1.8969e-01,1.1444e-01,7.7192e-02},
{2.5881e-02,7.1092e-02,1.9533e-01,8.8656e-02,-4.3768e-02,
-1.2844e-02,-1.0256e-01,2.3328e-02,-3.3131e-02,-2.4674e-02,
2.3986e-02,-1.5654e-01,-4.6979e-03,-1.8694e-01,-5.3175e-02,
4.0054e-02,-3.3759e-01,-3.2150e-01,-3.4595e-01,-1.5058e-01,
3.6064e-02,-1.8288e-01,-1.8366e-01,-7.1185e-02,2.6829e-02}},
{{1.1449e-02,7.2890e-02,1.5154e-02,-9.7052e-02,-8.8605e-02,
-1.6975e-02,2.0446e-02,7.8544e-02,-3.7391e-02,-1.0196e-01,
-1.1258e-01,-4.0202e-02,5.2724e-02,6.0978e-02,-1.8161e-02,
-5.9720e-02,-9.1929e-02,-1.4681e-01,2.8573e-02,2.5702e-02,
-6.1441e-02,-1.5459e-02,5.1856e-02,1.2583e-02,-3.2607e-02},
{-3.3209e-03,-8.9667e-02,-1.0349e-01,-1.9665e-01,-1.0414e-01,
-8.7446e-02,-7.8159e-02,-2.4022e-01,-2.0887e-01,-9.3760e-02,
-1.0741e-01,-2.0640e-01,-2.8498e-01,-1.3909e-01,-5.1628e-02,
-1.1150e-01,-2.6217e-01,-2.0139e-01,-1.4430e-01,-5.3855e-02,
3.6278e-02,-2.1042e-01,-1.5944e-01,-2.1544e-02,5.5183e-03},
{-7.2096e-02,4.1252e-02,-1.4518e-02,-4.0517e-02,-1.0022e-01,
-1.8692e-01,-5.6935e-02,8.3097e-02,-8.4053e-02,-1.4765e-01,
-1.0024e-01,-2.3112e-01,8.2165e-03,1.3522e-01,-1.2631e-02,
-8.4199e-02,1.0308e-01,-3.3088e-03,-1.5925e-02,1.1958e-01,
-7.1648e-02,2.9124e-02,6.1697e-02,8.1390e-03,-4.7747e-02},
{-4.9268e-02,2.7285e-03,1.0499e-02,-7.7896e-02,-7.0102e-02,
3.2978e-02,1.1118e-01,1.3694e-01,7.2705e-02,1.2491e-02,
5.5792e-02,-9.5465e-03,1.3651e-01,8.1533e-02,7.0668e-02,
6.9694e-02,4.3523e-02,-4.1386e-02,2.6643e-02,1.1277e-01,
7.0461e-02,1.0655e-01,3.3185e-02,1.2903e-02,1.2036e-01},
{-5.1997e-02,-2.9450e-02,-1.1810e-01,-1.2867e-01,-1.0405e-01,
-1.6657e-01,-2.6184e-01,-1.2779e-01,-1.0757e-01,-2.2968e-01,
-7.0681e-02,-2.3889e-01,-2.5579e-01,-2.1990e-01,-8.1887e-02,
-6.1377e-02,-1.0947e-01,-3.1422e-01,-2.8192e-01,1.4371e-02,
-2.5239e-02,6.3812e-03,-3.8945e-02,-8.5976e-02,-8.1973e-02},
{9.5433e-02,-3.0458e-02,5.5195e-03,-2.6732e-02,-1.8627e-02,
2.6274e-02,-3.5728e-02,-3.5449e-02,-4.5163e-02,-4.1879e-02,
-7.6134e-02,-7.9702e-02,-8.7535e-02,-6.5456e-02,-5.9410e-02,
-5.5714e-02,-9.9108e-02,-1.3925e-01,-1.2800e-01,-6.2338e-02,
-1.1076e-01,-1.3035e-01,-1.0642e-01,-1.2426e-01,-5.8870e-02},
{-7.4093e-02,-1.7420e-02,-4.2673e-03,-6.6929e-02,4.5971e-03,
-3.2620e-02,-7.3653e-02,-4.8359e-02,1.9090e-03,-7.3186e-02,
6.3058e-02,-4.4389e-02,-1.5894e-01,-6.8028e-02,-3.4928e-03,
1.1741e-01,-9.1729e-03,-9.3260e-02,-6.2093e-02,3.8597e-02,
1.2296e-01,5.8644e-02,-4.0075e-02,-1.5120e-02,2.6396e-02},
{-7.9775e-02,-8.0683e-02,-1.5439e-01,-1.7113e-01,-1.3991e-01,
-4.3351e-02,-1.2749e-01,-9.0589e-02,-1.4020e-01,-1.3919e-01,
-5.9042e-02,-1.4216e-01,1.0728e-02,-1.0858e-01,-1.1400e-01,
1.8463e-02,-3.7611e-02,-9.3008e-02,-9.0848e-02,-1.5926e-01,
-2.6802e-02,-3.2034e-02,-2.8649e-02,-6.4300e-02,-5.0862e-02},
{5.4402e-02,4.3378e-02,2.8284e-02,-5.4381e-02,-5.3150e-02,
7.0062e-02,4.5393e-02,1.2650e-01,2.2360e-02,1.0331e-03,
7.3409e-03,-8.4585e-02,2.3749e-02,6.4534e-02,3.4166e-02,
3.9869e-02,-2.3666e-02,8.4258e-03,-3.4177e-02,1.7314e-02,
4.1976e-02,7.4333e-02,6.8400e-02,-1.0434e-01,-2.4118e-02},
{3.9660e-02,6.2954e-02,1.1773e-01,3.9875e-02,-1.4814e-02,
1.6710e-01,1.9104e-01,3.3935e-02,4.1879e-02,5.5404e-02,
1.1005e-01,6.9456e-02,1.1297e-01,4.8378e-02,2.1134e-02,
8.9750e-02,1.5063e-01,1.2700e-01,8.2211e-02,4.6811e-02,
1.2456e-01,5.4712e-02,9.9471e-02,7.8592e-02,1.9801e-02},
{2.4503e-02,-4.7381e-02,-2.8071e-02,-9.2314e-02,9.7757e-03,
1.6050e-01,-1.5659e-02,-9.4974e-02,-1.2363e-01,-2.9640e-02,
9.2804e-02,-1.0610e-01,-2.4559e-01,-2.4184e-01,-2.5628e-02,
1.7511e-01,-8.2273e-02,-1.6440e-01,-1.8794e-01,2.5208e-02,
2.8433e-01,6.2134e-02,-1.1651e-01,-6.2434e-02,-1.9800e-02},
{3.9744e-02,-2.7667e-02,-2.7339e-02,4.8787e-02,1.8856e-02,
1.2542e-02,6.2261e-02,3.7831e-03,-1.5983e-02,3.3766e-02,
-6.9766e-02,5.6095e-02,7.1552e-02,8.0338e-03,6.7195e-03,
-2.6332e-02,3.7250e-02,7.9096e-02,4.6467e-02,-4.5292e-02,
-2.9432e-02,2.1766e-02,-2.9349e-02,4.9323e-02,3.5104e-02},
{3.3746e-02,5.9459e-02,7.5574e-02,4.6111e-02,-9.7674e-03,
4.6733e-02,2.7863e-02,5.3078e-03,6.8280e-02,2.4657e-02,
-4.0283e-02,-2.3733e-02,-4.0315e-02,3.3356e-02,7.5385e-02,
-1.4246e-02,5.6981e-02,8.0529e-02,3.4537e-02,3.6969e-02,
1.0763e-01,-3.8008e-03,7.8536e-02,4.0256e-02,6.3194e-02},
{-2.2563e-02,-4.8252e-02,-2.2089e-02,3.0213e-02,-5.9344e-03,
1.1911e-01,5.3930e-02,1.2573e-02,6.5690e-02,-2.6245e-02,
8.7909e-02,1.2082e-01,4.2203e-02,3.5671e-03,2.6940e-02,
8.6492e-02,1.0759e-01,5.1972e-02,1.0255e-01,-4.0339e-02,
4.4740e-02,3.4489e-02,1.0248e-01,1.2457e-01,3.2745e-02},
{1.0579e-01,6.3079e-02,8.0160e-02,4.9132e-03,-6.9803e-02,
9.0153e-02,3.3145e-02,-4.8822e-02,2.1656e-02,-4.2381e-02,
-1.8820e-03,3.1581e-02,3.1879e-02,3.5965e-03,2.7680e-02,
-8.2427e-02,-2.3862e-03,1.1283e-01,2.4416e-02,-6.3440e-02,
8.4790e-03,1.7231e-02,-3.8273e-03,3.2393e-02,-1.4729e-03},
{-1.2293e-01,-1.1862e-01,-1.0488e-01,-3.3517e-02,-4.0655e-02,
-1.7939e-01,-1.7150e-01,-7.1407e-02,3.0352e-02,7.8345e-02,
-1.2756e-01,-1.4488e-01,-1.2273e-01,2.2112e-02,3.6195e-02,
-7.3056e-02,-1.8691e-01,-1.3632e-01,-8.3344e-02,-2.2165e-02,
4.0011e-02,-1.0858e-01,-1.1112e-01,-1.1374e-01,-3.4470e-02}},
{{-7.8072e-02,-7.2503e-02,-8.2157e-02,-6.8238e-02,-7.8165e-02,
-2.4911e-02,-4.6472e-02,-5.5932e-02,-5.0690e-02,-4.8345e-02,
-7.9521e-03,-4.8496e-02,-6.1188e-03,7.7865e-03,-9.0983e-02,
-7.7706e-03,-2.6662e-02,-1.9401e-02,-6.9272e-02,-3.0363e-02,
-7.0287e-02,-6.8533e-03,1.2838e-03,-2.9439e-02,-8.4557e-03},
{2.4779e-02,-1.1975e-01,1.5379e-03,-9.1532e-03,-4.1829e-03,
2.6546e-02,-8.2100e-02,-7.6642e-03,-5.4794e-02,-3.3227e-02,
4.5478e-02,-5.7210e-02,-3.4361e-02,7.9001e-03,-1.3098e-02,
-5.0676e-02,-4.8317e-02,-2.1824e-02,-4.0393e-02,-8.4396e-02,
-3.3264e-02,-6.2961e-02,-4.5478e-02,-6.9664e-02,-9.1535e-02},
{2.4172e-02,-2.8910e-02,-1.2982e-02,-9.5865e-02,2.4588e-02,
-2.5652e-02,-1.1606e-02,-1.5267e-02,1.0649e-02,-8.4210e-04,
-1.1814e-03,-1.0171e-01,-1.5061e-02,-1.5894e-02,-5.8057e-02,
-4.3886e-02,-5.9307e-02,1.0067e-02,-4.7607e-02,-1.8787e-02,
-3.8696e-02,-3.3422e-02,-6.6670e-02,7.0831e-03,-8.0826e-02},
{5.9502e-02,-1.1267e-01,-7.3540e-02,-4.3498e-02,-5.1313e-02,
1.7978e-02,-9.7444e-02,-3.4403e-02,-3.8180e-02,-1.7020e-02,
5.8164e-02,-8.0228e-02,-5.3649e-02,-3.2217e-02,-8.1071e-04,
3.9036e-02,-5.1500e-02,-2.1988e-02,-7.5774e-02,-3.6696e-02,
1.5862e-02,-4.5557e-02,-6.9781e-02,-1.4963e-02,-7.2052e-02},
{-1.9094e-02,-1.1290e-02,-4.7149e-03,-1.1339e-02,1.8513e-02,
-2.1777e-02,1.8780e-04,7.2169e-04,-1.6663e-02,2.8488e-02,
-1.2664e-03,-7.3048e-02,-8.0835e-02,-4.0810e-02,-5.9049e-02,
-4.7349e-02,-3.3212e-02,2.4391e-03,-3.2211e-02,-9.3489e-02,
-5.0465e-02,-5.9330e-02,-5.9213e-02,-5.0511e-02,5.5273e-03},
{-5.1243e-02,-6.4884e-02,-6.8544e-02,-7.2359e-02,-9.8513e-02,
-5.0433e-02,-1.4440e-02,-6.8690e-02,-6.0355e-02,-4.0517e-02,
-1.9192e-02,-4.9944e-02,-8.5972e-02,-8.4868e-02,-6.4015e-02,
-3.4535e-03,-6.1010e-02,-8.8900e-02,-4.8073e-02,-3.2223e-02,
-2.0275e-02,-3.6114e-02,-5.6921e-02,-8.7531e-02,-8.6659e-02},
{-7.0021e-02,-3.6448e-02,8.8027e-03,-7.5745e-02,-5.7952e-02,
-5.3604e-02,-4.2399e-02,1.7817e-02,-5.1250e-02,-7.2463e-02,
-9.6991e-02,9.3706e-03,-3.6081e-02,-5.6431e-02,-1.9008e-02,
-5.5693e-03,-3.1090e-02,2.0625e-02,-6.0908e-02,3.8125e-03,
-7.0379e-02,9.4706e-04,-1.9570e-02,-6.4283e-02,-5.3570e-02},
{-3.2974e-02,-5.1832e-02,-1.7103e-02,-3.6902e-02,-5.3053e-02,
-7.6640e-02,-3.8864e-03,1.9825e-02,-4.0413e-02,-4.8158e-02,
-9.9081e-02,2.9393e-02,1.9695e-02,-4.4656e-02,-8.4948e-03,
-6.4366e-02,-1.3455e-02,1.8424e-02,-8.0843e-02,-6.3037e-02,
-6.7825e-02,-5.2397e-03,-8.1430e-02,1.3303e-03,-2.3007e-02},
{-3.9777e-04,1.8944e-02,-5.2582e-02,1.5912e-03,4.3574e-03,
-6.8961e-02,-1.4352e-02,-1.7586e-02,-4.9297e-02,-5.2469e-02,
-7.7579e-02,-7.1699e-02,-4.8840e-02,-2.6767e-02,-3.8289e-02,
-7.1116e-02,-2.4208e-02,-6.2632e-02,-6.3957e-02,-6.3932e-02,
-7.6387e-02,-7.8688e-02,-3.3481e-02,-1.9318e-02,-6.5452e-02},
{-8.4035e-02,-7.8209e-02,-6.5222e-02,-1.8147e-02,-2.1836e-03,
-3.6210e-02,-9.5896e-02,-3.1946e-02,-8.2311e-02,-1.2912e-01,
-8.6053e-02,-2.3334e-02,-1.5920e-02,-6.2290e-02,-2.4548e-02,
7.7900e-03,2.4394e-02,-4.5948e-02,-4.9838e-02,-1.0984e-01,
-9.3887e-03,-6.3034e-02,-9.6172e-02,-8.2622e-03,-2.5958e-02},
{-9.0896e-02,-6.6863e-02,-2.3485e-02,-7.9609e-02,-1.4258e-02,
-6.3981e-02,-3.3612e-03,-5.5703e-02,-6.3037e-02,2.8452e-03,
-4.1079e-02,-7.1896e-03,-4.1680e-02,-8.0674e-02,8.1413e-03,
6.5878e-03,-1.3988e-02,-2.3444e-02,7.1877e-03,-7.2564e-02,
-5.2549e-02,-1.5034e-02,-1.9474e-02,-6.7735e-02,-2.8357e-02},
{-2.5377e-02,-3.7808e-03,-4.7941e-02,-1.9875e-02,-6.1217e-02,
-1.5908e-02,1.5257e-02,-4.8847e-03,1.2428e-02,-1.5864e-02,
-1.3422e-02,2.0186e-02,-4.1959e-02,-1.9008e-02,-5.5258e-03,
-8.1443e-02,5.7426e-03,1.9207e-03,-3.1122e-02,1.7032e-02,
-7.7549e-02,-3.7436e-02,-1.2456e-02,-2.0777e-03,-3.7570e-02},
{-4.4155e-02,-8.6316e-02,-8.2690e-02,-5.5382e-02,7.2695e-03,
6.0079e-03,-1.1614e-01,-2.6471e-02,-5.1126e-02,-7.5154e-02,
3.0767e-02,-2.9357e-02,-3.3318e-03,-6.4924e-03,-6.7050e-02,
1.2936e-02,-4.5022e-02,-3.0531e-03,-9.4506e-02,-6.1262e-02,
1.0284e-02,-7.1706e-02,-7.0741e-02,-9.2381e-03,4.1992e-03},
{-1.3044e-02,-3.8149e-02,3.9935e-03,-1.6414e-02,2.5158e-02,
-4.8855e-02,-6.5881e-02,-5.8511e-02,-6.4934e-02,-1.8768e-02,
-9.8387e-03,-1.1761e-01,-4.0976e-02,6.3645e-03,1.7004e-02,
-9.5774e-02,-6.4771e-02,-5.3954e-02,-2.4206e-02,-5.2406e-02,
-3.4327e-02,-6.0669e-02,5.0571e-02,1.0746e-02,-5.3468e-02},
{-8.6319e-02,-5.2791e-02,-9.8693e-03,-9.4656e-03,-7.3835e-02,
-8.8209e-02,-7.1918e-02,-5.6620e-02,-4.3399e-02,-1.7394e-02,
-2.7493e-02,-1.3987e-03,-4.2261e-02,-7.0477e-02,-1.0902e-01,
-3.0210e-02,-2.6631e-02,-6.7206e-03,1.2409e-02,1.5731e-03,
-3.3516e-03,-5.8104e-03,-7.2171e-02,-6.5144e-02,-2.9254e-02},
{-1.9977e-03,-3.7763e-02,3.5863e-02,9.6223e-03,-1.4998e-02,
-5.5530e-02,-7.7909e-02,3.3329e-02,3.5707e-02,1.0600e-02,
-1.6880e-02,-7.6184e-03,2.9812e-02,-2.7623e-02,-2.0470e-02,
-8.9614e-02,-2.7275e-02,-2.5179e-02,-1.1388e-02,-7.4701e-02,
-4.7050e-02,5.5802e-03,-1.3408e-02,-1.8784e-02,-4.8444e-02}},
{{-1.3373e-02,9.7275e-02,5.2314e-02,3.6520e-02,2.1113e-02,
-1.9014e-01,-2.6007e-01,-2.1234e-01,-2.6652e-01,-2.1024e-01,
-3.7030e-02,-5.2628e-02,-7.2501e-02,-1.6690e-02,-1.7643e-01,
1.2300e-01,1.0226e-01,1.9162e-01,1.4717e-01,1.1980e-01,
1.4124e-02,-2.0245e-02,5.1882e-02,3.7675e-02,-5.0897e-02},
{1.2251e-01,5.2485e-02,-7.9691e-02,-1.5653e-02,-1.2584e-01,
1.2192e-01,1.0649e-01,1.9686e-02,3.9449e-02,2.3386e-02,
1.5893e-01,9.5696e-02,-3.7534e-02,7.4909e-02,3.6603e-03,
1.8988e-01,3.0397e-02,-1.5594e-01,3.8226e-02,1.0053e-02,
-1.5779e-02,-1.0075e-01,-2.2771e-01,-9.8545e-02,-2.1708e-01},
{1.9461e-01,1.1841e-01,1.0714e-01,8.4263e-02,-1.3742e-01,
-9.8806e-02,-1.1118e-01,-2.6595e-02,-1.6586e-01,-3.3420e-01,
2.9229e-02,9.5780e-02,1.0994e-01,3.4716e-02,1.6244e-02,
4.7620e-02,5.6574e-02,1.3467e-01,1.0412e-01,4.0978e-03,
-1.2966e-01,-1.6133e-01,-7.0003e-02,-8.2263e-02,-1.9045e-01},
{1.0898e-01,5.9191e-03,-1.3378e-01,-5.9273e-02,5.0849e-02,
9.5524e-02,-3.9400e-02,-1.6340e-01,-1.1151e-01,7.2143e-02,
-6.8581e-03,-1.3089e-01,-1.5885e-01,-1.2140e-01,9.3267e-02,
2.9932e-02,-1.8635e-01,-1.8808e-01,-9.0693e-02,1.4453e-02,
-6.7522e-03,-1.1994e-01,-2.3645e-01,-2.2324e-01,-8.6405e-02},
{1.5312e-02,1.2357e-01,2.1347e-01,2.1760e-01,1.1409e-01,
-4.3903e-02,-1.5858e-02,5.8733e-02,-5.0599e-02,-1.6287e-01,
3.9487e-02,1.0067e-01,1.7221e-01,2.2294e-02,-1.1152e-01,
8.9600e-02,2.1977e-01,3.0706e-01,1.9619e-01,1.9850e-02,
-1.4839e-01,-2.0451e-02,-6.3345e-03,-4.4549e-02,-2.4368e-02},
{-2.7235e-02,-7.0434e-03,-7.0283e-02,-1.7830e-02,1.6376e-02,
-4.5911e-02,-7.2717e-02,-1.5193e-02,1.6283e-04,-7.8234e-02,
-6.8416e-02,-1.7585e-02,3.7293e-02,3.2360e-02,-9.3122e-02,
-9.3906e-03,-8.8732e-02,-2.5493e-02,6.5291e-03,1.5003e-02,
5.9134e-02,-1.1573e-01,-6.9538e-02,-1.0123e-01,-6.4745e-02},
{-2.0722e-01,-1.9359e-01,-1.2772e-01,-6.9397e-02,-1.6016e-01,
-1.1480e-01,-9.6698e-02,-5.9335e-02,1.5381e-02,-1.4088e-01,
-1.1081e-01,-6.4406e-02,-4.7220e-02,4.7860e-02,-5.2732e-02,
-1.4497e-02,-5.9052e-02,-3.4744e-02,2.9824e-02,-4.1017e-02,
-1.0001e-02,7.3216e-03,-8.5497e-02,2.0289e-02,-2.3594e-02},
{1.5983e-01,7.2309e-02,1.0597e-01,4.6064e-02,1.8427e-01,
2.3228e-01,5.7119e-02,9.4964e-02,2.7340e-02,2.6765e-01,
2.6192e-01,-1.5916e-02,-5.0748e-02,-9.9546e-02,2.0360e-01,
2.2147e-01,1.2969e-02,-8.6142e-02,-1.5038e-01,1.1313e-01,
1.2083e-01,-8.1315e-02,-1.6964e-01,-2.0184e-01,3.7935e-02},
{-1.3984e-01,-1.4600e-02,-3.6058e-02,-1.2610e-01,-1.3803e-01,
-1.8487e-01,-2.0288e-01,-2.5911e-01,-2.8259e-01,-3.2975e-01,
-6.0762e-03,1.4247e-02,2.1422e-02,-9.0770e-02,-9.2359e-02,
8.0378e-02,4.8057e-02,1.1381e-01,2.2390e-02,6.8066e-02,
-6.4686e-02,-5.5012e-02,-9.8208e-02,-1.0381e-01,-2.0045e-01},
{1.5516e-01,1.5841e-01,6.9814e-02,7.6944e-02,-6.1021e-02,
4.0121e-02,6.2833e-02,-5.1999e-02,-1.2536e-01,-1.3565e-01,
1.5367e-02,-6.6520e-02,-1.2949e-01,-2.5379e-01,-1.6909e-01,
7.5946e-02,-2.0797e-02,-1.3531e-01,-5.5349e-02,-1.3110e-01,
2.8908e-02,-8.2276e-02,-6.5332e-04,6.6374e-03,-9.0616e-02},
{1.9365e-01,1.3198e-01,1.0106e-01,-1.4048e-02,-5.8927e-02,
1.5726e-01,1.3837e-01,8.5526e-02,-5.7965e-02,-9.3487e-02,
1.4848e-01,3.8411e-02,-9.6849e-02,-1.1950e-01,-9.1771e-02,
1.0667e-01,7.5950e-02,-8.4945e-02,-6.4518e-02,-2.1050e-01,
-5.6539e-02,6.2103e-02,-6.9221e-02,-9.8871e-02,-2.3071e-01},
{1.6672e-02,6.0636e-02,-1.1146e-02,-4.3277e-03,-4.0005e-02,
1.1030e-01,8.5642e-02,4.8792e-02,9.4265e-02,5.4637e-02,
1.3958e-01,8.6192e-02,5.8761e-02,1.6601e-02,5.3623e-02,
1.7524e-02,3.4302e-02,6.0272e-02,5.4216e-02,3.3502e-03,
7.4404e-02,2.0175e-02,9.8077e-02,-8.2805e-03,4.1458e-03},
{1.7015e-01,8.3492e-02,3.5071e-02,1.9282e-02,4.0444e-02,
7.6451e-02,5.5518e-03,-5.5499e-02,-1.6988e-01,-5.5149e-02,
4.6049e-02,-7.9833e-02,-1.1660e-01,-1.2010e-01,-3.7764e-03,
3.6090e-02,-2.9070e-02,-1.2915e-01,-6.7385e-02,-3.9970e-03,
-5.5218e-02,-5.5340e-02,-8.1914e-02,-7.6010e-02,-5.3153e-02},
{-6.9093e-02,-1.8843e-01,-4.5553e-02,3.0087e-02,1.6260e-02,
1.2985e-01,-1.2068e-01,-1.2115e-01,3.0414e-02,7.0527e-02,
1.7199e-02,-2.4064e-01,-2.8875e-01,1.3690e-02,6.7864e-02,
-3.2206e-02,-1.7321e-01,-2.8905e-01,-7.2102e-02,2.6131e-02,
-1.2838e-01,-2.4052e-01,-2.9149e-01,-1.9531e-01,4.8716e-02},
{5.9053e-02,3.3973e-02,1.3927e-01,5.7856e-02,-9.0599e-03,
-1.2702e-02,2.4748e-02,2.0069e-02,6.8403e-02,-3.8839e-02,
-9.7810e-02,-1.9720e-02,-9.6679e-02,-9.3934e-02,-1.2845e-01,
-2.5947e-03,7.8321e-02,8.3610e-02,2.3586e-02,-7.5909e-02,
7.1429e-02,5.8647e-02,1.0126e-01,1.0006e-01,4.5640e-02},
{-8.7391e-02,-1.0736e-01,-1.9945e-01,-4.2907e-02,-7.4129e-02,
1.6389e-01,5.6783e-03,-6.5169e-02,-1.1274e-02,-3.1570e-02,
1.2664e-01,2.0573e-02,-1.7890e-01,-8.9703e-02,-7.7603e-02,
5.6672e-02,1.1153e-01,-1.3393e-01,-1.3072e-01,-1.1749e-01,
-3.4087e-03,7.2042e-02,-1.1322e-01,-6.9261e-02,-1.2219e-01}},
{{1.7318e-01,1.0143e-01,1.2340e-01,1.3744e-01,1.7169e-01,
-3.4523e-02,-1.5903e-02,2.1454e-02,-2.5981e-02,-3.4780e-02,
1.6162e-02,9.3255e-02,-8.2675e-03,1.0828e-02,-5.3778e-02,
7.1979e-02,-5.7056e-03,-1.6059e-02,-1.3263e-01,-1.3006e-01,
-1.7378e-02,1.1404e-01,1.3472e-01,-1.7230e-02,-1.2963e-01},
{5.1009e-02,8.3127e-02,3.5045e-02,-8.3665e-02,-5.2599e-02,
6.2415e-02,-7.5471e-03,-1.5570e-01,-1.3736e-01,-1.9046e-01,
-3.2541e-02,-2.6903e-01,-1.5649e-01,-1.4928e-01,-7.1550e-02,
-2.1254e-01,-1.7376e-03,-7.7136e-02,5.9668e-02,-1.9306e-02,
-1.3338e-01,7.3293e-02,-2.1717e-02,1.5148e-01,1.0426e-01},
{6.1708e-02,-6.3989e-02,-1.0564e-01,-3.6464e-03,3.6541e-02,
-6.2060e-02,-1.8185e-02,4.3989e-02,5.9761e-02,1.0633e-01,
2.7278e-02,9.5317e-03,-9.5552e-02,-1.2238e-01,7.1596e-03,
-1.8652e-01,-1.4139e-01,-1.0410e-01,-1.2944e-01,3.6721e-02,
-5.9470e-02,-4.9108e-02,-9.9631e-06,3.4617e-03,-1.4361e-01},
{-2.3070e-03,-6.8408e-02,-5.9113e-02,-5.5707e-02,-3.4984e-03,
-1.0476e-01,-1.9811e-01,-1.3647e-01,-1.3728e-02,-2.6804e-02,
-2.0778e-01,-1.5762e-01,3.2671e-02,1.7951e-02,-4.2646e-03,
-1.9373e-01,2.9937e-03,7.4346e-02,-6.7732e-02,5.3650e-02,
-1.2597e-01,-2.3985e-02,-4.9839e-02,-3.0490e-02,1.3654e-02},
{1.0018e-01,1.6878e-03,4.2845e-02,1.9270e-02,-1.9089e-02,
6.2004e-03,1.5990e-01,2.1070e-01,1.9524e-01,1.6461e-01,
-8.6974e-03,4.7134e-02,-6.2182e-02,-1.1192e-01,9.7023e-03,
-3.9419e-02,-1.6252e-01,-2.1214e-01,-1.4235e-01,-6.8011e-02,
-2.6003e-01,-1.4698e-01,4.6325e-02,4.1256e-02,-2.5826e-02},
{-4.3330e-02,-7.8895e-02,-8.7096e-02,6.0669e-02,1.2719e-01,
-9.9729e-02,-5.9252e-02,-3.2814e-02,8.7789e-02,5.4889e-02,
-1.3420e-02,-2.5090e-02,-2.5885e-03,3.1407e-02,-5.3631e-03,
4.2386e-02,-1.1941e-02,2.7184e-02,6.5675e-03,-1.0259e-01,
1.0819e-01,2.2864e-02,5.2317e-02,2.2434e-02,-3.6403e-02},
{4.8183e-02,1.2457e-01,6.7559e-02,-2.1260e-02,-1.6166e-02,
9.6972e-02,1.0954e-01,1.0682e-01,5.7290e-02,-1.5891e-02,
3.3545e-02,1.2637e-01,5.9504e-02,2.2377e-02,-6.0313e-02,
5.5435e-02,-1.4333e-02,-1.5819e-02,-1.0764e-01,-2.0296e-02,
1.0328e-02,-5.0527e-02,-3.4845e-02,-5.5399e-02,1.0301e-04},
{7.5492e-02,5.1856e-02,-1.0917e-01,-6.7822e-02,-7.6283e-02,
-7.3318e-02,-1.0463e-01,2.4666e-02,5.6249e-02,-1.5620e-01,
-1.9963e-01,3.9855e-02,4.4823e-02,3.8122e-02,-5.4556e-02,
3.2559e-02,7.4932e-02,1.7605e-02,5.4196e-02,5.4093e-02,
-2.9854e-02,-4.4911e-02,6.5656e-03,-5.6799e-02,1.7710e-02},
{1.0077e-01,1.5797e-01,1.9185e-01,1.7416e-01,1.6125e-01,
5.5797e-02,8.7547e-02,7.7613e-02,3.7764e-03,1.3758e-02,
1.0011e-01,5.5167e-02,-2.7228e-02,-1.1859e-01,-1.4747e-01,
5.8666e-02,5.8723e-03,-1.3335e-01,-1.1523e-01,-1.1812e-01,
-4.3715e-02,3.0988e-02,1.5552e-02,-4.7103e-02,-5.3164e-02},
{1.4160e-01,1.6548e-01,6.0880e-02,-1.1433e-01,-6.8830e-02,
2.7003e-01,1.6334e-01,2.4698e-02,-9.0340e-02,1.0752e-01,
9.1631e-02,-1.1988e-02,4.8750e-02,5.2823e-02,1.2982e-02,
-6.2339e-02,2.0404e-01,1.0630e-01,1.7703e-02,1.8792e-02,
3.2984e-03,1.6087e-01,-2.8077e-02,-4.4985e-02,-1.6553e-02},
{3.1087e-02,9.1183e-02,6.4468e-02,1.7597e-01,2.1274e-01,
-5.2763e-02,2.2706e-02,-1.3121e-03,-4.2315e-03,7.8969e-02,
-2.1792e-01,-8.7954e-02,-5.3864e-02,-5.4890e-02,2.6885e-02,
-1.4079e-01,-4.6460e-02,-8.3665e-02,-3.9310e-03,2.1118e-02,
-2.3018e-01,-7.0003e-02,-6.5872e-02,-3.1929e-02,4.7183e-02},
{4.9637e-02,7.9412e-02,1.0277e-01,5.7915e-02,-2.4288e-02,
5.4636e-02,6.2891e-02,1.0125e-03,6.7790e-02,-9.3038e-04,
1.1204e-01,5.6498e-03,-3.1758e-02,2.0806e-02,-5.0113e-02,
-7.2678e-02,-9.8244e-02,-2.3291e-02,-6.3120e-02,-5.8980e-02,
-6.7419e-02,-7.7009e-02,-7.4383e-02,-5.6689e-02,-9.6520e-02},
{1.6487e-01,1.4875e-01,2.0796e-02,-3.1465e-02,1.1404e-01,
2.8808e-01,7.0924e-02,-3.1563e-02,1.1755e-01,9.7829e-02,
2.6490e-02,8.3412e-02,6.9813e-02,3.1535e-02,-1.0319e-02,
4.1641e-02,1.4536e-01,-9.4467e-03,4.3610e-03,5.1149e-02,
1.6963e-03,4.9604e-04,-6.9254e-02,2.9755e-02,1.4170e-01},
{-1.0910e-01,-3.6463e-02,-3.8972e-02,6.9724e-03,1.7133e-01,
-8.1234e-02,-2.4535e-02,1.2188e-01,6.0648e-02,1.1887e-01,
5.7731e-03,4.6091e-02,9.3180e-02,7.0322e-02,1.7847e-01,
7.1279e-02,9.3193e-02,8.0165e-02,3.8201e-02,5.3301e-02,
5.9930e-02,-5.7439e-02,-6.2151e-02,-1.6314e-02,-2.5125e-02},
{4.3385e-02,6.6781e-02,-4.0382e-02,-3.6669e-02,-4.5527e-02,
8.1615e-02,-1.2072e-02,-1.0218e-01,-6.4991e-02,-3.7006e-02,
-5.0486e-02,-2.7933e-01,-2.2393e-01,-5.3373e-02,-8.2797e-02,
-3.8420e-02,4.8604e-02,1.1283e-01,-8.3178e-03,3.1918e-02,
1.2380e-02,7.9302e-02,-1.2977e-02,1.0758e-03,4.6728e-02},
{1.4843e-01,1.8298e-01,1.0761e-01,2.1202e-02,1.2324e-01,
-2.0475e-02,-7.6287e-02,1.5269e-02,-6.5821e-02,2.2822e-02,
7.8265e-03,-2.6885e-02,-4.4982e-02,1.1995e-02,7.0740e-02,
2.3138e-02,-2.9475e-02,3.3267e-02,3.9817e-02,5.4370e-02,
4.0488e-02,-4.7641e-02,9.5373e-02,4.0631e-03,1.0660e-01}},
{{1.2544e-02,-1.1092e-02,-6.6395e-02,2.2126e-02,-5.3120e-02,
-3.1443e-02,-5.9214e-02,2.1277e-02,-3.4057e-02,-6.9815e-02,
1.7429e-02,-8.4287e-02,-3.9392e-02,-4.5288e-02,-6.8432e-02,
6.0598e-03,4.7926e-02,2.0583e-02,4.8424e-03,2.6190e-02,
1.1891e-02,2.5775e-02,5.0920e-02,5.2084e-02,2.3133e-02},
{-4.4756e-02,-4.1233e-02,8.7309e-03,-7.4244e-02,-1.5230e-02,
-9.6851e-03,-1.7104e-02,-6.5371e-02,-3.0657e-02,7.5098e-03,
-2.4558e-02,-1.8094e-03,1.2671e-02,-4.4710e-03,2.2519e-02,
-4.1380e-02,-4.0050e-02,-4.6144e-02,-4.0239e-02,-3.5706e-02,
-3.5418e-02,-4.4682e-02,-4.9198e-02,-4.0400e-02,2.0829e-02},
{4.5621e-03,-3.2535e-02,4.5666e-03,-6.0660e-02,-5.7920e-02,
-3.2697e-02,-6.4384e-03,-1.9373e-02,-5.5048e-02,-3.2584e-02,
-2.1663e-02,-9.4545e-02,-4.3096e-02,-5.2077e-03,2.1302e-02,
-3.7799e-02,-5.6445e-03,-6.2182e-03,-2.1180e-02,-2.1346e-02,
4.8918e-03,-2.8677e-02,-5.3386e-02,1.2130e-02,-3.6405e-02},
{-4.6683e-02,-1.6984e-02,-2.7760e-02,-4.2105e-02,-7.0133e-03,
4.7864e-02,-3.5476e-02,-6.1497e-02,-7.8675e-02,-5.8689e-02,
-5.9922e-05,-4.9435e-02,-5.4686e-03,-1.2991e-02,-5.4265e-02,
4.5011e-02,1.8628e-02,-6.4584e-02,-3.9689e-02,-5.6818e-02,
-2.2805e-02,1.5263e-03,-1.7606e-02,-5.7989e-02,-6.4015e-03},
{-3.4600e-03,-2.6108e-02,-6.9862e-02,-3.1264e-03,-2.5517e-02,
-3.3199e-02,1.9138e-02,-3.0033e-03,-4.0953e-03,-3.6806e-02,
-4.7470e-02,-1.1594e-02,-7.5579e-02,-5.2102e-02,-7.3264e-02,
-4.3077e-02,-6.7021e-02,-6.4183e-02,-3.2787e-02,3.4769e-02,
2.2990e-02,-4.9302e-02,-3.9531e-02,-9.6499e-03,1.5115e-02},
{-2.3240e-02,4.1256e-02,6.1050e-02,-3.4923e-02,-4.9864e-02,
-7.3272e-05,6.6038e-02,-9.0873e-03,4.3069e-03,-4.6927e-02,
4.9954e-04,-2.2450e-02,-2.6781e-02,9.1637e-03,-7.1199e-02,
-2.9969e-02,-1.0223e-02,-4.8256e-02,-2.7395e-02,-3.9045e-02,
-7.0439e-03,8.1960e-03,-4.4036e-02,-2.7816e-02,-3.2560e-02},
{-8.0713e-02,2.0107e-02,4.8275e-03,6.9356e-03,9.1350e-03,
-2.0041e-02,-1.6345e-02,-2.1308e-02,-2.6091e-03,-7.0960e-02,
-4.2058e-02,-1.3599e-02,-6.2514e-02,-5.3089e-02,-6.2291e-02,
-1.5324e-02,-2.6109e-02,-1.3088e-02,-5.1829e-02,-3.8098e-02,
1.8734e-02,-1.4039e-02,-4.2546e-02,2.6524e-02,1.6512e-02},
{3.6195e-02,-5.2492e-02,3.3471e-02,-3.1676e-02,-1.9394e-02,
1.7721e-02,1.8483e-02,3.0801e-02,2.2091e-02,-4.0741e-02,
-2.2605e-02,2.0355e-03,-2.6554e-02,-2.4851e-02,-1.7305e-03,
-5.0830e-02,-2.1702e-02,1.8751e-02,-8.2366e-02,2.1777e-03,
-7.1861e-02,-1.0482e-02,8.7796e-03,-7.8742e-03,-7.7952e-02},
{-5.4436e-03,-7.2672e-02,-4.5990e-02,-2.3188e-02,-4.9808e-02,
2.4779e-03,-7.4123e-02,-5.4943e-02,-9.0627e-03,-7.4948e-03,
-4.4884e-02,-4.5372e-02,-5.8598e-02,-2.7347e-02,-7.5123e-02,
1.1121e-02,-1.6881e-02,-3.5391e-03,3.0830e-02,9.5001e-03,
2.0618e-02,-2.0680e-02,-6.1741e-03,-7.2046e-03,2.2479e-02},
{-4.1919e-02,-2.6432e-03,-7.0374e-02,-1.2678e-02,-1.3878e-02,
-6.6035e-02,7.5658e-03,1.2317e-02,3.7184e-02,2.9465e-02,
-6.2906e-02,-6.7189e-03,-1.7829e-02,1.8765e-02,-2.6113e-02,
6.6810e-03,1.3367e-02,4.3862e-02,-5.8073e-02,-1.0722e-02,
-1.5155e-02,-3.7632e-02,-4.7597e-02,-6.9350e-02,-3.7798e-02},
{-4.4523e-02,-3.7493e-02,2.1412e-02,-1.7088e-02,1.8827e-02,
-5.6620e-02,-4.5734e-02,-2.8601e-02,-1.6221e-03,9.4466e-04,
-3.1477e-02,-4.7476e-03,-6.1597e-02,1.3416e-02,2.4762e-02,
-5.0296e-03,-1.4055e-02,-1.9285e-02,1.3996e-02,1.0105e-02,
2.2039e-02,3.7438e-02,-2.4183e-02,-4.6475e-02,2.1955e-02},
{-4.6420e-02,-3.9589e-02,-4.0281e-02,3.0062e-02,3.1151e-03,
-5.3794e-03,1.0293e-02,-1.7992e-02,1.4409e-02,-7.8696e-02,
-1.8336e-02,1.9662e-02,-2.9863e-02,2.6702e-02,-2.9219e-02,
-5.2269e-02,-7.0286e-02,-1.3699e-02,-1.7762e-02,-1.0068e-02,
-4.0210e-02,-2.8748e-02,-3.6343e-02,7.8741e-03,1.1239e-03},
{-4.9139e-02,-2.5071e-02,-5.6865e-02,-5.8606e-02,2.6600e-02,
-7.6553e-03,-7.1901e-02,-4.3746e-02,-2.8299e-02,7.1410e-03,
-2.1236e-02,1.8860e-02,-6.6848e-02,-2.7008e-02,2.0161e-02,
-3.0041e-04,-3.2714e-02,6.7474e-03,1.6453e-02,7.0437e-03,
-3.2840e-02,-5.1210e-02,-5.7276e-02,1.4493e-02,-6.1430e-02},
{-2.0387e-02,1.0854e-02,2.4321e-03,-2.2031e-02,3.5539e-02,
1.1729e-02,2.9590e-02,-4.5107e-02,-2.6885e-02,-2.3262e-03,
-3.1138e-02,-6.3294e-02,-3.3489e-02,-3.6165e-02,-4.4800e-02,
-4.0907e-02,-5.7223e-02,-6.7553e-04,-2.0780e-02,-1.4271e-02,
-5.5519e-02,2.7159e-02,-6.4586e-02,-5.3145e-02,1.2659e-02},
{5.3087e-03,-1.4016e-03,-1.5911e-02,-3.4760e-02,-4.9185e-02,
-2.3130e-02,-4.4717e-02,-3.5349e-02,-2.8672e-02,-1.8621e-02,
-1.4989e-02,-2.7877e-02,1.5951e-02,2.0961e-03,2.7834e-02,
-4.7024e-02,-1.4125e-02,-2.2792e-02,3.3227e-03,-1.4809e-02,
-5.2640e-02,-3.3543e-02,7.7355e-03,-2.0460e-02,-2.3769e-02},
{-8.3500e-02,8.6365e-03,-3.0288e-03,-3.2470e-03,-6.4221e-02,
-5.6735e-02,6.5632e-03,-1.3898e-02,1.0210e-02,-5.2709e-02,
-7.9588e-02,-7.6971e-03,-5.7950e-02,-2.8237e-02,5.7495e-03,
2.0502e-02,3.2781e-02,-5.6653e-02,-3.8249e-02,-5.5384e-02,
1.2849e-02,1.3824e-02,-3.4759e-02,2.8085e-02,-2.7929e-02}},
{{-9.7020e-02,-5.4300e-02,9.9934e-02,1.0291e-01,4.8400e-02,
-4.3033e-03,-4.1507e-02,1.4740e-02,-1.4150e-01,-1.7731e-02,
-1.3996e-01,-1.0113e-01,-7.3838e-02,1.6112e-02,1.8933e-02,
-6.1462e-02,-6.1312e-02,-3.7060e-02,-7.2651e-03,3.2384e-02,
1.9110e-02,-4.4420e-02,-8.5837e-02,-3.9369e-03,-2.0956e-02},
{-9.2494e-02,-9.3016e-04,-2.0582e-02,-9.2822e-02,1.4491e-01,
-1.5930e-01,-1.5960e-01,1.2668e-02,-4.1637e-02,3.9024e-02,
-2.0626e-01,-7.3168e-02,-2.6019e-02,3.0167e-02,-2.3818e-02,
-1.0344e-01,-8.5457e-02,-1.4088e-01,-5.2759e-02,1.9012e-02,
-1.6045e-01,-1.3943e-01,-2.2196e-01,-3.3247e-02,9.6888e-02},
{1.3038e-01,9.1151e-02,4.8410e-02,6.3229e-02,5.6449e-02,
9.5770e-02,1.0952e-01,1.0406e-01,3.5943e-02,1.2567e-02,
-1.3992e-01,-3.4882e-02,1.6378e-01,1.4689e-01,2.3414e-02,
6.4957e-02,-6.5094e-02,-1.2877e-01,8.9053e-02,1.4494e-01,
9.6260e-02,-1.8251e-02,-2.3065e-02,-5.1152e-02,-5.0659e-02},
{1.5101e-01,1.0016e-01,-3.4757e-02,1.0490e-01,1.1269e-01,
1.3054e-01,1.7763e-01,8.2732e-02,-7.2084e-02,7.5550e-02,
-1.0696e-02,1.0421e-01,1.3163e-01,-5.6254e-02,-7.3762e-02,
-1.5455e-01,-5.9547e-02,1.1610e-01,1.2007e-01,6.3875e-02,
-8.9958e-02,-3.5645e-02,-5.2850e-02,9.9614e-02,4.6651e-02},
{-5.0838e-02,-6.7186e-02,2.7101e-02,2.5438e-02,-4.0621e-02,
4.6191e-02,1.3958e-03,1.4635e-02,8.1017e-02,6.1788e-02,
3.6162e-02,6.8912e-03,2.3373e-02,8.3772e-02,1.5273e-01,
-1.9575e-03,-1.7626e-02,-1.1641e-01,-1.8589e-01,1.8450e-02,
4.2731e-02,-5.3285e-03,-2.1178e-02,-1.3926e-01,-2.9586e-02},
{2.7399e-01,1.5758e-01,7.9238e-02,-3.6992e-02,3.1049e-02,
1.3395e-01,2.5305e-01,1.2592e-01,-3.9147e-02,2.3410e-02,
4.5653e-02,1.2934e-01,1.7201e-01,5.6039e-02,-5.3598e-02,
-1.5867e-01,7.6985e-03,7.0959e-02,8.3013e-02,-1.2713e-01,
-2.2152e-01,-1.6324e-01,-4.3756e-02,1.4672e-02,-1.1115e-01},
{6.9832e-02,6.7604e-03,-3.7493e-03,1.6718e-02,1.1930e-01,
1.1366e-02,1.4893e-01,8.5992e-02,2.9096e-02,3.7669e-02,
-9.8109e-03,2.9920e-02,1.0932e-01,6.4019e-02,5.7078e-02,
1.0952e-01,1.8246e-02,-1.8192e-02,9.3234e-02,5.8581e-02,
8.3100e-02,9.3211e-02,-2.4502e-02,-6.8722e-02,4.0775e-02},
{-1.1732e-01,-1.4115e-01,-1.6666e-01,-7.9619e-02,-1.1209e-01,
-1.5615e-01,-3.0484e-02,-1.2924e-01,-1.8902e-01,-2.1257e-01,
-1.8407e-01,-2.3004e-01,-2.4494e-01,-3.9747e-01,-1.9315e-01,
-1.6725e-01,-2.2207e-01,-2.0410e-01,-2.2960e-01,-2.1358e-01,
-1.3910e-01,-1.5992e-01,-7.8970e-02,-5.4413e-03,-3.2477e-02},
{1.2924e-02,7.1906e-02,6.4878e-02,9.2877e-02,6.6420e-02,
-6.4317e-04,2.9451e-02,-4.9808e-02,-1.3024e-01,4.5625e-02,
-1.3063e-01,-6.2791e-02,1.7362e-02,-4.2451e-02,8.8129e-02,
-1.6294e-01,-1.3418e-01,-6.8965e-02,9.2221e-02,3.3169e-02,
-1.4719e-02,-1.3452e-02,-1.3115e-02,-2.9889e-02,-2.5391e-03},
{-1.0814e-02,-1.4711e-03,-6.4983e-02,-4.5716e-04,1.1758e-01,
-1.3179e-01,-5.9179e-02,7.0619e-02,1.4612e-01,1.0485e-01,
-4.7000e-02,8.0877e-03,7.1227e-03,-6.8991e-02,-1.0676e-01,
7.2503e-03,-4.4284e-02,-2.0663e-01,-2.2091e-01,-9.3981e-03,
-2.3840e-01,-1.4544e-01,-1.8461e-01,-1.4397e-01,-8.6769e-02},
{3.1374e-02,1.0915e-01,1.6616e-01,1.4395e-01,2.1719e-01,
-9.3562e-02,-2.4335e-02,6.9892e-02,1.0529e-01,1.7337e-01,
-1.2089e-01,-6.9311e-02,-6.0323e-02,3.0798e-02,1.5457e-01,
-1.4780e-01,-1.2993e-01,-6.8567e-02,-1.0465e-02,1.2248e-01,
-1.7056e-01,-1.0047e-01,-1.1948e-01,-4.5468e-03,8.6447e-02},
{1.4636e-01,-2.7648e-03,-6.8493e-02,-1.5496e-01,-1.8607e-01,
1.5161e-01,7.9766e-02,-5.2173e-02,-6.1060e-02,-7.7307e-02,
1.0936e-01,1.1222e-01,3.8478e-02,-6.7575e-02,-6.4206e-02,
6.0136e-02,2.4729e-02,2.6794e-02,-7.5237e-02,-7.6781e-02,
1.1644e-01,5.1894e-02,7.8889e-02,9.6778e-02,-7.8151e-02},
{-8.1864e-02,3.8247e-02,-3.7893e-02,-2.7062e-03,1.3274e-01,
-1.8135e-01,-3.6693e-02,3.2277e-02,5.6139e-02,2.3123e-02,
1.4066e-02,-7.5903e-02,-1.3773e-01,-1.1557e-02,9.3332e-02,
-1.0467e-01,-1.4292e-01,-2.4409e-01,-9.7199e-02,1.5121e-02,
-2.0239e-01,-1.4747e-01,-1.1868e-01,-8.8752e-02,-1.1909e-02},
{4.6470e-02,1.8097e-02,6.6754e-02,-6.5604e-02,-2.2135e-01,
8.2213e-02,7.6754e-02,1.2172e-01,7.8446e-02,-8.4010e-02,
4.3277e-02,-4.3922e-02,-6.4068e-02,-7.4284e-04,8.5775e-02,
2.6190e-02,-6.4065e-02,-1.4459e-01,-6.8226e-02,5.0074e-04,
5.2718e-03,-5.8228e-02,-3.0784e-03,-1.1173e-01,-6.7957e-02},
{1.1030e-01,7.7325e-02,6.9331e-02,1.7308e-02,-7.8275e-02,
-1.4042e-01,-3.0208e-02,5.1984e-02,1.6487e-01,1.1002e-01,
-6.9338e-02,5.7609e-03,4.3244e-02,3.3273e-02,3.6358e-02,
2.3190e-02,3.2784e-02,6.0440e-02,-8.6424e-02,-3.3892e-03,
-3.3027e-02,-6.6593e-02,1.3242e-02,1.0015e-02,-5.0186e-02},
{9.6113e-02,6.5268e-02,1.3350e-02,8.8091e-02,-6.3004e-03,
5.6420e-02,-2.1887e-02,-6.3170e-02,1.7331e-02,4.7347e-02,
-8.3489e-02,-7.9949e-02,-1.1908e-01,8.8433e-02,2.1787e-01,
-8.5874e-02,-1.4769e-02,7.6503e-02,7.7841e-02,4.1411e-02,
-2.6838e-02,2.0221e-02,1.4040e-01,8.6584e-02,1.2371e-01}},
# 66 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(conv2_weight);
# 64 "my_net/src/my_net.cpp"


 const half conv1_bias[16] = {

# 1 "my_net/src/./weight/conv1_bias.dat" 1
-0.1539,
-0.1528,
-0.1604,
-0.0905,
-0.1601,
-0.2680,
-0.0025,
-0.0547,
-0.0215,
-0.0764,
0.1542,
0.0312,
-0.0232,
-0.0933,
-0.0376,
-0.2777,
# 70 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(conv1_bias);
# 68 "my_net/src/my_net.cpp"

 const half conv2_bias[32] = {

# 1 "my_net/src/./weight/conv2_bias.dat" 1
-0.0825,
0.0031,
0.1403,
-0.0296,
-0.0572,
0.2445,
0.1913,
0.0518,
0.1875,
0.1364,
0.1046,
0.2159,
0.0433,
-0.1821,
-0.3013,
0.1173,
-0.0465,
-0.1513,
-0.2326,
-0.0681,
-0.0394,
0.4260,
0.1944,
-0.0523,
-0.1314,
0.0302,
0.1921,
-0.0072,
0.2613,
-0.1864,
0.0047,
0.0429,
# 73 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(conv2_bias);
# 71 "my_net/src/my_net.cpp"

 const half fc1_weight1[48000] = {

# 1 "my_net/src/./weight/fc1_weight1.dat" 1
0.006391,
-0.002437,
0.012572,
0.014400,
-0.030008,
-0.021943,
0.000175,
-0.039245,
0.022859,
-0.003466,
0.006915,
-0.038161,
0.025615,
-0.020826,
0.017027,
-0.034326,
-0.037129,
-0.031720,
-0.041907,
-0.014545,
-0.025860,
0.017986,
0.015250,
0.006539,
-0.021965,
-0.018627,
-0.014385,
-0.018488,
0.043960,
-0.022730,
0.015166,
-0.010925,
0.006870,
0.011113,
0.016001,
-0.020359,
0.028761,
-0.024999,
-0.037469,
-0.028650,
0.012872,
-0.011950,
-0.014790,
-0.022318,
-0.005221,
-0.032236,
-0.013312,
0.000469,
0.027820,
-0.024196,
0.002663,
-0.043449,
0.016440,
-0.003635,
-0.035253,
0.024865,
-0.000191,
0.014160,
-0.037803,
0.008265,
0.012215,
0.007770,
0.013678,
-0.040264,
-0.005971,
0.012325,
-0.036821,
0.020787,
-0.038246,
-0.015075,
-0.000898,
0.016068,
-0.030509,
0.010334,
0.007449,
-0.015177,
0.027222,
0.002953,
-0.008178,
-0.034500,
-0.034383,
-0.020731,
0.026119,
-0.016842,
-0.016777,
-0.039976,
-0.008042,
-0.011936,
-0.026803,
0.014159,
-0.026771,
0.008727,
-0.008265,
0.000347,
0.027944,
-0.006902,
-0.028293,
0.001520,
0.005704,
0.017008,
0.015084,
-0.032010,
-0.008355,
-0.008316,
0.011447,
-0.002718,
0.025420,
-0.030948,
-0.049378,
-0.005045,
-0.037468,
0.010116,
0.009145,
-0.056240,
-0.038158,
0.020295,
-0.000672,
-0.014220,
-0.003388,
-0.043223,
0.011275,
-0.026301,
-0.002926,
0.007832,
-0.026808,
-0.003178,
-0.029937,
-0.035895,
-0.037129,
0.006061,
-0.026772,
0.023017,
0.028533,
-0.002212,
0.007709,
0.005134,
0.001579,
-0.003410,
0.019793,
-0.009671,
0.004829,
-0.014602,
0.003164,
-0.038259,
-0.007468,
-0.021919,
-0.033436,
-0.025467,
-0.035993,
-0.038201,
0.002125,
-0.029451,
0.007750,
-0.004386,
-0.009933,
0.006414,
0.022213,
-0.031411,
-0.003923,
0.008535,
-0.027203,
0.021171,
0.003369,
0.001437,
-0.002540,
-0.009558,
-0.004737,
-0.022035,
0.015207,
0.021586,
0.007438,
0.014503,
0.018891,
-0.001438,
-0.029943,
0.014725,
-0.020689,
0.021251,
0.008685,
0.023933,
0.027236,
0.019505,
-0.038308,
-0.011172,
0.014892,
-0.040147,
-0.020869,
0.001106,
-0.009494,
0.002466,
0.017342,
-0.035294,
-0.043031,
0.001279,
0.008990,
-0.029354,
-0.018651,
-0.039107,
-0.031481,
-0.014543,
0.025675,
-0.010961,
-0.008734,
-0.016760,
-0.026618,
-0.028905,
-0.029099,
0.025318,
-0.007808,
-0.005957,
0.026493,
-0.028551,
-0.028458,
-0.020647,
-0.004072,
-0.015985,
-0.001235,
0.011127,
0.009331,
-0.022627,
0.015931,
-0.031304,
0.015380,
0.029473,
0.030979,
0.024096,
-0.024024,
0.002999,
-0.032584,
-0.012208,
0.000482,
-0.051702,
0.003758,
0.025368,
0.022221,
-0.045021,
-0.036970,
-0.005353,
0.033876,
0.012382,
-0.005409,
0.005552,
-0.000116,
-0.036655,
-0.042156,
0.012631,
-0.040719,
-0.021048,
-0.052544,
-0.050784,
0.027984,
0.004426,
0.020343,
-0.009585,
-0.022746,
0.027134,
-0.039931,
-0.027679,
-0.004270,
-0.034232,
-0.034553,
-0.005073,
-0.029973,
-0.037052,
-0.017473,
0.002181,
0.002578,
-0.021750,
-0.012346,
-0.007429,
0.027363,
0.016438,
-0.007820,
-0.034467,
0.004197,
-0.034608,
-0.039533,
-0.012232,
-0.010188,
0.014971,
-0.012465,
-0.011685,
-0.010806,
-0.001435,
0.025730,
0.011757,
-0.033054,
0.019653,
0.014068,
-0.004219,
-0.009674,
0.022100,
0.020753,
0.003749,
-0.010845,
-0.014975,
0.026348,
-0.033542,
0.005180,
0.019926,
-0.021151,
0.015873,
-0.008786,
-0.005563,
-0.018697,
-0.033466,
-0.016526,
-0.043904,
-0.032056,
0.031682,
0.001819,
-0.004498,
0.019989,
-0.013063,
-0.030536,
-0.013951,
-0.009773,
-0.019005,
-0.025461,
-0.026496,
-0.037051,
0.025390,
-0.032423,
-0.015299,
0.025111,
-0.022219,
-0.016111,
-0.047473,
-0.020320,
-0.035158,
-0.038664,
0.017064,
-0.000310,
-0.007875,
0.024319,
-0.040847,
-0.013786,
-0.033829,
0.012182,
0.019037,
0.002287,
-0.003174,
0.017854,
-0.012891,
-0.010334,
-0.013338,
-0.024351,
-0.030315,
0.017051,
-0.014044,
-0.034852,
-0.028184,
0.007460,
-0.027617,
0.001525,
0.001334,
0.003663,
-0.017395,
-0.038650,
-0.011407,
-0.040774,
0.001624,
0.014339,
0.011775,
0.016003,
-0.004216,
0.003357,
0.017312,
-0.010366,
0.007724,
-0.022769,
-0.020584,
-0.003150,
-0.018949,
-0.027848,
-0.011836,
-0.015749,
-0.021514,
-0.015068,
0.011740,
-0.019176,
0.008875,
-0.003787,
-0.004936,
-0.018488,
-0.026331,
0.003538,
0.016543,
0.006243,
-0.022997,
-0.015272,
-0.000042,
0.015865,
-0.004001,
-0.019521,
-0.020747,
0.036076,
-0.032978,
0.010466,
0.009057,
-0.016207,
-0.014478,
0.042036,
-0.000388,
-0.025051,
-0.001300,
-0.024241,
-0.005453,
0.033050,
-0.005729,
-0.006233,
-0.029146,
-0.005693,
-0.010702,
-0.001349,
-0.003764,
-0.011539,
-0.013832,
-0.008182,
-0.020516,
-0.035330,
-0.027880,
0.013863,
0.016834,
0.001190,
0.018356,
-0.003179,
-0.023349,
-0.003321,
-0.018102,
-0.039729,
-0.032314,
-0.000745,
0.012620,
0.020842,
0.008832,
0.017023,
0.005322,
-0.018671,
-0.039256,
0.006503,
0.024969,
0.020612,
0.010166,
-0.014242,
-0.027314,
0.000456,
-0.018067,
0.016729,
-0.018155,
-0.031382,
-0.048310,
-0.013206,
-0.014046,
0.009074,
-0.027101,
0.023107,
0.001669,
0.013761,
0.014052,
-0.013296,
0.011617,
-0.016567,
-0.026993,
-0.014958,
0.017697,
-0.025983,
-0.020075,
0.006240,
-0.021277,
-0.019786,
0.004980,
-0.007101,
0.014139,
-0.014240,
-0.026718,
-0.013732,
0.012913,
-0.011330,
-0.014253,
-0.008432,
0.017906,
-0.041737,
-0.026596,
-0.006382,
-0.034449,
0.025757,
0.018171,
0.009905,
-0.013421,
-0.023844,
-0.031896,
-0.007940,
-0.010946,
0.007234,
0.006883,
0.004328,
-0.039877,
0.006700,
-0.029518,
0.009640,
0.026912,
-0.034923,
0.015705,
0.034835,
0.009709,
0.028114,
0.028258,
-0.027159,
-0.001736,
-0.022535,
-0.019783,
-0.002852,
-0.015038,
-0.026143,
0.012965,
-0.029295,
0.017471,
-0.003323,
-0.011328,
-0.031716,
-0.017045,
-0.034692,
-0.032321,
0.034300,
0.024527,
-0.011525,
0.000750,
-0.010433,
-0.025231,
0.016250,
0.029420,
0.025251,
0.006054,
-0.032270,
0.023313,
-0.030377,
-0.026744,
0.017303,
0.017624,
0.008008,
0.011911,
-0.037475,
-0.019225,
0.000605,
0.019025,
-0.032599,
-0.017018,
-0.019888,
-0.031897,
-0.043804,
0.026640,
-0.035378,
0.003703,
-0.005672,
-0.031478,
-0.017679,
-0.039831,
0.004207,
-0.013971,
0.011544,
-0.036214,
-0.044295,
0.003189,
-0.026424,
-0.045320,
0.008773,
-0.039484,
-0.027433,
-0.036213,
0.005075,
-0.024727,
-0.043003,
0.019864,
-0.002172,
-0.026606,
-0.029259,
0.018041,
0.002278,
-0.001412,
0.004041,
0.006627,
-0.028935,
0.018738,
-0.047701,
-0.037689,
-0.001827,
-0.009504,
0.000610,
-0.037357,
-0.032152,
0.004924,
-0.014087,
0.007119,
-0.029322,
-0.006718,
-0.038903,
0.017339,
-0.015671,
-0.029976,
-0.028157,
-0.000428,
0.011910,
-0.008604,
0.029613,
-0.039194,
-0.013636,
-0.021196,
-0.039449,
0.031322,
-0.012801,
-0.012848,
0.016427,
0.006305,
0.010001,
-0.030521,
-0.005223,
-0.045794,
0.013151,
-0.002958,
-0.031692,
0.010557,
0.007744,
0.022700,
0.002107,
0.014949,
-0.013990,
-0.023538,
-0.016357,
0.006179,
0.008672,
-0.034549,
-0.002116,
-0.027801,
0.010055,
-0.030511,
0.027058,
0.000469,
-0.013747,
-0.013612,
-0.026993,
-0.041880,
-0.002093,
-0.005661,
-0.008696,
0.005997,
-0.029327,
0.004545,
0.009381,
0.021235,
-0.011240,
-0.029537,
0.016085,
0.022151,
-0.000716,
-0.037811,
-0.023850,
0.003609,
-0.037632,
-0.021610,
-0.020522,
0.008988,
-0.026013,
-0.016001,
-0.014662,
-0.020013,
-0.025895,
-0.006005,
-0.033110,
-0.004980,
-0.038692,
-0.039697,
-0.012625,
-0.036804,
0.007686,
-0.006923,
-0.029093,
0.018328,
0.025960,
-0.001544,
0.003448,
-0.004583,
0.015374,
-0.021604,
-0.029459,
0.011219,
-0.011889,
0.001522,
0.007095,
0.024412,
0.007351,
-0.003217,
-0.017720,
0.009736,
-0.021386,
0.001065,
-0.036456,
-0.036008,
-0.014697,
-0.014375,
0.020890,
0.012061,
-0.026827,
-0.003177,
0.033830,
-0.025158,
-0.000136,
-0.003260,
-0.003826,
-0.037328,
0.015101,
-0.009760,
-0.022030,
-0.009484,
0.027783,
0.009192,
0.030253,
-0.000240,
-0.034047,
0.012123,
-0.015480,
0.019838,
0.005573,
-0.042736,
-0.022790,
-0.027785,
0.016855,
0.001396,
0.013771,
0.012156,
-0.017937,
-0.024058,
-0.044310,
-0.010669,
0.015538,
0.017477,
-0.005470,
0.015449,
-0.003579,
0.005670,
0.008917,
0.010269,
-0.021952,
0.008851,
-0.006706,
-0.005284,
-0.004172,
-0.013653,
-0.005376,
-0.042617,
0.028462,
0.010287,
0.003663,
0.035147,
0.035888,
0.034537,
0.007197,
-0.013979,
-0.002997,
-0.005432,
-0.032265,
0.021883,
-0.022299,
0.018932,
0.021561,
0.004642,
0.033419,
0.010391,
-0.002465,
-0.011287,
-0.033958,
-0.014655,
-0.012651,
-0.031232,
-0.033165,
-0.006719,
0.020223,
-0.046715,
-0.034455,
-0.028669,
0.012753,
-0.002999,
0.021433,
-0.045510,
-0.024977,
-0.010581,
0.010271,
0.021476,
-0.008349,
-0.020160,
0.003217,
-0.036479,
-0.003000,
-0.040708,
-0.009275,
-0.031618,
-0.027070,
0.027038,
0.009977,
0.008352,
-0.038019,
-0.036451,
0.017760,
-0.026889,
0.000096,
0.017800,
-0.026702,
-0.004204,
-0.038543,
-0.021457,
-0.013780,
-0.017689,
0.024464,
0.015135,
-0.027584,
-0.063870,
-0.027544,
0.005113,
-0.032392,
-0.069172,
-0.047224,
0.010670,
-0.023344,
-0.029877,
-0.049470,
-0.039309,
-0.001928,
-0.040153,
-0.004627,
-0.002082,
0.006164,
-0.033734,
-0.019012,
-0.028184,
0.027875,
-0.003163,
0.016622,
-0.024748,
-0.024694,
-0.027727,
0.020037,
-0.020440,
0.015996,
-0.009367,
-0.011626,
0.015969,
-0.003793,
0.022404,
-0.026274,
-0.003009,
0.027653,
-0.023966,
-0.018643,
-0.017349,
0.011570,
-0.022734,
-0.036945,
0.031533,
-0.035269,
-0.029493,
-0.014910,
-0.007003,
-0.029093,
-0.015839,
0.002884,
0.000874,
-0.027592,
-0.001987,
-0.001813,
-0.017453,
-0.034008,
-0.000359,
0.006749,
-0.003789,
-0.005104,
-0.024510,
0.004396,
0.006707,
-0.007368,
0.003059,
-0.002734,
0.016495,
-0.028700,
0.018051,
-0.003397,
0.011793,
0.005335,
-0.022969,
-0.007773,
-0.020589,
-0.038309,
0.022028,
0.013433,
-0.021794,
-0.009514,
-0.036239,
-0.023328,
-0.008604,
-0.014049,
-0.005533,
0.016381,
-0.009456,
-0.035847,
0.000116,
-0.001027,
0.026211,
-0.019039,
-0.011436,
-0.049757,
-0.015220,
-0.032590,
-0.052106,
-0.001694,
-0.053176,
-0.027116,
-0.015090,
-0.012063,
-0.044718,
-0.052818,
-0.031330,
-0.022984,
0.009982,
-0.047108,
-0.062155,
-0.004411,
-0.047346,
-0.016786,
0.022443,
-0.024680,
-0.038724,
-0.012517,
-0.007755,
-0.027685,
0.029877,
-0.023108,
-0.005653,
0.012600,
-0.033439,
0.027043,
-0.041378,
0.023860,
0.013793,
-0.007966,
0.001346,
0.016055,
0.023935,
-0.001341,
-0.017868,
0.005643,
-0.022829,
-0.014888,
-0.047986,
-0.070045,
-0.014476,
-0.025405,
-0.011619,
-0.020923,
-0.054970,
0.021520,
0.010275,
-0.065172,
-0.007322,
-0.014461,
-0.003071,
0.019688,
-0.062032,
-0.048117,
0.030952,
0.027318,
-0.019938,
-0.024348,
-0.049853,
-0.002883,
-0.008775,
0.003699,
-0.007867,
0.019074,
-0.032849,
-0.026068,
0.022015,
-0.003804,
-0.002992,
-0.006457,
-0.000383,
-0.012411,
-0.020267,
0.004228,
-0.000668,
-0.011334,
-0.034115,
0.027505,
0.031307,
0.000011,
-0.011190,
-0.001149,
-0.001564,
-0.010214,
-0.026385,
0.018320,
-0.021224,
-0.017745,
0.010616,
-0.036516,
-0.042412,
-0.056654,
-0.022258,
0.004187,
-0.027438,
-0.032427,
-0.013698,
0.018851,
-0.035392,
0.002503,
-0.030588,
-0.004534,
0.026263,
0.007094,
-0.011168,
0.028864,
-0.045192,
0.016940,
-0.035597,
-0.008369,
-0.031726,
-0.062914,
-0.056958,
0.015402,
-0.010676,
0.020765,
-0.014463,
0.013939,
-0.024955,
-0.019373,
-0.023094,
0.015975,
-0.028574,
-0.049395,
-0.046970,
0.004104,
-0.019481,
-0.025006,
-0.063419,
-0.041095,
-0.001037,
-0.033605,
-0.001051,
-0.026460,
-0.035854,
-0.040735,
-0.047621,
-0.018055,
-0.034769,
-0.007564,
0.003134,
-0.026801,
-0.036588,
-0.011024,
-0.065392,
-0.037572,
-0.028116,
-0.001105,
-0.026270,
-0.002993,
-0.004729,
-0.038358,
0.020447,
0.012956,
0.002974,
-0.016231,
-0.023098,
-0.042110,
-0.035201,
-0.030523,
-0.032659,
-0.026364,
-0.009969,
-0.022353,
-0.025830,
0.018189,
-0.034095,
-0.004808,
0.001452,
-0.006894,
-0.036037,
-0.011953,
-0.034734,
-0.037712,
-0.032392,
-0.039631,
-0.060460,
-0.049031,
-0.009739,
-0.013079,
-0.008288,
-0.029398,
-0.053399,
-0.009555,
-0.032863,
-0.007442,
-0.034200,
0.000171,
-0.017357,
-0.006182,
-0.028386,
-0.038686,
-0.027015,
-0.040328,
-0.032467,
-0.007542,
-0.061953,
-0.029663,
0.018863,
0.007039,
-0.040677,
-0.007980,
0.003215,
-0.004128,
-0.016544,
-0.062294,
-0.018471,
0.006434,
-0.021750,
-0.006764,
-0.012795,
-0.067094,
-0.018270,
-0.038914,
-0.056315,
-0.040592,
0.019783,
-0.031360,
-0.044255,
-0.024001,
-0.002200,
-0.010139,
-0.018228,
-0.034261,
-0.021116,
0.001659,
-0.016925,
-0.066977,
-0.047784,
-0.022877,
-0.010797,
-0.015337,
-0.039934,
-0.032755,
-0.055360,
-0.000861,
0.007009,
-0.020782,
-0.040926,
-0.031059,
-0.036468,
-0.005435,
-0.008946,
-0.063126,
-0.001187,
-0.037916,
-0.032962,
-0.018734,
-0.029812,
-0.029466,
-0.044198,
-0.029184,
-0.028151,
0.008056,
-0.027400,
-0.056128,
-0.027420,
-0.018666,
-0.008414,
-0.027288,
-0.001749,
-0.064728,
-0.013693,
-0.030055,
-0.048068,
0.006955,
-0.016974,
0.021308,
-0.045531,
-0.037181,
-0.015861,
-0.017837,
0.011684,
-0.003480,
0.002664,
0.028075,
-0.040111,
-0.002611,
-0.017454,
-0.027946,
-0.034498,
-0.015062,
0.007589,
0.003102,
0.011394,
-0.015372,
-0.004824,
0.018753,
-0.012265,
-0.024163,
0.003391,
0.005096,
-0.011227,
-0.018593,
0.015442,
-0.010281,
-0.006496,
0.000228,
-0.010223,
0.020677,
0.026891,
-0.014925,
0.004831,
0.003849,
-0.006233,
-0.031730,
-0.011127,
0.017220,
-0.028695,
-0.002218,
0.026116,
-0.034753,
0.011056,
0.020314,
-0.017382,
-0.050150,
-0.057125,
-0.069622,
-0.001099,
-0.005852,
0.016317,
-0.059979,
0.005815,
-0.021972,
-0.053571,
0.026995,
-0.033316,
0.028832,
-0.015512,
0.022276,
-0.024732,
0.029715,
-0.037518,
-0.004090,
-0.017896,
-0.010167,
-0.021733,
-0.037766,
-0.036500,
-0.057826,
-0.031348,
-0.003609,
-0.022990,
-0.028920,
-0.000388,
-0.009884,
-0.011781,
-0.030869,
-0.030573,
-0.005022,
-0.071660,
-0.010527,
0.022036,
-0.000522,
-0.013485,
-0.043444,
-0.001627,
0.006649,
-0.029429,
-0.004711,
-0.015171,
-0.003202,
-0.042919,
-0.043319,
-0.053869,
-0.015116,
-0.004970,
-0.027053,
-0.035681,
-0.043218,
-0.068070,
-0.008201,
0.000340,
-0.014599,
-0.045256,
-0.054973,
-0.017538,
-0.066813,
-0.028819,
-0.056028,
-0.023849,
0.005205,
-0.006260,
-0.012487,
-0.024532,
-0.032449,
-0.032309,
0.011349,
0.001861,
-0.034265,
-0.012928,
0.020654,
0.027855,
0.026528,
0.002780,
0.019494,
0.006440,
0.016003,
0.029396,
-0.009472,
0.026080,
0.011986,
0.024121,
0.026162,
-0.014681,
0.015988,
0.034833,
0.026320,
0.023572,
-0.012756,
-0.023766,
-0.006080,
-0.005690,
-0.025461,
-0.007494,
0.026367,
-0.006222,
-0.004619,
-0.062232,
-0.009543,
-0.067076,
-0.009073,
-0.031817,
-0.020778,
-0.019511,
0.012187,
0.016707,
-0.038798,
0.005418,
-0.007075,
-0.021304,
0.018680,
-0.038635,
-0.007745,
-0.008320,
-0.030647,
-0.002620,
-0.069396,
-0.013007,
-0.061561,
-0.021278,
-0.059298,
-0.008631,
-0.016192,
0.023115,
-0.033067,
-0.011688,
-0.005164,
-0.001354,
0.019164,
0.008407,
-0.027508,
0.026108,
0.018433,
-0.023642,
-0.016614,
0.020230,
-0.049894,
-0.069417,
-0.036182,
-0.014955,
-0.015867,
-0.025539,
0.026569,
0.002205,
-0.018178,
-0.040631,
0.021407,
0.004071,
-0.023486,
-0.037333,
0.006530,
0.016708,
0.009029,
-0.031078,
-0.035363,
-0.013493,
-0.058195,
-0.020841,
-0.019769,
0.003636,
-0.064048,
-0.015847,
-0.014615,
-0.059912,
-0.029028,
-0.027162,
-0.010230,
-0.026823,
-0.039688,
0.003972,
0.022234,
-0.031888,
-0.009935,
-0.032210,
-0.043761,
-0.010727,
-0.015684,
-0.008080,
-0.047467,
-0.013197,
0.019070,
-0.025933,
-0.041756,
-0.033634,
-0.030950,
-0.019053,
-0.041072,
-0.021133,
-0.048524,
-0.040987,
-0.032949,
-0.020667,
-0.021871,
0.024954,
0.017143,
-0.021925,
-0.050575,
-0.049243,
0.004710,
-0.064864,
-0.031467,
-0.030344,
-0.035805,
-0.061978,
-0.037877,
-0.017111,
0.001026,
0.010536,
0.023168,
-0.003495,
-0.013452,
0.028258,
-0.022449,
0.006025,
0.016866,
0.023296,
0.009715,
-0.036039,
-0.014059,
0.029006,
0.021657,
0.002417,
0.003363,
0.009905,
-0.036581,
-0.016187,
0.016609,
-0.058492,
-0.013669,
-0.034425,
0.021859,
0.006088,
-0.028025,
0.019293,
-0.013096,
-0.033088,
-0.021665,
-0.034961,
0.008604,
0.013793,
-0.019132,
-0.022223,
-0.023554,
0.022381,
0.011031,
-0.035075,
0.028194,
0.007357,
-0.034025,
-0.015605,
-0.018672,
-0.026822,
0.027772,
0.011491,
-0.008470,
-0.038853,
0.000221,
-0.008644,
-0.017560,
-0.037349,
-0.016473,
0.018812,
-0.017857,
-0.012674,
-0.001009,
-0.017049,
-0.006042,
0.024722,
-0.054033,
-0.003353,
-0.034281,
-0.047845,
0.032245,
-0.003266,
-0.024988,
0.022787,
-0.038270,
0.003130,
-0.003596,
-0.032280,
0.019675,
0.006602,
0.005976,
-0.010106,
0.018417,
-0.030465,
0.025116,
-0.003857,
-0.016204,
-0.014850,
-0.017165,
-0.026164,
-0.040297,
-0.024289,
0.008112,
-0.010948,
0.010557,
-0.029560,
0.023797,
0.016100,
-0.006874,
0.003601,
0.006556,
-0.038725,
-0.049577,
-0.030501,
-0.000696,
-0.031896,
-0.065816,
-0.012702,
-0.009491,
-0.012581,
-0.052724,
-0.019649,
-0.054986,
-0.059097,
-0.032021,
-0.014227,
0.005016,
0.021477,
-0.020571,
-0.025563,
-0.026211,
-0.027200,
-0.001009,
0.008772,
0.001085,
0.026253,
-0.011583,
0.016377,
0.006841,
-0.023862,
0.026716,
0.007527,
-0.015778,
-0.005101,
-0.029405,
-0.037136,
-0.040236,
-0.020314,
0.000899,
-0.012657,
0.012555,
-0.035928,
0.019241,
-0.039033,
-0.016339,
-0.036230,
0.008700,
-0.011570,
-0.014568,
0.005969,
0.006378,
-0.001998,
0.008304,
-0.020127,
-0.006613,
-0.061863,
-0.054030,
-0.022047,
0.000232,
-0.010462,
-0.010880,
0.007053,
-0.033387,
-0.015746,
-0.016894,
0.027315,
0.005708,
0.025900,
-0.009402,
-0.027423,
-0.035062,
-0.029799,
-0.022127,
0.012027,
0.004085,
-0.033598,
-0.031577,
-0.010056,
-0.010113,
-0.030695,
-0.024362,
-0.012072,
-0.030076,
-0.002257,
-0.008411,
0.005774,
0.017190,
-0.009112,
-0.032666,
-0.005704,
-0.014071,
0.004282,
0.002213,
-0.012508,
-0.023786,
-0.013620,
-0.028891,
0.018341,
-0.015643,
-0.026329,
0.003410,
0.033504,
0.008576,
-0.013069,
0.033305,
-0.034132,
-0.007050,
0.002519,
-0.000704,
-0.018350,
0.012006,
0.010894,
-0.012570,
-0.024088,
-0.009268,
-0.016096,
-0.025691,
0.029002,
-0.032339,
0.027434,
0.015274,
-0.021853,
0.010616,
-0.029875,
0.023316,
-0.009775,
0.017633,
-0.037669,
0.012627,
-0.039953,
-0.023679,
0.011819,
-0.032120,
-0.000789,
0.023068,
0.005831,
-0.026722,
0.029282,
0.004436,
0.028665,
0.007613,
-0.020561,
0.022503,
-0.012593,
0.009871,
0.028228,
0.007550,
0.012186,
-0.015877,
-0.016246,
-0.006743,
-0.026515,
0.015386,
0.003978,
-0.009637,
0.025977,
0.005324,
-0.026172,
-0.036260,
0.002028,
0.017738,
-0.009150,
-0.037588,
-0.009360,
-0.024587,
-0.026816,
0.019112,
0.023238,
0.029341,
-0.036358,
-0.022602,
0.028133,
0.002197,
-0.009344,
-0.036427,
-0.024911,
0.014239,
-0.034559,
0.017070,
-0.009686,
0.030537,
-0.024198,
0.000303,
0.017075,
-0.017001,
-0.009242,
-0.030605,
0.001606,
-0.015719,
-0.011129,
-0.036715,
-0.020469,
0.012184,
0.023980,
-0.023580,
0.028343,
-0.004888,
0.025673,
-0.012187,
-0.010951,
0.027327,
0.004034,
-0.031018,
-0.011895,
-0.037435,
0.008189,
0.000685,
0.032837,
0.019180,
0.000976,
0.016396,
-0.022104,
0.002497,
0.007705,
-0.015043,
-0.001174,
0.010253,
-0.033414,
-0.035527,
-0.019514,
-0.039181,
-0.039042,
0.002386,
-0.024786,
0.022964,
0.003841,
-0.000540,
0.014441,
-0.037114,
0.027314,
-0.028081,
0.015399,
0.022060,
-0.019248,
0.021883,
-0.031488,
-0.002819,
-0.024181,
-0.040421,
-0.007556,
-0.015506,
-0.002629,
-0.016872,
0.028209,
-0.035505,
0.019575,
0.024481,
0.010434,
0.002135,
-0.003203,
-0.008253,
-0.029788,
-0.034417,
-0.033580,
-0.032106,
0.013920,
0.004094,
0.018207,
-0.011752,
-0.028045,
-0.036049,
0.016540,
0.014887,
0.008872,
-0.025574,
-0.027177,
0.012731,
0.030561,
0.007124,
0.005977,
-0.022184,
-0.001613,
-0.028564,
-0.025403,
0.023023,
-0.004541,
0.021534,
-0.019272,
-0.010892,
-0.011971,
0.030997,
-0.020179,
0.028252,
-0.026440,
0.008072,
0.030545,
0.034130,
0.034107,
-0.003359,
0.027601,
0.022000,
0.027671,
-0.036233,
0.029571,
-0.034561,
-0.040161,
-0.016904,
-0.037981,
0.008658,
0.015619,
-0.018073,
0.020408,
0.016680,
-0.008953,
0.003762,
-0.015362,
-0.011211,
-0.003851,
0.001519,
0.020576,
-0.030588,
0.011715,
-0.003545,
-0.013234,
0.026392,
0.018765,
-0.019239,
-0.040007,
0.014786,
0.023921,
-0.010515,
0.012879,
-0.026313,
0.000067,
-0.023159,
-0.009220,
-0.028703,
0.029019,
-0.031435,
-0.027964,
0.018800,
-0.026230,
0.020147,
-0.026136,
0.024563,
-0.034868,
-0.009736,
0.021427,
-0.033814,
-0.014947,
-0.000437,
-0.003436,
-0.016435,
0.022607,
0.015693,
-0.020943,
-0.015646,
-0.036703,
-0.009269,
-0.011405,
-0.010815,
-0.012670,
0.002083,
0.009246,
0.011696,
0.015298,
-0.033960,
-0.034056,
-0.032579,
-0.015548,
0.017815,
0.022697,
-0.038313,
-0.032674,
-0.033658,
-0.024995,
-0.032342,
-0.017502,
0.026093,
-0.023868,
0.016583,
-0.030034,
0.029357,
0.028473,
-0.007487,
-0.020293,
-0.014716,
0.000509,
0.027277,
0.023935,
-0.013584,
0.021468,
0.012591,
-0.004432,
-0.022886,
0.010081,
0.019426,
0.005396,
-0.012772,
-0.035349,
-0.017454,
-0.038012,
-0.014621,
0.021934,
-0.028044,
0.012058,
-0.028003,
-0.019203,
-0.030895,
-0.005270,
0.027488,
-0.031173,
-0.008305,
-0.032360,
0.000642,
-0.004043,
-0.014072,
-0.015719,
-0.026260,
0.005390,
-0.013646,
0.009948,
-0.031594,
-0.000103,
0.033097,
-0.016602,
-0.019368,
-0.001442,
-0.014299,
0.017087,
-0.021817,
-0.035714,
0.010727,
-0.027637,
-0.021644,
-0.019528,
-0.036729,
-0.008969,
0.003895,
0.015065,
-0.033271,
0.020599,
-0.026613,
0.013779,
-0.004529,
0.014421,
-0.029925,
0.001021,
-0.012526,
0.018483,
0.016238,
0.004576,
-0.018672,
0.007763,
-0.023355,
0.027127,
-0.040427,
-0.013794,
-0.007088,
0.000898,
-0.021158,
0.006923,
-0.017535,
-0.035726,
-0.023941,
-0.020495,
-0.016810,
0.012015,
-0.004116,
-0.033339,
-0.033879,
-0.004910,
-0.027647,
-0.012882,
0.007194,
-0.008736,
-0.004935,
-0.020577,
-0.040199,
0.027105,
-0.002938,
-0.034318,
0.010642,
-0.024431,
-0.004444,
0.023794,
0.029505,
0.019656,
-0.031409,
-0.013242,
0.022373,
0.022126,
0.003998,
-0.010852,
-0.032700,
-0.029259,
0.005655,
0.002863,
-0.033444,
0.018491,
-0.034832,
-0.010043,
-0.038192,
-0.022124,
-0.006392,
0.026617,
-0.027703,
0.003221,
-0.027988,
0.013691,
0.024991,
-0.016377,
0.022499,
0.019165,
0.027485,
-0.029044,
-0.009807,
0.010500,
0.018935,
0.003723,
-0.021887,
0.004235,
-0.026258,
-0.017659,
-0.013387,
-0.018795,
-0.005751,
0.005270,
0.005806,
0.014962,
-0.032497,
-0.010214,
0.018750,
-0.012905,
-0.012700,
0.020461,
-0.035236,
-0.002845,
-0.007304,
0.018149,
-0.031441,
-0.019877,
-0.008682,
-0.016163,
-0.004472,
-0.036573,
0.028397,
-0.012800,
-0.037652,
0.011258,
-0.006243,
-0.005321,
-0.017154,
-0.040385,
-0.014027,
0.009340,
0.002080,
-0.040156,
-0.023227,
-0.012745,
-0.033095,
0.027818,
-0.001158,
0.005987,
0.029566,
-0.037774,
-0.027933,
-0.020963,
0.017926,
-0.020611,
-0.019895,
0.014604,
0.002020,
0.026179,
0.025709,
0.023599,
-0.003658,
-0.008985,
0.023945,
-0.001706,
0.016831,
0.007161,
0.004864,
-0.008031,
-0.012584,
-0.025954,
-0.004767,
-0.000459,
-0.003028,
0.022739,
0.016992,
-0.001497,
0.031028,
-0.030682,
-0.029267,
0.005004,
0.035158,
-0.016222,
0.026476,
-0.011122,
-0.021921,
-0.031393,
0.015330,
0.020586,
0.025828,
-0.028933,
-0.036495,
-0.033636,
-0.015957,
-0.003456,
0.000295,
-0.021333,
0.014280,
0.024422,
0.015262,
-0.040411,
0.003046,
-0.021739,
-0.030876,
0.026371,
0.018136,
0.018137,
0.001235,
-0.021460,
0.001058,
0.022708,
-0.019981,
-0.030024,
-0.012144,
-0.020300,
-0.023309,
0.002289,
0.001071,
-0.009192,
-0.031948,
-0.033277,
-0.022054,
-0.011984,
-0.027481,
-0.028179,
-0.017448,
-0.022577,
-0.023713,
-0.011281,
-0.014829,
0.029847,
-0.019535,
0.024995,
-0.027982,
-0.038625,
0.004925,
-0.026959,
0.016828,
-0.028989,
0.001076,
0.020201,
-0.040570,
-0.024735,
-0.020094,
0.012446,
-0.021813,
0.022056,
-0.020184,
0.003833,
0.020867,
0.016502,
-0.032935,
0.011112,
0.007361,
0.001179,
0.025234,
0.005050,
0.007793,
-0.022974,
-0.020262,
-0.010128,
0.025589,
-0.003443,
0.001553,
-0.022146,
0.023651,
0.003997,
-0.026176,
0.023250,
0.006676,
0.028083,
-0.024045,
0.019379,
0.022101,
-0.032095,
-0.036428,
-0.014405,
0.011110,
-0.004789,
-0.007077,
0.002301,
-0.018126,
0.003039,
0.020899,
0.000836,
0.008774,
-0.031789,
0.022925,
0.021796,
-0.006490,
-0.011561,
-0.023637,
0.014943,
0.006631,
0.024187,
-0.015094,
0.021825,
0.024506,
0.006095,
-0.033768,
0.024142,
0.009588,
0.010622,
-0.036757,
-0.016846,
0.023938,
-0.033627,
-0.023624,
-0.013320,
0.027312,
-0.022255,
-0.007182,
0.008827,
0.019827,
-0.035645,
0.001693,
-0.020100,
0.024370,
-0.019097,
0.000328,
-0.013035,
-0.014474,
-0.008769,
0.023926,
-0.001111,
0.013971,
-0.030840,
-0.027664,
-0.001358,
-0.039617,
-0.011935,
-0.019489,
-0.028014,
-0.020313,
0.002543,
-0.033438,
-0.004554,
0.028342,
0.027635,
0.024308,
-0.034748,
-0.007631,
-0.009960,
0.026150,
0.017254,
0.012490,
0.008175,
0.019345,
-0.002783,
-0.029353,
0.024786,
-0.007720,
-0.021299,
-0.000788,
0.028789,
0.026978,
0.024902,
-0.027598,
-0.020608,
-0.004688,
-0.020512,
-0.001490,
-0.012891,
0.032152,
0.007865,
-0.011273,
0.017736,
0.027628,
-0.025758,
-0.014729,
0.014527,
-0.015235,
-0.011230,
-0.005697,
-0.007673,
0.013072,
0.008361,
0.011013,
0.006234,
-0.013677,
-0.000859,
-0.027694,
0.010537,
-0.013364,
-0.024818,
-0.036065,
0.007718,
0.023234,
0.007724,
0.027020,
-0.034423,
0.022908,
0.027772,
-0.016817,
-0.004832,
-0.006793,
0.007871,
-0.037736,
0.011171,
-0.000717,
-0.013466,
-0.036339,
0.022805,
-0.015199,
0.001725,
-0.016271,
0.008945,
0.019258,
-0.026576,
0.009889,
0.003172,
0.005471,
-0.003368,
-0.031159,
0.027877,
0.022009,
0.006875,
-0.012160,
-0.027702,
0.015501,
-0.015867,
-0.040047,
-0.012569,
-0.016754,
-0.027593,
-0.021232,
-0.033255,
0.026831,
-0.023591,
0.002177,
0.006609,
-0.030218,
-0.021156,
0.016270,
0.007939,
0.003548,
-0.028678,
0.003186,
0.018551,
0.010825,
0.014039,
-0.012438,
0.020101,
-0.006589,
0.028061,
0.003749,
0.006206,
0.001129,
0.021963,
0.004973,
-0.031018,
0.029249,
-0.022650,
0.022327,
-0.025163,
0.017991,
-0.006118,
-0.011260,
0.024741,
0.021678,
-0.031291,
-0.016936,
-0.039468,
-0.014721,
-0.066514,
-0.019761,
0.035221,
-0.014578,
0.003418,
-0.067841,
-0.018234,
0.053989,
0.027811,
-0.004975,
0.000487,
-0.006515,
-0.003460,
-0.021154,
-0.008821,
-0.031733,
-0.018941,
-0.000485,
-0.025737,
-0.037182,
-0.014640,
-0.004587,
-0.001935,
-0.018354,
0.034235,
-0.025096,
-0.026910,
-0.027347,
-0.022962,
-0.025941,
-0.020699,
0.025735,
-0.019056,
-0.005169,
-0.026312,
-0.018429,
-0.023680,
-0.004499,
-0.029496,
-0.031385,
-0.029607,
-0.032724,
0.007938,
-0.029375,
0.021932,
-0.058139,
-0.010875,
0.004630,
0.008602,
0.026595,
-0.017053,
-0.002541,
-0.039157,
-0.019097,
-0.029670,
-0.034824,
0.022931,
0.029558,
-0.000354,
-0.051409,
-0.005717,
-0.005670,
-0.042385,
-0.051672,
-0.057073,
-0.001392,
-0.054144,
-0.030021,
-0.027991,
-0.038303,
0.025325,
-0.020956,
-0.003830,
-0.028525,
0.011430,
-0.021329,
-0.027053,
0.030306,
-0.018007,
-0.003057,
-0.025528,
0.010471,
0.016939,
0.007158,
0.018921,
-0.018990,
0.014659,
-0.032899,
0.002290,
0.007179,
-0.038690,
0.014943,
-0.015184,
-0.034064,
-0.036526,
-0.009462,
-0.000481,
0.016236,
-0.037453,
0.006813,
0.014199,
0.012415,
-0.008366,
0.002232,
-0.054725,
-0.041267,
-0.004268,
-0.020410,
-0.043241,
-0.027326,
0.019693,
-0.008500,
0.020180,
0.007380,
0.008165,
-0.047377,
0.002367,
0.029559,
0.042421,
-0.021856,
-0.014973,
-0.010214,
-0.014414,
-0.021664,
0.033525,
-0.050474,
-0.034809,
0.021739,
-0.014022,
-0.001506,
-0.051825,
-0.002973,
-0.015245,
-0.022060,
-0.015383,
-0.009874,
-0.066429,
0.025090,
0.027495,
-0.028288,
-0.070872,
-0.067617,
-0.022650,
0.005907,
-0.013239,
0.029855,
0.002993,
-0.032072,
0.008357,
-0.025061,
-0.032709,
0.020361,
0.002945,
0.003799,
0.009358,
-0.015687,
-0.019109,
-0.022399,
-0.012674,
0.009777,
-0.035562,
-0.003440,
-0.021413,
-0.022453,
-0.047650,
-0.063824,
-0.034237,
-0.004227,
-0.048239,
0.012858,
-0.013451,
-0.037544,
-0.022522,
0.009716,
-0.046268,
-0.047877,
-0.001583,
-0.030445,
-0.027895,
-0.060290,
0.034254,
0.056378,
0.041610,
0.017868,
0.027183,
-0.026761,
-0.012544,
-0.004799,
0.010310,
-0.051539,
-0.010441,
-0.051741,
-0.011239,
-0.009268,
-0.036705,
0.031286,
-0.007633,
-0.004526,
-0.003544,
-0.043756,
0.014316,
-0.026336,
0.005204,
-0.020544,
-0.018715,
-0.003866,
-0.048004,
0.016865,
-0.005755,
0.016978,
0.031664,
-0.035561,
0.002987,
-0.033316,
0.003273,
0.000655,
-0.045013,
0.006320,
-0.004681,
-0.027682,
-0.028225,
-0.009149,
0.006218,
-0.021831,
-0.039622,
-0.034702,
0.014393,
-0.007738,
0.007355,
-0.050948,
-0.011085,
-0.051573,
0.011685,
0.018239,
-0.018125,
0.017706,
0.013258,
0.024283,
-0.018907,
0.003345,
-0.047190,
-0.062942,
-0.019216,
0.012006,
0.027163,
-0.034140,
-0.046057,
-0.019767,
-0.007584,
0.015719,
-0.052851,
-0.022071,
-0.048893,
-0.058427,
-0.005741,
-0.024598,
-0.010309,
-0.010966,
-0.017536,
0.022726,
0.000106,
0.022307,
-0.025290,
-0.008918,
-0.044311,
-0.029768,
-0.014875,
0.041997,
0.034205,
-0.038987,
0.074231,
0.003815,
-0.014777,
-0.012396,
0.003667,
-0.012192,
-0.003226,
0.009913,
0.026341,
-0.007424,
-0.038543,
-0.009662,
0.022859,
-0.001946,
-0.004503,
-0.019885,
0.021039,
-0.006471,
0.044766,
0.046054,
0.039808,
-0.024832,
0.042312,
0.068040,
-0.009185,
-0.010883,
-0.017293,
-0.017177,
0.011099,
0.013097,
-0.012301,
-0.064907,
-0.011122,
-0.013451,
0.015013,
-0.008206,
-0.021984,
-0.050074,
0.031923,
0.001784,
0.000670,
-0.018588,
0.020681,
-0.031774,
-0.013250,
0.008395,
-0.050202,
-0.011362,
-0.039135,
-0.082117,
0.005133,
-0.009450,
0.026755,
-0.035160,
0.029900,
-0.023926,
-0.033126,
0.051792,
-0.017774,
-0.014391,
-0.044271,
-0.023057,
0.017393,
-0.044928,
0.002585,
0.017137,
0.082714,
0.071404,
-0.001431,
0.017337,
-0.004273,
0.017159,
0.043687,
0.034065,
0.025909,
-0.078916,
-0.056962,
-0.050026,
-0.000444,
-0.042310,
0.025283,
0.031217,
-0.008363,
0.015662,
-0.031749,
-0.016089,
-0.043267,
0.035083,
0.006023,
-0.007037,
-0.048378,
-0.001189,
0.000478,
-0.028295,
-0.022735,
-0.048879,
-0.029908,
-0.003766,
-0.034436,
-0.006908,
-0.042860,
0.007873,
-0.058316,
-0.047820,
-0.046186,
-0.019174,
-0.046776,
-0.074272,
-0.056558,
-0.031769,
-0.039581,
-0.046248,
-0.043019,
-0.028895,
-0.007143,
-0.078743,
-0.048680,
-0.086926,
-0.033213,
-0.029271,
-0.070619,
-0.031990,
-0.008223,
-0.013192,
-0.043691,
0.027600,
-0.004452,
-0.032557,
0.008608,
0.025322,
0.013501,
0.027588,
-0.013176,
0.015470,
-0.027439,
-0.039325,
-0.037659,
0.024908,
-0.014937,
-0.027565,
-0.021177,
0.007099,
-0.019834,
-0.034816,
-0.009916,
-0.028651,
-0.002542,
-0.032434,
-0.020151,
0.030139,
-0.047146,
-0.081684,
-0.043988,
0.002570,
-0.003954,
-0.022101,
-0.007875,
-0.060636,
-0.050004,
-0.001687,
-0.036294,
0.010710,
0.027474,
0.017620,
-0.073294,
-0.023576,
-0.010349,
-0.014977,
0.011839,
-0.013629,
-0.044479,
-0.065589,
0.001036,
-0.011368,
-0.076752,
-0.013744,
-0.018667,
-0.013237,
-0.053574,
0.005732,
-0.045119,
0.014996,
-0.055871,
-0.002294,
-0.016505,
0.015484,
0.016039,
-0.021352,
-0.003542,
-0.008280,
-0.023922,
-0.056168,
0.015364,
-0.023191,
-0.045165,
0.020101,
-0.019654,
-0.052315,
-0.044720,
-0.038252,
-0.061851,
-0.056099,
-0.060356,
-0.003143,
0.041694,
0.016076,
0.011091,
-0.041220,
-0.064241,
0.021064,
0.021687,
0.037203,
0.007977,
-0.032349,
0.014435,
-0.029309,
-0.002888,
-0.031781,
0.023057,
-0.015688,
0.039230,
-0.027655,
0.029947,
0.018350,
0.015536,
-0.026221,
-0.024945,
-0.010414,
-0.002948,
-0.014815,
0.031610,
0.018422,
-0.008913,
-0.033860,
-0.019995,
-0.026126,
0.008216,
0.025332,
0.034372,
0.006034,
0.032265,
-0.012267,
0.011625,
0.009357,
0.018311,
-0.034121,
0.009368,
-0.016560,
0.029491,
-0.007676,
-0.009938,
0.005145,
0.023528,
-0.013185,
-0.006230,
-0.015493,
0.017391,
0.020545,
0.017033,
-0.001862,
0.024096,
0.014363,
-0.024202,
-0.017341,
-0.055825,
-0.009606,
-0.033109,
-0.042687,
-0.034196,
-0.004649,
-0.046464,
-0.093194,
-0.054137,
-0.101620,
-0.087251,
0.044927,
-0.026290,
-0.053651,
-0.036486,
0.000049,
-0.032221,
-0.012323,
0.011216,
0.004243,
-0.026932,
0.013888,
-0.013318,
0.001749,
-0.005943,
-0.019373,
-0.047186,
-0.067282,
-0.038569,
-0.013745,
0.014366,
0.009574,
-0.017040,
-0.001091,
-0.029448,
-0.018394,
-0.036994,
-0.067899,
0.001650,
0.008695,
0.001820,
-0.003046,
0.015636,
-0.035251,
-0.054939,
-0.010019,
-0.025875,
0.035931,
-0.040595,
-0.019532,
-0.007869,
-0.026947,
-0.009649,
0.002227,
0.002678,
0.002068,
0.010523,
0.001152,
-0.015853,
-0.040284,
-0.038718,
0.007426,
0.010031,
0.007246,
0.029290,
0.046033,
-0.033133,
-0.035039,
-0.006855,
0.005837,
-0.007778,
-0.057433,
0.003274,
0.019081,
-0.026135,
0.032083,
0.032123,
0.044941,
0.000724,
-0.014073,
-0.049674,
-0.064829,
-0.055551,
-0.054863,
-0.049789,
-0.045296,
-0.075545,
-0.051492,
-0.035170,
0.020820,
0.037282,
-0.040866,
-0.040100,
0.012015,
-0.050985,
-0.039213,
-0.047080,
0.011094,
-0.059047,
-0.027696,
-0.050768,
-0.040870,
-0.022862,
-0.032362,
-0.045349,
-0.020623,
-0.037648,
-0.019142,
-0.007336,
-0.008939,
-0.071073,
-0.038911,
-0.024193,
-0.029917,
-0.039563,
-0.047495,
-0.023688,
-0.051398,
0.017861,
-0.025344,
-0.048455,
-0.039287,
-0.007953,
0.002338,
-0.006202,
-0.012528,
-0.018188,
-0.052860,
0.000480,
-0.012512,
-0.034318,
-0.039386,
-0.032483,
-0.011870,
-0.044998,
-0.031484,
-0.023416,
-0.030671,
0.011547,
-0.011161,
0.026983,
0.000186,
0.019408,
-0.020898,
0.031081,
0.012170,
-0.012810,
-0.021386,
0.029708,
0.010252,
0.032211,
0.011349,
0.006384,
0.011977,
0.021756,
-0.013975,
-0.005218,
0.030261,
0.006375,
0.021919,
-0.004440,
-0.069607,
-0.049233,
-0.029924,
-0.001916,
-0.036152,
-0.023176,
-0.009778,
0.000711,
0.046994,
0.027134,
-0.058798,
-0.002513,
-0.030594,
0.005092,
-0.016032,
-0.001621,
0.006581,
-0.009543,
-0.006654,
0.017997,
-0.015084,
-0.037461,
-0.065006,
0.011741,
0.003788,
-0.074857,
-0.053436,
-0.065625,
-0.013846,
-0.052870,
-0.065576,
-0.038208,
0.013616,
-0.018821,
0.019061,
-0.001932,
-0.034617,
-0.035444,
-0.037151,
0.013812,
-0.016906,
-0.037527,
-0.036340,
0.002127,
-0.025902,
-0.057868,
-0.015720,
-0.035659,
-0.073460,
-0.046544,
-0.014994,
-0.010566,
0.029314,
0.027329,
0.013118,
0.010299,
0.018719,
-0.005595,
-0.023525,
-0.021212,
-0.025575,
-0.031135,
0.003128,
0.034442,
-0.002735,
0.002922,
-0.013234,
0.017089,
-0.011352,
0.015864,
0.031177,
0.026181,
-0.005852,
-0.035267,
0.001492,
0.008078,
0.035250,
-0.050609,
-0.040857,
0.003390,
-0.014136,
-0.033586,
0.003381,
-0.029667,
-0.003110,
-0.015790,
0.024108,
-0.034336,
-0.025184,
0.015277,
-0.006525,
0.029758,
0.007222,
0.054694,
0.040857,
-0.018696,
-0.028824,
0.045146,
-0.008653,
-0.033466,
0.066369,
0.005183,
0.047928,
0.068600,
-0.052896,
-0.009146,
0.098478,
0.105030,
0.095014,
0.025819,
-0.128560,
-0.084199,
-0.066334,
0.032217,
0.138200,
-0.077414,
-0.066987,
-0.210120,
-0.151570,
0.150460,
-0.184850,
-0.242600,
-0.116150,
-0.091005,
-0.014395,
0.010646,
0.038550,
-0.000820,
-0.012505,
-0.022658,
0.009699,
0.028604,
-0.016591,
0.013276,
-0.031446,
-0.006840,
0.020125,
0.005721,
-0.023399,
-0.004365,
0.034932,
-0.020974,
-0.003674,
0.031197,
0.001701,
0.011458,
-0.027374,
-0.022366,
-0.023016,
-0.016473,
0.088634,
0.054290,
0.104660,
0.044012,
0.043016,
-0.018052,
-0.120330,
-0.079983,
-0.026699,
0.035510,
0.040213,
-0.138410,
-0.113910,
-0.010430,
0.100630,
-0.060688,
-0.030331,
-0.054084,
-0.091625,
-0.072098,
-0.057583,
-0.037292,
-0.137240,
-0.109260,
-0.037416,
0.058215,
0.034322,
-0.016366,
-0.001440,
0.006437,
0.002796,
-0.010948,
0.020696,
-0.028722,
0.006453,
0.026629,
0.025647,
0.016010,
-0.014257,
-0.028785,
-0.017476,
0.007471,
-0.008232,
-0.039334,
0.025317,
-0.003715,
-0.056703,
0.022656,
-0.007248,
0.021515,
-0.009409,
-0.092854,
-0.171310,
-0.085764,
0.011514,
-0.024106,
-0.077916,
-0.145560,
-0.140540,
-0.085174,
-0.000941,
0.014007,
0.082008,
0.109060,
-0.033890,
0.003432,
-0.041545,
-0.065146,
0.030239,
-0.155150,
-0.101710,
-0.084127,
-0.118020,
-0.089171,
-0.128750,
0.035977,
-0.172690,
-0.048391,
0.005995,
-0.002648,
0.015901,
-0.058152,
-0.037692,
-0.013453,
-0.053101,
-0.162320,
0.029244,
0.129170,
0.014846,
-0.035755,
-0.202490,
-0.154030,
0.079306,
0.006136,
-0.048844,
-0.137870,
-0.130450,
-0.073137,
-0.060050,
0.023150,
0.067690,
0.006726,
-0.006892,
0.083980,
0.088535,
0.079610,
0.048898,
-0.020835,
-0.042267,
-0.000657,
0.128870,
0.078509,
0.063945,
-0.030840,
0.051846,
0.055536,
0.059709,
0.116530,
0.033700,
0.099245,
-0.023518,
0.069357,
0.009915,
0.020343,
0.086060,
0.072514,
-0.009231,
0.003753,
0.063909,
-0.011879,
0.116130,
0.061476,
0.048705,
-0.023623,
-0.025377,
0.088351,
0.002482,
-0.096443,
-0.073238,
-0.128920,
-0.170590,
-0.096705,
0.192280,
0.133630,
-0.082781,
-0.059794,
-0.097096,
0.035943,
0.067166,
0.129650,
0.053656,
-0.042266,
-0.114790,
0.086750,
0.106170,
0.095573,
-0.071941,
-0.101460,
0.018739,
-0.026038,
0.069192,
-0.011586,
-0.090904,
0.069832,
-0.019428,
0.100210,
-0.005881,
0.040141,
0.118240,
0.017233,
0.035599,
0.062479,
0.032134,
0.029928,
0.025734,
-0.139140,
-0.054211,
-0.051544,
0.014599,
0.030947,
-0.205370,
-0.098833,
0.037006,
-0.136970,
-0.032115,
0.020713,
0.033843,
0.046153,
-0.044609,
0.082511,
-0.011994,
-0.032102,
-0.036647,
-0.075368,
0.080180,
-0.036079,
-0.126040,
-0.091462,
-0.088208,
-0.051793,
-0.127220,
-0.139610,
-0.048990,
-0.054283,
-0.200170,
-0.087930,
-0.020871,
-0.014011,
-0.015722,
-0.187540,
-0.050035,
-0.119460,
-0.080270,
-0.083729,
-0.137760,
-0.098976,
-0.039219,
0.081689,
0.084861,
-0.075581,
-0.084333,
-0.001951,
-0.005005,
0.035857,
-0.111970,
0.086451,
0.129060,
0.026254,
0.020945,
-0.078027,
0.073886,
0.098832,
0.021803,
-0.092738,
-0.162810,
0.036602,
0.003340,
-0.108470,
-0.188240,
-0.200110,
0.027906,
-0.178420,
-0.120570,
-0.089626,
-0.102740,
-0.138260,
-0.141710,
0.068545,
0.004016,
-0.074551,
0.053422,
0.060520,
0.192080,
0.213510,
0.165900,
0.245330,
0.036684,
0.005413,
-0.038456,
-0.131220,
0.253800,
0.026861,
-0.130270,
-0.039599,
-0.059653,
0.107590,
-0.056511,
-0.140000,
-0.049289,
-0.003392,
0.061750,
-0.031280,
0.011883,
-0.075685,
0.131500,
0.091397,
0.139500,
0.122700,
0.217640,
0.146610,
-0.057185,
-0.026172,
-0.009734,
0.014825,
-0.066134,
0.097238,
-0.069347,
-0.012605,
0.037247,
-0.037743,
-0.006327,
-0.200730,
-0.151310,
-0.029864,
0.093640,
-0.207130,
-0.209480,
-0.025966,
-0.013245,
-0.079195,
-0.073835,
-0.264670,
-0.156910,
-0.020875,
0.018801,
0.021044,
-0.294260,
-0.110670,
0.014101,
-0.003305,
-0.112230,
-0.241290,
-0.027056,
-0.042871,
0.012613,
-0.030806,
-0.072809,
-0.067419,
0.020906,
0.015245,
-0.057593,
-0.064391,
0.079758,
0.109400,
-0.078379,
-0.026318,
-0.070936,
-0.145960,
-0.089519,
-0.084794,
0.035471,
-0.082741,
-0.137260,
-0.095574,
-0.096096,
0.064881,
0.024204,
-0.028678,
-0.018459,
0.095518,
0.068507,
0.049037,
0.055135,
0.022366,
0.087433,
0.102080,
0.118200,
0.098752,
0.132240,
0.187930,
-0.023224,
-0.000899,
0.009533,
-0.017428,
0.047652,
0.022224,
-0.007112,
-0.014360,
-0.020164,
-0.014707,
-0.029301,
-0.040082,
-0.039568,
0.014044,
-0.007886,
-0.046244,
-0.034104,
-0.021883,
0.053378,
0.016201,
-0.042312,
-0.035136,
-0.004829,
-0.001672,
0.008480,
0.127260,
0.114550,
0.172970,
0.016881,
-0.043651,
0.097026,
-0.054668,
0.015803,
-0.015541,
0.004503,
-0.047924,
-0.109270,
-0.079035,
0.040871,
-0.035091,
-0.059678,
-0.103640,
-0.104540,
-0.229300,
-0.054366,
0.006939,
-0.134460,
0.007877,
-0.005951,
-0.027647,
0.129720,
0.082890,
0.058026,
0.029640,
0.024295,
0.088578,
0.050719,
-0.022143,
-0.002517,
0.012181,
0.108730,
0.073723,
0.017838,
0.023026,
0.089058,
0.096982,
-0.011495,
-0.016420,
-0.045822,
0.010955,
0.026286,
-0.073895,
-0.059546,
-0.004085,
0.130390,
0.004712,
-0.037388,
-0.097549,
-0.112800,
-0.003541,
-0.115100,
-0.107570,
0.016483,
0.084189,
0.143520,
-0.075429,
0.043393,
0.040189,
0.058660,
-0.008276,
-0.039367,
0.081378,
0.017747,
0.080722,
0.043885,
-0.100140,
0.005299,
-0.070523,
0.044587,
-0.048778,
-0.006642,
-0.016383,
0.025175,
-0.000164,
0.016065,
-0.012139,
-0.008352,
-0.017749,
-0.006732,
-0.020558,
-0.015470,
0.008508,
0.000010,
0.013462,
0.036738,
0.007908,
-0.015678,
0.025870,
0.001268,
-0.000236,
0.004419,
0.010899,
-0.012981,
-0.023909,
0.023799,
0.038021,
0.055014,
0.002049,
0.025371,
0.012722,
-0.111880,
0.024929,
0.079809,
0.111180,
-0.066181,
-0.173250,
0.000792,
0.085207,
0.126950,
-0.044927,
-0.233090,
-0.060292,
0.057137,
-0.021337,
-0.020827,
-0.034843,
-0.076618,
-0.030519,
-0.069981,
-0.154190,
0.010785,
-0.096929,
-0.018994,
0.094785,
-0.070524,
-0.038211,
0.007505,
0.068640,
0.099553,
-0.011525,
-0.100550,
-0.049714,
-0.045058,
0.052007,
-0.079686,
-0.034734,
0.028739,
0.017270,
-0.057778,
0.033744,
0.029399,
0.016535,
0.022144,
-0.100300,
0.085146,
-0.063898,
-0.008403,
-0.114310,
-0.139070,
0.033766,
-0.018289,
0.037307,
0.048166,
0.075424,
0.108230,
-0.050382,
0.016972,
-0.048417,
-0.008164,
-0.052274,
0.031365,
0.004294,
0.029796,
0.095951,
-0.003679,
-0.099352,
-0.102460,
-0.089976,
0.038521,
0.076901,
0.133230,
0.007329,
-0.050132,
-0.059620,
0.088801,
0.009376,
0.030441,
-0.060592,
-0.102000,
0.047023,
-0.008851,
-0.030459,
-0.030952,
0.070741,
0.203280,
-0.116650,
-0.189120,
-0.034709,
-0.092997,
-0.011949,
-0.016903,
-0.083999,
-0.107250,
-0.195380,
-0.209470,
-0.011128,
-0.091834,
-0.087788,
0.003330,
-0.098429,
-0.021580,
0.033517,
-0.020043,
0.045586,
-0.053025,
-0.114570,
-0.022213,
0.149830,
0.125530,
-0.065303,
0.035578,
-0.041585,
0.083812,
0.050395,
0.086718,
-0.025498,
-0.023940,
-0.154140,
-0.016421,
-0.146930,
0.074647,
0.037089,
0.031280,
0.056693,
0.133260,
0.123350,
0.093621,
0.087674,
-0.012709,
0.064166,
0.092408,
0.001920,
-0.033362,
-0.069454,
-0.025223,
0.076279,
0.072060,
-0.003371,
-0.008125,
-0.017634,
0.036988,
-0.021028,
-0.037935,
-0.011419,
-0.004537,
0.022258,
0.042564,
0.012230,
0.051028,
-0.023467,
0.012922,
0.024230,
-0.014372,
-0.009139,
-0.046427,
0.011001,
0.021692,
-0.063873,
0.008422,
-0.053545,
0.008610,
0.067477,
-0.011219,
0.000453,
0.008630,
0.036008,
0.028960,
-0.007187,
0.109720,
0.004254,
-0.141690,
-0.087659,
-0.025346,
-0.027049,
-0.142740,
0.033515,
0.008022,
-0.101500,
-0.103690,
-0.156050,
0.061297,
-0.118410,
-0.219060,
-0.169670,
-0.072203,
0.181740,
0.051152,
0.051379,
-0.001004,
0.046846,
0.037624,
0.155480,
0.177110,
0.151910,
0.086106,
0.156680,
-0.100920,
-0.133670,
0.101970,
0.073516,
0.152480,
-0.012828,
-0.121620,
0.017301,
0.067343,
0.086513,
-0.104840,
-0.169360,
-0.010947,
-0.040694,
0.068857,
-0.030147,
-0.150260,
-0.003866,
0.063307,
-0.007644,
-0.108190,
-0.114900,
0.097288,
0.057407,
0.042578,
-0.002408,
-0.009345,
-0.007786,
0.020221,
0.015466,
-0.050155,
-0.047262,
-0.024053,
-0.033405,
-0.005814,
0.010799,
0.043920,
0.029567,
0.018605,
-0.016195,
-0.040438,
-0.049718,
-0.011355,
0.015418,
-0.000359,
0.004277,
-0.029685,
0.007975,
0.011420,
-0.131520,
0.197580,
0.252020,
0.102970,
0.130540,
-0.103670,
-0.004766,
0.220810,
0.060165,
0.142780,
-0.065353,
-0.045850,
-0.030541,
-0.009332,
-0.041794,
-0.046253,
-0.016405,
0.052076,
0.097130,
0.055533,
0.005740,
-0.063270,
0.147490,
0.014950,
-0.001481,
0.018227,
0.026610,
0.004507,
0.005630,
-0.026901,
0.007364,
-0.027823,
-0.002581,
0.003696,
-0.032406,
-0.017375,
-0.027713,
-0.024354,
0.012528,
-0.003919,
-0.004453,
-0.042541,
-0.007898,
-0.020819,
0.027177,
0.019201,
-0.007549,
0.014630,
-0.031625,
-0.031133,
-0.037426,
0.014116,
-0.024975,
0.026132,
0.004618,
-0.019676,
-0.036807,
-0.025503,
-0.011051,
-0.006667,
-0.011529,
-0.034546,
-0.006874,
0.007549,
0.003595,
-0.031775,
0.026138,
-0.009936,
-0.027531,
0.009065,
0.025552,
0.001288,
-0.030899,
-0.034367,
-0.021836,
0.025097,
0.013995,
-0.009314,
-0.030759,
-0.031660,
-0.008411,
-0.002909,
-0.031068,
-0.033966,
-0.008458,
-0.021855,
0.012438,
0.003331,
0.023904,
-0.016386,
0.002734,
0.008969,
-0.021485,
-0.018407,
-0.006679,
-0.030777,
0.012130,
0.020483,
0.017655,
0.003007,
-0.034873,
0.006113,
-0.011899,
-0.042921,
0.027709,
0.007387,
0.011914,
-0.018091,
-0.036185,
-0.005647,
-0.020179,
-0.000585,
0.011703,
0.003211,
-0.023311,
-0.030273,
-0.026189,
-0.000840,
-0.004891,
0.015215,
-0.032509,
-0.036146,
-0.008906,
-0.016033,
-0.024672,
-0.024805,
0.016696,
-0.022804,
0.016650,
-0.019259,
-0.004405,
0.012002,
-0.016157,
0.013954,
0.028713,
-0.005606,
0.005850,
-0.014687,
-0.025499,
-0.024655,
0.014260,
-0.024792,
-0.020526,
-0.011007,
0.023907,
-0.010732,
-0.012987,
-0.022354,
0.024378,
-0.029784,
0.009802,
0.025463,
0.007391,
0.015488,
-0.030904,
0.004246,
-0.013093,
0.023731,
-0.039687,
-0.037067,
-0.026550,
0.014464,
-0.043154,
0.016346,
0.018233,
0.032544,
0.010092,
-0.037099,
0.028919,
0.000520,
0.010866,
-0.004945,
-0.035221,
-0.019833,
0.003160,
0.003325,
0.017816,
-0.028971,
-0.039465,
-0.021415,
-0.032501,
-0.027132,
-0.011834,
0.013134,
-0.025298,
-0.028824,
-0.017986,
0.026317,
-0.017228,
0.008702,
-0.004892,
-0.016219,
-0.014164,
-0.037434,
-0.027325,
0.018835,
0.004024,
0.005637,
-0.020202,
0.013045,
-0.024974,
-0.031454,
-0.029748,
0.012123,
-0.009102,
-0.016527,
-0.017367,
0.000162,
-0.022758,
-0.014167,
0.003742,
-0.011899,
0.015069,
-0.027231,
-0.009417,
-0.036369,
-0.033726,
0.002218,
-0.017455,
-0.000710,
0.019004,
-0.008707,
0.015436,
-0.012266,
-0.010131,
0.004866,
-0.041187,
0.006132,
0.006010,
0.011886,
-0.010667,
-0.039708,
0.006509,
-0.019946,
-0.014525,
0.004698,
-0.003157,
-0.026245,
-0.023440,
-0.011026,
-0.033979,
-0.038219,
0.022819,
0.018980,
0.026853,
0.013097,
0.021278,
-0.015419,
-0.006954,
0.022590,
-0.016560,
0.012938,
-0.017061,
-0.006714,
0.003027,
0.026681,
-0.039708,
0.017415,
-0.022965,
-0.021224,
0.013630,
0.025741,
-0.002689,
-0.010908,
-0.035386,
-0.025303,
0.014672,
0.015797,
-0.037377,
-0.004070,
-0.002127,
-0.017788,
0.022841,
-0.027589,
0.016259,
-0.040436,
0.000086,
-0.016554,
-0.037718,
-0.029132,
0.011170,
0.021638,
-0.040361,
0.013427,
-0.024533,
-0.006496,
-0.034443,
0.008578,
0.013110,
-0.001517,
-0.042475,
-0.036313,
-0.021261,
0.025225,
-0.013311,
-0.036566,
0.011534,
-0.034075,
-0.007231,
-0.038014,
-0.010711,
-0.015517,
-0.022706,
0.021384,
0.017117,
0.021708,
-0.031693,
-0.004494,
0.004185,
-0.016290,
-0.042001,
-0.007109,
-0.029309,
-0.036284,
0.027224,
0.015973,
-0.025038,
-0.016087,
-0.022807,
0.005811,
-0.024483,
0.002112,
-0.000567,
-0.030590,
0.017060,
0.005497,
-0.041140,
-0.019315,
-0.005712,
-0.040487,
-0.036830,
0.027235,
0.024379,
0.008217,
-0.011125,
-0.036461,
-0.025808,
0.020356,
-0.028035,
-0.029582,
-0.004774,
0.034726,
-0.001688,
0.017327,
-0.024519,
-0.005058,
-0.018339,
-0.029109,
-0.021610,
0.010943,
-0.006432,
-0.023287,
-0.041778,
-0.030751,
-0.031158,
0.012862,
-0.016393,
-0.028143,
0.020326,
-0.026324,
-0.008170,
0.004728,
0.000925,
-0.026658,
-0.011784,
-0.013233,
-0.021622,
0.005533,
0.019378,
-0.007838,
-0.020075,
0.015411,
-0.017323,
0.026719,
-0.009618,
0.004153,
0.036223,
-0.007333,
-0.040418,
0.019209,
0.000362,
-0.001856,
-0.011917,
0.027656,
-0.001896,
-0.022009,
-0.036520,
0.008891,
0.018218,
0.008531,
-0.013223,
0.024579,
-0.000132,
0.011067,
-0.009014,
0.010462,
-0.021130,
0.025399,
-0.005234,
0.010987,
0.000423,
-0.020175,
-0.007141,
-0.016321,
0.020380,
-0.009155,
0.023247,
0.015967,
-0.034145,
-0.003065,
-0.026137,
-0.015243,
-0.009514,
-0.014589,
-0.013006,
-0.024828,
-0.016211,
0.024307,
0.001238,
-0.027985,
-0.014940,
0.023513,
-0.037664,
-0.005259,
-0.014521,
-0.027298,
-0.028105,
-0.003566,
-0.024844,
0.028352,
0.003618,
-0.000917,
0.003019,
-0.032648,
0.016115,
-0.004302,
-0.021046,
-0.011021,
-0.005104,
0.008559,
0.022168,
-0.035898,
-0.037883,
0.023816,
0.007244,
-0.013939,
-0.039891,
0.027324,
0.012746,
0.009255,
-0.023967,
0.008467,
0.015595,
0.014498,
-0.033634,
0.010070,
0.007443,
0.015284,
-0.042716,
-0.030100,
0.001884,
-0.032832,
-0.039146,
-0.021522,
-0.028623,
0.003877,
0.021860,
0.013831,
0.016293,
-0.042590,
-0.016773,
0.009044,
0.014893,
0.020519,
0.022989,
0.016787,
-0.029490,
0.003552,
-0.037312,
0.009898,
-0.022719,
0.020292,
-0.017196,
-0.021711,
0.005135,
0.019982,
0.023286,
-0.026496,
0.011598,
0.023522,
0.015571,
0.001253,
0.009415,
0.003708,
0.023953,
-0.035229,
-0.040442,
-0.002317,
0.001209,
0.024403,
-0.040177,
0.003823,
0.024156,
0.024312,
-0.039916,
0.017307,
-0.037856,
0.015596,
-0.030737,
0.006535,
-0.032373,
0.017455,
-0.020796,
0.019125,
0.014636,
-0.010701,
0.010583,
-0.019422,
0.002521,
-0.026858,
0.023977,
-0.039420,
-0.002102,
-0.018450,
0.020727,
-0.035213,
0.023948,
0.004088,
0.009688,
0.024856,
0.006881,
-0.026332,
-0.031137,
0.016982,
-0.034385,
-0.007136,
-0.035661,
-0.001459,
0.016248,
0.009034,
-0.012605,
-0.027141,
0.031861,
0.000002,
0.013623,
0.020639,
-0.016185,
-0.019926,
-0.018894,
0.019548,
0.016897,
0.017920,
-0.002309,
-0.041051,
-0.019387,
0.000415,
-0.026888,
-0.011010,
-0.026494,
-0.033206,
-0.010907,
-0.011928,
-0.032205,
-0.014197,
-0.042224,
-0.003225,
0.016332,
-0.033967,
-0.033461,
-0.002303,
-0.000578,
-0.014195,
-0.007098,
-0.010373,
-0.042562,
0.028014,
0.006888,
0.021213,
-0.039820,
0.006322,
-0.024286,
-0.021078,
-0.028958,
-0.034606,
0.004464,
-0.030003,
0.011135,
0.004111,
-0.013305,
0.005904,
-0.036380,
-0.028258,
-0.004750,
0.025157,
-0.039851,
-0.005995,
0.020270,
-0.040184,
-0.037217,
-0.039488,
0.024509,
-0.004839,
0.021676,
-0.027229,
0.020813,
-0.024037,
0.018654,
-0.033416,
0.020944,
-0.016511,
-0.035108,
0.000458,
-0.041156,
0.028795,
-0.032539,
0.021825,
-0.028704,
-0.007077,
-0.028506,
-0.035434,
0.015151,
-0.041757,
0.014990,
0.017077,
-0.013704,
0.015484,
0.010464,
-0.018954,
-0.000936,
-0.020555,
0.014138,
-0.027522,
0.027578,
0.013765,
0.026657,
-0.023852,
-0.012997,
0.009737,
0.019975,
0.024595,
-0.035118,
-0.027569,
0.009972,
-0.013094,
-0.008426,
0.016394,
-0.040910,
0.001968,
-0.010940,
0.004528,
0.003838,
0.014161,
-0.040898,
-0.024319,
-0.033589,
-0.007917,
-0.024798,
-0.018475,
-0.040422,
0.006697,
0.009724,
-0.022256,
-0.005677,
-0.019524,
0.025031,
-0.003830,
0.008075,
-0.006199,
0.020108,
0.009574,
-0.020446,
0.006532,
-0.011366,
0.021306,
-0.022251,
0.020744,
-0.040292,
-0.016381,
0.009980,
-0.019799,
0.023797,
0.004826,
-0.018472,
-0.008545,
0.025161,
0.026714,
0.008696,
-0.001402,
0.009289,
0.027849,
-0.011171,
0.008132,
0.016929,
-0.032217,
0.000608,
0.015207,
-0.028054,
0.025239,
-0.040739,
0.000083,
-0.002269,
-0.019432,
0.023541,
0.025770,
0.022455,
0.004724,
-0.032190,
0.020546,
-0.031708,
-0.012014,
-0.020022,
0.005892,
-0.030950,
-0.005669,
-0.038419,
-0.026749,
0.019923,
0.021267,
-0.012408,
-0.024109,
0.016796,
0.004833,
0.022635,
0.016894,
-0.030423,
-0.036528,
-0.002148,
0.023658,
-0.006994,
-0.029346,
-0.024584,
0.010623,
-0.017221,
0.006270,
0.008700,
0.017756,
-0.002362,
0.019078,
-0.020056,
0.017131,
-0.039478,
0.003819,
-0.012406,
-0.010441,
-0.027081,
0.011446,
0.013107,
-0.014971,
0.028375,
0.017204,
-0.000129,
-0.000912,
-0.025713,
-0.037177,
-0.022370,
0.026859,
-0.019790,
0.012651,
-0.003751,
-0.004292,
-0.036770,
-0.023485,
-0.017202,
-0.020173,
0.003433,
0.011002,
0.015407,
0.026501,
-0.038537,
-0.025670,
-0.018245,
0.000062,
-0.001097,
-0.042512,
-0.016812,
0.008529,
-0.002619,
0.008110,
-0.014397,
0.015159,
-0.006176,
-0.007587,
-0.002832,
0.007874,
-0.004607,
-0.027074,
0.025881,
0.017180,
0.009733,
-0.005909,
0.025437,
0.023556,
-0.014441,
0.015789,
0.006857,
0.026989,
-0.014129,
-0.003457,
-0.005552,
-0.006628,
0.012220,
-0.009216,
0.019171,
-0.006135,
0.019720,
-0.025215,
0.022838,
-0.032054,
0.006403,
-0.036440,
-0.005202,
-0.010552,
-0.033826,
0.015251,
0.013747,
-0.035241,
-0.023843,
-0.036178,
0.010313,
-0.031103,
0.011306,
-0.002041,
-0.007952,
0.016679,
-0.036857,
0.006248,
-0.024734,
0.013492,
-0.037419,
-0.020329,
-0.026698,
0.011708,
-0.010915,
-0.003269,
-0.013098,
-0.040553,
-0.003477,
-0.036979,
-0.001390,
0.006487,
0.002469,
-0.025144,
-0.047286,
-0.033133,
-0.027347,
-0.000167,
-0.004200,
0.009287,
-0.000409,
-0.052691,
0.002925,
0.011510,
-0.017335,
0.014413,
0.002519,
0.002729,
-0.016100,
-0.004830,
0.012106,
0.011956,
0.026884,
-0.011967,
-0.000058,
-0.028452,
-0.019763,
-0.003189,
-0.003736,
0.006591,
0.015605,
0.017413,
-0.009160,
-0.008864,
0.018957,
0.027340,
0.012651,
-0.042017,
-0.056269,
-0.045147,
0.007145,
0.010410,
-0.043882,
-0.009052,
-0.000261,
-0.053949,
-0.042784,
-0.002510,
-0.032030,
-0.012647,
0.012312,
0.017882,
-0.036005,
0.025914,
0.013682,
0.020745,
-0.026070,
0.026785,
-0.031074,
-0.025540,
0.022250,
0.028082,
0.010550,
-0.007624,
0.026649,
0.024027,
0.011402,
0.009100,
-0.017504,
0.010958,
-0.008202,
-0.029758,
-0.012799,
0.022235,
-0.019566,
-0.018665,
-0.022047,
-0.018349,
-0.010042,
-0.030938,
0.019008,
0.014940,
-0.022915,
0.022454,
-0.040888,
0.007907,
0.013429,
-0.004358,
-0.001653,
0.009533,
0.017399,
0.014724,
-0.010793,
-0.010618,
-0.042045,
-0.031941,
0.026798,
-0.028008,
-0.004525,
0.016542,
-0.009281,
-0.024525,
0.010881,
-0.031604,
0.024106,
0.028851,
-0.018110,
0.007389,
-0.012772,
0.012876,
0.019340,
-0.030504,
-0.005468,
-0.026184,
-0.023513,
-0.026057,
-0.033223,
0.005315,
-0.010324,
-0.007960,
-0.032599,
0.003214,
-0.003214,
-0.012011,
0.020828,
-0.042443,
-0.006144,
-0.014355,
-0.039154,
-0.005138,
0.007816,
0.010236,
-0.026583,
-0.027244,
0.021486,
-0.028953,
-0.017548,
-0.006433,
-0.025970,
-0.027994,
-0.009882,
-0.037205,
0.001402,
-0.015618,
0.012538,
-0.027091,
-0.005408,
0.029729,
-0.014910,
-0.004416,
-0.037789,
-0.002266,
-0.014751,
0.024403,
-0.013837,
0.021626,
-0.039136,
-0.000746,
-0.000493,
-0.030162,
-0.025447,
0.006998,
0.032645,
-0.020755,
0.023718,
-0.025642,
-0.031825,
-0.007822,
-0.027482,
0.013051,
-0.027626,
0.026418,
-0.031375,
0.004117,
-0.024013,
-0.007677,
-0.025972,
-0.010240,
-0.016915,
-0.035434,
0.013727,
-0.029876,
-0.033762,
-0.003981,
-0.023602,
0.013355,
-0.017123,
-0.015996,
0.011886,
-0.033872,
0.026829,
-0.005195,
-0.005102,
0.017421,
-0.056339,
-0.029379,
-0.057393,
0.011449,
-0.040011,
-0.025406,
0.000641,
-0.049942,
0.000020,
-0.046284,
0.005423,
-0.032574,
-0.058335,
0.004547,
0.001234,
-0.045268,
0.000097,
-0.042130,
-0.022825,
0.005121,
0.000855,
-0.030252,
0.015682,
-0.014175,
-0.000325,
-0.011801,
-0.021270,
0.003200,
-0.040859,
-0.026936,
0.003078,
-0.056506,
-0.008391,
0.039416,
0.008412,
0.001152,
0.032549,
0.000698,
-0.013873,
-0.053155,
-0.062805,
-0.044167,
-0.050160,
-0.028365,
0.015489,
0.019083,
0.009718,
0.016971,
0.022224,
-0.032617,
0.016131,
-0.015079,
0.006738,
-0.014505,
-0.020612,
-0.017060,
0.017959,
0.002031,
-0.006927,
-0.019121,
0.002257,
-0.006663,
-0.014135,
0.000507,
-0.035345,
0.010829,
0.024674,
-0.021719,
-0.020622,
-0.032161,
-0.025742,
-0.021500,
-0.000387,
0.017282,
-0.015552,
-0.029500,
-0.015149,
-0.017424,
-0.012911,
0.006389,
0.000611,
-0.054677,
-0.003525,
0.017466,
-0.050127,
-0.029208,
0.034006,
-0.015265,
0.008424,
-0.035312,
-0.035361,
-0.009430,
-0.012564,
0.006857,
-0.041081,
0.012103,
-0.041487,
-0.042716,
-0.011907,
-0.036140,
-0.009738,
-0.012627,
0.002964,
-0.021666,
-0.012824,
-0.026082,
-0.034044,
0.001377,
-0.042911,
-0.052171,
-0.015692,
-0.033484,
0.004397,
-0.001308,
-0.008766,
-0.046490,
-0.048615,
0.006397,
-0.022829,
0.023425,
-0.015711,
-0.014094,
0.014339,
-0.030222,
-0.030773,
-0.027135,
0.018476,
-0.019258,
-0.016483,
0.022045,
-0.037223,
0.007922,
0.003425,
-0.001119,
0.004491,
-0.011024,
0.019335,
-0.017472,
-0.006192,
0.014694,
-0.034754,
-0.010314,
-0.023966,
-0.006504,
0.014327,
0.004993,
-0.023133,
-0.016593,
-0.021003,
-0.010863,
-0.036011,
-0.010704,
-0.006431,
-0.022418,
-0.036772,
0.010796,
0.023303,
-0.022708,
0.002146,
0.021195,
-0.019340,
0.008223,
-0.009509,
-0.006502,
-0.006218,
0.005584,
0.019382,
-0.017925,
0.014906,
0.015941,
-0.018850,
-0.024733,
0.007721,
-0.031787,
0.024647,
0.000437,
-0.036738,
-0.019483,
-0.023113,
0.004359,
-0.011805,
0.007506,
-0.014777,
-0.008046,
-0.003257,
-0.017292,
-0.056013,
-0.045020,
0.025452,
0.022427,
-0.010162,
-0.044157,
-0.035531,
-0.023843,
0.031288,
-0.014016,
-0.006994,
-0.005803,
0.021864,
-0.013588,
-0.019632,
0.024365,
0.007653,
-0.012454,
0.026078,
0.021910,
-0.034880,
-0.028086,
-0.027402,
-0.041363,
-0.016195,
-0.033103,
-0.037430,
-0.034764,
-0.016678,
-0.028578,
0.012390,
-0.008425,
-0.034352,
0.009163,
-0.040079,
-0.035642,
-0.038937,
-0.020358,
-0.021560,
-0.033338,
-0.011932,
0.005293,
-0.024917,
-0.016565,
-0.034371,
0.011502,
-0.011841,
0.019194,
-0.010783,
0.026771,
-0.023787,
0.002414,
-0.025107,
0.021803,
-0.013598,
-0.005072,
-0.015855,
-0.012330,
0.015761,
0.014317,
-0.049738,
-0.028539,
0.008840,
-0.042871,
-0.036795,
-0.036545,
-0.023517,
0.006568,
0.016864,
-0.012936,
-0.028294,
-0.010109,
-0.012626,
-0.030684,
-0.037838,
0.005190,
-0.031654,
-0.049197,
0.010424,
-0.005663,
0.014941,
0.018369,
0.010702,
-0.028528,
0.005133,
0.029316,
-0.031547,
-0.000872,
-0.017506,
0.000860,
0.010150,
-0.008972,
0.022323,
-0.021441,
-0.031779,
-0.016354,
-0.025107,
0.028266,
0.007449,
-0.037158,
-0.019883,
0.007990,
0.010222,
-0.004338,
-0.029046,
-0.009334,
-0.000718,
-0.019555,
0.023249,
-0.006514,
0.023545,
0.020727,
0.030127,
-0.014517,
-0.032624,
-0.033821,
-0.004332,
-0.010509,
-0.011075,
0.006458,
-0.015214,
0.010003,
0.029655,
-0.015850,
-0.013516,
-0.016624,
-0.027184,
-0.009917,
-0.024009,
0.020156,
0.010224,
-0.032075,
-0.001871,
-0.014134,
-0.043692,
-0.001791,
-0.012356,
-0.020552,
0.019709,
0.002887,
-0.029035,
-0.017583,
0.030288,
0.006602,
0.006383,
-0.030191,
0.029886,
-0.009454,
0.007711,
0.008048,
-0.024059,
-0.045713,
-0.040330,
-0.044774,
0.005697,
-0.010972,
-0.020572,
0.030584,
0.011569,
-0.001684,
-0.009361,
-0.029728,
-0.038319,
0.013498,
-0.014634,
-0.010105,
-0.021324,
-0.006010,
-0.033778,
0.000948,
0.004891,
-0.047012,
-0.000176,
-0.026786,
-0.029714,
-0.043993,
-0.014210,
0.011626,
-0.044256,
-0.045361,
-0.012677,
-0.005985,
0.013305,
-0.016040,
0.007633,
0.024213,
0.030653,
-0.038510,
0.010553,
-0.005052,
0.020277,
0.015474,
-0.039404,
-0.037371,
-0.023638,
0.017627,
-0.022987,
-0.015596,
-0.011069,
0.005800,
0.002006,
-0.037211,
-0.038897,
-0.017514,
0.022741,
-0.040062,
-0.010545,
-0.003979,
0.006488,
-0.042593,
-0.055975,
-0.055001,
0.011592,
0.026286,
-0.030423,
-0.042108,
0.017424,
-0.010477,
-0.016037,
0.011563,
-0.037276,
-0.023529,
0.025223,
0.007751,
0.005688,
-0.030537,
0.008425,
0.012244,
0.001116,
-0.030475,
0.021916,
-0.045162,
0.021655,
-0.012465,
-0.010629,
-0.028847,
0.013371,
0.032956,
0.006734,
-0.041183,
0.002473,
-0.003224,
-0.009377,
-0.035697,
0.026758,
-0.033227,
0.028519,
-0.020359,
0.012974,
-0.023478,
-0.037676,
-0.038217,
0.021721,
0.001582,
-0.024992,
-0.036345,
0.002109,
0.017644,
-0.026133,
0.017123,
0.005178,
0.005704,
-0.029724,
0.020747,
-0.030337,
0.005631,
0.018789,
0.018940,
-0.011168,
0.015240,
0.004393,
-0.021853,
-0.010713,
0.011913,
-0.021306,
-0.030117,
-0.039967,
0.009366,
-0.007040,
-0.011940,
0.002508,
-0.027250,
0.017772,
0.010100,
-0.013036,
-0.033571,
0.031257,
0.000049,
-0.012356,
0.040977,
0.003185,
-0.017290,
-0.013390,
-0.036397,
-0.006208,
-0.028119,
-0.033617,
0.023138,
0.010109,
0.001943,
-0.015798,
0.006275,
-0.008307,
0.005074,
0.015977,
0.029527,
0.003393,
-0.006237,
-0.011852,
0.005288,
0.010326,
0.014544,
-0.026504,
-0.053499,
0.006737,
-0.004254,
-0.037355,
0.007226,
-0.036957,
-0.001420,
-0.019530,
-0.023070,
-0.027933,
0.014565,
-0.055981,
-0.049300,
-0.016698,
-0.020595,
-0.004019,
0.023087,
0.008620,
-0.007801,
-0.014219,
0.008163,
-0.018045,
-0.019710,
0.027513,
-0.006114,
0.015208,
-0.022875,
-0.037435,
-0.006436,
0.020670,
0.001200,
-0.003739,
0.010403,
-0.000111,
0.005146,
-0.033700,
-0.012289,
-0.005092,
-0.024790,
0.010196,
-0.021386,
-0.009144,
-0.031727,
0.021246,
-0.043252,
0.021722,
-0.040576,
-0.031057,
0.016155,
-0.034182,
-0.023906,
-0.039329,
-0.040309,
0.022263,
0.005501,
0.020636,
-0.016596,
0.010177,
-0.006550,
0.022534,
-0.028763,
-0.015530,
-0.038312,
-0.011235,
0.014341,
-0.016954,
0.007163,
-0.003624,
0.005944,
0.018473,
-0.012717,
0.000179,
0.029057,
0.027071,
-0.018486,
-0.000575,
0.009540,
-0.012366,
-0.042151,
0.022312,
-0.016176,
-0.028545,
0.008358,
-0.042598,
-0.005759,
-0.019502,
-0.020707,
-0.031518,
-0.036960,
0.012934,
0.011225,
-0.005049,
-0.010587,
-0.019577,
0.058165,
0.041784,
0.041073,
0.157910,
-0.230430,
-0.063777,
-0.037855,
0.030517,
-0.239620,
-0.430480,
-0.226500,
-0.282750,
-0.139280,
-0.188940,
-0.062747,
-0.400960,
-0.188540,
-0.145390,
-0.263700,
-0.023585,
-0.196390,
-0.053974,
-0.034163,
-0.159480,
-0.165880,
-0.004965,
-0.019876,
0.039939,
-0.013556,
0.005457,
-0.022337,
0.011259,
0.022848,
0.009357,
-0.001566,
0.000671,
0.002953,
0.001209,
-0.006873,
-0.015988,
0.021389,
0.014383,
0.014125,
0.037096,
-0.008337,
0.024804,
-0.011712,
0.012932,
-0.024084,
-0.023713,
-0.157780,
-0.156700,
0.030647,
0.117850,
0.061185,
-0.020022,
0.059867,
-0.094798,
0.035027,
-0.008479,
-0.037545,
-0.037763,
-0.163880,
0.026042,
0.035717,
0.004780,
-0.046808,
-0.137980,
0.013802,
-0.046296,
0.125850,
0.027817,
-0.041592,
-0.059172,
0.010274,
-0.056579,
0.053952,
-0.012204,
0.006264,
0.004169,
-0.049183,
0.017426,
-0.022921,
-0.041131,
0.015997,
-0.044770,
-0.040905,
-0.038690,
-0.029697,
-0.048688,
-0.032631,
-0.009149,
0.001882,
0.043674,
-0.000315,
0.011238,
0.009937,
-0.029014,
0.019896,
-0.040339,
0.060965,
0.058782,
0.100220,
-0.028303,
0.017727,
0.051488,
0.066997,
-0.003049,
0.034612,
0.098517,
0.037545,
0.022481,
0.024303,
-0.021917,
0.036762,
-0.047474,
0.074268,
0.109800,
0.133190,
0.090463,
-0.226990,
-0.014192,
0.125450,
0.011919,
-0.051607,
-0.023467,
-0.051744,
-0.002743,
0.090755,
0.011818,
-0.071700,
-0.051724,
0.045036,
0.075198,
-0.123310,
-0.259710,
-0.185540,
0.066460,
-0.029360,
-0.265150,
-0.125720,
-0.224050,
-0.152020,
-0.122940,
-0.207070,
0.023912,
-0.051563,
0.085372,
0.075524,
0.018567,
0.070873,
0.030665,
0.051248,
0.015898,
-0.055682,
0.019395,
0.073158,
0.044603,
-0.050350,
-0.053450,
0.156460,
0.150490,
0.041891,
-0.011590,
-0.051590,
0.134190,
0.126300,
0.144670,
-0.089520,
0.055537,
-0.084264,
0.106610,
-0.011556,
-0.084200,
0.154230,
-0.050285,
-0.051250,
0.097441,
0.021989,
0.005857,
0.034902,
0.170960,
0.064546,
-0.012013,
-0.007573,
0.226410,
0.031238,
-0.240770,
-0.097868,
-0.186310,
0.147960,
0.215370,
0.039152,
-0.054029,
-0.052048,
0.069444,
0.134850,
-0.062628,
-0.099673,
0.053771,
-0.046176,
-0.091081,
-0.204800,
0.152580,
0.103340,
0.082934,
-0.042075,
-0.033593,
0.064074,
0.146150,
0.180690,
-0.009794,
-0.101510,
0.103110,
0.091975,
0.119540,
-0.033425,
-0.094872,
0.011136,
0.038321,
0.042755,
-0.072682,
-0.131620,
0.187730,
0.039386,
0.139520,
0.066457,
0.106790,
0.059638,
-0.032913,
-0.030045,
0.112340,
0.055530,
-0.156830,
0.030062,
0.037135,
0.050875,
0.058533,
-0.093519,
0.030845,
-0.149930,
0.113400,
0.025942,
-0.017591,
-0.017105,
-0.189670,
0.070004,
-0.065287,
-0.213350,
-0.076041,
-0.059686,
0.029045,
-0.054437,
-0.105190,
0.007943,
-0.051305,
0.059743,
-0.152050,
0.000453,
-0.126120,
-0.115910,
-0.110850,
-0.112660,
0.024440,
-0.300940,
-0.005511,
-0.045046,
-0.106600,
-0.035698,
-0.329080,
0.017767,
0.144090,
0.001608,
-0.072098,
-0.226560,
0.174500,
0.000279,
0.055849,
-0.000842,
-0.119930,
-0.048515,
0.165020,
0.093676,
0.084845,
-0.022642,
-0.142180,
-0.006882,
-0.112620,
-0.114720,
0.047175,
-0.001474,
-0.198300,
-0.293710,
-0.337940,
-0.097830,
0.011905,
-0.206120,
-0.162710,
-0.156510,
0.048366,
-0.126990,
0.003437,
0.054918,
0.018129,
0.014668,
0.011511,
-0.096716,
0.102000,
0.117520,
0.113140,
0.119860,
-0.100050,
0.079489,
0.129040,
0.022903,
0.047808,
-0.033161,
-0.043850,
0.064066,
-0.038215,
0.029846,
0.093419,
-0.071577,
0.075375,
0.114890,
-0.041732,
0.050191,
-0.031596,
0.004050,
0.008457,
-0.037825,
-0.022429,
0.072102,
-0.032318,
-0.010074,
-0.053435,
-0.093613,
0.100120,
0.034022,
-0.078478,
-0.120290,
-0.317560,
-0.049228,
-0.182070,
-0.200740,
0.065012,
-0.016432,
-0.051447,
0.003720,
-0.133470,
0.010958,
-0.005477,
0.193750,
0.184960,
-0.132930,
-0.041883,
-0.039500,
0.086947,
0.203350,
-0.081276,
0.010660,
-0.058728,
-0.050289,
-0.009748,
-0.112650,
0.056647,
-0.004101,
0.040446,
0.052507,
-0.077872,
0.018093,
0.075858,
0.166690,
-0.012297,
-0.149800,
0.008950,
-0.115510,
-0.104460,
-0.025941,
-0.061311,
0.002505,
-0.140060,
-0.112330,
-0.044144,
-0.030580,
0.089240,
-0.016990,
0.005607,
0.039374,
0.006313,
0.098145,
0.038895,
0.002893,
0.081495,
0.003302,
0.103450,
0.063058,
0.094169,
0.102000,
0.168230,
-0.012636,
0.017474,
-0.034974,
0.004925,
0.026090,
0.016260,
-0.025180,
-0.034348,
-0.059796,
0.003269,
-0.049383,
-0.006951,
-0.055564,
-0.041745,
-0.007667,
-0.015908,
-0.041395,
-0.047957,
0.023897,
0.017592,
-0.043069,
-0.025551,
-0.039182,
-0.011075,
0.018709,
-0.214620,
-0.024350,
0.026728,
-0.046099,
-0.144970,
-0.265700,
-0.208600,
0.085126,
-0.089415,
-0.201630,
-0.105900,
0.012152,
-0.010340,
-0.089750,
-0.135820,
0.057165,
-0.110540,
-0.051072,
-0.058748,
-0.080447,
0.063038,
-0.101250,
0.076483,
0.005138,
-0.100180,
0.114480,
0.051863,
-0.086237,
0.016069,
0.210680,
0.035775,
-0.021498,
-0.196570,
-0.045575,
0.118660,
0.063966,
0.039203,
0.063299,
0.022351,
-0.012804,
-0.036322,
-0.040992,
0.048522,
0.079985,
0.019083,
-0.049166,
-0.139230,
-0.165650,
-0.107650,
-0.004900,
0.006367,
0.057163,
0.019077,
-0.013919,
-0.008651,
0.024840,
0.095891,
-0.010623,
-0.038162,
-0.010850,
0.002238,
0.038842,
0.087132,
0.102960,
-0.020781,
0.058252,
0.017429,
-0.026007,
0.151170,
-0.109510,
-0.079482,
-0.034763,
0.065768,
-0.019833,
-0.121730,
0.029790,
0.059169,
0.016935,
0.011152,
0.023273,
0.028089,
0.019530,
0.007774,
0.019721,
0.037096,
-0.028863,
0.002196,
-0.030078,
0.013866,
0.006220,
-0.027471,
0.015317,
0.009531,
0.044037,
-0.034330,
0.025903,
0.015248,
-0.000045,
0.023614,
-0.030220,
-0.020273,
0.051225,
0.106350,
0.064682,
-0.080966,
-0.130550,
0.036986,
0.157240,
0.086123,
-0.203550,
-0.193280,
-0.052757,
0.067718,
0.005807,
-0.057764,
-0.047913,
-0.050246,
0.088847,
0.156500,
0.033944,
0.035132,
-0.017679,
-0.037791,
-0.096764,
-0.063747,
-0.147240,
-0.188200,
-0.102850,
0.045890,
-0.176390,
-0.182820,
-0.190410,
-0.193100,
-0.021196,
-0.181660,
-0.120510,
-0.157770,
-0.108350,
0.048833,
-0.175230,
-0.051094,
-0.040381,
-0.028935,
0.004663,
-0.057912,
-0.062410,
-0.043864,
-0.006076,
-0.095649,
-0.058422,
0.094796,
0.092250,
0.004730,
-0.051166,
0.107690,
0.116190,
0.007054,
0.037590,
0.026928,
0.099379,
0.070951,
0.047397,
0.018120,
0.079696,
0.043206,
0.171170,
0.039045,
0.037862,
-0.007484,
-0.052592,
-0.036612,
-0.094302,
-0.066489,
0.025506,
-0.019921,
0.108360,
0.012472,
-0.028707,
-0.201670,
-0.082017,
-0.053226,
0.066232,
-0.003749,
-0.112160,
-0.021906,
-0.134380,
-0.047799,
-0.045313,
-0.145420,
-0.157010,
-0.231270,
-0.084499,
0.029427,
-0.197970,
-0.231900,
-0.013174,
0.084233,
0.056144,
-0.005026,
0.025927,
-0.089308,
0.052051,
0.099859,
-0.076056,
-0.272960,
-0.085575,
0.101610,
0.140180,
0.040829,
-0.222170,
-0.151920,
0.137710,
0.310360,
0.020912,
-0.040592,
0.040410,
0.079501,
0.244150,
0.144510,
0.160630,
-0.080570,
0.046949,
-0.038392,
-0.012526,
0.010077,
-0.072893,
-0.066664,
-0.117910,
0.012433,
0.011412,
0.073183,
-0.024202,
0.021480,
0.015002,
-0.011287,
-0.035234,
-0.013571,
0.004990,
0.038928,
-0.028480,
-0.004853,
0.055049,
0.035274,
0.034062,
-0.050629,
0.068840,
0.037016,
0.031883,
-0.015105,
0.025877,
0.035456,
0.002976,
0.077650,
0.011614,
-0.020581,
0.020342,
0.007091,
0.013539,
0.092467,
-0.010871,
0.005691,
0.024516,
-0.008863,
0.013560,
-0.028618,
-0.008065,
0.025494,
0.056765,
0.068968,
0.021026,
0.033726,
-0.003656,
0.032365,
0.077459,
0.102100,
0.063108,
-0.124080,
-0.010906,
-0.016806,
-0.207430,
-0.018488,
-0.223990,
-0.189420,
0.004485,
-0.140730,
-0.004847,
-0.066622,
-0.109130,
-0.126950,
-0.090650,
0.171910,
0.087671,
0.094954,
-0.019884,
0.090753,
0.152380,
0.157600,
0.122360,
-0.002487,
0.305560,
0.081807,
-0.039837,
0.084235,
0.249920,
0.103110,
0.066463,
0.005838,
-0.037617,
0.087758,
0.089147,
-0.026176,
-0.192430,
-0.120840,
0.001468,
-0.016838,
-0.118860,
-0.157910,
-0.168900,
-0.040995,
-0.180840,
-0.136930,
-0.104870,
-0.126640,
-0.182670,
-0.229640,
-0.052732,
-0.009852,
0.013095,
0.016561,
0.055471,
-0.004827,
0.001391,
0.026248,
-0.020989,
-0.006293,
0.015070,
0.016649,
-0.009234,
0.002284,
0.003272,
0.014826,
0.016814,
0.005496,
-0.012217,
0.003143,
-0.003007,
-0.006811,
0.011241,
0.033051,
0.021112,
-0.074123,
0.164050,
-0.052276,
-0.169190,
-0.253320,
-0.019249,
0.110840,
0.200920,
-0.122500,
-0.263550,
-0.156130,
-0.042479,
-0.059991,
-0.100700,
-0.159080,
-0.219670,
-0.155870,
-0.080593,
-0.320620,
-0.137030,
-0.194000,
-0.098514,
-0.102990,
-0.058780,
-0.117020,
0.027425,
-0.043473,
-0.066422,
-0.104910,
0.021840,
0.070207,
0.088705,
-0.064740,
-0.060699,
-0.017493,
-0.048991,
-0.046240,
0.081605,
0.011422,
-0.133230,
-0.252000,
-0.166560,
0.115180,
0.105930,
-0.112570,
-0.100530,
-0.019302,
-0.100270,
-0.015779,
-0.195070,
-0.021483,
0.025920,
-0.026406,
-0.002518,
0.003614,
-0.029230,
0.007092,
-0.009545,
-0.008907,
0.020576,
0.007733,
0.006427,
0.007508,
-0.007444,
0.003450,
0.006310,
-0.019702,
0.030751,
-0.012926,
0.026675,
0.023086,
0.022111,
0.009131,
-0.046330,
0.000723,
0.102110,
0.015040,
0.019002,
0.027991,
0.016256,
-0.046439,
-0.092877,
-0.101130,
-0.103110,
0.012353,
-0.045111,
-0.166720,
-0.197900,
-0.110110,
-0.072623,
-0.108160,
-0.132100,
-0.125140,
0.010333,
0.056590,
-0.083436,
-0.057075,
0.001738,
-0.007101,
0.167040,
0.014266,
-0.043019,
-0.059391,
-0.046861,
0.006875,
-0.026328,
-0.040342,
-0.012649,
-0.027984,
0.003200,
0.044355,
0.024310,
0.007799,
0.012971,
-0.076603,
-0.033401,
0.001171,
0.004062,
-0.048334,
-0.065640,
-0.047155,
-0.020075,
0.000412,
-0.002065,
-0.019813,
-0.064270,
0.026689,
0.037909,
0.038066,
0.081539,
-0.036012,
-0.006153,
-0.018869,
-0.060309,
0.058951,
-0.159510,
0.056311,
0.001251,
0.020323,
0.004493,
0.001160,
0.046579,
-0.022498,
0.040503,
0.082030,
-0.062142,
0.013484,
0.036319,
0.070780,
0.064226,
0.028004,
0.105800,
0.053792,
0.022554,
-0.044474,
0.178960,
0.132130,
0.184010,
0.053977,
0.043665,
-0.016708,
0.008839,
-0.049046,
-0.086823,
-0.181100,
-0.020255,
0.004802,
-0.132030,
-0.097447,
-0.183510,
0.016191,
-0.191740,
-0.157620,
-0.043214,
-0.084531,
-0.140490,
-0.023405,
0.081255,
0.074507,
-0.016612,
-0.054142,
0.097551,
0.077979,
0.099031,
0.066206,
0.010967,
0.019238,
0.008924,
-0.008961,
-0.103200,
0.093978,
0.019869,
0.038757,
0.011189,
-0.097521,
0.008000,
0.076253,
0.070882,
0.096539,
-0.022078,
-0.140260,
-0.058897,
0.036908,
-0.096540,
-0.164030,
-0.208620,
-0.012833,
0.047044,
0.023861,
0.034172,
-0.074296,
-0.105670,
-0.091255,
0.028828,
0.060959,
0.085431,
-0.008443,
0.102290,
0.072713,
-0.058335,
0.039436,
-0.133860,
-0.040910,
-0.033267,
-0.089104,
0.129640,
-0.100820,
-0.127750,
-0.146210,
-0.240350,
0.048682,
0.023860,
-0.038838,
-0.011349,
-0.038155,
0.017788,
0.028362,
-0.065326,
0.020496,
-0.006748,
-0.029621,
-0.073798,
-0.013309,
-0.023235,
0.010892,
0.009073,
-0.016921,
-0.093012,
-0.102890,
-0.042430,
-0.062636,
-0.011661,
0.058272,
0.063801,
-0.090152,
-0.199870,
-0.056455,
-0.071552,
-0.075106,
-0.224420,
-0.240670,
0.048744,
-0.060141,
-0.141690,
-0.167500,
-0.126990,
0.104980,
0.006021,
-0.007717,
-0.152340,
-0.117670,
-0.023719,
0.109860,
0.183320,
0.005194,
0.058691,
0.075965,
0.134830,
-0.035160,
-0.179960,
0.060615,
0.073480,
-0.001889,
-0.048564,
-0.132810,
-0.039877,
0.063233,
0.024385,
-0.037336,
-0.014144,
-0.007191,
0.153700,
0.056612,
0.018568,
-0.108470,
-0.016174,
0.130570,
0.073489,
0.145000,
0.223560,
0.174940,
0.098792,
0.102760,
-0.028458,
-0.004766,
0.093790,
0.024565,
0.106550,
0.058378,
-0.074035,
-0.012200,
-0.000033,
0.107430,
0.119230,
-0.037105,
-0.056015,
-0.025169,
-0.024339,
0.110840,
-0.122580,
-0.017400,
-0.061009,
0.033717,
0.112580,
0.062464,
0.091928,
0.104970,
0.042728,
-0.016106,
0.001867,
0.028144,
0.048066,
-0.091968,
-0.130140,
-0.095018,
-0.017115,
-0.025308,
-0.173880,
-0.207800,
-0.103740,
-0.058887,
-0.161690,
-0.205590,
-0.289090,
-0.061233,
0.016676,
-0.014872,
-0.005107,
-0.090617,
0.041303,
-0.092451,
-0.005296,
-0.048689,
-0.039571,
-0.105190,
0.035679,
-0.053451,
0.052631,
-0.035928,
0.064030,
0.016147,
0.015932,
0.060462,
0.151550,
0.193730,
0.038410,
0.002261,
0.093530,
0.045208,
0.037623,
0.027850,
0.129370,
0.115320,
-0.044607,
0.017740,
-0.032764,
-0.062329,
-0.055959,
-0.100800,
-0.188310,
0.174070,
-0.074756,
-0.009510,
-0.063151,
-0.080819,
0.002679,
-0.052265,
-0.132270,
-0.033274,
-0.101380,
0.084871,
-0.003428,
-0.034010,
0.020162,
0.093785,
-0.063517,
-0.029986,
0.097578,
0.117590,
0.455160,
0.136750,
0.063164,
0.041084,
0.068022,
0.105870,
0.022616,
0.041301,
0.154050,
0.180830,
0.106150,
-0.028335,
0.085034,
0.061800,
0.172160,
0.111970,
0.046166,
0.018357,
0.029782,
0.000378,
0.077556,
-0.145290,
-0.140750,
-0.086024,
-0.055768,
0.025665,
-0.035242,
0.028700,
-0.012190,
-0.021062,
0.005898,
-0.013971,
0.039039,
-0.035254,
0.050333,
0.024996,
0.037446,
-0.022290,
0.030319,
0.060474,
0.059174,
-0.021715,
0.007163,
0.003602,
0.032138,
0.048574,
0.035637,
0.052913,
0.060497,
0.034625,
-0.002987,
-0.149150,
0.013159,
-0.078532,
-0.181120,
-0.116710,
-0.212430,
-0.151360,
-0.059841,
-0.060987,
-0.083903,
-0.120490,
-0.069375,
-0.011676,
-0.118930,
-0.107770,
-0.070254,
0.013202,
0.030834,
-0.020416,
-0.154550,
0.184670,
0.119570,
0.098149,
0.159200,
0.120300,
-0.064221,
-0.020612,
-0.028724,
0.016695,
-0.008736,
-0.045326,
-0.088796,
-0.129690,
-0.039652,
-0.083005,
-0.036428,
-0.094671,
-0.152060,
-0.070500,
0.081915,
-0.039051,
-0.080772,
-0.091101,
-0.066781,
0.017118,
-0.030141,
0.006854,
-0.056532,
0.026041,
-0.027216,
-0.186920,
0.069797,
0.016390,
0.023224,
-0.114320,
-0.205980,
-0.104680,
-0.104330,
-0.103300,
-0.079762,
-0.108630,
-0.101860,
-0.066981,
-0.009521,
-0.055085,
0.136620,
0.105630,
-0.042704,
0.006375,
0.005446,
0.338800,
0.162060,
0.084559,
0.076711,
-0.004506,
0.034527,
0.004167,
0.012422,
-0.007956,
-0.032212,
0.020030,
0.036342,
0.031833,
-0.017278,
-0.050042,
0.026614,
-0.005227,
0.016362,
0.025248,
0.016228,
-0.011416,
0.054506,
0.029838,
0.000507,
-0.001277,
-0.005424,
0.024092,
0.023095,
0.025459,
-0.008269,
0.143590,
0.119780,
0.055168,
-0.118760,
0.017199,
0.138970,
0.075163,
-0.002491,
-0.110400,
-0.029682,
0.088157,
-0.059509,
-0.249640,
-0.163040,
-0.104570,
0.037792,
0.094934,
-0.090308,
0.008184,
0.005376,
0.060064,
0.079035,
-0.100600,
0.047194,
-0.038087,
-0.101580,
-0.073894,
0.004414,
0.045178,
0.018978,
0.039150,
0.012522,
0.010484,
-0.098152,
-0.125250,
0.103060,
0.127170,
0.078545,
-0.054127,
-0.066460,
0.050907,
0.088118,
0.044705,
-0.071097,
-0.029997,
0.043464,
0.038741,
0.015099,
-0.226330,
-0.017269,
-0.016639,
-0.073933,
0.059623,
0.179410,
0.121160,
-0.054490,
-0.137170,
-0.016656,
-0.009411,
0.078484,
0.034696,
-0.048085,
-0.019707,
-0.023337,
0.120710,
0.097182,
-0.042535,
0.025748,
0.057882,
0.066876,
0.130990,
0.015466,
-0.002192,
0.028156,
0.010663,
-0.033345,
-0.064046,
-0.086078,
-0.024811,
0.020522,
-0.067251,
-0.012557,
0.059165,
-0.068027,
-0.018551,
-0.066833,
0.003444,
0.119080,
0.084184,
-0.041384,
-0.087209,
-0.084948,
0.008941,
-0.003997,
-0.042558,
0.019815,
0.122420,
0.083876,
0.070684,
-0.037221,
-0.103330,
0.071911,
0.026742,
0.007858,
-0.001413,
-0.123420,
-0.043415,
-0.114800,
-0.204230,
-0.125140,
0.018113,
-0.225810,
-0.221350,
-0.111940,
-0.208170,
-0.009116,
-0.051396,
-0.038557,
0.089010,
-0.040310,
-0.069567,
0.001621,
0.025936,
0.170010,
0.090488,
0.065205,
0.062053,
0.081336,
0.029840,
0.139320,
0.121270,
0.062188,
0.020404,
0.080109,
0.147010,
0.066761,
0.049611,
0.114250,
0.061569,
0.124850,
0.131930,
0.119260,
0.051748,
0.043061,
0.057841,
0.015455,
-0.088727,
-0.028068,
-0.041375,
-0.050879,
0.028464,
0.019460,
0.050789,
0.041126,
-0.009516,
0.006089,
0.033272,
0.023582,
0.014868,
0.017213,
0.053676,
0.015143,
0.008207,
0.026504,
0.017228,
0.059347,
0.073405,
0.063891,
0.045606,
0.049878,
0.027317,
0.046407,
0.057998,
0.013861,
0.060636,
-0.044021,
0.100270,
0.055279,
-0.053166,
-0.011951,
0.093973,
0.068365,
0.011865,
-0.130640,
-0.183140,
0.066396,
0.004375,
0.017583,
-0.017493,
-0.159110,
-0.081432,
0.004140,
-0.083263,
-0.015410,
-0.206750,
-0.130000,
-0.215390,
-0.056139,
-0.213310,
-0.252210,
0.109240,
0.009953,
0.016121,
0.032758,
-0.084933,
0.152920,
0.050843,
-0.068080,
-0.062191,
-0.080096,
0.098221,
-0.042971,
-0.061639,
-0.138650,
-0.058687,
-0.004331,
-0.022576,
-0.025252,
-0.041628,
-0.037113,
-0.024090,
-0.079947,
-0.029385,
-0.039793,
0.014859,
0.015110,
0.023432,
0.065748,
-0.018356,
0.015861,
-0.054569,
0.012691,
-0.014528,
-0.003031,
-0.033668,
-0.010834,
0.006997,
0.021461,
-0.042475,
0.022437,
0.018392,
-0.049015,
-0.011248,
0.000965,
0.003327,
-0.023150,
0.029256,
0.029645,
0.031675,
0.044843,
-0.041852,
-0.073798,
-0.025562,
-0.001567,
-0.071990,
0.058541,
0.013152,
-0.045122,
0.006409,
0.157850,
0.119420,
0.104050,
-0.069884,
-0.090645,
0.081809,
-0.086174,
-0.029072,
-0.059139,
-0.043162,
0.072667,
-0.087457,
-0.077867,
-0.047318,
0.046979,
-0.024805,
-0.057981,
-0.101190,
-0.028210,
-0.006104,
-0.000303,
-0.138910,
0.040243,
0.053591,
0.091064,
0.126560,
-0.066297,
0.044801,
0.190930,
0.090504,
-0.011725,
-0.028058,
0.170320,
0.182320,
0.092815,
-0.189460,
0.000371,
0.010743,
-0.094188,
-0.011132,
-0.258420,
0.031345,
0.015183,
0.006676,
0.037919,
0.033925,
-0.019767,
0.011188,
-0.016435,
0.041782,
0.021741,
-0.023947,
0.010292,
0.001529,
-0.008864,
-0.021938,
-0.006230,
-0.001743,
-0.005643,
-0.003936,
0.023888,
0.027751,
0.002790,
0.038040,
-0.023794,
-0.004443,
-0.024499,
0.161210,
0.028866,
-0.051973,
-0.038868,
-0.123210,
-0.066603,
-0.115970,
-0.008711,
0.000322,
-0.008675,
-0.083959,
-0.023699,
0.111050,
0.071255,
0.019583,
-0.021186,
0.040304,
0.088020,
0.155530,
-0.110450,
-0.018458,
0.062927,
0.070397,
0.177530,
-0.019985,
-0.060366,
-0.020543,
-0.011816,
-0.046259,
0.010332,
0.036800,
0.051857,
0.039664,
-0.002840,
0.049015,
0.020547,
0.009969,
0.053842,
0.008204,
-0.016869,
-0.046160,
-0.037706,
-0.026346,
-0.087736,
0.020793,
0.034054,
-0.005180,
-0.045562,
-0.028948,
-0.003461,
-0.020380,
0.021452,
0.078624,
0.028311,
-0.008793,
0.034293,
0.046241,
-0.007070,
0.010428,
0.022929,
0.053261,
-0.041077,
-0.037541,
-0.031144,
-0.000028,
0.019499,
-0.094813,
0.008490,
0.090195,
-0.049706,
0.006510,
-0.088167,
-0.086903,
-0.005540,
-0.033001,
-0.026087,
0.007888,
-0.006656,
0.028617,
-0.025820,
0.101930,
0.092688,
0.070187,
0.047789,
-0.134700,
0.042972,
0.002096,
0.013582,
-0.061815,
-0.226130,
-0.008142,
0.014480,
0.053053,
-0.094297,
-0.064909,
-0.048480,
-0.089099,
0.039562,
0.094517,
-0.168170,
-0.075338,
0.012776,
-0.047739,
-0.112660,
-0.161410,
-0.003540,
0.045114,
-0.038116,
-0.147840,
-0.046336,
0.127570,
0.124080,
0.121040,
-0.052788,
-0.045737,
0.044516,
0.022769,
0.073509,
0.035820,
-0.087942,
0.004815,
-0.049134,
0.066446,
0.085892,
-0.032016,
-0.029239,
0.072971,
-0.075032,
-0.216310,
-0.007495,
-0.099714,
-0.014045,
-0.101240,
-0.178000,
0.107170,
0.033554,
0.005584,
0.030992,
0.047580,
0.062222,
0.108960,
0.118620,
0.244310,
-0.057757,
0.050201,
0.110090,
0.032850,
0.057837,
-0.171570,
0.076276,
-0.204580,
-0.211160,
-0.378160,
-0.243390,
-0.100640,
-0.201800,
-0.293280,
-0.330950,
-0.105050,
-0.147870,
-0.220250,
-0.287250,
-0.215620,
-0.082532,
-0.203180,
0.179060,
0.138400,
-0.066615,
-0.041570,
0.017374,
0.192300,
0.127480,
0.042737,
-0.028149,
-0.019317,
0.107920,
0.129950,
0.027501,
-0.134920,
-0.009645,
0.112570,
0.105370,
0.091356,
-0.060089,
0.003343,
0.124020,
0.071692,
0.064823,
-0.059881,
-0.037810,
0.127110,
0.046810,
0.093228,
0.034150,
-0.022312,
0.060749,
0.008920,
0.100510,
-0.002163,
0.096091,
0.075037,
0.107770,
0.045821,
-0.186970,
0.102080,
0.073190,
0.162410,
0.110900,
-0.044657,
-0.034692,
0.166780,
0.111800,
0.131020,
0.020393,
0.046903,
0.130160,
-0.003504,
0.060617,
-0.019341,
-0.016895,
0.077095,
0.025353,
-0.013582,
-0.021205,
-0.070516,
0.016816,
0.006942,
-0.154850,
-0.148730,
0.081948,
0.143030,
0.126160,
0.109500,
-0.105230,
0.110330,
0.105950,
0.153160,
0.203990,
-0.089152,
-0.018003,
-0.021874,
-0.054389,
0.081612,
-0.156510,
-0.103470,
-0.173780,
-0.177750,
-0.037290,
0.111280,
0.037259,
0.076392,
-0.043972,
0.012039,
0.125530,
-0.003803,
0.021270,
-0.031632,
0.007487,
0.023340,
-0.010137,
-0.019395,
-0.075447,
-0.236200,
-0.110470,
-0.025286,
-0.004649,
-0.069697,
-0.085591,
-0.054960,
-0.087629,
-0.023996,
-0.036384,
-0.029104,
0.034218,
-0.108290,
-0.059773,
0.018573,
-0.015829,
0.029473,
-0.033815,
0.038340,
0.157320,
0.094784,
0.123260,
-0.011746,
0.090887,
0.068078,
0.197530,
0.112910,
-0.120340,
0.082225,
0.043500,
0.078283,
0.041368,
-0.131410,
0.107360,
0.100390,
0.063104,
0.084668,
0.037531,
-0.059741,
-0.147850,
-0.143530,
-0.101650,
-0.043273,
-0.079145,
0.041778,
-0.093021,
-0.105930,
0.007959,
0.045776,
-0.072306,
-0.022086,
0.102570,
-0.019032,
0.039914,
-0.024440,
0.057996,
0.187040,
-0.112780,
0.081039,
0.067910,
0.093617,
0.228010,
0.195360,
-0.035000,
-0.188060,
-0.050242,
0.132090,
0.072587,
-0.010069,
-0.114340,
-0.029360,
0.150400,
0.002888,
-0.067063,
-0.052386,
-0.007989,
0.118350,
0.099171,
0.080656,
0.155580,
0.088740,
0.207630,
0.083108,
0.047500,
0.063784,
0.077021,
0.190440,
0.003705,
0.023870,
0.001401,
-0.018061,
-0.041873,
0.009023,
-0.001182,
0.005220,
-0.027755,
0.029970,
0.017643,
-0.007384,
0.015434,
-0.012644,
-0.023238,
-0.025799,
0.016642,
-0.000136,
0.023830,
-0.009001,
-0.037457,
0.038850,
0.039022,
0.024352,
-0.013669,
0.068726,
0.108450,
0.022995,
0.013920,
0.004522,
0.050558,
0.061676,
0.075855,
0.021329,
0.008248,
0.088923,
0.026552,
0.130920,
-0.032165,
-0.001450,
0.083297,
0.072568,
0.056069,
0.005862,
-0.015717,
0.012089,
0.104520,
0.187480,
0.180250,
-0.005466,
-0.031904,
-0.027271,
-0.017995,
-0.061262,
-0.016961,
0.091343,
-0.075196,
-0.037803,
-0.002549,
-0.070255,
0.119480,
-0.005306,
-0.008688,
-0.164030,
-0.008076,
0.064560,
-0.057109,
-0.001958,
-0.008166,
-0.018079,
0.009655,
0.034127,
0.005442,
-0.070234,
-0.116360,
-0.081160,
0.020121,
-0.102120,
-0.021003,
-0.060447,
-0.105030,
0.008589,
0.033417,
-0.054522,
-0.072743,
0.121930,
0.060787,
0.021531,
0.008647,
-0.000945,
0.083434,
0.118540,
0.014822,
-0.004106,
-0.052197,
0.267660,
0.198010,
0.132580,
0.073054,
-0.031556,
-0.018743,
-0.011833,
-0.026513,
0.035832,
-0.000632,
-0.001459,
-0.005915,
0.025356,
-0.002770,
-0.015079,
-0.003545,
-0.006801,
-0.013808,
0.029243,
-0.029478,
-0.001214,
-0.022131,
0.007189,
-0.040057,
-0.001873,
-0.001341,
-0.036447,
-0.011802,
-0.041467,
-0.012866,
-0.109980,
-0.080771,
-0.039436,
-0.154710,
-0.139600,
-0.038622,
0.018168,
-0.075970,
-0.103490,
0.008302,
0.073227,
0.158680,
0.057545,
0.112020,
-0.091710,
-0.043990,
0.120600,
0.005802,
0.088255,
0.078156,
-0.198710,
-0.103970,
-0.119760,
0.039978,
-0.039018,
-0.295740,
-0.213540,
-0.120210,
-0.013753,
-0.058588,
-0.144950,
-0.284020,
-0.148870,
-0.101900,
-0.097388,
-0.130310,
-0.118100,
-0.050040,
-0.095507,
-0.154790,
-0.069693,
-0.020722,
0.035393,
-0.043012,
-0.109660,
0.097133,
0.120780,
0.049175,
-0.063234,
-0.056614,
-0.002722,
-0.023038,
0.001695,
0.068074,
0.011031,
0.081955,
-0.014105,
0.040501,
0.127470,
0.074846,
0.032314,
0.077104,
0.083388,
0.112190,
0.135950,
0.045169,
-0.027510,
0.105720,
0.107700,
0.089121,
0.005191,
-0.024914,
0.010082,
0.012679,
0.022494,
0.048702,
0.178600,
0.088159,
0.153680,
0.073736,
0.031485,
0.098988,
0.145870,
0.109770,
0.088109,
-0.022461,
0.019983,
0.136290,
0.118170,
-0.022628,
0.090003,
0.052267,
-0.005874,
0.052361,
-0.076187,
-0.011742,
0.002315,
-0.139010,
-0.097617,
-0.166170,
-0.093815,
0.057742,
0.051839,
-0.033937,
-0.014301,
-0.032764,
0.063850,
-0.051681,
-0.045108,
0.052482,
0.046444,
-0.028156,
0.005948,
0.092389,
0.079866,
0.042656,
0.184540,
0.021541,
0.117050,
0.124930,
-0.061185,
0.077430,
0.013152,
0.078669,
0.088608,
0.174640,
0.044419,
-0.104550,
-0.091033,
0.081727,
0.154310,
-0.100810,
-0.224850,
-0.078684,
0.088286,
0.103940,
-0.004984,
0.009488,
-0.062743,
0.042699,
0.151520,
0.072008,
0.036938,
0.062052,
0.117330,
0.042340,
-0.076856,
-0.043882,
0.035499,
0.114200,
0.019305,
0.027053,
0.069687,
-0.070449,
0.028520,
-0.036191,
-0.013285,
0.022675,
-0.062490,
-0.031253,
0.032683,
0.058432,
-0.020988,
0.020338,
0.038676,
0.072167,
-0.035968,
0.037583,
0.040162,
0.064107,
0.005194,
-0.045261,
-0.001386,
0.043762,
0.060914,
0.047224,
0.060126,
-0.094798,
-0.149410,
-0.000442,
0.010537,
0.007170,
-0.099537,
-0.135650,
-0.024209,
0.032575,
-0.060789,
-0.220780,
-0.120490,
0.053341,
0.050688,
0.006610,
-0.091312,
0.045946,
0.067945,
0.091932,
-0.134940,
0.043522,
-0.020264,
0.082859,
0.135720,
0.082097,
-0.048995,
-0.116450,
-0.054061,
0.111250,
-0.007932,
-0.042388,
-0.092271,
-0.127780,
0.075534,
0.004272,
-0.080506,
-0.149370,
-0.044914,
0.008826,
-0.044364,
0.000645,
-0.115870,
-0.045759,
-0.040149,
-0.090945,
-0.080576,
-0.106440,
0.013433,
0.002628,
0.026007,
0.039800,
0.008851,
-0.006689,
-0.035472,
0.010394,
-0.030337,
-0.023401,
-0.013704,
0.021470,
-0.009748,
-0.015045,
0.019337,
-0.022711,
-0.012643,
-0.038399,
-0.007577,
-0.012428,
0.029875,
0.026392,
-0.031963,
-0.010687,
-0.040491,
0.004969,
0.038727,
-0.077306,
-0.048650,
-0.035236,
-0.040226,
0.179420,
0.225240,
0.042020,
0.039246,
0.060455,
0.211970,
0.167210,
0.090334,
0.007156,
0.067766,
0.112230,
0.061336,
0.036384,
0.116780,
0.065813,
0.246700,
0.014429,
-0.094259,
0.014169,
0.028871,
-0.048432,
-0.044528,
-0.001409,
-0.015876,
-0.025955,
-0.034672,
-0.000773,
-0.012178,
-0.038775,
0.016173,
-0.035321,
-0.006634,
-0.040450,
-0.004570,
-0.035499,
0.016587,
0.003886,
-0.022648,
-0.017653,
-0.033609,
0.002764,
-0.031851,
0.004002,
-0.018775,
-0.038397,
-0.035549,
-0.020685,
0.017283,
-0.023444,
-0.012766,
-0.037199,
0.018533,
-0.002192,
0.002651,
0.007798,
-0.003358,
0.015503,
-0.041225,
-0.014445,
0.010112,
0.003070,
-0.020648,
-0.024696,
0.016360,
-0.037873,
0.001491,
-0.030284,
-0.023065,
0.008536,
-0.011444,
0.022471,
0.016233,
0.031442,
-0.014560,
0.036383,
-0.021020,
-0.018615,
0.031520,
-0.025549,
-0.022387,
-0.020644,
-0.012854,
0.031435,
-0.007639,
-0.015030,
-0.002691,
-0.034389,
0.022233,
0.011638,
-0.044636,
0.007479,
0.037972,
-0.020378,
-0.014775,
-0.014940,
0.023662,
0.013917,
0.000666,
-0.028287,
-0.028485,
-0.000618,
-0.018443,
0.033846,
-0.002180,
0.022325,
0.033657,
-0.023331,
-0.000036,
-0.031765,
-0.004846,
0.001925,
-0.003081,
0.000570,
0.004763,
0.032518,
0.009422,
-0.004994,
-0.031017,
-0.036301,
-0.022194,
0.010282,
-0.019379,
-0.005480,
-0.040031,
-0.032641,
0.046004,
0.012479,
0.016864,
0.008003,
-0.029015,
0.032914,
-0.020570,
-0.020749,
-0.038356,
-0.024014,
-0.053542,
-0.030235,
-0.003983,
0.016660,
-0.043678,
-0.029278,
-0.023104,
-0.033629,
-0.000234,
-0.007953,
-0.000290,
-0.035480,
0.011017,
-0.002066,
-0.027110,
-0.049220,
-0.033661,
-0.039958,
-0.005200,
-0.016428,
-0.048335,
-0.039783,
-0.020723,
-0.019828,
-0.015480,
-0.040846,
-0.015845,
-0.037585,
0.008849,
0.007096,
-0.014281,
0.002158,
-0.050298,
-0.028491,
-0.051936,
-0.026152,
0.014986,
-0.015602,
0.020281,
-0.020243,
-0.044758,
0.005205,
0.001611,
-0.042719,
-0.034747,
0.000156,
-0.024985,
0.006081,
0.006250,
0.020128,
-0.012157,
0.028917,
0.027264,
-0.028507,
0.021118,
-0.013987,
-0.011335,
0.017151,
0.004125,
-0.000387,
0.027846,
-0.002731,
0.024936,
-0.010270,
0.024907,
-0.017220,
-0.030172,
-0.022483,
0.004907,
-0.017106,
-0.017028,
0.001274,
-0.024709,
0.024519,
0.038466,
-0.035842,
0.019301,
0.005151,
0.001890,
-0.017840,
-0.000184,
-0.016031,
-0.032659,
0.026195,
0.008376,
-0.012924,
0.011141,
0.025450,
-0.028837,
0.017674,
0.019742,
-0.027325,
-0.023386,
-0.037900,
0.021217,
-0.035828,
0.004492,
0.003506,
-0.066011,
-0.023499,
-0.011423,
-0.005070,
-0.048445,
0.005133,
0.022999,
-0.050189,
-0.014686,
0.005176,
0.001177,
-0.001522,
-0.015005,
-0.045802,
0.021230,
0.020191,
0.016093,
0.009596,
0.011553,
0.007598,
-0.036275,
-0.007917,
-0.052793,
0.001631,
-0.029351,
-0.036727,
0.004633,
0.005209,
-0.029220,
-0.017898,
-0.048980,
-0.059773,
-0.041629,
0.001656,
-0.049885,
-0.003126,
-0.046918,
0.016072,
-0.000487,
-0.032968,
-0.020531,
0.032907,
0.030118,
-0.016534,
-0.034633,
-0.036115,
0.021326,
-0.012198,
0.017908,
-0.028511,
-0.019951,
0.030363,
0.027106,
-0.016480,
-0.016475,
-0.023614,
0.003342,
-0.014500,
0.018609,
-0.000930,
0.004317,
-0.028495,
-0.014561,
0.001194,
-0.024988,
-0.013292,
0.002399,
-0.020865,
0.024810,
0.025251,
0.029810,
0.025461,
0.016635,
-0.039860,
-0.022701,
0.009823,
0.008207,
0.003783,
0.039018,
-0.008095,
-0.034759,
0.004579,
-0.004762,
-0.010211,
-0.002955,
-0.043588,
0.005092,
0.025978,
-0.045468,
-0.016073,
-0.037886,
-0.017024,
0.013774,
-0.021782,
-0.025855,
0.019364,
-0.000174,
-0.053934,
-0.011243,
0.002670,
-0.026124,
-0.000051,
0.012253,
0.007048,
-0.031502,
-0.027864,
-0.021922,
0.006824,
0.012327,
-0.030259,
0.010451,
-0.025876,
0.018489,
-0.004171,
-0.034335,
-0.014844,
-0.003965,
0.012437,
0.015263,
-0.016189,
-0.020618,
-0.027202,
-0.008153,
-0.006601,
-0.006592,
0.016314,
-0.033224,
-0.005572,
-0.020704,
0.024547,
0.012587,
0.004576,
-0.023474,
-0.012077,
0.007000,
-0.027530,
0.017072,
-0.020935,
0.023040,
-0.050604,
-0.022225,
0.007711,
0.010099,
-0.008968,
-0.026527,
-0.015874,
-0.012761,
0.021618,
0.002418,
-0.038120,
-0.036433,
0.001967,
-0.044161,
0.029980,
-0.040258,
0.014221,
-0.021180,
-0.022484,
0.014216,
0.000361,
0.011047,
-0.004152,
-0.009171,
-0.026856,
0.004247,
-0.040275,
-0.061013,
-0.057727,
-0.049664,
-0.002782,
-0.016480,
0.005277,
0.003198,
-0.025688,
-0.056732,
-0.010343,
-0.049519,
-0.051270,
-0.024232,
-0.032189,
-0.007202,
-0.028900,
0.010060,
-0.011999,
-0.047644,
-0.010160,
-0.046828,
0.003119,
-0.002764,
0.010161,
-0.020291,
0.021549,
0.022066,
0.015021,
-0.002520,
-0.032664,
-0.005527,
-0.014814,
-0.018902,
0.003965,
-0.008306,
0.001906,
-0.025924,
-0.034649,
-0.026283,
0.011861,
-0.024222,
-0.009718,
0.004414,
0.010262,
0.024451,
-0.029348,
-0.019119,
0.011759,
0.020101,
0.018170,
-0.021253,
-0.016695,
-0.000922,
-0.007609,
0.007383,
-0.055185,
-0.034887,
-0.017328,
0.007841,
-0.006962,
0.005548,
-0.017546,
-0.033073,
-0.004497,
-0.029732,
-0.026789,
-0.015581,
0.029563,
0.006297,
0.010605,
-0.018182,
-0.018132,
-0.016263,
-0.016884,
0.022748,
0.002663,
0.020776,
0.019350,
-0.007182,
0.005245,
0.018873,
-0.029663,
0.004474,
-0.012862,
-0.015247,
0.033102,
-0.017793,
-0.040157,
-0.000709,
0.009407,
0.036139,
0.031857,
0.016708,
-0.037525,
0.020534,
0.001290,
-0.002511,
-0.002059,
-0.029635,
-0.020198,
0.032494,
-0.028759,
-0.020112,
0.012415,
-0.009721,
0.023978,
-0.014078,
-0.042213,
-0.034245,
0.005141,
0.002721,
-0.007561,
0.012326,
0.026052,
0.025944,
0.000242,
-0.002271,
-0.030497,
-0.001401,
0.008554,
0.008552,
-0.013118,
-0.009475,
0.022570,
0.023248,
0.015601,
-0.016708,
0.017202,
-0.018020,
0.011079,
-0.016181,
-0.034243,
0.011648,
0.011493,
0.002492,
-0.011629,
-0.034478,
-0.036258,
-0.035362,
-0.016617,
-0.038142,
-0.035578,
-0.022402,
-0.016417,
-0.020165,
0.008213,
0.002300,
0.012592,
0.006075,
-0.008114,
-0.011094,
-0.003772,
0.003595,
0.012748,
0.021230,
-0.014636,
-0.029672,
-0.030831,
-0.005935,
0.005924,
-0.036373,
-0.055591,
-0.026400,
0.001364,
-0.004936,
-0.000183,
-0.045245,
0.022593,
-0.040134,
-0.015700,
-0.049445,
0.026633,
0.000230,
0.010621,
0.009032,
-0.021430,
-0.021059,
0.007089,
-0.031146,
0.014441,
-0.021931,
-0.021200,
-0.002161,
-0.051091,
0.007590,
-0.007500,
-0.010930,
0.005619,
0.016330,
-0.037746,
-0.006082,
-0.019416,
-0.027354,
0.028752,
-0.012536,
-0.030302,
0.018756,
-0.033447,
0.024880,
-0.019890,
0.006650,
-0.014339,
-0.001548,
0.010158,
0.010555,
0.003775,
-0.019309,
-0.041837,
0.010074,
0.005557,
-0.019536,
0.007072,
-0.007811,
0.024176,
0.014485,
0.027668,
0.000013,
-0.028276,
-0.020050,
-0.006541,
-0.017949,
0.028093,
-0.027107,
-0.007512,
-0.028572,
0.023851,
0.002962,
0.016316,
0.013188,
-0.027152,
0.018943,
0.005798,
-0.008675,
0.006892,
-0.040569,
-0.015918,
-0.047407,
0.017907,
-0.015515,
0.004976,
0.006213,
0.029128,
-0.020550,
0.020209,
0.019157,
-0.032073,
-0.038720,
-0.004821,
-0.014233,
-0.018766,
-0.022436,
-0.015490,
0.011330,
0.024774,
-0.011782,
-0.008998,
-0.000041,
-0.031081,
-0.009160,
-0.019890,
0.008855,
-0.007624,
-0.040183,
-0.043028,
0.026126,
-0.006596,
0.038433,
0.037083,
-0.034766,
-0.029860,
-0.023013,
0.007158,
-0.014290,
-0.032813,
-0.044143,
0.007697,
0.016852,
0.018021,
-0.041321,
-0.046524,
-0.017523,
-0.017960,
-0.026673,
-0.040000,
0.001376,
-0.020815,
0.007600,
-0.023587,
0.005735,
-0.032461,
0.018372,
-0.002815,
-0.000408,
0.012073,
-0.017480,
0.016037,
-0.031331,
0.029171,
0.017695,
-0.005032,
0.009458,
0.012561,
0.003309,
-0.037853,
-0.032602,
0.009010,
-0.030403,
-0.024150,
0.027693,
-0.012570,
-0.023533,
-0.034186,
0.018087,
-0.021621,
0.014875,
-0.033497,
0.023323,
-0.011963,
0.023636,
-0.011279,
-0.039823,
0.012219,
-0.043930,
-0.000832,
0.010097,
-0.032324,
0.005919,
-0.040629,
-0.000732,
0.048892,
-0.029391,
-0.000806,
-0.034490,
-0.006139,
0.008893,
-0.050964,
-0.009470,
-0.036605,
-0.031753,
0.006415,
-0.004803,
-0.014058,
-0.052180,
-0.037320,
0.013498,
-0.042004,
0.034088,
0.012318,
-0.005103,
-0.053132,
-0.022511,
-0.001385,
0.004987,
0.024864,
-0.026914,
0.028443,
-0.013606,
-0.015013,
-0.025248,
-0.015545,
-0.001978,
0.000290,
0.019898,
-0.016492,
-0.003015,
-0.019295,
-0.039454,
-0.024601,
-0.018053,
-0.036242,
-0.009483,
0.019186,
-0.018966,
-0.021289,
0.012206,
-0.013979,
-0.011875,
-0.025822,
-0.000124,
-0.021387,
0.010286,
-0.027078,
-0.001428,
0.025094,
-0.017013,
-0.033526,
-0.006732,
0.025358,
0.002911,
-0.023395,
0.025417,
-0.022362,
-0.023035,
0.014225,
-0.028173,
0.002200,
0.016730,
-0.019680,
-0.014714,
-0.013049,
0.010189,
0.005530,
0.026578,
-0.009826,
-0.034856,
-0.034247,
-0.025145,
0.023949,
-0.018465,
0.003973,
-0.016334,
0.017780,
0.007571,
-0.002427,
-0.001308,
-0.035078,
-0.011976,
0.016760,
-0.013025,
0.010518,
0.012131,
-0.025027,
0.005442,
-0.032168,
0.010111,
0.010661,
-0.006056,
-0.021516,
-0.002896,
0.016677,
-0.031582,
0.009224,
0.009640,
0.005382,
0.025978,
0.023680,
0.020462,
-0.028659,
0.026334,
-0.003899,
0.001891,
-0.024842,
-0.013477,
-0.021226,
-0.008038,
-0.028918,
0.011461,
0.010656,
-0.002254,
-0.018065,
-0.021363,
0.028412,
-0.021334,
-0.014004,
0.025110,
-0.014849,
0.012322,
-0.024377,
-0.011447,
-0.018574,
-0.018592,
0.020190,
0.006487,
-0.009927,
0.014693,
-0.028650,
-0.033551,
-0.005597,
0.012315,
0.019523,
0.000442,
-0.024264,
0.023737,
-0.027129,
-0.022282,
0.000681,
0.023408,
0.002897,
-0.029391,
0.009910,
-0.040396,
-0.009363,
-0.018598,
-0.031630,
0.009917,
-0.032986,
-0.019631,
0.022084,
0.019645,
0.006741,
0.005900,
-0.002846,
-0.019973,
-0.032157,
0.019396,
-0.015015,
-0.004281,
0.012580,
-0.014146,
0.020963,
0.015545,
-0.035912,
-0.041042,
0.004873,
-0.016370,
-0.028140,
-0.036073,
0.002655,
0.023257,
-0.003822,
0.016961,
-0.031831,
-0.005213,
-0.039566,
-0.005432,
0.017756,
-0.018003,
-0.022765,
0.015780,
-0.023290,
-0.009918,
0.025235,
0.027450,
0.001508,
0.018875,
-0.005345,
-0.023713,
0.012787,
-0.026791,
0.027076,
-0.008574,
-0.032923,
0.006982,
0.027472,
-0.034793,
-0.010119,
0.015584,
0.024482,
0.006510,
-0.025269,
-0.022895,
-0.019625,
-0.039700,
-0.036916,
-0.027049,
-0.033505,
-0.004151,
-0.001883,
0.020231,
0.006894,
-0.015367,
-0.036306,
-0.025278,
0.030101,
0.020556,
-0.023604,
-0.027908,
-0.031480,
0.000059,
0.013679,
-0.026131,
-0.015639,
-0.037155,
0.001417,
-0.001443,
0.004738,
-0.006496,
-0.020229,
0.019021,
-0.008533,
-0.011655,
0.006056,
-0.024749,
-0.020658,
0.022357,
-0.032437,
-0.003064,
-0.041119,
0.013232,
-0.012900,
-0.029665,
0.010271,
-0.023998,
-0.025143,
-0.024891,
-0.038864,
0.010341,
0.007840,
0.021726,
0.019480,
-0.000872,
-0.033758,
0.022332,
-0.013736,
0.001583,
-0.024365,
0.022318,
0.013205,
0.005000,
-0.035884,
-0.000389,
0.013323,
-0.011052,
0.004191,
-0.035621,
0.001903,
0.004852,
-0.035298,
-0.027577,
-0.009700,
-0.039226,
0.017294,
0.022750,
0.016371,
-0.004045,
-0.018191,
0.002119,
0.020813,
0.014236,
-0.008934,
-0.001244,
0.028798,
-0.014951,
0.013887,
0.028265,
-0.009999,
-0.032799,
-0.035974,
-0.004814,
-0.026239,
-0.009519,
-0.028615,
0.028823,
0.009733,
-0.038848,
-0.031920,
0.026511,
-0.024275,
-0.008086,
0.006643,
-0.006003,
0.012936,
-0.026443,
0.016595,
-0.034352,
-0.030219,
-0.022869,
0.009623,
0.018776,
0.034613,
-0.006571,
-0.013183,
-0.039900,
-0.006846,
-0.005352,
0.020070,
-0.021942,
0.004816,
0.016145,
-0.013318,
0.022398,
-0.035548,
0.009796,
-0.017642,
-0.017505,
0.008391,
0.026766,
-0.031791,
-0.021275,
-0.034074,
0.024258,
-0.007664,
-0.012298,
0.022285,
-0.009861,
0.002378,
0.025216,
-0.017785,
-0.036914,
-0.001971,
-0.036196,
-0.009135,
-0.011697,
-0.023528,
-0.028992,
0.007090,
0.022693,
0.023223,
-0.013819,
-0.027708,
-0.026727,
-0.003467,
-0.019646,
-0.020288,
-0.002419,
-0.007117,
-0.019966,
-0.002838,
-0.008462,
-0.040157,
-0.036146,
-0.021423,
0.028492,
0.003684,
-0.014433,
0.004124,
-0.017297,
0.012099,
-0.010519,
0.018259,
0.024114,
0.026721,
-0.009609,
-0.016851,
0.026907,
-0.028664,
-0.014207,
-0.014172,
0.021353,
-0.014303,
-0.026702,
-0.021129,
-0.017337,
-0.016230,
-0.012281,
-0.010345,
0.007072,
0.025224,
0.001105,
-0.039047,
-0.025252,
0.000812,
-0.005274,
0.027836,
-0.038892,
-0.028712,
-0.031830,
-0.022867,
0.020257,
0.008432,
-0.000033,
-0.007306,
-0.023117,
0.026715,
-0.032704,
-0.032385,
0.006625,
0.001942,
0.020222,
0.001727,
0.019277,
-0.022060,
0.018898,
0.027612,
-0.006749,
0.028592,
-0.029031,
0.024678,
-0.000189,
0.019047,
-0.015383,
0.010193,
-0.035901,
-0.004981,
-0.015977,
0.025997,
0.008204,
-0.021524,
-0.030217,
-0.017101,
0.003039,
-0.007559,
0.005536,
0.026901,
0.021488,
-0.005079,
-0.008472,
0.013276,
-0.037192,
-0.015947,
-0.011230,
0.004595,
0.002405,
0.011074,
0.019475,
-0.006097,
-0.022778,
-0.020891,
-0.027493,
-0.028020,
-0.024923,
-0.011062,
-0.029407,
0.032346,
-0.015252,
0.003230,
-0.023965,
-0.038041,
0.012390,
0.013024,
0.010733,
0.006761,
-0.005540,
-0.024496,
0.000923,
-0.014716,
-0.003228,
-0.039195,
0.011985,
0.019595,
-0.014816,
-0.009950,
0.027873,
-0.023492,
0.025154,
0.010440,
0.006483,
0.011899,
-0.016701,
-0.001006,
-0.034045,
-0.027166,
0.023866,
0.010151,
0.027295,
0.025631,
0.012358,
-0.000573,
-0.028142,
0.028880,
0.001616,
0.009923,
0.024104,
-0.027033,
-0.036671,
0.007903,
0.021745,
0.004964,
0.021064,
-0.004467,
0.018831,
-0.036674,
0.025581,
-0.032406,
-0.026022,
0.000996,
0.004827,
-0.030967,
-0.030826,
0.025908,
0.000818,
0.013242,
0.014514,
0.003174,
0.027008,
-0.041254,
-0.029396,
-0.020311,
-0.018577,
0.008528,
0.000219,
-0.027635,
-0.038048,
0.007725,
-0.004840,
0.007572,
-0.027734,
0.002217,
-0.022475,
-0.024436,
-0.030234,
-0.002975,
-0.035880,
0.027993,
-0.030417,
-0.032400,
0.026784,
0.003977,
-0.014696,
-0.040850,
-0.041222,
-0.039528,
-0.026961,
-0.005862,
-0.006816,
-0.026997,
-0.026620,
0.026483,
-0.027033,
0.013955,
-0.032890,
0.008632,
0.011501,
0.011303,
0.014695,
-0.021631,
0.020603,
0.008590,
0.005029,
0.018059,
-0.007589,
0.005517,
-0.013920,
-0.033346,
-0.006849,
-0.023401,
-0.026069,
-0.008224,
0.021622,
-0.007030,
-0.019072,
0.020776,
-0.016024,
0.025905,
-0.019380,
-0.020157,
-0.003746,
-0.025115,
-0.026880,
0.024511,
0.003451,
-0.016513,
0.029989,
-0.019639,
-0.005295,
0.009346,
-0.023168,
0.025422,
0.021318,
-0.014275,
0.019982,
-0.006447,
-0.000258,
0.018554,
0.020699,
-0.029867,
-0.022022,
0.029711,
-0.035157,
-0.008692,
0.023601,
-0.020147,
-0.013955,
-0.023575,
-0.010061,
-0.020374,
0.002761,
-0.014471,
-0.005276,
-0.029405,
0.010471,
-0.024274,
-0.029388,
0.019031,
-0.021535,
0.024697,
-0.003334,
-0.033187,
0.012883,
-0.024156,
-0.036303,
-0.023541,
-0.026689,
0.028301,
0.023265,
-0.022836,
-0.031149,
0.020627,
0.028551,
-0.038868,
-0.005023,
-0.033732,
-0.026766,
-0.015467,
0.020215,
0.011242,
-0.003193,
-0.031193,
-0.004043,
-0.028676,
-0.037683,
0.023788,
0.020876,
0.001125,
0.003494,
-0.029551,
0.029165,
-0.035734,
-0.018581,
-0.004536,
-0.021930,
-0.027742,
0.015284,
-0.022753,
-0.008002,
0.019480,
-0.013770,
0.025803,
-0.039543,
-0.006767,
0.028059,
0.014552,
-0.041270,
-0.004635,
-0.038094,
0.026100,
-0.020331,
0.025340,
0.023544,
0.004614,
0.020929,
-0.002576,
0.013906,
-0.032107,
0.012867,
0.024595,
0.021395,
0.017980,
0.006665,
-0.002930,
-0.010007,
-0.013532,
-0.019665,
-0.018765,
-0.001349,
0.009016,
0.012024,
-0.026813,
-0.004873,
-0.038124,
-0.024209,
0.013519,
0.015092,
0.003096,
-0.039802,
0.004097,
-0.016006,
-0.019315,
-0.003623,
0.005999,
-0.004337,
0.008676,
0.020834,
-0.008287,
0.017260,
-0.002695,
0.018692,
-0.037227,
-0.031958,
-0.000887,
-0.020485,
-0.027453,
-0.024303,
-0.029610,
-0.038158,
0.010472,
-0.007777,
0.003465,
-0.018004,
-0.040654,
-0.000799,
-0.036441,
-0.039958,
-0.030942,
0.024754,
-0.011022,
-0.004642,
0.002396,
-0.032853,
-0.001790,
-0.024453,
0.026745,
0.020546,
0.000741,
-0.029611,
-0.017477,
0.011067,
0.003992,
-0.040930,
0.001656,
0.013187,
0.018660,
0.013980,
-0.038302,
-0.014681,
0.018301,
-0.008815,
-0.016673,
-0.031520,
-0.034196,
-0.021145,
0.011089,
0.001962,
-0.006256,
-0.016097,
0.009114,
0.012569,
-0.035835,
-0.021838,
-0.034566,
0.035233,
0.013002,
-0.026783,
-0.010704,
0.012021,
-0.020966,
0.011381,
0.020778,
-0.038062,
0.010926,
0.021640,
-0.027655,
-0.012424,
-0.005565,
-0.024125,
-0.019172,
-0.024455,
-0.006833,
0.022021,
-0.005247,
-0.015376,
0.026885,
-0.005924,
0.025402,
-0.004003,
-0.002061,
-0.009948,
-0.039206,
0.003035,
0.009251,
-0.010722,
0.019264,
-0.023979,
-0.017602,
-0.032213,
0.016491,
-0.013068,
0.023457,
-0.010324,
-0.035478,
-0.014472,
0.014237,
0.006789,
0.011182,
-0.041037,
0.022668,
0.028749,
-0.014710,
-0.005135,
0.007671,
-0.035995,
-0.039775,
-0.013612,
0.027071,
-0.016926,
0.028128,
-0.038494,
-0.017800,
-0.020327,
-0.026341,
0.013308,
-0.026687,
-0.021443,
-0.026599,
0.016612,
-0.026533,
0.022226,
-0.028755,
0.028818,
0.025232,
0.015023,
-0.019652,
-0.005008,
-0.024796,
-0.029474,
0.005626,
0.015888,
-0.021242,
-0.013676,
0.023806,
-0.011091,
-0.010610,
-0.038085,
-0.036774,
0.000525,
-0.010005,
-0.025951,
-0.032229,
0.017102,
-0.040264,
-0.031028,
-0.005719,
0.014560,
0.010612,
-0.034193,
-0.012778,
-0.025641,
0.006792,
-0.006050,
-0.017591,
-0.032875,
-0.039873,
-0.019270,
-0.030057,
-0.026188,
0.002379,
-0.040166,
-0.016476,
-0.028942,
-0.021772,
0.027422,
0.013296,
-0.020601,
-0.027579,
-0.021398,
-0.000169,
-0.022372,
-0.023999,
-0.025017,
0.028305,
-0.037342,
-0.112560,
-0.010958,
-0.051952,
-0.026058,
-0.041990,
-0.143150,
0.055814,
-0.058878,
-0.074876,
0.017178,
-0.196350,
-0.107670,
0.027208,
-0.011204,
0.013990,
-0.269520,
-0.102410,
-0.033470,
-0.005938,
0.080866,
-0.185170,
0.070902,
0.024150,
0.109060,
0.082071,
0.028335,
0.014338,
0.005866,
-0.032721,
0.005095,
-0.002926,
-0.024884,
0.037076,
-0.026250,
0.009618,
-0.001437,
0.002894,
0.037471,
-0.022858,
0.008589,
0.013694,
-0.004391,
0.007065,
0.023224,
-0.003580,
-0.004366,
-0.006162,
-0.012584,
0.028860,
0.020258,
0.132600,
0.074262,
0.106880,
0.042582,
0.145530,
-0.093226,
-0.028816,
0.011514,
0.085613,
0.037125,
-0.090620,
-0.088587,
-0.032695,
-0.144680,
-0.089332,
-0.133840,
-0.246710,
-0.089890,
-0.134130,
-0.045896,
-0.130420,
-0.145700,
-0.060857,
0.026343,
0.015928,
-0.006023,
-0.009546,
-0.032962,
-0.025496,
-0.011629,
0.033510,
-0.004164,
0.001861,
-0.047663,
-0.066798,
0.026060,
0.030789,
0.006329,
0.053791,
0.015169,
-0.007204,
0.015450,
0.034597,
-0.022651,
-0.013187,
-0.009895,
0.033129,
-0.035137,
0.008260,
-0.050121,
0.077719,
0.018489,
-0.017171,
-0.095187,
-0.086089,
-0.220030,
-0.119700,
0.131330,
-0.054073,
-0.035818,
-0.141570,
-0.095091,
-0.133280,
-0.172650,
-0.084327,
0.078326,
-0.066487,
-0.138050,
-0.078944,
0.043323,
0.207390,
0.272260,
0.219220,
0.155780,
0.080949,
-0.028058,
-0.016140,
-0.003868,
0.079034,
0.091833,
-0.040449,
-0.019805,
0.157080,
0.086608,
0.170550,
-0.054608,
-0.020218,
0.103940,
0.127850,
0.095294,
-0.002154,
0.095753,
0.150750,
0.139570,
0.103740,
-0.068776,
-0.057305,
0.045201,
0.029232,
-0.005037,
0.084571,
-0.026359,
0.007768,
0.047945,
0.119060,
0.127380,
0.084295,
0.063083,
0.046053,
-0.010438,
0.148960,
0.012056,
0.048481,
0.077990,
-0.101210,
0.010902,
-0.000586,
-0.026636,
-0.018902,
-0.080161,
0.097972,
-0.002505,
0.051402,
-0.050756,
-0.235620,
-0.087105,
0.042582,
0.022750,
-0.115920,
-0.157340,
-0.023303,
0.009224,
0.012295,
-0.015569,
-0.082032,
0.063126,
-0.036639,
0.074715,
0.005123,
-0.120780,
0.124460,
0.181760,
-0.032769,
0.073493,
0.213640,
0.162780,
0.080097,
0.077082,
0.111870,
0.170070,
0.038786,
0.152990,
0.000867,
0.061066,
0.004765,
0.122450,
0.062215,
0.046621,
-0.074769,
0.027674,
0.028745,
-0.026885,
0.024211,
-0.020337,
0.134350,
-0.164330,
-0.052575,
0.012819,
-0.038118,
0.106140,
-0.151650,
-0.150670,
-0.228210,
0.048999,
0.066797,
0.027504,
-0.125850,
-0.072707,
0.003705,
0.059500,
0.094230,
-0.052750,
-0.043693,
0.067094,
0.006257,
-0.020368,
-0.022792,
0.044004,
0.078682,
-0.111560,
-0.059018,
0.018006,
0.005482,
0.004920,
-0.160960,
-0.133200,
0.132410,
0.183820,
0.122450,
0.018206,
0.088629,
0.016160,
0.066408,
-0.103990,
-0.016239,
-0.040223,
-0.089519,
0.096060,
-0.127820,
-0.204910,
-0.128930,
0.005487,
-0.084940,
-0.193720,
-0.322000,
-0.011393,
-0.140820,
-0.103830,
-0.218590,
-0.226220,
0.199430,
0.103450,
0.058406,
0.000982,
0.051183,
0.019560,
0.040396,
0.047039,
-0.031205,
0.097952,
0.013567,
0.043252,
-0.036995,
-0.011350,
0.025420,
0.067384,
0.055568,
-0.131840,
0.025678,
0.044205,
-0.001150,
-0.014566,
0.054263,
0.017248,
0.005617,
-0.101140,
-0.020165,
0.051490,
0.138730,
0.215770,
0.137850,
0.139560,
0.078192,
0.151390,
0.134520,
0.082625,
0.135370,
0.129990,
0.100400,
0.155040,
-0.046616,
0.156620,
0.125580,
0.218530,
0.173770,
-0.077817,
0.120340,
0.096905,
0.136680,
0.133730,
-0.263290,
-0.233400,
-0.036302,
0.008775,
0.004738,
0.007052,
-0.060262,
0.033725,
0.100440,
0.049551,
0.060909,
-0.019933,
0.028681,
-0.074627,
-0.075642,
0.009509,
-0.055682,
0.001820,
-0.011468,
-0.040052,
0.116010,
-0.146510,
-0.098109,
-0.160860,
-0.104650,
0.279890,
0.197520,
0.120300,
0.037229,
-0.057197,
-0.034780,
0.070983,
-0.023495,
-0.074219,
0.067423,
-0.138470,
0.061921,
-0.101680,
-0.098253,
0.098770,
-0.087408,
-0.015608,
-0.106710,
0.002819,
0.096632,
-0.007072,
-0.039720,
0.110270,
-0.009781,
0.114820,
-0.110610,
-0.029646,
0.059559,
0.037057,
0.401900,
-0.066683,
-0.016185,
-0.016660,
-0.097940,
-0.140550,
-0.115120,
0.089832,
0.011451,
0.002636,
-0.004672,
-0.206090,
0.068648,
0.054926,
0.009129,
-0.047738,
-0.162460,
0.010225,
0.037716,
0.039679,
-0.019297,
-0.251590,
-0.192930,
-0.079782,
-0.056896,
-0.232850,
-0.023993,
-0.024488,
0.025980,
-0.010414,
-0.020534,
-0.015961,
0.015805,
-0.003103,
0.016159,
-0.015513,
0.002836,
0.000223,
0.005319,
-0.016791,
-0.008292,
0.017927,
-0.018599,
-0.023547,
-0.042985,
-0.056168,
-0.010598,
-0.020057,
-0.002062,
-0.002075,
-0.030604,
0.032136,
0.094224,
0.041054,
0.024849,
0.173490,
0.014553,
-0.038529,
0.112840,
0.075959,
-0.060253,
0.118080,
0.043491,
0.068222,
0.047988,
-0.108160,
0.039950,
0.044788,
-0.017953,
0.083625,
-0.107880,
0.165190,
0.079782,
0.043334,
-0.057266,
-0.023140,
0.126250,
0.052892,
0.202020,
0.068948,
0.084896,
-0.051073,
0.011676,
0.079137,
0.060486,
0.053487,
0.007417,
0.012381,
0.065928,
-0.000243,
-0.080722,
-0.125780,
-0.098526,
-0.120310,
-0.034692,
-0.104440,
-0.058722,
-0.145440,
-0.184390,
-0.038761,
-0.261630,
0.046395,
-0.133290,
-0.027232,
0.028316,
0.032929,
-0.114520,
-0.053627,
-0.070764,
-0.107880,
-0.111020,
0.045590,
-0.046134,
-0.119630,
-0.214070,
-0.145610,
0.116790,
0.026164,
-0.072044,
-0.082445,
-0.079747,
0.168460,
0.055340,
-0.012868,
-0.031995,
-0.024804,
0.015246,
-0.012283,
-0.001618,
0.006685,
-0.022609,
-0.016072,
0.003490,
0.027650,
-0.014403,
0.014035,
-0.040023,
0.005389,
-0.042619,
-0.006383,
-0.038043,
0.015260,
0.009269,
-0.022490,
-0.043663,
0.029095,
-0.012851,
-0.037899,
-0.008070,
-0.028015,
-0.041775,
0.001197,
-0.136400,
0.024762,
-0.093383,
-0.063855,
0.088269,
-0.024043,
-0.038789,
-0.044357,
0.040613,
0.180320,
-0.035886,
-0.184580,
-0.063398,
0.012145,
0.033955,
-0.069067,
-0.118770,
-0.016387,
0.013655,
-0.174250,
-0.142660,
-0.098102,
-0.128160,
-0.140910,
0.015205,
-0.027445,
-0.022190,
0.020246,
0.028361,
-0.053490,
-0.202450,
-0.036130,
0.043638,
-0.042183,
0.035124,
-0.035961,
0.003165,
0.001975,
0.043663,
-0.019474,
0.032559,
0.012346,
0.077389,
0.143870,
-0.120150,
-0.076624,
-0.054727,
-0.012277,
0.144020,
0.117720,
0.074884,
0.045055,
0.043398,
0.054213,
0.104580,
0.086208,
-0.089389,
-0.027830,
-0.103790,
-0.016559,
-0.106900,
-0.081930,
-0.192430,
-0.103210,
-0.028408,
-0.140670,
-0.145350,
-0.108210,
-0.099651,
0.254650,
-0.058540,
-0.170580,
-0.108710,
-0.077823,
0.002037,
0.046990,
0.092210,
0.095095,
-0.022932,
-0.041377,
0.002181,
0.095158,
0.075239,
0.044145,
-0.079014,
0.031140,
-0.001895,
0.036216,
-0.043898,
0.044900,
0.069120,
0.014436,
-0.009165,
0.026811,
0.043802,
0.161370,
0.111090,
0.017043,
-0.115610,
-0.131640,
-0.068754,
0.085108,
-0.070816,
-0.084341,
-0.036807,
-0.026533,
0.021203,
-0.075057,
-0.007859,
0.169860,
-0.115630,
-0.206300,
-0.179770,
-0.062345,
-0.030755,
-0.105610,
-0.221020,
-0.130600,
0.100190,
0.102520,
-0.063987,
0.003413,
-0.022866,
0.071411,
0.092450,
0.025395,
0.035786,
-0.037874,
0.019790,
0.059217,
0.062953,
-0.001814,
-0.029603,
0.098044,
0.033916,
-0.011481,
0.002259,
0.030277,
0.076797,
0.044345,
-0.088636,
-0.020258,
0.072138,
0.075918,
0.010372,
-0.098828,
-0.047992,
0.046250,
0.031559,
0.057506,
-0.045286,
-0.001959,
0.037604,
0.010794,
-0.031873,
-0.072212,
0.053756,
0.058347,
-0.037004,
0.036136,
-0.017481,
0.058314,
0.028552,
-0.056911,
0.017866,
-0.048318,
0.013583,
0.070803,
0.030651,
0.020442,
0.002562,
0.039780,
-0.036779,
0.002229,
0.042078,
-0.093597,
0.070590,
-0.027735,
0.097748,
-0.034296,
-0.004005,
0.108030,
0.146880,
0.102590,
0.072386,
0.039479,
-0.007557,
0.063116,
-0.066309,
0.097864,
-0.013433,
-0.055547,
0.045981,
0.045144,
-0.021029,
-0.169250,
-0.071486,
-0.109090,
-0.034115,
0.035046,
0.012672,
0.093117,
0.023258,
0.161380,
0.013181,
0.005287,
0.085702,
0.063333,
0.074401,
-0.186580,
-0.008393,
0.028621,
0.045099,
0.180160,
-0.272120,
-0.032615,
-0.046930,
0.013345,
0.124860,
-0.216960,
-0.090211,
0.032913,
0.051407,
0.278130,
0.018555,
-0.000761,
0.016384,
0.006907,
-0.006379,
0.010173,
0.032651,
-0.016015,
0.037973,
0.004091,
0.005606,
0.007786,
0.011487,
-0.023885,
-0.031169,
-0.008869,
0.018810,
0.002856,
-0.014493,
0.030951,
-0.044787,
0.044118,
0.030610,
0.024710,
0.048648,
-0.082653,
-0.097631,
-0.087449,
-0.075416,
-0.011075,
0.053084,
0.158560,
-0.082066,
-0.123480,
-0.028347,
0.135660,
0.098628,
0.085346,
-0.069394,
0.093303,
0.097980,
0.081527,
0.097654,
0.088661,
-0.044485,
0.105040,
0.154770,
0.060200,
0.085441,
0.121570,
-0.021975,
-0.008289,
-0.014301,
0.022352,
0.004268,
0.012807,
-0.011405,
-0.017301,
-0.036899,
-0.009546,
-0.003486,
0.005065,
-0.004742,
-0.006681,
-0.015099,
-0.034238,
0.000616,
0.001136,
0.026926,
-0.008641,
-0.017173,
-0.003525,
-0.029579,
-0.009076,
0.010235,
-0.002751,
-0.001502,
0.027761,
-0.040700,
-0.007195,
-0.001542,
0.004941,
-0.022516,
-0.017665,
-0.040349,
0.019525,
-0.033311,
-0.025908,
0.005564,
-0.008221,
-0.027902,
0.016169,
-0.010519,
0.020037,
0.021985,
0.005240,
0.005027,
0.009052,
-0.003898,
-0.037682,
-0.038533,
0.028991,
-0.021694,
-0.002539,
-0.017553,
-0.007826,
-0.018212,
-0.039185,
-0.023006,
-0.033842,
0.014486,
-0.020944,
-0.032910,
-0.014881,
-0.004384,
0.023952,
-0.029960,
0.008880,
-0.027118,
-0.029561,
-0.002100,
0.026760,
0.004139,
-0.013237,
-0.032298,
0.026863,
0.012636,
-0.040969,
-0.014235,
-0.024418,
-0.020658,
0.005235,
0.016412,
-0.037081,
-0.017306,
0.028706,
-0.011895,
-0.021673,
-0.015160,
-0.005329,
0.005402,
-0.027988,
-0.001080,
-0.019355,
0.015843,
0.003086,
-0.012272,
-0.024324,
-0.036429,
0.012436,
-0.006544,
-0.009890,
-0.003824,
-0.007569,
0.024601,
-0.030317,
-0.009513,
0.010408,
-0.000701,
0.011792,
-0.011458,
0.030648,
0.009382,
-0.030285,
0.019898,
-0.040628,
-0.027817,
-0.017273,
0.024992,
0.004089,
-0.036031,
0.002228,
-0.036856,
-0.010703,
-0.027749,
-0.027289,
0.020595,
0.008800,
-0.025666,
0.010235,
0.004785,
0.002787,
0.004130,
0.012020,
0.026457,
-0.028725,
-0.011383,
0.016347,
0.009400,
-0.034332,
-0.007919,
-0.011611,
-0.007584,
-0.003670,
-0.036886,
-0.033027,
0.005449,
-0.000081,
0.027056,
-0.037690,
-0.032863,
0.002505,
0.027351,
-0.021894,
0.008510,
-0.023169,
0.018476,
-0.025408,
0.017211,
-0.033354,
-0.003454,
-0.003587,
0.023203,
-0.019407,
-0.034376,
-0.025758,
0.017942,
0.020725,
-0.016150,
-0.037305,
0.016847,
-0.017743,
0.009239,
-0.024198,
-0.019629,
-0.026418,
0.016105,
-0.035858,
-0.006321,
-0.024916,
-0.037860,
0.002346,
-0.036382,
-0.005702,
-0.014515,
-0.014320,
0.020561,
0.024116,
-0.001585,
-0.021952,
-0.003708,
-0.007098,
-0.004352,
-0.000317,
0.020325,
-0.033961,
0.003540,
-0.017442,
0.026873,
-0.009709,
-0.031987,
-0.028190,
-0.004613,
0.013806,
0.007373,
-0.008589,
0.003821,
0.000028,
0.021256,
-0.000159,
-0.005221,
0.018407,
0.015559,
0.018667,
-0.030443,
-0.029042,
-0.037047,
0.017337,
0.019241,
0.019115,
-0.005618,
-0.006572,
0.018934,
0.005483,
-0.026075,
-0.011722,
0.015648,
0.014004,
0.018349,
0.037376,
-0.034748,
0.023405,
-0.029404,
-0.032385,
-0.012814,
0.019584,
-0.041969,
0.004990,
-0.031195,
-0.000865,
0.024074,
0.022658,
0.015697,
0.028379,
-0.029405,
-0.023068,
-0.016761,
0.009527,
-0.020575,
-0.016178,
-0.032845,
0.019966,
-0.008058,
-0.000427,
-0.027939,
0.009728,
0.007028,
-0.020687,
-0.023258,
0.018152,
-0.026994,
-0.022803,
0.015884,
0.005168,
-0.004380,
0.016182,
0.004888,
0.017224,
0.006994,
-0.032742,
0.025391,
0.024849,
0.023371,
-0.020146,
0.028613,
0.017883,
0.015841,
0.010051,
-0.004735,
-0.034800,
0.017898,
-0.014548,
0.019388,
-0.009865,
0.018222,
0.028394,
-0.014491,
0.004573,
-0.013419,
0.001121,
0.022435,
0.001354,
-0.023440,
-0.004319,
-0.030662,
0.013967,
0.007770,
-0.009568,
-0.029043,
-0.018894,
0.002306,
-0.025673,
-0.002146,
0.024843,
-0.004665,
-0.015983,
0.002971,
-0.024360,
0.020694,
-0.012048,
-0.010213,
-0.007672,
-0.021930,
0.026111,
0.019449,
-0.005714,
-0.030575,
-0.011652,
0.018901,
-0.035024,
-0.017194,
-0.030984,
0.011864,
-0.026274,
-0.038382,
0.006293,
0.024844,
-0.016772,
0.023181,
-0.026951,
-0.011939,
-0.001320,
-0.028966,
0.021796,
-0.002260,
-0.040744,
0.008971,
0.002312,
-0.001688,
-0.025531,
-0.005934,
0.002381,
0.028787,
0.019786,
-0.030582,
0.015376,
0.025862,
0.019024,
-0.011416,
-0.041738,
-0.004093,
-0.005572,
0.016908,
0.003273,
0.017665,
-0.039871,
0.014749,
0.009389,
0.002123,
-0.031428,
0.004810,
-0.023060,
0.027342,
0.027797,
0.010448,
0.015338,
-0.027344,
-0.014857,
-0.033930,
-0.016119,
-0.025848,
0.000499,
0.010875,
0.013610,
-0.008188,
-0.020908,
0.021565,
0.012902,
-0.010608,
-0.041148,
0.019513,
-0.013133,
-0.003028,
-0.013932,
-0.000618,
-0.034993,
0.017723,
0.021667,
-0.001613,
0.006297,
0.015565,
0.011743,
-0.003775,
0.009411,
-0.031170,
0.012217,
-0.022825,
0.007626,
0.010335,
-0.023069,
-0.015238,
-0.015217,
-0.017891,
-0.041481,
-0.007808,
0.014631,
-0.009725,
0.009535,
0.016771,
-0.015536,
-0.033991,
0.020940,
0.020269,
-0.003612,
-0.015184,
-0.029579,
0.004440,
0.021572,
-0.001420,
0.005378,
-0.012977,
-0.025574,
-0.024891,
-0.012855,
-0.028452,
0.014370,
-0.016207,
-0.028575,
-0.024905,
0.007724,
0.023483,
-0.033182,
0.014080,
0.025204,
0.024540,
-0.035715,
0.010484,
0.014891,
-0.033158,
-0.006644,
0.004286,
-0.037805,
-0.009987,
-0.027399,
0.005190,
0.023464,
-0.027613,
-0.001265,
-0.026081,
-0.030850,
0.016523,
0.018839,
0.023959,
0.023911,
0.022412,
0.024051,
-0.007675,
-0.032931,
0.009444,
0.016848,
-0.020668,
-0.000892,
0.001176,
-0.034956,
-0.006531,
0.005844,
-0.027750,
-0.019325,
-0.016853,
-0.038443,
0.017021,
-0.015517,
-0.036679,
0.021425,
-0.025428,
0.025397,
-0.037923,
-0.004310,
-0.017103,
0.015666,
0.011330,
-0.025596,
-0.004499,
-0.033701,
-0.039484,
0.025232,
-0.038058,
-0.011173,
0.001647,
-0.002968,
-0.000297,
0.004091,
-0.034193,
0.016253,
-0.017945,
-0.004778,
-0.011101,
0.005515,
0.027910,
-0.038415,
0.017197,
0.014194,
-0.040950,
-0.033246,
-0.022272,
0.008018,
0.010437,
-0.023394,
0.020676,
0.019747,
0.007492,
-0.032005,
-0.012256,
0.026764,
-0.020619,
0.007418,
0.007690,
-0.025547,
-0.003475,
0.027808,
0.027884,
0.013551,
-0.017193,
-0.022034,
-0.013611,
-0.013376,
-0.028104,
-0.023998,
-0.006271,
0.009704,
-0.004036,
-0.000263,
0.011982,
0.014003,
-0.004077,
-0.001624,
-0.009678,
0.024545,
-0.037692,
-0.034327,
0.013213,
-0.003245,
-0.010572,
-0.032586,
0.003389,
0.018267,
0.025252,
-0.003996,
0.018912,
-0.015251,
-0.003473,
-0.016649,
0.001574,
-0.013793,
-0.021898,
0.009020,
0.021577,
0.005512,
-0.039631,
-0.026440,
-0.041047,
-0.033901,
0.014341,
0.002700,
-0.002865,
0.011508,
-0.038631,
-0.024521,
-0.019841,
-0.013596,
-0.028023,
-0.041304,
-0.021241,
-0.028591,
0.012739,
-0.019398,
-0.011463,
0.013294,
0.023203,
0.008157,
-0.041126,
-0.035594,
0.026209,
-0.037387,
-0.011117,
0.017143,
-0.007205,
-0.035772,
-0.002745,
0.010122,
0.005782,
-0.002144,
-0.032232,
0.022549,
-0.010508,
-0.025576,
0.000217,
-0.014549,
-0.001062,
-0.026373,
-0.008866,
-0.030088,
0.015846,
-0.027320,
-0.025864,
-0.036285,
0.020246,
0.006195,
-0.023313,
0.012338,
0.024164,
-0.012776,
0.009861,
0.015808,
-0.031276,
-0.014436,
0.029694,
0.011486,
0.019003,
-0.023002,
0.000850,
0.003108,
-0.029190,
-0.024050,
-0.022186,
-0.009834,
0.023125,
0.025419,
-0.036763,
0.005748,
-0.003347,
-0.028042,
-0.010670,
0.022539,
0.022241,
-0.006976,
0.009101,
-0.021572,
-0.017829,
-0.001855,
-0.030390,
-0.023343,
0.003671,
-0.029921,
0.005163,
-0.015496,
-0.014471,
0.023589,
0.020173,
-0.032673,
-0.038419,
0.005086,
-0.034934,
0.008924,
-0.023372,
-0.018762,
0.003986,
0.018847,
-0.034903,
0.020794,
-0.018561,
0.003837,
-0.031478,
-0.025104,
-0.008029,
0.011310,
-0.006594,
0.022884,
0.003697,
-0.017534,
0.024538,
-0.013406,
-0.010552,
0.016929,
-0.024643,
0.027603,
0.018996,
0.023085,
-0.009239,
-0.003774,
-0.006577,
-0.026332,
-0.021721,
-0.026942,
0.026384,
0.017821,
-0.012523,
-0.024631,
-0.039579,
-0.017798,
-0.018304,
0.038392,
0.004767,
-0.006544,
-0.016868,
-0.006389,
0.035006,
-0.015542,
-0.012576,
-0.018543,
0.015755,
-0.020297,
-0.006639,
0.003588,
0.024144,
0.010658,
-0.022222,
-0.034810,
-0.007869,
0.015373,
0.012068,
-0.011951,
0.005935,
0.000315,
0.010747,
-0.004980,
0.018305,
-0.025003,
0.006176,
-0.019223,
-0.002816,
0.012031,
0.024940,
0.024423,
-0.018995,
0.016234,
-0.030013,
0.026974,
0.018975,
-0.000519,
0.008327,
-0.015582,
-0.014059,
-0.008159,
-0.006797,
-0.009017,
0.010371,
0.018735,
0.025120,
0.022653,
-0.025856,
-0.031436,
0.025794,
-0.013861,
-0.006710,
-0.017989,
-0.028822,
-0.032182,
-0.008392,
-0.015139,
0.028502,
-0.019507,
0.006410,
0.027585,
0.002171,
0.018492,
0.015262,
-0.010382,
-0.035048,
-0.025045,
0.004740,
-0.022587,
-0.040122,
0.004658,
-0.029832,
-0.037783,
-0.013026,
0.006495,
0.015436,
-0.028725,
0.040453,
0.011018,
-0.000177,
0.002986,
-0.001405,
-0.037163,
-0.018867,
-0.021429,
-0.039077,
0.015370,
-0.038352,
0.009091,
-0.033740,
0.011284,
0.005628,
0.022399,
0.002775,
0.000201,
0.011210,
-0.035479,
-0.021467,
-0.025928,
0.022983,
-0.033933,
-0.012581,
-0.039273,
-0.005543,
-0.007496,
-0.005253,
-0.020203,
-0.085102,
-0.051547,
-0.011781,
-0.099832,
-0.194280,
-0.132470,
-0.002908,
0.046527,
-0.051244,
-0.032239,
-0.137230,
-0.148700,
0.021510,
-0.020416,
-0.081778,
-0.221780,
-0.114090,
-0.031339,
0.077045,
-0.048493,
-0.164090,
-0.049535,
0.117280,
0.099883,
0.011920,
-0.012212,
0.041514,
0.011830,
-0.006439,
-0.027359,
-0.008766,
0.036491,
0.014863,
0.015133,
0.028257,
0.031364,
-0.009506,
0.013584,
0.007500,
0.032513,
-0.003458,
-0.017737,
-0.033871,
-0.029851,
0.021384,
-0.035311,
0.015168,
-0.027604,
-0.045703,
-0.000856,
0.137260,
0.071222,
0.257960,
0.142170,
0.095857,
-0.031542,
0.039378,
0.028283,
0.007383,
-0.041398,
0.047234,
0.039135,
0.020655,
0.119330,
0.143070,
0.167010,
-0.030523,
-0.017148,
0.151840,
0.046433,
-0.024012,
-0.031580,
0.003257,
0.014632,
0.169270,
-0.027283,
0.019068,
-0.066841,
-0.041694,
-0.087318,
0.017455,
0.002278,
-0.037284,
0.003067,
0.017062,
-0.043173,
-0.057368,
-0.038577,
0.054098,
0.020015,
-0.034797,
-0.049238,
-0.011381,
0.002713,
0.017095,
0.019027,
0.070496,
0.018943,
-0.021779,
0.014124,
0.111330,
0.005724,
-0.021080,
-0.023089,
0.058874,
0.026880,
-0.030225,
-0.052736,
-0.044971,
-0.074447,
-0.043733,
-0.013364,
-0.057326,
-0.036298,
-0.016368,
-0.006821,
-0.046958,
-0.112710,
-0.165460,
-0.034547,
-0.074633,
-0.018176,
-0.046026,
-0.088015,
0.042574,
-0.120940,
-0.138850,
-0.068883,
-0.032313,
-0.236120,
-0.105200,
-0.214810,
-0.126890,
-0.089220,
-0.090399,
-0.220930,
-0.130750,
0.004867,
0.006356,
-0.145500,
-0.185380,
-0.152840,
-0.032160,
0.186030,
0.221730,
-0.001951,
-0.119550,
-0.243030,
-0.102010,
0.141330,
-0.159470,
-0.163080,
-0.135070,
-0.034124,
-0.015173,
-0.087172,
-0.083469,
-0.073031,
-0.056393,
-0.040829,
0.002584,
0.018566,
-0.069137,
-0.038324,
-0.055966,
0.128600,
0.019822,
-0.025146,
0.031011,
0.000291,
0.039151,
0.022152,
-0.051805,
-0.065263,
0.018258,
-0.011256,
0.017371,
-0.020986,
0.026089,
-0.083710,
0.059425,
0.060537,
-0.012727,
0.004631,
-0.081911,
0.097252,
-0.034020,
-0.123310,
-0.126170,
-0.178070,
-0.038444,
0.012871,
0.027615,
-0.028040,
-0.093816,
-0.019482,
-0.072398,
-0.056912,
0.130000,
0.056600,
-0.079554,
-0.041994,
-0.058636,
0.052428,
0.083253,
-0.004893,
-0.046767,
-0.026213,
-0.044486,
-0.038593,
-0.076980,
-0.130250,
-0.002105,
-0.013243,
0.016723,
-0.062564,
-0.050176,
0.014411,
0.087584,
0.017102,
-0.117430,
-0.046661,
0.020268,
0.052063,
-0.046920,
-0.020218,
-0.072861,
0.027802,
0.020062,
0.019072,
0.060462,
-0.052458,
-0.137400,
-0.041804,
-0.010760,
0.040551,
-0.054824,
-0.048562,
0.070338,
0.047740,
-0.001158,
-0.094709,
-0.019303,
0.081201,
0.010328,
0.044166,
0.075706,
0.062216,
0.152210,
0.151770,
-0.063827,
0.076304,
0.072038,
0.130600,
0.053561,
-0.032108,
0.018681,
-0.082337,
-0.013619,
0.031730,
0.014968,
0.116350,
-0.022097,
-0.093475,
0.043165,
0.156260,
0.110800,
-0.023222,
-0.035896,
0.006998,
-0.062524,
0.003724,
0.037888,
-0.013991,
0.046386,
-0.016975,
-0.032734,
-0.003924,
-0.067405,
-0.213560,
0.111200,
0.052390,
0.008875,
0.123040,
-0.106920,
0.009354,
-0.021792,
-0.014318,
0.218550,
-0.114500,
0.125860,
0.017424,
0.055764,
0.039850,
-0.111210,
-0.027330,
-0.001335,
0.056904,
0.151350,
0.008361,
-0.043420,
-0.009855,
0.098804,
0.081321,
0.111250,
0.089537,
-0.028599,
-0.059812,
-0.104960,
-0.036832,
0.178890,
-0.100650,
-0.050381,
-0.046387,
-0.011558,
0.096629,
0.020654,
0.009345,
0.038318,
0.068554,
0.146370,
0.102060,
0.022042,
-0.023043,
0.085891,
0.008624,
-0.053886,
0.031671,
0.115500,
0.065317,
0.000976,
0.043957,
0.044429,
-0.029911,
0.070592,
0.099808,
0.107790,
-0.034687,
-0.040847,
-0.052890,
0.038692,
-0.000209,
-0.018229,
-0.195980,
0.021930,
-0.006009,
0.077393,
-0.020210,
0.069717,
0.164470,
0.035398,
-0.104180,
-0.000303,
0.011129,
-0.022046,
0.090407,
-0.053066,
-0.019756,
-0.058277,
-0.063598,
0.096443,
0.003468,
-0.050491,
-0.054349,
0.026946,
0.018090,
0.027725,
-0.011454,
0.024843,
0.073358,
-0.054937,
0.038178,
0.057859,
0.028811,
0.276850,
-0.017836,
0.130020,
0.150280,
0.033936,
-0.027851,
-0.023805,
0.114130,
0.127430,
0.046690,
-0.034340,
-0.022032,
0.119480,
0.021538,
0.048110,
0.039969,
-0.051686,
0.007047,
-0.022987,
0.058243,
-0.006655,
-0.086050,
-0.078530,
-0.063590,
-0.037603,
-0.070625,
-0.004711,
-0.044264,
-0.033111,
0.007113,
-0.016597,
-0.008031,
-0.008290,
0.009701,
-0.012562,
0.040245,
0.027309,
-0.041723,
0.012400,
-0.001999,
0.018802,
-0.026650,
-0.017173,
-0.007225,
-0.040050,
-0.007841,
-0.066190,
0.034683,
0.026779,
-0.024759,
0.045929,
0.103680,
-0.066452,
0.078543,
0.073600,
0.027556,
-0.092190,
-0.007683,
-0.045618,
0.098781,
-0.057888,
0.060592,
0.025363,
0.120660,
0.063339,
-0.037954,
0.028702,
0.030712,
0.056453,
0.010501,
-0.021313,
0.156030,
0.019451,
0.136930,
0.083422,
0.048495,
0.095904,
0.088423,
0.013631,
0.070075,
0.140560,
0.013556,
0.010384,
0.035252,
0.003883,
0.038583,
0.103880,
0.004072,
-0.035466,
-0.041818,
-0.006230,
0.056515,
0.029424,
0.026253,
-0.014739,
-0.127460,
0.048314,
-0.023626,
0.032023,
-0.008357,
-0.103030,
0.122180,
0.196300,
0.117030,
0.131180,
0.201020,
0.129390,
0.143580,
-0.020367,
0.041370,
0.170550,
0.149930,
-0.026654,
-0.044876,
0.003360,
0.125640,
0.039620,
0.021527,
-0.029493,
-0.038399,
-0.007209,
0.203310,
0.069822,
0.180770,
0.147900,
0.012996,
0.046118,
0.003003,
0.008430,
-0.012063,
-0.009403,
0.015877,
0.005594,
0.050028,
0.039689,
-0.005109,
0.007147,
0.039138,
0.025390,
-0.015958,
-0.029610,
-0.013468,
-0.016973,
0.006085,
-0.020531,
-0.045933,
-0.034174,
0.007381,
-0.012621,
0.023824,
0.036222,
-0.275590,
-0.206800,
-0.259220,
-0.259350,
-0.222710,
-0.202640,
-0.138960,
-0.037763,
0.082914,
-0.057416,
-0.064170,
0.093493,
-0.030132,
0.035258,
0.003861,
0.063642,
0.096143,
0.036242,
0.080911,
0.054910,
-0.048362,
-0.091699,
-0.202730,
-0.153690,
0.029265,
0.147520,
0.046263,
0.015689,
0.021697,
-0.019205,
-0.045471,
0.004298,
0.025760,
-0.027445,
-0.092715,
-0.131780,
-0.056400,
0.016260,
0.002620,
-0.065130,
-0.071753,
-0.035157,
-0.066289,
-0.109080,
-0.057253,
0.067976,
0.055614,
-0.060781,
-0.041533,
-0.017736,
0.105970,
0.070986,
-0.009671,
0.157670,
0.120890,
0.137220,
-0.011102,
-0.112870,
-0.054025,
0.069149,
0.108230,
-0.001038,
-0.117520,
-0.003699,
0.088407,
0.086258,
-0.001196,
-0.042042,
-0.000792,
0.089173,
-0.022010,
-0.036281,
-0.062914,
0.023384,
0.051295,
0.131420,
0.045779,
0.017321,
0.021528,
0.005489,
-0.017096,
-0.021388,
0.028095,
-0.015709,
0.060413,
0.076400,
-0.044879,
-0.050547,
0.026410,
0.079526,
0.152880,
0.021086,
0.001537,
0.059634,
0.024436,
0.123910,
0.174910,
0.070257,
0.031826,
0.089028,
0.032050,
0.043234,
-0.043928,
-0.033467,
0.115160,
0.163230,
0.144240,
0.043847,
0.170500,
0.069177,
0.148030,
0.058579,
0.097369,
0.190670,
0.076335,
0.060143,
0.025008,
0.004122,
0.108530,
0.088941,
-0.053404,
-0.060357,
-0.039549,
0.026416,
0.100870,
-0.010913,
0.022805,
-0.075585,
0.006724,
0.108730,
-0.051389,
-0.039454,
0.022470,
-0.005537,
-0.022903,
0.076364,
-0.005126,
0.088380,
0.075380,
-0.013944,
0.081733,
0.084021,
0.095617,
0.134240,
0.027220,
0.080632,
-0.035884,
-0.058635,
-0.014785,
0.050549,
0.112730,
-0.005436,
0.076568,
0.020272,
-0.003251,
0.023894,
0.009784,
0.075089,
0.058872,
-0.046780,
0.060215,
0.003006,
0.059803,
0.054635,
-0.052324,
0.079017,
0.013761,
0.012192,
0.008559,
0.002991,
0.007702,
-0.023740,
0.114670,
0.096341,
0.016500,
0.032156,
0.073024,
0.071837,
0.122820,
0.016325,
0.148430,
0.004053,
0.002706,
-0.006271,
0.001531,
0.186180,
-0.108730,
-0.128030,
-0.004548,
0.060567,
0.117320,
-0.040561,
-0.013789,
-0.016464,
-0.068536,
0.045594,
0.015210,
0.054445,
-0.018329,
-0.076533,
0.136390,
0.069698,
0.088933,
0.106180,
0.036519,
0.097205,
-0.066887,
-0.063856,
0.054670,
0.027503,
-0.021237,
-0.097712,
-0.020875,
0.071731,
0.056188,
0.016740,
-0.020418,
0.045568,
0.064641,
-0.012709,
-0.077489,
-0.001485,
-0.003124,
-0.034472,
-0.018068,
0.011820,
-0.013460,
0.048488,
0.038043,
0.020862,
0.018573,
-0.038100,
-0.029281,
-0.017847,
0.031581,
0.014990,
0.007966,
-0.024181,
0.028792,
-0.002519,
0.042890,
-0.019627,
-0.003919,
0.060257,
-0.012714,
-0.011265,
0.042737,
0.028264,
-0.009305,
0.009349,
-0.117040,
-0.019238,
-0.017096,
-0.187640,
-0.056186,
-0.148960,
-0.020549,
-0.078158,
-0.050006,
0.018905,
-0.086971,
-0.068680,
-0.035370,
-0.063796,
-0.110510,
0.026950,
-0.063063,
-0.066154,
-0.062252,
-0.063510,
0.160210,
0.030657,
0.045384,
-0.015006,
-0.059523,
0.005928,
-0.036971,
-0.070389,
0.059207,
0.062100,
-0.054554,
-0.068638,
-0.078404,
-0.053437,
-0.015796,
0.108820,
0.148540,
0.046233,
0.014594,
-0.100650,
0.057239,
0.127670,
-0.030298,
-0.086772,
-0.148690,
-0.079402,
0.018507,
-0.047194,
-0.197620,
-0.314070,
-0.014243,
0.000471,
0.034260,
-0.001140,
0.004932,
0.032025,
-0.017209,
-0.015396,
-0.014224,
-0.022900,
0.032676,
-0.017833,
0.026645,
0.024576,
0.029547,
0.006360,
-0.014527,
-0.007090,
0.035032,
0.035413,
0.021698,
0.015508,
-0.024635,
-0.004254,
-0.047468,
-0.045754,
0.081176,
-0.026719,
0.070904,
0.072813,
-0.189610,
-0.087899,
0.016027,
0.084673,
0.094721,
-0.032919,
-0.038332,
0.076546,
0.042970,
0.045234,
-0.100690,
-0.064366,
0.003031,
0.017289,
0.007786,
-0.072398,
-0.008651,
0.001752,
0.000775,
0.088721,
0.021748,
-0.028441,
0.085846,
0.078193,
0.075981,
0.045283,
0.027165,
-0.011411,
0.030185,
0.042438,
0.001799,
-0.007077,
0.036301,
0.051374,
-0.010372,
0.056877,
0.003479,
-0.003668,
-0.057753,
-0.010667,
0.080968,
0.045375,
-0.017889,
-0.019056,
-0.008564,
0.024892,
-0.019790,
0.010367,
0.007799,
0.012800,
0.047771,
-0.014878,
-0.091310,
-0.004869,
0.076642,
0.016699,
-0.052429,
-0.044207,
0.018879,
0.075776,
0.041081,
0.022789,
-0.057185,
-0.054664,
0.117090,
-0.074789,
-0.027068,
-0.125810,
-0.069259,
-0.044195,
0.003229,
0.069162,
0.087558,
0.030996,
0.029523,
0.040649,
0.160380,
0.146940,
0.170760,
0.057719,
-0.112520,
0.121600,
0.157880,
0.167120,
0.079923,
-0.148780,
-0.000192,
0.055193,
0.078808,
-0.007356,
-0.035158,
-0.065679,
-0.052198,
-0.038920,
-0.044197,
-0.226110,
-0.121870,
-0.086820,
-0.072777,
-0.126320,
-0.232810,
-0.058642,
-0.002594,
0.002620,
-0.119030,
-0.142400,
0.056499,
0.129090,
0.121440,
-0.008891,
-0.104600,
0.096063,
0.149920,
0.126670,
0.043475,
-0.123990,
0.044690,
0.062760,
0.121790,
0.168500,
0.021674,
-0.042008,
-0.055516,
-0.035210,
-0.051596,
-0.014721,
-0.061699,
-0.060812,
0.079062,
-0.023021,
0.100150,
-0.079242,
-0.139620,
-0.101320,
0.021451,
0.014672,
-0.031094,
0.072890,
0.064933,
-0.009513,
0.081269,
0.076205,
0.008670,
-0.121800,
-0.167450,
0.240760,
-0.015963,
0.037194,
-0.006409,
0.112170,
0.113170,
0.001988,
-0.170590,
-0.149580,
-0.052600,
0.037617,
-0.058324,
-0.176750,
-0.276010,
-0.216560,
-0.031874,
0.151680,
-0.051811,
-0.144590,
-0.186670,
0.138820,
0.157620,
0.017202,
-0.039230,
-0.146630,
-0.001091,
0.000058,
-0.090751,
-0.096640,
-0.119890,
-0.102380,
-0.040837,
-0.097944,
-0.045392,
-0.016277,
-0.110830,
-0.050199,
-0.036193,
-0.051034,
-0.030340,
-0.029599,
-0.065691,
-0.036094,
-0.050494,
-0.035913,
0.046150,
-0.048020,
0.029297,
0.074046,
0.047416,
0.078546,
0.078839,
0.178770,
0.066592,
-0.094271,
0.065896,
-0.006572,
0.115480,
0.170030,
0.014191,
0.024582,
0.026771,
0.045462,
0.130830,
0.007469,
0.041746,
-0.073756,
-0.125480,
0.042009,
0.011182,
-0.016768,
-0.029524,
-0.189280,
-0.014892,
-0.108070,
0.002539,
0.003178,
-0.106270,
-0.077157,
-0.169710,
-0.050013,
0.106400,
0.078813,
0.118550,
-0.081644,
0.034444,
0.096027,
0.169260,
0.153970,
0.003476,
0.003364,
0.057957,
0.004432,
0.092102,
0.040609,
-0.024896,
-0.082690,
-0.015713,
0.060197,
0.110740,
-0.158830,
-0.082540,
-0.083917,
-0.039057,
0.064265,
-0.163210,
-0.034338,
-0.018794,
0.081000,
0.045459,
-0.053058,
0.088583,
0.118610,
-0.023852,
-0.062350,
-0.042224,
0.089992,
-0.000725,
0.045892,
0.026872,
0.102000,
0.112160,
0.109300,
0.046504,
0.104080,
-0.057296,
-0.094301,
-0.012765,
-0.035249,
0.164810,
-0.196780,
-0.091663,
0.224790,
0.124460,
0.238110,
-0.074629,
0.143120,
0.120170,
0.199350,
0.099666,
-0.168530,
0.079559,
0.104040,
0.158570,
0.069571,
-0.122070,
-0.043329,
0.020466,
0.005407,
0.074294,
0.087407,
0.023701,
0.046813,
0.019458,
-0.043248,
0.216010,
0.036364,
0.036328,
-0.081818,
-0.115250,
0.046337,
-0.013284,
-0.054943,
-0.063768,
-0.070666,
0.056745,
0.031999,
-0.016880,
0.033915,
-0.084392,
0.133860,
0.206150,
0.144800,
0.192200,
0.043308,
0.119280,
-0.023224,
-0.073328,
0.014768,
0.125050,
0.032004,
-0.035538,
-0.176370,
-0.067926,
0.064050,
0.056338,
-0.015941,
-0.013997,
-0.126900,
-0.043526,
0.111990,
0.140970,
0.159410,
-0.030747,
-0.010070,
0.189930,
0.132860,
0.012109,
0.084274,
0.087430,
0.014821,
-0.015237,
-0.038609,
-0.007056,
-0.010622,
0.000609,
-0.010014,
0.005553,
0.015157,
0.000567,
-0.010175,
-0.004516,
-0.013964,
0.016728,
-0.065108,
-0.027990,
-0.039197,
0.010887,
-0.014077,
0.012715,
-0.030894,
0.027487,
-0.016417,
-0.040737,
0.009097,
-0.156140,
-0.035688,
-0.137590,
-0.011659,
0.074702,
-0.047324,
-0.006509,
0.074350,
0.094008,
0.168120,
0.001615,
-0.002562,
0.177780,
0.160800,
0.088535,
-0.110900,
0.053101,
0.088348,
0.040798,
0.021804,
0.089239,
0.076590,
0.171450,
0.212770,
0.142160,
0.071925,
-0.023888,
-0.025270,
-0.046457,
0.056371,
0.114730,
-0.027165,
-0.137870,
-0.050380,
0.121560,
0.094792,
-0.005542,
-0.004741,
-0.053068,
0.107680,
-0.020761,
-0.009240,
0.070799,
0.064317,
-0.027959,
0.047997,
-0.041639,
-0.030221,
0.051555,
0.032136,
-0.038457,
0.068169,
-0.140230,
-0.035146,
-0.102000,
-0.123100,
-0.102340,
-0.087697,
-0.024259,
-0.048101,
-0.120460,
-0.076474,
-0.035151,
-0.077095,
-0.108160,
-0.030374,
0.127930,
0.048355,
0.003115,
-0.062575,
0.151610,
0.173320,
0.125520,
0.172510,
0.010712,
0.040893,
0.000648,
-0.019805,
0.049883,
0.023477,
0.014005,
0.015703,
0.000308,
-0.029724,
-0.003014,
-0.011967,
-0.001810,
-0.040435,
0.009650,
-0.029018,
-0.038351,
-0.003635,
0.003590,
0.016411,
-0.042063,
-0.000432,
0.027456,
-0.003510,
0.016392,
0.022130,
-0.010265,
0.115990,
0.073371,
0.051589,
0.039934,
-0.017200,
0.116890,
0.081460,
0.129010,
0.051822,
0.026663,
0.057820,
0.049315,
0.055623,
-0.123790,
-0.089830,
-0.077600,
0.085952,
0.113850,
-0.042465,
-0.114790,
-0.245110,
-0.213720,
-0.069956,
-0.162510,
-0.154640,
0.006896,
-0.042410,
0.020076,
0.119130,
-0.132780,
-0.134220,
-0.082649,
-0.050248,
0.052617,
-0.226030,
-0.161430,
-0.138510,
-0.073725,
0.037832,
-0.112290,
-0.085169,
-0.050329,
0.024230,
0.025734,
0.001112,
0.027874,
0.118030,
0.095698,
-0.014060,
-0.002426,
0.017580,
0.138070,
0.277510,
0.259940,
-0.042495,
-0.121010,
0.007254,
0.098149,
0.127410,
-0.157030,
-0.165440,
-0.044643,
0.101600,
0.111340,
-0.056190,
-0.053082,
-0.000411,
0.180170,
0.189380,
-0.146700,
-0.098533,
-0.049151,
0.003780,
0.103230,
-0.055103,
-0.105090,
-0.112050,
-0.037077,
-0.025033,
0.019200,
0.015575,
0.091441,
0.070752,
-0.024561,
0.056363,
0.125400,
0.137850,
0.091133,
-0.045333,
0.100090,
0.012715,
0.137700,
0.046719,
0.018928,
-0.028679,
0.040086,
-0.038914,
-0.025204,
0.022547,
-0.033563,
0.071505,
0.003261,
-0.035922,
-0.119000,
-0.037366,
-0.012760,
-0.048317,
-0.033152,
-0.130540,
0.076826,
-0.060008,
-0.084815,
-0.007946,
-0.042799,
-0.083578,
-0.091930,
0.034238,
-0.012273,
-0.108290,
-0.071573,
-0.005515,
-0.098122,
0.057531,
-0.058729,
0.114470,
0.045040,
-0.063503,
0.023634,
0.133590,
0.070050,
-0.059686,
-0.218230,
-0.043616,
0.045516,
-0.091855,
-0.120570,
-0.040943,
-0.067921,
0.034108,
-0.020515,
-0.093285,
0.006928,
0.010229,
-0.020058,
-0.049708,
-0.009125,
-0.070987,
-0.000422,
0.158790,
-0.007057,
-0.030517,
0.013014,
0.004277,
0.068898,
-0.044363,
0.023795,
0.017419,
-0.023653,
0.050717,
0.036639,
-0.022514,
-0.021902,
-0.029506,
-0.013408,
0.028705,
-0.002414,
0.003741,
-0.006949,
0.031473,
0.001612,
-0.053400,
-0.029659,
0.009694,
0.055375,
0.148760,
0.030967,
0.034087,
0.046451,
0.172650,
-0.020485,
-0.249810,
-0.204850,
-0.017165,
0.180950,
-0.001941,
-0.219740,
-0.394000,
-0.182980,
0.203200,
0.033668,
-0.216640,
-0.265150,
-0.002351,
0.041448,
-0.031243,
-0.232690,
-0.030401,
0.009507,
0.108540,
0.065467,
-0.036289,
-0.046178,
0.042216,
0.012042,
0.130370,
0.021149,
-0.068174,
0.060429,
-0.024381,
0.004765,
0.064649,
0.004808,
-0.001458,
-0.021717,
0.076751,
0.044768,
0.037058,
-0.034088,
-0.065340,
0.210840,
0.059686,
0.005331,
-0.001692,
-0.104970,
0.012751,
0.028928,
0.060930,
0.051496,
-0.004838,
0.039052,
0.017009,
-0.012773,
0.007427,
0.008160,
-0.020062,
0.007650,
-0.015453,
-0.017527,
-0.038466,
0.018214,
0.062765,
0.038781,
0.002151,
-0.018342,
-0.003507,
0.001631,
0.024633,
-0.009812,
0.021389,
-0.081776,
-0.041452,
-0.074421,
-0.073153,
-0.142600,
0.004038,
0.022182,
0.002410,
0.077736,
-0.000860,
0.208860,
0.101260,
0.013263,
-0.026371,
-0.099231,
0.111530,
0.057093,
-0.013675,
0.022515,
-0.010268,
0.222080,
0.109020,
0.044091,
0.077225,
0.006909,
-0.047559,
0.014371,
0.014383,
-0.005980,
0.000244,
-0.016493,
-0.008924,
-0.034954,
0.000768,
-0.030079,
0.022353,
0.015006,
0.006083,
0.016652,
-0.028769,
-0.002461,
0.013118,
-0.018115,
0.025150,
0.004834,
-0.012912,
-0.028899,
-0.013842,
-0.015934,
-0.025479,
0.024721,
0.022065,
0.023465,
0.003154,
-0.019011,
0.031518,
-0.009135,
-0.001834,
-0.039010,
-0.028729,
-0.025269,
-0.033186,
0.003389,
-0.019774,
-0.038381,
-0.034329,
-0.033753,
-0.017878,
-0.000707,
0.014971,
-0.001932,
-0.014869,
-0.002572,
-0.012594,
-0.028577,
-0.042778,
0.005619,
-0.053961,
-0.051598,
-0.000612,
-0.001146,
-0.008727,
-0.014247,
-0.027645,
-0.044858,
0.004951,
-0.000122,
-0.002405,
0.034691,
0.012701,
-0.015326,
-0.013250,
-0.017162,
0.007506,
-0.011200,
-0.007214,
-0.021550,
-0.020583,
-0.004893,
-0.022465,
-0.014816,
-0.006180,
0.019458,
0.004049,
-0.017597,
0.006929,
-0.006383,
-0.022004,
-0.036726,
-0.006217,
-0.005274,
-0.037817,
-0.021884,
0.014021,
-0.025585,
0.007001,
-0.020839,
0.002258,
0.033978,
-0.013058,
0.022953,
-0.012850,
0.025119,
0.000409,
-0.008081,
-0.004814,
-0.005718,
-0.034656,
-0.012496,
0.012336,
0.017062,
-0.031984,
-0.020449,
-0.007053,
-0.001364,
-0.017752,
0.026545,
-0.014167,
0.002698,
-0.011123,
-0.032773,
-0.024402,
-0.051380,
0.002280,
-0.032983,
-0.011582,
-0.035991,
-0.027143,
-0.021967,
-0.013765,
0.019583,
-0.003433,
-0.008054,
0.021733,
0.015022,
-0.019194,
-0.036009,
-0.012418,
-0.020738,
-0.008676,
0.000435,
-0.028831,
-0.029845,
0.019313,
0.020151,
-0.044874,
0.005033,
0.022208,
0.012686,
-0.000596,
-0.037222,
-0.031122,
-0.011275,
0.034786,
-0.018915,
-0.010732,
-0.021583,
0.016736,
-0.040615,
-0.017473,
-0.018512,
0.013961,
-0.006908,
-0.032542,
-0.029421,
0.003140,
-0.031931,
-0.035689,
-0.009522,
0.016379,
-0.024592,
-0.046338,
0.017914,
-0.026669,
0.010669,
0.002584,
0.018290,
-0.040921,
-0.017760,
-0.000517,
0.017089,
-0.003101,
0.015959,
0.003684,
0.010144,
-0.024037,
-0.000373,
0.013600,
0.010553,
0.002554,
-0.020743,
-0.013066,
-0.003993,
-0.032846,
0.025270,
0.006238,
-0.032227,
-0.002597,
-0.031747,
0.020699,
-0.008257,
-0.022727,
-0.022464,
0.001967,
-0.030826,
-0.004322,
-0.016504,
-0.031470,
-0.056491,
-0.071379,
-0.046905,
-0.041173,
-0.049851,
-0.044023,
-0.002477,
0.001500,
-0.026304,
-0.050810,
0.017830,
0.016212,
-0.045615,
-0.035852,
0.020914,
-0.003188,
-0.017427,
-0.003839,
-0.003354,
0.019913,
-0.005625,
-0.033163,
0.020816,
0.028043,
-0.034554,
-0.014333,
-0.004109,
0.026452,
0.007499,
0.023724,
0.004315,
0.029489,
0.007176,
-0.001707,
0.012407,
-0.007120,
-0.028577,
-0.022783,
0.000081,
-0.028861,
-0.008634,
-0.024399,
-0.024401,
-0.013627,
-0.019779,
-0.035243,
-0.050107,
-0.019742,
0.017389,
-0.039155,
-0.044379,
-0.042931,
-0.029192,
-0.033648,
-0.013148,
-0.023948,
-0.031780,
-0.012186,
0.004798,
-0.052756,
-0.022824,
0.012561,
-0.017923,
-0.026526,
0.013813,
0.009507,
-0.025938,
0.002481,
-0.061235,
0.010296,
-0.035854,
0.008687,
-0.020886,
-0.015174,
-0.004870,
-0.022920,
0.037975,
-0.054307,
0.009823,
-0.002360,
0.001759,
-0.008491,
0.024842,
-0.028736,
-0.040816,
-0.048868,
-0.058216,
0.008739,
-0.026376,
-0.063623,
-0.045430,
-0.048142,
-0.014290,
-0.040999,
-0.040266,
-0.038186,
-0.031704,
0.002562,
-0.013927,
-0.025667,
-0.040771,
0.000888,
-0.049110,
-0.031339,
-0.013171,
-0.006382,
-0.000664,
-0.040671,
-0.015629,
0.005911,
-0.068301,
0.002591,
-0.027280,
-0.057765,
-0.003013,
-0.052643,
-0.001923,
-0.043275,
0.036441,
-0.033465,
-0.002744,
-0.044183,
-0.001849,
0.017812,
-0.000202,
-0.000057,
0.009754,
-0.014005,
-0.015248,
-0.027399,
-0.018415,
-0.022534,
-0.035396,
0.005422,
0.000223,
-0.003431,
-0.006007,
-0.022043,
-0.002987,
-0.043624,
-0.024284,
-0.047347,
-0.049433,
-0.008143,
-0.044934,
-0.016208,
-0.014582,
-0.031871,
0.021142,
-0.054408,
-0.028662,
-0.064787,
-0.028534,
-0.045192,
-0.023474,
-0.028118,
-0.008636,
-0.063810,
-0.027104,
-0.023702,
0.006344,
-0.040007,
-0.049761,
-0.001019,
-0.055475,
0.013175,
-0.063341,
-0.029623,
-0.022453,
-0.000541,
-0.050328,
-0.019391,
-0.037936,
-0.050795,
-0.011599,
-0.058361,
-0.024413,
-0.014424,
-0.045961,
-0.055292,
-0.003750,
-0.065500,
-0.032264,
0.009949,
-0.035736,
-0.022710,
0.007629,
-0.040856,
0.009444,
-0.022743,
-0.026261,
-0.016670,
-0.035900,
-0.007843,
0.007839,
-0.002706,
-0.046052,
0.015949,
-0.027490,
-0.011107,
0.008481,
0.004538,
0.006534,
-0.016565,
0.001112,
-0.025524,
-0.025787,
0.010132,
0.008235,
0.008584,
-0.035534,
-0.023857,
0.016539,
-0.028326,
0.022305,
0.005466,
-0.024019,
0.008053,
0.014428,
-0.032990,
-0.017732,
0.006596,
-0.023535,
-0.008805,
-0.017302,
-0.026738,
-0.027414,
-0.000725,
-0.043034,
0.004395,
-0.048278,
-0.003321,
-0.049411,
-0.044157,
-0.016267,
0.017983,
-0.051089,
0.008329,
0.003984,
-0.005973,
-0.037297,
-0.030865,
0.006677,
-0.021386,
-0.051018,
-0.039029,
-0.021299,
0.000055,
-0.024654,
-0.015611,
-0.055405,
0.013634,
-0.020437,
-0.000535,
0.004121,
0.003644,
-0.015584,
-0.018212,
-0.043949,
-0.022564,
-0.035834,
0.005360,
-0.003550,
0.006862,
-0.025110,
-0.008264,
-0.024911,
-0.030206,
-0.029502,
-0.019638,
-0.028732,
-0.047584,
-0.024178,
-0.010075,
0.014170,
-0.007529,
-0.023101,
0.003368,
0.015828,
-0.023617,
0.033400,
-0.031312,
-0.014176,
0.021000,
-0.001485,
0.006068,
-0.042489,
-0.004998,
0.013665,
-0.004733,
-0.022005,
0.005299,
-0.032105,
-0.044011,
-0.005546,
0.002252,
-0.012727,
-0.007867,
0.011275,
0.030807,
0.024952,
0.028961,
0.000762,
-0.028328,
0.008352,
-0.029953,
0.034615,
0.008606,
0.017523,
0.024722,
0.018504,
0.028021,
0.020321,
-0.022673,
-0.022043,
-0.032141,
-0.010097,
0.012693,
-0.012752,
0.004776,
-0.013775,
-0.026671,
-0.035291,
0.000163,
-0.017323,
-0.004904,
0.008946,
0.025203,
0.017538,
0.015472,
0.017334,
-0.026445,
0.020845,
-0.006097,
0.005449,
-0.029653,
-0.028738,
0.013581,
-0.016797,
-0.027756,
0.001695,
0.000349,
-0.032823,
0.008294,
-0.033858,
-0.007855,
-0.016532,
-0.004136,
-0.011121,
0.023875,
0.014637,
0.002255,
0.004991,
-0.031994,
0.010799,
0.008951,
0.010435,
-0.028541,
-0.019893,
-0.038486,
-0.001363,
0.025515,
-0.040437,
-0.042283,
-0.014277,
0.002947,
-0.032313,
0.000590,
-0.038053,
0.012049,
-0.011785,
-0.039387,
-0.007897,
-0.040146,
-0.029884,
-0.037033,
0.009254,
-0.019246,
-0.062009,
0.007082,
-0.035767,
-0.039351,
-0.017149,
-0.046135,
-0.031892,
0.013398,
-0.038916,
0.007923,
0.000012,
-0.050174,
-0.020088,
-0.012799,
-0.026811,
-0.062056,
-0.003046,
-0.004947,
-0.043807,
-0.037676,
0.005395,
0.029604,
-0.030006,
-0.016751,
-0.007783,
-0.034568,
-0.028937,
-0.004209,
-0.040559,
-0.007295,
-0.038543,
-0.035557,
-0.043666,
0.013019,
0.010734,
-0.061776,
-0.028501,
-0.004891,
0.008689,
-0.022598,
0.019918,
0.002539,
-0.003397,
-0.009994,
-0.001406,
-0.040409,
0.012293,
0.012951,
-0.045230,
0.014583,
0.005025,
-0.002334,
0.021897,
0.023262,
0.007693,
-0.002194,
0.016760,
-0.029993,
0.002167,
-0.009126,
-0.017311,
0.011037,
-0.014271,
0.012020,
0.013823,
-0.023011,
0.006195,
-0.009945,
0.026632,
-0.059478,
0.004460,
-0.046051,
-0.014970,
-0.038082,
-0.025184,
-0.031985,
-0.014512,
-0.066752,
-0.059842,
-0.058867,
0.005645,
-0.001835,
-0.043842,
-0.045752,
-0.029594,
-0.055161,
-0.001686,
-0.030350,
-0.045796,
-0.024521,
-0.057923,
0.001457,
-0.018769,
-0.058823,
-0.024378,
0.010163,
-0.024385,
0.001586,
-0.010068,
-0.014989,
-0.026025,
-0.002615,
-0.011518,
-0.015487,
0.036853,
0.023379,
0.006890,
-0.016762,
-0.005055,
-0.023493,
-0.023313,
0.022689,
-0.038960,
0.016152,
0.015687,
-0.002289,
0.039115,
0.002901,
0.030243,
0.009457,
-0.025245,
-0.024336,
0.019058,
0.036647,
-0.022956,
-0.024839,
-0.030582,
-0.028202,
0.021076,
0.000249,
-0.009379,
0.016808,
-0.005003,
-0.038021,
-0.007654,
-0.016554,
-0.032518,
-0.038496,
0.003749,
-0.017501,
-0.001393,
-0.006856,
-0.022901,
0.009217,
-0.058600,
0.026484,
-0.022674,
-0.022550,
-0.040654,
-0.017629,
0.008917,
-0.030279,
-0.002208,
-0.025966,
0.000643,
-0.005658,
-0.012194,
0.022837,
0.020594,
-0.027176,
-0.000274,
-0.026492,
-0.018212,
-0.053941,
0.008011,
-0.036831,
-0.022623,
-0.003623,
-0.038744,
0.011581,
-0.009498,
-0.040087,
-0.010748,
0.009168,
-0.019288,
0.020326,
-0.038977,
-0.011205,
0.018039,
0.000027,
0.022903,
0.023248,
0.030730,
-0.016915,
0.000601,
-0.029522,
-0.034504,
0.006496,
-0.032136,
-0.024991,
-0.003293,
-0.009669,
-0.004748,
0.005134,
-0.039453,
0.005092,
0.010401,
-0.027310,
-0.016324,
-0.010660,
0.019644,
0.009487,
0.029401,
-0.024210,
0.009165,
0.003735,
-0.032572,
0.004298,
-0.002354,
-0.010325,
-0.054072,
-0.048381,
0.002433,
0.022934,
-0.051239,
-0.019784,
-0.033059,
-0.034235,
-0.027396,
0.014546,
0.008414,
0.012808,
-0.051240,
0.026692,
-0.023211,
-0.013997,
-0.020142,
-0.023011,
-0.019070,
-0.005361,
-0.026415,
-0.041128,
-0.034440,
-0.032149,
-0.001600,
0.000946,
-0.026334,
0.000678,
-0.010308,
0.014271,
-0.041064,
-0.000841,
-0.022719,
-0.061013,
-0.035251,
-0.040152,
-0.035774,
-0.003326,
0.018182,
-0.038831,
-0.007545,
-0.009447,
0.023519,
-0.020504,
-0.036226,
-0.000126,
0.029648,
0.026591,
-0.034926,
-0.014928,
0.018317,
0.019890,
0.012324,
-0.009513,
0.012605,
0.023707,
-0.010624,
0.001308,
-0.022055,
-0.025565,
0.006850,
-0.000025,
-0.018052,
-0.030576,
-0.007959,
-0.029341,
-0.031115,
-0.006480,
-0.029757,
0.016236,
0.017815,
-0.006741,
0.018512,
-0.025464,
-0.028000,
0.028493,
0.007503,
-0.018933,
-0.019864,
0.013830,
-0.064399,
-0.009006,
0.013902,
0.006291,
-0.011069,
-0.031486,
0.022044,
-0.017173,
-0.011605,
-0.040756,
-0.005407,
0.005041,
0.016250,
-0.016446,
0.007062,
-0.010635,
-0.014610,
-0.013821,
0.002876,
-0.010996,
-0.012162,
-0.014909,
0.018049,
-0.020766,
-0.031243,
0.016156,
-0.009993,
-0.005942,
-0.024669,
0.024203,
-0.024548,
-0.009359,
-0.010525,
-0.059791,
0.039715,
0.036208,
0.014811,
-0.054976,
-0.023430,
0.026567,
-0.058148,
-0.003995,
-0.023247,
0.002450,
-0.066644,
-0.012722,
0.018056,
-0.040449,
-0.031720,
-0.062386,
-0.066136,
0.000362,
-0.056857,
-0.018727,
-0.016369,
-0.028156,
-0.004906,
-0.027344,
0.024069,
-0.019992,
0.003246,
0.008547,
-0.041942,
-0.005839,
-0.032452,
0.021607,
0.017945,
-0.011967,
-0.058113,
-0.005546,
0.008068,
-0.047069,
0.028006,
0.011623,
-0.026992,
-0.001861,
-0.009495,
-0.022355,
0.024020,
-0.010959,
-0.011233,
-0.026581,
-0.039372,
-0.006899,
-0.026813,
0.004585,
-0.053848,
-0.012901,
-0.035151,
-0.022051,
-0.025955,
-0.027521,
0.009670,
-0.015785,
0.014975,
-0.006807,
-0.047387,
-0.033073,
-0.067980,
-0.012002,
-0.032578,
-0.010491,
-0.025595,
-0.012207,
-0.035863,
0.019599,
-0.010814,
-0.024903,
-0.002336,
-0.013353,
-0.019250,
0.002871,
0.010264,
-0.012290,
-0.021010,
-0.026582,
-0.029839,
-0.006255,
-0.029324,
-0.060690,
-0.047383,
0.006955,
-0.032629,
0.018314,
0.033179,
-0.033157,
-0.041115,
-0.007570,
0.000795,
-0.016652,
0.005239,
-0.002432,
-0.008297,
-0.024100,
-0.010423,
0.026527,
-0.020010,
-0.016311,
0.012930,
0.022032,
-0.009158,
-0.035094,
0.014196,
0.014335,
-0.039885,
0.027189,
-0.010929,
-0.041110,
-0.004534,
-0.040121,
-0.009219,
-0.042134,
0.016655,
0.004127,
-0.023041,
-0.015834,
0.005735,
-0.003438,
-0.058112,
-0.061306,
-0.014018,
-0.035430,
-0.020885,
-0.007766,
-0.048779,
-0.072389,
0.003371,
-0.018598,
0.001595,
-0.003665,
-0.030477,
0.024303,
-0.004857,
0.007175,
-0.009622,
-0.006276,
-0.026473,
0.007402,
-0.044532,
-0.009168,
-0.005700,
-0.049581,
-0.008802,
-0.032671,
-0.001181,
-0.001526,
-0.041910,
-0.002548,
-0.011500,
-0.043456,
0.005652,
0.023785,
-0.043034,
-0.014676,
-0.031955,
0.017349,
-0.007856,
-0.033953,
-0.030474,
-0.041465,
-0.027847,
0.004280,
-0.010270,
-0.017692,
-0.001482,
-0.041037,
-0.004265,
-0.036825,
-0.001805,
-0.007620,
-0.019795,
-0.055367,
-0.054256,
-0.002529,
-0.008312,
-0.024195,
0.012182,
0.021876,
-0.013913,
0.024672,
0.000867,
-0.019398,
-0.006972,
-0.042420,
0.004486,
-0.030378,
-0.030342,
-0.058245,
-0.004317,
-0.018416,
0.002520,
-0.006251,
-0.051803,
-0.001756,
-0.012957,
-0.027707,
-0.022850,
-0.016223,
0.014749,
-0.036234,
-0.026656,
-0.044227,
-0.000922,
0.007666,
-0.030568,
-0.040688,
-0.001130,
0.011842,
-0.003698,
-0.006157,
-0.031668,
-0.020474,
0.002932,
-0.072382,
0.020392,
-0.016742,
-0.011893,
-0.008056,
-0.008986,
-0.042096,
-0.024901,
-0.010660,
-0.026511,
-0.010575,
-0.019512,
-0.043134,
0.001903,
-0.009948,
-0.027131,
-0.019292,
-0.010010,
-0.009754,
0.019633,
0.004372,
0.005966,
-0.041026,
-0.043102,
-0.032832,
0.000427,
-0.026080,
-0.015590,
-0.060723,
-0.029013,
-0.040528,
-0.019856,
0.015915,
0.014986,
-0.009332,
-0.006108,
-0.020732,
-0.006635,
0.000110,
-0.007729,
-0.014464,
-0.047416,
-0.056255,
-0.011694,
-0.044806,
-0.038771,
-0.046183,
0.024882,
0.006331,
0.040794,
-0.046322,
0.008696,
-0.015747,
0.029808,
-0.013245,
0.023994,
0.016166,
0.002946,
0.026472,
0.001772,
-0.021870,
-0.039270,
0.007336,
0.019599,
0.002923,
-0.039447,
0.010884,
-0.028898,
-0.024798,
-0.029744,
-0.000949,
0.018162,
-0.062115,
-0.006494,
-0.008607,
-0.040134,
-0.031996,
0.018751,
-0.014205,
0.022811,
-0.032587,
-0.037520,
0.005660,
0.015342,
0.009843,
-0.020588,
-0.021860,
-0.033728,
-0.029703,
0.010401,
0.013098,
-0.027734,
0.028406,
0.020406,
-0.014241,
0.013972,
0.026856,
-0.002347,
0.007538,
0.018543,
-0.032924,
-0.013766,
0.004923,
0.002026,
0.015007,
-0.029968,
-0.009052,
-0.021596,
0.000518,
-0.025041,
0.013458,
-0.031770,
0.004351,
-0.026774,
-0.035026,
0.000941,
-0.026024,
0.022674,
-0.035396,
-0.065763,
-0.048081,
-0.056800,
-0.055641,
-0.037758,
-0.020711,
0.001492,
-0.038562,
-0.039969,
-0.013324,
-0.024274,
-0.011175,
-0.028605,
-0.027745,
-0.039421,
-0.001968,
0.005883,
-0.006143,
-0.001777,
-0.036491,
-0.024210,
-0.016617,
-0.012076,
0.014043,
0.005952,
0.003616,
0.023265,
-0.030476,
-0.033501,
-0.011753,
-0.036389,
0.011874,
-0.070302,
-0.036111,
-0.047029,
0.025009,
-0.013341,
-0.010290,
-0.011382,
0.016960,
-0.008242,
-0.053986,
-0.042427,
-0.024812,
-0.059865,
0.008384,
-0.034630,
-0.074628,
-0.051826,
-0.001856,
-0.017791,
-0.020827,
-0.049914,
-0.018113,
-0.011967,
-0.014980,
-0.031736,
0.012348,
0.022562,
-0.035121,
0.031258,
0.038285,
-0.034722,
0.022359,
-0.013570,
0.009636,
-0.028218,
0.010958,
-0.005289,
-0.033005,
0.012010,
-0.023376,
-0.002699,
0.029340,
-0.018243,
-0.016383,
0.016470,
-0.009479,
-0.007716,
-0.030753,
-0.031229,
0.029387,
-0.012326,
0.031728,
0.009729,
0.007011,
-0.036481,
-0.016235,
-0.021205,
0.013574,
-0.026120,
-0.034000,
-0.003562,
0.001185,
0.003424,
-0.005272,
-0.014727,
-0.036285,
0.024587,
-0.026114,
-0.014457,
0.008777,
-0.001451,
0.000209,
-0.037094,
0.027464,
-0.016888,
-0.029880,
-0.039364,
0.008198,
0.017754,
0.024869,
0.005692,
0.003024,
-0.031639,
0.013360,
-0.012942,
-0.031594,
-0.030507,
-0.018691,
-0.048058,
-0.030354,
0.018716,
0.022470,
-0.049124,
0.001193,
-0.024736,
-0.051841,
0.003199,
-0.024016,
0.023053,
-0.001175,
-0.008144,
-0.046635,
-0.074110,
-0.010907,
-0.026808,
-0.012751,
-0.017813,
-0.027805,
-0.034184,
0.014416,
-0.030148,
0.003182,
0.005700,
-0.022776,
-0.050596,
-0.019542,
-0.041816,
-0.050174,
-0.036407,
-0.042808,
-0.019976,
-0.002724,
-0.071080,
-0.000861,
0.001125,
-0.035680,
0.018062,
-0.056950,
-0.007714,
-0.055516,
-0.004510,
-0.004320,
-0.004070,
-0.039575,
-0.019169,
0.021693,
-0.006916,
-0.029973,
0.027498,
-0.031375,
-0.019647,
-0.037369,
0.021728,
-0.047066,
-0.038903,
-0.022666,
0.023098,
0.005822,
-0.001712,
-0.003244,
0.013530,
0.027923,
-0.028833,
-0.022814,
0.018695,
0.003782,
-0.032400,
0.003716,
-0.040884,
-0.018866,
-0.005080,
-0.005948,
-0.025802,
-0.035326,
-0.027247,
-0.025488,
0.023456,
-0.007035,
-0.016933,
-0.017608,
-0.038900,
-0.037005,
-0.005185,
0.013713,
0.020952,
0.028043,
-0.020382,
0.019797,
-0.030422,
0.025299,
-0.010114,
-0.025913,
-0.041090,
-0.041325,
-0.037529,
-0.021251,
-0.019302,
-0.040570,
0.005216,
-0.032052,
0.025659,
0.023386,
-0.001167,
-0.027676,
0.002664,
-0.017346,
-0.030142,
-0.033541,
-0.032670,
-0.040073,
-0.003164,
0.006796,
0.015719,
-0.002628,
0.003305,
0.028473,
-0.013164,
0.027405,
-0.002469,
0.011463,
0.010873,
0.016398,
-0.002985,
0.012587,
0.001862,
0.021464,
0.005128,
0.027581,
-0.008954,
-0.023993,
0.036104,
-0.028009,
-0.016312,
-0.032754,
0.002670,
0.016134,
-0.001062,
0.018501,
-0.016203,
-0.014978,
0.014905,
-0.033270,
-0.065102,
-0.000716,
0.019863,
-0.002243,
-0.038728,
-0.018656,
-0.020116,
-0.029390,
-0.014199,
0.014583,
-0.025471,
-0.011127,
0.003595,
-0.036353,
0.022587,
-0.003824,
-0.025777,
-0.059891,
-0.028546,
-0.017702,
-0.027305,
0.001174,
0.011198,
0.000467,
-0.020788,
0.012807,
0.014098,
-0.002573,
-0.035299,
0.013834,
-0.058202,
-0.064547,
-0.061347,
0.000627,
-0.020693,
-0.047020,
-0.028811,
-0.026288,
-0.049089,
-0.018738,
0.003355,
-0.011265,
-0.000122,
-0.024853,
0.009009,
0.013222,
-0.002234,
-0.015309,
-0.010511,
-0.003624,
0.027250,
0.002986,
-0.002809,
0.023166,
0.025687,
-0.040660,
-0.016595,
0.016847,
0.013871,
0.037744,
-0.004339,
-0.004361,
-0.004834,
-0.026650,
-0.009310,
-0.041859,
-0.029693,
-0.006161,
-0.024876,
0.014297,
-0.001042,
-0.004223,
-0.002221,
0.003243,
-0.021797,
-0.016560,
-0.041675,
0.022163,
-0.030349,
-0.033863,
-0.014567,
-0.002326,
-0.034924,
0.024703,
-0.033087,
0.000383,
0.005068,
-0.005104,
-0.031099,
0.009023,
-0.019237,
-0.042206,
-0.035022,
-0.003999,
-0.083361,
-0.159920,
-0.075825,
-0.107620,
-0.004698,
-0.007105,
-0.115310,
-0.201240,
-0.103900,
-0.016632,
-0.052115,
-0.010757,
-0.013739,
-0.036925,
-0.000016,
-0.040207,
0.010580,
0.002560,
-0.067515,
-0.012459,
-0.043318,
-0.013255,
-0.039156,
-0.001825,
-0.007054,
-0.004980,
-0.023896,
0.029639,
-0.020322,
0.007687,
0.017808,
0.013327,
0.010487,
0.018865,
-0.012387,
-0.000944,
-0.002003,
-0.006730,
-0.006622,
0.037853,
0.006043,
0.042415,
0.021998,
0.000612,
-0.009988,
-0.001334,
0.002289,
-0.003340,
0.023018,
0.082094,
0.079417,
-0.049807,
0.052281,
0.013104,
-0.099422,
0.058556,
0.200710,
0.097289,
0.041876,
0.113980,
0.069855,
0.101570,
0.051677,
-0.097063,
0.074532,
0.117470,
0.035357,
0.024758,
-0.067515,
-0.070376,
0.023507,
0.109670,
0.068581,
-0.009747,
0.010230,
0.021242,
-0.005593,
-0.037257,
-0.079596,
-0.013400,
0.035668,
-0.003851,
-0.007575,
-0.021661,
-0.031197,
-0.007783,
-0.040186,
-0.020909,
0.010017,
-0.013831,
-0.004037,
0.032742,
-0.008451,
0.003493,
-0.005190,
0.019358,
0.039922,
0.022304,
0.062083,
-0.028874,
-0.044417,
-0.070911,
-0.053722,
-0.008228,
0.062546,
-0.052717,
-0.080956,
-0.054436,
-0.006901,
-0.153270,
-0.095275,
-0.083791,
-0.083259,
-0.019432,
-0.052511,
-0.042462,
-0.120770,
-0.062642,
-0.014578,
-0.109590,
-0.069062,
-0.200700,
-0.236360,
-0.198540,
-0.006422,
-0.112440,
-0.091567,
-0.066174,
-0.051225,
0.046376,
-0.166840,
-0.128770,
-0.049774,
-0.216410,
-0.022080,
0.003574,
0.054062,
-0.011390,
-0.168450,
-0.047132,
-0.005349,
-0.085696,
-0.026634,
-0.013879,
0.022655,
0.107060,
-0.049703,
-0.091554,
0.019547,
-0.058594,
-0.073323,
-0.049785,
-0.078823,
0.033653,
-0.061726,
0.064693,
0.100280,
0.047577,
-0.000805,
-0.006594,
0.140810,
0.149700,
0.104180,
-0.052288,
0.004158,
0.026373,
-0.001640,
0.027204,
0.099583,
0.028289,
-0.068248,
-0.045343,
0.159130,
0.116250,
0.011555,
-0.060649,
-0.013795,
-0.044081,
-0.046438,
-0.009300,
-0.069441,
-0.039952,
-0.082229,
-0.090447,
0.068772,
0.040678,
0.120820,
0.010997,
0.097661,
0.024140,
0.192140,
0.061886,
0.112480,
-0.007391,
0.023746,
-0.129410,
-0.049206,
0.059250,
0.076882,
-0.389380,
-0.029684,
-0.063327,
-0.252570,
0.143480,
-0.181250,
-0.017644,
-0.047088,
-0.042707,
0.000507,
-0.097323,
-0.011873,
0.007814,
0.082195,
0.071478,
-0.057396,
0.101550,
0.094054,
0.111280,
0.085510,
0.016622,
0.045441,
0.031734,
0.041855,
0.099801,
-0.066232,
-0.280810,
-0.138790,
-0.112780,
-0.154660,
-0.052297,
-0.032833,
-0.017505,
-0.002976,
0.020267,
-0.044219,
-0.001744,
-0.015542,
0.026594,
0.080604,
0.012197,
-0.208740,
-0.231950,
-0.077391,
0.013299,
0.029458,
0.021918,
-0.058311,
-0.025427,
0.077464,
0.076568,
0.081557,
-0.028926,
0.075506,
-0.031760,
0.071744,
0.082894,
-0.005327,
0.052276,
-0.067873,
0.062488,
0.063857,
-0.024148,
0.014698,
0.120740,
-0.011795,
-0.117910,
-0.221880,
-0.027367,
0.074724,
-0.028279,
-0.053006,
-0.158560,
-0.014942,
0.074891,
-0.046420,
0.051141,
0.069493,
0.073860,
0.147250,
-0.041565,
0.093540,
0.242610,
0.181390,
0.142930,
0.051611,
0.087534,
0.075606,
0.118000,
0.144230,
0.025295,
-0.025998,
0.011856,
0.032628,
0.021906,
-0.014942,
-0.029283,
-0.081223,
0.048483,
0.207370,
0.029212,
0.135560,
0.122270,
0.098256,
0.301580,
-0.005597,
0.008436,
0.111380,
0.096372,
0.068350,
-0.077771,
0.130850,
-0.010445,
0.036287,
-0.029096,
0.068186,
0.040135,
0.121840,
0.042959,
-0.032638,
0.173880,
0.107220,
0.070799,
0.149890,
0.156210,
-0.033944,
-0.034543,
-0.145980,
-0.055361,
0.068083,
0.015064,
0.004988,
0.140820,
0.199620,
0.184310,
0.062457,
0.129310,
0.108060,
0.205990,
0.016990,
0.015424,
0.074547,
-0.019527,
-0.004604,
0.051076,
-0.082921,
-0.079851,
-0.199030,
-0.115180,
-0.101850,
-0.028077,
0.022068,
-0.042354,
0.076261,
0.148770,
0.019612,
0.032449,
0.019012,
-0.033842,
0.115400,
-0.087539,
-0.045741,
-0.063081,
0.030200,
0.211990,
-0.099035,
-0.000907,
-0.067707,
0.039075,
0.139370,
-0.154520,
-0.091254,
-0.100940,
-0.022655,
-0.137930,
-0.143790,
-0.075220,
-0.001760,
0.010185,
-0.014967,
-0.206620,
-0.066503,
-0.100510,
-0.037028,
0.007929,
-0.167070,
-0.193810,
-0.092964,
-0.090838,
0.027099,
-0.209680,
-0.141700,
-0.002930,
-0.120290,
-0.049764,
0.016077,
0.088465,
0.089965,
0.115490,
0.015685,
0.016104,
-0.038276,
-0.012905,
-0.063339,
-0.041814,
-0.035907,
-0.029445,
-0.035824,
-0.053614,
-0.055679,
-0.019201,
-0.012558,
-0.020387,
-0.009739,
-0.018401,
-0.055428,
0.016373,
-0.061261,
0.002056,
-0.045546,
-0.007804,
-0.023642,
-0.031308,
-0.034822,
-0.006358,
0.129420,
0.110180,
0.257370,
0.285560,
0.282540,
0.125270,
0.136530,
0.262450,
0.263100,
0.237960,
0.078011,
0.084967,
0.198380,
0.093583,
-0.004589,
-0.032113,
0.045859,
-0.008509,
-0.083367,
0.096068,
-0.072494,
0.053148,
0.147400,
0.028863,
-0.050531,
-0.164940,
-0.190370,
-0.160620,
-0.151010,
-0.300840,
-0.118950,
-0.163540,
-0.162590,
-0.109630,
-0.179160,
-0.019098,
0.041423,
-0.006064,
-0.054181,
-0.030483,
-0.036093,
0.073637,
0.035705,
0.023810,
0.131840,
0.008876,
-0.036491,
0.014017,
-0.049665,
-0.006386,
-0.060301,
-0.158710,
-0.225610,
-0.089069,
-0.129460,
0.004402,
-0.040970,
-0.007513,
-0.049808,
-0.099152,
0.041084,
0.106610,
0.091439,
-0.021705,
0.022074,
0.001316,
0.126280,
0.089829,
0.033264,
0.112910,
0.084871,
0.011501,
0.021039,
-0.087709,
-0.130470,
0.004777,
-0.000906,
0.026348,
0.042360,
0.016128,
0.024272,
-0.043194,
-0.007621,
0.014050,
0.017988,
-0.021955,
-0.017534,
0.002660,
0.001890,
-0.011000,
-0.013403,
0.007904,
-0.015367,
-0.036900,
0.032858,
0.008228,
-0.014611,
0.005978,
-0.015960,
-0.022591,
-0.056999,
-0.087440,
-0.059999,
-0.007709,
-0.021695,
-0.095972,
0.087295,
0.102210,
0.104670,
0.019331,
-0.124740,
0.018627,
-0.027220,
0.072484,
-0.054363,
-0.025817,
0.057907,
0.030765,
0.089347,
0.133240,
0.032853,
-0.054673,
-0.098525,
-0.006821,
0.108790,
-0.009778,
0.046366,
-0.007131,
0.118460,
0.009228,
-0.149750,
-0.078153,
-0.011476,
-0.044752,
-0.112950,
-0.010366,
0.098815,
0.118710,
0.026437,
-0.197570,
0.105290,
0.072005,
0.089911,
0.021174,
-0.042944,
0.126130,
0.080179,
0.092048,
0.072873,
0.089081,
0.026702,
-0.194490,
-0.119620,
-0.068624,
-0.143250,
0.119800,
-0.013735,
-0.133430,
-0.032001,
0.026894,
0.195230,
-0.006148,
-0.071929,
0.009515,
0.022684,
0.107880,
0.018325,
-0.026574,
-0.019392,
-0.053240,
-0.101060,
-0.072393,
-0.073125,
-0.119110,
-0.124400,
0.154660,
0.060467,
-0.062406,
-0.062629,
0.017791,
0.060530,
0.093865,
0.144010,
0.108970,
0.107370,
-0.034412,
0.079948,
0.107230,
0.040807,
-0.046820,
0.027310,
-0.141330,
-0.034597,
-0.083150,
0.003105,
0.112360,
0.052486,
-0.038444,
-0.024825,
0.045285,
-0.105040,
-0.198470,
-0.201780,
-0.072216,
-0.103110,
-0.019999,
-0.052214,
-0.089580,
-0.061836,
-0.032644,
-0.010097,
0.124670,
-0.082803,
0.015330,
-0.006545,
0.117750,
0.165980,
-0.036542,
0.073853,
0.130540,
0.101410,
0.018072,
-0.079719,
-0.093681,
0.131270,
0.015920,
-0.004161,
-0.072653,
-0.028561,
-0.009292,
-0.057942,
0.036558,
-0.050626,
-0.088511,
0.002483,
0.083527,
-0.057437,
0.071424,
0.008545,
0.009647,
0.000026,
0.000601,
0.096505,
0.101600,
0.069171,
-0.076461,
-0.080324,
-0.056735,
-0.037945,
-0.019520,
-0.020192,
-0.028013,
-0.025533,
0.006192,
0.024334,
-0.030479,
-0.042593,
-0.039523,
-0.046048,
-0.026239,
-0.052146,
-0.048959,
0.009670,
0.030050,
0.008798,
-0.043312,
-0.072292,
-0.019540,
0.058438,
-0.008475,
0.027547,
0.046228,
-0.002048,
0.046069,
-0.013208,
-0.221100,
-0.119840,
-0.109360,
-0.152540,
-0.279970,
-0.050522,
-0.018862,
0.010445,
-0.044399,
-0.052046,
-0.242140,
-0.279250,
-0.235840,
-0.178490,
-0.119550,
0.041750,
-0.010387,
-0.087222,
-0.005328,
0.069333,
0.030488,
0.136660,
0.172390,
0.173890,
0.135740,
-0.205560,
-0.144410,
-0.116090,
-0.053349,
0.092347,
0.050765,
-0.046161,
0.001590,
0.023422,
0.080727,
0.112460,
0.063977,
0.068097,
0.149880,
0.130000,
-0.007860,
0.065618,
0.009747,
0.042359,
0.022391,
-0.062425,
-0.049396,
-0.118460,
-0.030900,
-0.057150,
0.027232,
-0.001857,
0.007323,
-0.007028,
-0.024289,
0.049488,
0.059467,
0.003267,
0.019914,
0.020458,
-0.046453,
0.032711,
0.022406,
-0.019874,
-0.031766,
0.044908,
0.017345,
0.008487,
-0.015227,
0.004856,
-0.014634,
-0.006778,
-0.017589,
-0.005445,
0.031094,
0.126730,
0.031458,
-0.118480,
-0.102040,
-0.192100,
0.074331,
0.087689,
0.054952,
-0.071083,
0.032262,
-0.010187,
0.131380,
0.016960,
0.054956,
-0.028385,
-0.047780,
0.066213,
0.093267,
0.125130,
0.011221,
0.093227,
-0.023675,
-0.106850,
-0.100750,
-0.024928,
0.017590,
-0.051890,
0.106000,
0.048566,
0.059400,
0.020598,
0.010820,
-0.085020,
0.012539,
0.196770,
-0.077110,
0.026531,
0.076692,
0.076395,
0.160230,
-0.031557,
0.027495,
-0.168790,
-0.097273,
0.065552,
-0.030460,
0.093993,
0.017055,
-0.157230,
-0.068747,
-0.037900,
0.035262,
0.026984,
0.029229,
-0.030133,
0.016747,
0.039431,
-0.022702,
0.032419,
-0.018345,
-0.017384,
0.025901,
0.019229,
-0.034977,
-0.018601,
0.024649,
0.028672,
0.024934,
-0.005478,
0.029317,
0.030284,
-0.027773,
-0.024454,
0.035431,
0.011267,
0.072232,
-0.168700,
0.018757,
-0.117150,
-0.045945,
0.092237,
-0.073769,
-0.036869,
-0.009917,
-0.058329,
-0.004634,
-0.010170,
-0.095702,
-0.119680,
-0.053732,
-0.042558,
-0.054323,
-0.024324,
-0.068412,
0.052929,
0.108620,
0.155240,
0.090680,
0.021088,
0.178490,
-0.004525,
0.081379,
0.009431,
0.014599,
0.074514,
-0.005510,
0.032056,
0.019573,
0.021915,
0.006057,
0.022745,
-0.026457,
0.017484,
0.037476,
-0.045413,
0.046251,
-0.025368,
0.012977,
0.019005,
-0.005421,
0.049463,
-0.039955,
-0.017661,
-0.026126,
-0.046337,
0.072956,
0.132960,
0.093878,
0.060994,
-0.042418,
0.083869,
0.216570,
0.096658,
-0.052529,
-0.044616,
-0.024489,
0.074665,
0.019968,
-0.047528,
-0.051527,
0.019892,
0.013073,
-0.004495,
-0.037805,
-0.028346,
0.026214,
0.047809,
-0.035640,
-0.062727,
0.038403,
-0.008824,
-0.013608,
-0.033327,
-0.007349,
-0.023284,
0.013807,
-0.041782,
0.013112,
-0.072606,
-0.133810,
-0.062371,
-0.205560,
-0.062272,
-0.172460,
-0.107290,
-0.034514,
-0.096162,
0.136150,
0.207270,
0.072399,
-0.036304,
0.050771,
-0.007367,
0.013015,
0.072852,
0.174770,
0.114320,
0.037201,
-0.055798,
0.002743,
0.123160,
0.030165,
-0.073674,
-0.066065,
-0.012923,
0.150610,
0.051424,
-0.142560,
-0.182620,
-0.115590,
0.069419,
-0.077443,
-0.183600,
-0.187350,
-0.116910,
-0.243160,
-0.211090,
-0.134340,
-0.060758,
0.034066,
-0.086354,
-0.094926,
0.025198,
0.083990,
0.136150,
0.073750,
-0.053968,
-0.018464,
0.144850,
0.061739,
-0.067922,
-0.033609,
-0.084228,
0.000045,
-0.037791,
0.112590,
0.112550,
-0.005106,
-0.017343,
-0.101150,
-0.044270,
0.021219,
-0.028841,
0.061351,
-0.047307,
0.110770,
0.001946,
-0.069631,
0.031692,
-0.144370,
0.127050,
0.028673,
-0.000199,
0.110940,
0.047195,
-0.030601,
0.042282,
0.017457,
0.105250,
-0.008430,
0.120860,
0.060907,
0.015776,
0.065800,
-0.025225,
0.071394,
-0.032588,
0.046979,
-0.053361,
-0.088904,
-0.099128,
-0.050844,
0.092628,
-0.056502,
-0.147620,
0.040192,
0.056875,
-0.066898,
-0.216080,
-0.134470,
-0.002765,
0.036424,
-0.110700,
-0.092921,
-0.055766,
-0.158820,
-0.159020,
-0.193640,
-0.230640,
-0.176090,
-0.046897,
-0.147740,
-0.025843,
-0.019256,
0.015143,
-0.078473,
-0.024621,
0.015949,
-0.056104,
-0.000742,
0.052433,
0.028159,
-0.041427,
-0.048910,
0.069969,
0.092401,
-0.014283,
0.021241,
-0.010060,
-0.035738,
0.009104,
-0.072230,
-0.054648,
-0.118540,
-0.044764,
0.042151,
0.017410,
0.020830,
0.004395,
0.019865,
-0.078174,
-0.010251,
-0.128910,
-0.129490,
-0.146070,
0.010347,
-0.040332,
-0.119930,
-0.197650,
-0.119640,
-0.204860,
-0.077246,
-0.131770,
-0.042061,
-0.150360,
-0.265420,
-0.281350,
-0.315750,
-0.282020,
-0.305870,
-0.218420,
-0.200630,
-0.184480,
-0.049578,
0.034750,
0.032498,
0.029969,
0.026610,
0.065566,
0.073853,
0.153500,
0.136790,
0.178170,
0.063729,
0.023880,
0.175600,
0.018822,
0.071572,
-0.027461,
-0.013524,
0.046654,
-0.094750,
-0.069810,
-0.133210,
-0.031095,
0.100070,
0.032175,
0.023314,
-0.020422,
0.033041,
0.170510,
0.057383,
0.086200,
0.010811,
-0.119890,
0.010084,
-0.037123,
-0.078668,
-0.171480,
0.016040,
0.154670,
0.015082,
-0.070136,
0.031907,
0.031718,
0.011456,
0.010007,
0.042946,
0.073603,
0.104300,
0.031468,
0.095825,
-0.068312,
0.025729,
-0.112870,
0.014198,
0.068539,
0.023762,
0.026262,
-0.116280,
0.051839,
-0.044368,
0.077962,
0.065788,
-0.019041,
0.019883,
-0.024878,
0.024246,
-0.061256,
0.014548,
0.049228,
0.136240,
0.095471,
0.031889,
0.062390,
-0.026044,
0.151180,
0.068238,
0.095816,
0.180520,
0.117480,
0.092803,
0.067399,
0.093047,
0.069709,
0.108450,
0.034998,
0.013259,
0.058941,
0.038912,
0.066171,
0.089014,
0.065573,
0.096658,
0.012143,
0.042276,
0.006064,
-0.037161,
0.072359,
-0.012821,
0.088511,
0.067352,
0.069145,
0.079440,
0.071531,
-0.014024,
-0.025297,
0.036342,
0.041630,
0.037209,
-0.029262,
-0.001621,
-0.029714,
-0.049521,
0.059641,
-0.014216,
-0.038940,
0.012048,
-0.030684,
0.051802,
0.001379,
0.047716,
0.031051,
0.028667,
0.037981,
-0.050630,
0.010822,
0.028405,
-0.034353,
0.050037,
0.057330,
0.054825,
-0.070235,
-0.070382,
-0.028005,
-0.089226,
-0.101780,
-0.097733,
-0.052121,
-0.092361,
-0.157130,
-0.118620,
-0.061657,
-0.158880,
-0.082682,
-0.001279,
-0.056463,
-0.043816,
-0.084841,
-0.011016,
0.178060,
0.098514,
0.147100,
0.161480,
0.124480,
-0.117300,
0.050682,
0.044940,
0.178780,
0.152250,
-0.095736,
0.004328,
0.043639,
0.056477,
-0.077483,
0.098142,
-0.029907,
0.080235,
0.095743,
-0.022340,
0.109620,
0.093493,
0.116010,
0.071383,
0.076042,
-0.008260,
0.163290,
0.094879,
-0.002087,
0.000441,
0.094426,
0.200370,
0.216260,
0.138340,
-0.088446,
0.085438,
0.097759,
0.063606,
0.009467,
-0.132700,
0.055023,
0.014853,
0.063493,
0.050445,
-0.012967,
-0.024448,
0.058057,
-0.010858,
-0.001672,
-0.058432,
0.110410,
0.098453,
0.121710,
0.068451,
-0.052734,
0.007840,
0.033790,
0.011360,
-0.038214,
0.003042,
0.026090,
-0.005586,
-0.003804,
0.002040,
-0.023054,
0.023286,
-0.003131,
0.012983,
-0.028505,
0.018824,
0.036629,
-0.016999,
-0.022791,
0.003179,
-0.011204,
0.013642,
0.005876,
0.009631,
0.034435,
0.012929,
0.166540,
0.055958,
0.026587,
0.025368,
0.091351,
-0.078296,
0.036390,
0.100000,
0.021769,
0.032892,
-0.249100,
-0.084544,
-0.089602,
-0.179220,
-0.104910,
-0.254940,
-0.086639,
-0.090610,
-0.143580,
-0.119740,
-0.332900,
-0.353860,
-0.322240,
-0.312720,
-0.185360,
-0.065125,
-0.251790,
-0.211120,
-0.028584,
-0.000655,
-0.105280,
-0.186270,
-0.108730,
0.002126,
-0.084279,
-0.043277,
-0.133640,
-0.102020,
-0.010550,
-0.068326,
-0.082124,
-0.065712,
-0.057572,
-0.007861,
-0.115700,
-0.077900,
-0.024945,
-0.090788,
-0.156070,
-0.164080,
0.015553,
0.012127,
-0.022136,
-0.002618,
-0.025993,
-0.022114,
0.035404,
-0.017604,
-0.074265,
-0.097139,
0.007528,
0.023372,
-0.075603,
-0.053245,
0.099147,
0.012203,
0.108000,
0.005851,
-0.029094,
0.115690,
0.028089,
0.057685,
-0.009209,
0.078274,
0.041115,
0.002037,
0.030435,
0.068004,
-0.021445,
-0.026732,
0.087155,
0.004345,
-0.055466,
-0.196190,
-0.012427,
0.133580,
0.003667,
-0.064825,
-0.085839,
-0.015004,
0.030683,
-0.202350,
-0.170250,
-0.090573,
-0.038370,
-0.021618,
0.002954,
-0.099812,
-0.025322,
-0.063656,
0.126170,
0.125840,
-0.077519,
-0.051050,
0.054886,
0.076720,
0.205400,
0.082148,
0.103210,
0.006413,
0.034722,
0.093354,
0.155720,
0.080730,
-0.080826,
-0.193130,
-0.089211,
-0.075530,
-0.086260,
-0.124160,
-0.167010,
-0.103200,
-0.039225,
0.054115,
-0.015009,
0.078787,
-0.038622,
-0.015645,
-0.001432,
0.049436,
0.045869,
0.065380,
0.060342,
0.016799,
0.064424,
0.065650,
0.043751,
-0.012995,
0.061492,
0.066050,
0.087379,
0.076760,
-0.022371,
0.055177,
0.076238,
0.047506,
-0.027379,
0.041391,
0.002149,
0.081403,
0.025172,
0.042125,
0.067770,
0.069406,
0.031309,
0.076205,
0.018998,
0.088342,
0.042738,
0.007559,
-0.014595,
0.028032,
0.024156,
0.018254,
0.039697,
0.005019,
0.042065,
0.072866,
0.005646,
0.017846,
0.058045,
0.070279,
0.070750,
0.077236,
0.031382,
0.050492,
-0.105380,
-0.081605,
0.036834,
-0.017854,
0.064794,
-0.004868,
0.038745,
0.056225,
-0.045902,
0.098287,
-0.060604,
-0.004183,
0.030480,
0.068725,
0.015467,
-0.114180,
-0.054200,
-0.058081,
0.010161,
0.052473,
0.054199,
-0.084257,
-0.033435,
0.122120,
0.148730,
0.021249,
0.026372,
0.075688,
-0.097842,
-0.019137,
0.033178,
-0.114040,
0.024422,
-0.006958,
-0.056973,
-0.011435,
-0.010530,
0.009913,
0.047099,
0.000725,
-0.046278,
0.009788,
0.078382,
0.062878,
0.004859,
0.113210,
0.118630,
-0.072131,
-0.067415,
-0.013530,
0.037149,
0.003489,
-0.010159,
0.040156,
0.008821,
-0.030190,
-0.044401,
-0.017636,
-0.066660,
-0.049061,
-0.008397,
0.013256,
0.006078,
-0.026336,
0.018403,
0.014942,
-0.024685,
0.055456,
-0.018679,
-0.008959,
0.014092,
0.012637,
0.019333,
0.010623,
-0.182290,
-0.047783,
-0.091367,
-0.033477,
0.004387,
-0.123050,
-0.204200,
-0.157330,
-0.174590,
-0.052929,
-0.084564,
-0.085971,
-0.017402,
-0.070003,
0.082089,
-0.111550,
-0.216440,
-0.218360,
-0.108270,
-0.146240,
0.004760,
-0.083778,
-0.011274,
-0.001995,
0.004296,
0.074755,
0.040728,
0.068655,
0.012904,
0.077589,
-0.014385,
0.038851,
0.019337,
-0.003774,
-0.051154,
0.098659,
-0.004776,
-0.008497,
-0.101520,
-0.107530,
-0.102000,
-0.157430,
0.107580,
0.105480,
-0.095623,
-0.191570,
-0.133670,
-0.038843,
-0.070853,
-0.063953,
0.010662,
0.035334,
-0.006978,
-0.010426,
-0.018532,
0.028567,
0.040113,
0.006739,
-0.001737,
-0.016452,
0.008136,
0.021994,
-0.022283,
0.025471,
0.029124,
0.037590,
0.010122,
0.019961,
-0.010391,
-0.021027,
-0.026325,
-0.020243,
-0.021244,
-0.002619,
-0.014883,
-0.037836,
0.014275,
0.048755,
-0.028095,
0.060464,
0.046514,
-0.044237,
-0.042696,
0.002254,
0.030317,
-0.061097,
-0.050206,
-0.045085,
-0.064946,
-0.098898,
-0.041033,
-0.152210,
-0.171020,
-0.123120,
-0.031419,
0.196670,
0.077191,
-0.039095,
-0.012953,
0.208900,
0.066798,
0.046693,
-0.004670,
-0.003472,
0.021284,
0.004742,
0.002946,
0.005312,
0.013368,
-0.063040,
-0.013768,
-0.001870,
0.012806,
0.027574,
-0.028937,
-0.040799,
-0.020750,
0.001478,
-0.009810,
-0.047622,
-0.010809,
0.036143,
0.000203,
-0.009968,
-0.027147,
-0.038520,
-0.021768,
0.131200,
0.131350,
0.007356,
-0.023081,
-0.091562,
-0.121230,
-0.080210,
0.034408,
0.003991,
-0.035040,
-0.143470,
-0.023604,
0.162550,
0.088876,
0.004596,
-0.052886,
0.013070,
0.193970,
0.068801,
0.175940,
0.213090,
0.207360,
0.191850,
0.044233,
0.063974,
0.072141,
0.000288,
0.078171,
0.082134,
0.230500,
0.187450,
0.130240,
0.153620,
0.088361,
0.188020,
0.088565,
0.114470,
0.151340,
0.057293,
0.128050,
-0.015932,
0.112680,
0.096967,
-0.027528,
-0.097623,
-0.046513,
-0.076757,
-0.075868,
0.030527,
0.123660,
0.053095,
-0.003968,
0.076846,
0.001455,
0.086664,
0.065417,
0.062512,
0.103660,
0.008865,
0.089893,
0.021924,
0.009585,
0.090776,
0.016374,
0.065212,
-0.023378,
-0.102870,
0.014598,
-0.077712,
0.077743,
0.076595,
0.073655,
0.075754,
-0.003006,
0.065108,
0.008362,
-0.055852,
0.027272,
0.052131,
0.086877,
0.013042,
-0.056860,
0.061006,
0.025853,
-0.067016,
0.052633,
0.074256,
0.039255,
0.142590,
0.017916,
-0.012387,
-0.036102,
-0.027174,
-0.016363,
0.106190,
0.116340,
0.033762,
-0.028147,
0.118270,
-0.007183,
-0.030584,
-0.020782,
0.041791,
0.118510,
0.047191,
0.030016,
-0.071378,
-0.023939,
0.014557,
-0.059319,
-0.052696,
-0.140710,
-0.207700,
-0.013861,
-0.092356,
0.059150,
-0.046942,
-0.134150,
0.059172,
-0.007811,
-0.129500,
-0.161860,
-0.257280,
0.046429,
0.033970,
0.094266,
0.021141,
-0.065649,
-0.025702,
0.039145,
0.000651,
-0.063956,
-0.177570,
-0.066736,
0.009263,
-0.085022,
0.005381,
-0.018043,
-0.109760,
-0.001162,
-0.033585,
-0.013606,
0.006480,
-0.173010,
-0.013015,
0.098211,
0.114670,
-0.055432,
-0.106830,
-0.100580,
0.132740,
0.034090,
-0.063348,
-0.062872,
0.026138,
0.092984,
0.009386,
-0.098613,
-0.063849,
0.071591,
0.000843,
-0.033762,
-0.073735,
-0.008492,
0.042207,
-0.036412,
0.062555,
-0.052759,
-0.087035,
0.103180,
0.014524,
0.055076,
0.040785,
0.068929,
0.034061,
0.079927,
-0.057127,
0.009784,
-0.039555,
0.066765,
-0.160750,
-0.238580,
-0.207230,
0.009143,
-0.096786,
-0.103550,
-0.124090,
-0.134190,
0.052970,
-0.001845,
-0.050512,
-0.092524,
-0.138360,
-0.082744,
-0.132290,
-0.075022,
-0.036429,
-0.101370,
0.024790,
0.009179,
-0.033533,
-0.060581,
0.029550,
0.020500,
0.091607,
0.003877,
-0.037509,
0.067683,
0.068036,
0.062177,
-0.005923,
-0.009629,
-0.071797,
0.050481,
-0.021976,
-0.070181,
-0.027941,
-0.053050,
0.019802,
-0.055421,
-0.131100,
-0.070769,
0.068145,
0.028560,
-0.002366,
0.045571,
0.014725,
-0.020111,
-0.019631,
0.027486,
-0.039823,
0.011892,
-0.025107,
-0.098863,
-0.062283,
0.119450,
0.073828,
0.205460,
-0.009245,
0.025313,
-0.028249,
-0.041741,
0.058695,
0.007426,
0.198970,
0.144570,
0.065558,
0.108290,
-0.014259,
0.018257,
-0.074414,
-0.067239,
-0.016635,
-0.017424,
0.014396,
-0.132890,
-0.065494,
-0.250820,
-0.030919,
0.001055,
-0.115550,
-0.070766,
-0.171160,
0.101700,
0.013646,
-0.096134,
-0.031299,
0.029868,
0.012999,
-0.029743,
0.124810,
0.176380,
0.401630,
-0.069247,
-0.069705,
-0.081804,
-0.130470,
-0.084947,
-0.092315,
0.078872,
0.023166,
0.007846,
-0.065860,
-0.120370,
0.098239,
0.004110,
0.053617,
-0.180330,
-0.062813,
-0.040443,
-0.028076,
0.018276,
-0.094136,
-0.179360,
-0.188750,
-0.129290,
-0.037899,
-0.096864,
0.013503,
0.002911,
-0.035339,
0.012018,
-0.018916,
0.002523,
-0.014214,
-0.001615,
-0.043026,
0.013460,
-0.031884,
-0.008208,
0.017500,
-0.048890,
0.012531,
-0.037265,
0.020138,
-0.000521,
0.015124,
-0.039666,
0.009070,
-0.006761,
-0.011286,
-0.005977,
-0.036017,
0.061390,
0.043812,
-0.211620,
-0.049328,
-0.021024,
-0.069372,
-0.024157,
-0.054192,
-0.033578,
0.040031,
-0.065488,
0.055949,
-0.086435,
-0.132360,
-0.040237,
-0.075711,
-0.026093,
-0.096768,
-0.069930,
-0.130330,
0.179110,
0.150060,
0.067511,
0.095361,
0.029493,
0.003320,
0.004211,
0.045467,
0.140440,
0.079833,
-0.024782,
-0.030255,
0.043216,
0.062847,
-0.008512,
-0.018291,
0.018700,
-0.015185,
0.067707,
-0.048705,
0.003292,
-0.061327,
-0.056166,
-0.001541,
0.002364,
-0.002824,
-0.086755,
-0.050099,
-0.027266,
-0.021398,
0.108260,
0.075241,
0.170510,
0.148410,
0.034900,
0.069043,
0.051710,
0.080045,
0.083775,
0.010386,
0.017029,
-0.008794,
0.026161,
0.159910,
0.079549,
0.084130,
0.001696,
-0.080947,
0.130900,
0.019496,
0.331750,
0.210710,
0.171110,
0.183460,
0.093430,
-0.000008,
0.001110,
0.007097,
0.017240,
0.006867,
0.035773,
0.006068,
0.003375,
-0.016553,
-0.035342,
0.004946,
-0.046203,
0.026334,
0.024208,
-0.017374,
-0.047153,
-0.001223,
0.029289,
-0.036343,
-0.043712,
-0.027032,
-0.025875,
0.009732,
-0.025671,
0.052583,
0.060896,
0.031491,
-0.048422,
-0.052332,
0.094444,
0.033861,
0.022323,
-0.014350,
-0.019123,
0.072483,
0.199410,
0.087062,
0.055385,
0.022591,
0.049524,
0.137170,
0.172490,
0.076376,
0.101520,
0.090651,
-0.212520,
-0.005864,
0.097569,
0.070270,
0.018857,
0.082388,
0.118400,
0.181460,
0.188650,
0.165220,
0.007828,
0.014100,
0.055516,
0.070020,
0.028560,
-0.051144,
0.080280,
0.074688,
0.090388,
0.036028,
-0.101620,
-0.036218,
0.041423,
-0.020414,
-0.061487,
-0.159970,
-0.063737,
-0.070091,
-0.047681,
-0.097915,
0.060887,
0.136000,
0.178530,
0.149770,
-0.001441,
-0.048922,
0.011480,
0.022276,
0.055586,
-0.036106,
-0.093200,
-0.083473,
-0.147440,
-0.069420,
0.078812,
0.044252,
0.045812,
-0.022799,
-0.096859,
0.088497,
0.192160,
0.089921,
0.107110,
0.072373,
-0.000380,
-0.069492,
-0.034993,
0.074537,
-0.062809,
-0.125910,
-0.011565,
0.008643,
0.014430,
0.072317,
0.096299,
0.044623,
0.026864,
0.102680,
0.129780,
0.057152,
0.023611,
-0.016990,
-0.003500,
0.116440,
0.079791,
-0.111160,
-0.022731,
0.014376,
0.001183,
0.038423,
0.059613,
0.152230,
0.117480,
-0.001098,
-0.045856,
0.052768,
0.079059,
0.005426,
0.071221,
0.092648,
0.122690,
0.064338,
0.029121,
-0.013967,
0.115200,
0.152780,
0.099662,
0.013220,
0.058154,
0.174190,
-0.113970,
0.036439,
0.173610,
0.184460,
0.206510,
-0.010983,
-0.020697,
-0.186590,
-0.112240,
-0.116990,
-0.094162,
-0.128070,
-0.140130,
-0.035579,
-0.023377,
-0.106720,
-0.258100,
-0.054539,
-0.130960,
-0.091886,
0.038795,
-0.139250,
-0.111180,
-0.224250,
-0.180730,
0.014321,
-0.141520,
-0.087710,
-0.202810,
-0.229260,
0.030723,
0.058034,
0.015720,
0.055673,
0.010893,
0.003986,
-0.001167,
0.016486,
-0.012418,
0.043515,
0.020213,
-0.003726,
-0.004281,
-0.016069,
0.024224,
0.041075,
0.046499,
-0.021715,
0.047127,
0.013278,
-0.012373,
-0.013352,
0.052153,
-0.002667,
0.073008,
-0.034506,
0.231220,
0.123360,
0.040204,
-0.042953,
-0.202220,
0.123120,
-0.024440,
-0.000403,
-0.027446,
0.066214,
0.201550,
0.053803,
0.034504,
0.033083,
-0.034953,
0.056023,
0.023982,
0.022600,
-0.035917,
0.006252,
0.037751,
-0.009314,
-0.133260,
-0.234520,
0.012040,
0.013950,
-0.016598,
-0.082274,
-0.112840,
0.028304,
-0.056428,
0.056563,
-0.131630,
-0.221760,
0.032304,
-0.112370,
-0.012176,
-0.158360,
-0.149950,
0.009938,
-0.110910,
-0.019293,
-0.082669,
-0.024285,
0.066960,
-0.031649,
-0.054263,
0.072280,
0.170140,
0.011117,
-0.037658,
0.015015,
0.003443,
0.011762,
0.001941,
-0.033714,
0.030555,
-0.010263,
0.026655,
-0.007449,
-0.016370,
-0.009197,
0.014208,
0.025536,
0.010773,
-0.009850,
0.027061,
0.039787,
0.045787,
-0.009431,
0.006715,
0.039175,
0.011970,
-0.022324,
0.194120,
0.044485,
0.037496,
0.047995,
0.027014,
-0.036690,
-0.004383,
0.041389,
-0.085882,
0.049743,
-0.085285,
-0.100380,
-0.157480,
-0.011668,
0.022000,
-0.118970,
-0.099155,
-0.144820,
-0.111540,
-0.081441,
-0.034750,
-0.082708,
-0.113550,
-0.091696,
-0.172940,
-0.009220,
-0.017460,
-0.014720,
0.008917,
0.019639,
0.016886,
-0.025167,
0.004207,
-0.013855,
0.019332,
0.015856,
-0.029751,
-0.007895,
-0.003382,
0.009277,
0.013035,
0.037425,
0.022733,
-0.010350,
-0.020063,
0.009359,
0.026799,
0.030986,
-0.057075,
0.009293,
0.013526,
0.008125,
-0.024784,
0.014404,
-0.029805,
-0.013380,
-0.023002,
0.007060,
0.036909,
-0.002411,
0.033793,
0.002734,
-0.025410,
-0.024882,
-0.035011,
-0.005855,
-0.021538,
-0.003850,
0.008340,
0.015694,
-0.006168,
-0.009486,
0.020166,
0.036195,
-0.016740,
-0.024753,
-0.024433,
-0.057336,
-0.006379,
-0.064942,
-0.035895,
-0.045158,
-0.041597,
-0.039634,
-0.029964,
0.016373,
-0.059280,
0.017178,
-0.002206,
-0.025714,
-0.011374,
0.030242,
0.002631,
0.005538,
-0.010187,
-0.049277,
-0.027838,
-0.090807,
-0.070486,
-0.014996,
0.027234,
0.007836,
0.026958,
-0.030942,
0.015921,
-0.021693,
0.010680,
0.025213,
0.020332,
0.022479,
0.005961,
0.025527,
0.004813,
0.026709,
0.014440,
-0.035687,
-0.026960,
-0.008384,
-0.014963,
-0.036379,
-0.028954,
-0.011775,
-0.020780,
-0.026229,
-0.029078,
-0.036261,
-0.046311,
-0.029855,
-0.017807,
-0.063894,
-0.027931,
-0.011015,
0.033060,
0.010881,
0.008522,
-0.028286,
0.008173,
-0.013324,
-0.024482,
-0.044174,
-0.008125,
-0.066334,
-0.033671,
-0.062277,
-0.061629,
-0.078993,
-0.029498,
-0.052017,
-0.039596,
-0.035939,
-0.013962,
0.008095,
0.034502,
-0.003917,
0.008532,
-0.008306,
-0.045268,
-0.024964,
-0.035199,
0.011114,
0.012585,
0.002357,
-0.026488,
-0.049838,
-0.005316,
0.024213,
-0.026124,
-0.066579,
0.030562,
0.042333,
0.009377,
0.004184,
-0.077165,
-0.015200,
-0.043477,
-0.011827,
-0.045614,
-0.019850,
-0.007785,
-0.050242,
-0.054756,
-0.001112,
-0.019171,
-0.050839,
-0.045134,
-0.023950,
-0.043571,
-0.018363,
-0.006267,
-0.054948,
-0.023002,
-0.058171,
-0.012442,
-0.058451,
-0.055280,
-0.036743,
-0.067098,
-0.031848,
-0.043222,
-0.059330,
-0.053273,
-0.027339,
-0.045643,
-0.051688,
-0.042238,
-0.043130,
-0.047800,
-0.044413,
-0.003286,
-0.033839,
-0.041170,
-0.012326,
0.002866,
0.008597,
-0.042629,
-0.035631,
-0.071772,
0.020127,
-0.017347,
-0.007224,
0.029431,
-0.062199,
-0.036073,
-0.059392,
-0.015049,
-0.020489,
-0.035559,
-0.019496,
0.018043,
-0.014633,
0.018246,
-0.069364,
-0.064292,
-0.042387,
-0.002731,
0.019714,
-0.038253,
-0.053864,
0.021355,
0.000345,
-0.003005,
-0.039747,
-0.005797,
-0.037941,
-0.022336,
0.010353,
-0.008484,
0.028573,
-0.012288,
-0.041500,
0.008366,
0.040593,
-0.021936,
-0.063972,
0.003642,
-0.028345,
-0.021247,
0.022305,
-0.021085,
-0.038749,
0.022103,
-0.004497,
-0.002405,
-0.013999,
-0.000735,
-0.005475,
-0.041871,
-0.021794,
-0.023907,
-0.005135,
-0.013868,
-0.032755,
-0.009987,
-0.037038,
-0.058566,
-0.000505,
-0.055533,
-0.023777,
-0.054075,
-0.040898,
-0.040003,
-0.001916,
-0.023013,
-0.021227,
-0.008122,
-0.067272,
-0.032265,
-0.068641,
-0.004079,
-0.046015,
-0.055206,
-0.067419,
-0.023637,
-0.058734,
-0.047019,
-0.030128,
-0.033636,
-0.071054,
-0.014345,
-0.022747,
0.033571,
-0.039568,
-0.040228,
-0.022048,
-0.000709,
0.010222,
-0.008577,
-0.035754,
-0.046449,
-0.026022,
-0.007182,
-0.017703,
-0.020916,
-0.028974,
-0.068753,
-0.013001,
-0.009132,
-0.016981,
-0.022530,
-0.054770,
-0.011617,
-0.023334,
-0.051307,
-0.067218,
-0.073861,
-0.039053,
-0.028442,
-0.028163,
-0.015193,
-0.030508,
-0.034435,
-0.007234,
0.009742,
-0.013531,
-0.077027,
-0.048260,
-0.067449,
-0.071659,
-0.087787,
-0.083680,
-0.007261,
-0.026478,
-0.027510,
-0.066267,
-0.021490,
-0.014198,
-0.054651,
-0.023552,
-0.053392,
-0.003414,
-0.011644,
0.001287,
-0.026529,
-0.023487,
-0.001468,
-0.024782,
-0.007661,
-0.024650,
-0.019226,
-0.070523,
-0.031834,
-0.006160,
-0.017891,
-0.053405,
-0.036646,
-0.062949,
-0.026335,
-0.062295,
-0.003712,
-0.016008,
-0.075891,
-0.018994,
-0.049350,
-0.041093,
-0.016086,
-0.056051,
0.009923,
-0.019890,
-0.069591,
-0.069750,
-0.028433,
-0.079000,
-0.035479,
-0.018777,
-0.041300,
-0.064801,
0.010391,
-0.003587,
-0.035550,
0.028195,
0.018192,
-0.004638,
-0.011803,
-0.027599,
-0.059779,
-0.053088,
-0.055773,
-0.030824,
-0.063739,
-0.064571,
-0.036932,
-0.024981,
0.015212,
-0.007680,
0.010957,
-0.035998,
-0.049159,
0.004315,
-0.013817,
0.011426,
-0.006593,
-0.021057,
-0.015273,
0.005189,
0.009007,
-0.035204,
-0.044544,
0.006326,
0.004584,
0.008459,
-0.029022,
0.015987,
-0.001256,
-0.029895,
0.003049,
-0.024878,
-0.012871,
0.011755,
-0.003015,
0.004172,
0.025112,
-0.014509,
-0.011579,
0.010892,
-0.019433,
0.027238,
-0.029287,
0.004337,
0.019377,
-0.030494,
0.022938,
0.006191,
0.014091,
-0.015069,
-0.037573,
-0.002231,
-0.027469,
0.021997,
-0.042558,
-0.014179,
-0.057924,
-0.060519,
-0.060932,
-0.029288,
-0.010134,
-0.050275,
-0.043456,
-0.030360,
-0.026789,
-0.077874,
-0.001379,
-0.046371,
-0.047266,
0.006123,
-0.047056,
-0.040512,
-0.041595,
0.013884,
-0.004606,
-0.005911,
-0.003393,
-0.012301,
-0.043468,
-0.072755,
-0.056738,
-0.002681,
-0.039476,
-0.015220,
-0.054129,
-0.020395,
-0.051369,
-0.028064,
-0.026315,
-0.016286,
-0.045815,
-0.039089,
0.020569,
-0.034122,
-0.053502,
-0.043670,
-0.070498,
0.044554,
0.003978,
0.007253,
-0.011881,
-0.066929,
-0.016225,
-0.017905,
-0.044882,
-0.069556,
0.016549,
-0.041866,
-0.012267,
-0.040680,
-0.023854,
-0.016875,
-0.006431,
0.056622,
0.025083,
-0.046997,
-0.049272,
-0.035121,
0.019902,
-0.051010,
0.009272,
-0.008793,
-0.021805,
-0.025989,
-0.025157,
-0.061193,
-0.013393,
-0.065550,
-0.063778,
-0.076812,
-0.018335,
0.001760,
0.021554,
0.013927,
-0.018892,
0.024199,
0.028726,
-0.018738,
0.002511,
-0.017670,
-0.035183,
-0.030971,
-0.015938,
-0.017666,
0.036876,
-0.023427,
0.024134,
0.002824,
-0.016629,
0.031453,
-0.007581,
0.016591,
0.010064,
-0.012906,
-0.020095,
-0.011490,
0.006145,
0.014706,
0.020412,
0.031673,
0.002054,
0.012166,
0.011997,
0.001333,
-0.011767,
0.001207,
-0.009105,
-0.002469,
-0.006928,
-0.019221,
0.012872,
0.008769,
-0.028822,
-0.017688,
-0.003555,
-0.026295,
-0.000158,
-0.012906,
-0.043777,
-0.009335,
-0.013035,
-0.043935,
0.003152,
-0.033566,
-0.008005,
0.014976,
-0.051289,
-0.010425,
-0.016867,
0.039660,
0.035438,
-0.019535,
0.005264,
-0.005570,
0.036441,
-0.011886,
0.041991,
-0.041444,
-0.011926,
-0.025174,
0.006748,
0.020084,
-0.034597,
-0.047085,
-0.029332,
0.009955,
-0.039040,
-0.042353,
-0.038945,
-0.039805,
-0.015832,
-0.064392,
-0.029482,
-0.003560,
-0.047568,
-0.038247,
-0.032367,
-0.001948,
-0.028678,
-0.009779,
-0.032511,
-0.011096,
-0.031960,
-0.040290,
-0.022997,
-0.008439,
-0.060460,
-0.019318,
-0.032847,
-0.052006,
-0.040163,
0.003888,
-0.024796,
-0.034551,
-0.002850,
0.010734,
-0.044872,
-0.006558,
-0.027414,
-0.051675,
-0.040010,
-0.023121,
-0.039277,
-0.006489,
-0.006615,
-0.015350,
-0.049670,
0.002766,
-0.054852,
-0.047151,
-0.046755,
-0.060591,
-0.051591,
-0.010488,
-0.015907,
-0.052916,
-0.032642,
0.008971,
0.019156,
-0.026067,
0.000223,
-0.023254,
-0.030788,
-0.076464,
-0.021442,
-0.026448,
-0.002315,
0.005273,
0.020771,
0.059350,
-0.015674,
-0.008988,
0.004997,
-0.035004,
-0.046707,
-0.010451,
-0.050635,
-0.042767,
-0.066535,
-0.049044,
-0.007927,
-0.049137,
-0.011805,
-0.019431,
-0.033523,
-0.007567,
-0.020801,
-0.030955,
-0.026462,
-0.041948,
-0.056504,
-0.035973,
-0.016825,
-0.010018,
-0.017445,
-0.051865,
-0.053516,
-0.008816,
0.002805,
-0.037742,
-0.044218,
-0.016010,
-0.065891,
-0.048102,
-0.005277,
-0.060863,
-0.000354,
-0.012912,
0.013212,
-0.001526,
-0.022547,
-0.015571,
-0.020341,
-0.026738,
-0.013116,
-0.023001,
-0.019717,
-0.024929,
-0.027139,
0.000593,
0.000396,
-0.022864,
0.002516,
-0.009087,
-0.006188,
-0.039924,
-0.035107,
0.010949,
-0.027394,
0.002767,
0.011905,
-0.014175,
0.035412,
-0.013056,
-0.003127,
0.017243,
-0.028452,
-0.016829,
0.008864,
-0.038902,
0.016127,
0.012960,
-0.031147,
-0.024565,
0.002502,
0.014349,
0.003814,
-0.003914,
-0.004907,
-0.019747,
0.008959,
0.008984,
0.029536,
0.043900,
0.016118,
-0.024486,
-0.063829,
-0.067340,
-0.031849,
-0.042976,
-0.009439,
-0.058311,
-0.068254,
-0.079089,
-0.078711,
-0.056095,
-0.059647,
-0.049813,
-0.046955,
-0.046355,
-0.007511,
-0.009568,
-0.042526,
0.004586,
-0.024593,
-0.008334,
-0.014583,
-0.066453,
-0.057650,
-0.056121,
-0.023452,
0.023020,
-0.011522,
-0.021385,
-0.018787,
0.024907,
0.025158,
-0.000192,
-0.000833,
-0.026713,
-0.001531,
0.011956,
-0.021794,
-0.011892,
0.032757,
0.025823,
0.024236,
-0.040165,
-0.034882,
0.028191,
0.002036,
-0.005412,
-0.035974,
0.012406,
-0.015035,
-0.013828,
-0.050931,
0.011858,
-0.014807,
-0.021666,
-0.023026,
-0.017599,
-0.008224,
0.010756,
-0.007261,
-0.040995,
-0.045362,
-0.009625,
-0.047785,
-0.025395,
-0.049966,
-0.064740,
-0.009331,
-0.029117,
-0.047895,
-0.005414,
-0.007677,
-0.054457,
-0.073772,
-0.067286,
-0.047110,
-0.059778,
-0.011460,
0.074185,
-0.045122,
0.017173,
0.040649,
-0.038914,
0.089522,
-0.045523,
-0.070046,
0.043439,
0.103960,
-0.054924,
0.000078,
-0.009239,
0.032660,
0.023625,
-0.067013,
0.061557,
-0.041925,
-0.031419,
-0.017925,
0.023509,
-0.016769,
0.035068,
0.002418,
0.021819,
0.008729,
-0.002342,
0.022350,
-0.013212,
-0.024211,
0.009720,
-0.026107,
0.029882,
0.019253,
0.019564,
0.035610,
0.025607,
-0.026364,
-0.022767,
0.006402,
-0.024119,
0.016230,
0.011232,
-0.016697,
0.010148,
-0.026134,
-0.028810,
-0.009695,
0.075596,
0.031985,
0.115970,
0.093388,
0.090275,
0.066095,
0.042084,
0.090442,
0.024991,
0.037381,
0.034101,
0.059821,
0.051152,
-0.003853,
-0.084708,
-0.044352,
0.002819,
0.009975,
-0.007439,
-0.145180,
-0.044788,
-0.070376,
0.042152,
0.027284,
-0.184480,
-0.068584,
-0.033482,
-0.006353,
0.046518,
0.042105,
-0.023909,
-0.034799,
0.041205,
-0.024879,
-0.018825,
0.001306,
-0.032812,
-0.042665,
-0.029040,
-0.008588,
0.000070,
-0.000433,
0.013508,
-0.006603,
0.016344,
0.018348,
-0.000898,
-0.008224,
0.006333,
0.042999,
0.076860,
0.129950,
0.070123,
0.108910,
0.027230,
0.058457,
0.067978,
0.089830,
0.191290,
0.113500,
-0.120870,
-0.054276,
0.099085,
0.111110,
-0.030383,
-0.051665,
-0.108390,
0.002354,
-0.055153,
-0.223500,
-0.075319,
-0.182640,
-0.127670,
-0.162220,
-0.206140,
-0.035847,
0.059620,
0.110530,
0.080684,
-0.056559,
0.115470,
0.118730,
0.142320,
0.122930,
0.035323,
0.196350,
0.036090,
0.118110,
-0.004966,
0.016473,
0.129140,
0.145390,
0.114850,
0.095838,
-0.018730,
0.089355,
0.105690,
0.137980,
0.131170,
-0.095245,
-0.143770,
0.022318,
-0.014373,
-0.127880,
-0.257820,
0.031052,
0.070355,
0.095399,
0.095893,
-0.089364,
0.059750,
0.045544,
-0.045785,
0.035910,
-0.040058,
0.079297,
-0.058750,
-0.146800,
-0.071628,
-0.131260,
0.236230,
0.004356,
-0.024731,
-0.032859,
-0.060039,
0.013386,
0.065908,
0.057474,
-0.037654,
-0.064767,
-0.011505,
0.109820,
0.025527,
0.031045,
0.029476,
-0.068330,
-0.006784,
-0.013833,
0.071883,
0.017394,
0.012189,
-0.000719,
-0.014301,
0.139230,
0.051476,
0.018048,
0.082781,
0.093696,
0.107000,
-0.006551,
0.061424,
-0.009294,
0.054562,
0.022083,
0.024683,
0.045782,
0.074994,
0.027898,
0.000030,
0.037156,
0.055299,
-0.002356,
0.038466,
-0.051221,
-0.028880,
0.031884,
-0.023818,
0.020897,
0.037007,
0.072481,
0.014422,
0.049532,
0.028726,
0.024465,
0.083712,
0.020738,
0.032975,
-0.079021,
-0.032145,
-0.070410,
-0.000023,
0.052439,
0.010528,
0.022968,
-0.163170,
-0.194990,
-0.086417,
0.039315,
-0.038132,
-0.241560,
-0.133740,
-0.098691,
0.010739,
-0.100030,
-0.254920,
-0.070304,
-0.170970,
-0.091620,
-0.051984,
-0.095186,
0.066665,
-0.044268,
-0.065499,
-0.000823,
-0.038780,
-0.009089,
-0.107050,
0.043593,
-0.008810,
0.009616,
0.078938,
0.045596,
0.008147,
-0.000389,
0.002341,
0.017268,
0.020452,
0.054477,
0.026411,
-0.025548,
0.129380,
-0.059453,
-0.053166,
-0.032846,
-0.050547,
0.029638,
-0.025541,
-0.005891,
-0.029390,
-0.024588,
0.115880,
-0.062323,
-0.046210,
-0.109650,
0.018076,
0.142460,
0.034689,
-0.026504,
0.050447,
0.058156,
0.094328,
-0.010434,
-0.115500,
0.025296,
0.071849,
0.046640,
-0.019452,
-0.122790,
-0.006873,
-0.159510,
0.051105,
0.032545,
-0.009194,
0.064922,
0.003417,
-0.008615,
-0.069699,
0.012579,
0.039951,
0.062531,
-0.052392,
-0.047162,
0.048874,
0.019241,
0.004616,
-0.144490,
-0.057579,
-0.015796,
0.000203,
0.034124,
-0.035727,
0.052628,
0.040425,
0.020311,
0.025613,
0.033821,
-0.086108,
-0.097059,
-0.101600,
-0.058036,
0.050531,
-0.004350,
-0.066166,
-0.014555,
0.062074,
0.077964,
0.006491,
-0.082560,
-0.080445,
-0.059372,
0.102940,
0.052670,
-0.011354,
-0.103990,
-0.049236,
-0.009836,
0.003907,
-0.007733,
0.158070,
0.070048,
0.058143,
0.003888,
-0.000571,
0.086909,
-0.040027,
0.022304,
-0.019522,
-0.025576,
-0.059046,
-0.092659,
-0.015559,
-0.064816,
-0.092365,
0.009644,
-0.061692,
0.032433,
-0.028849,
0.040115,
-0.011349,
-0.042511,
-0.046657,
-0.073695,
-0.108730,
0.079402,
-0.093176,
0.216610,
0.048509,
0.086425,
0.011208,
0.034150,
0.123550,
0.037409,
0.023665,
-0.057694,
-0.022394,
-0.017650,
-0.084224,
-0.110570,
-0.124670,
-0.033489,
0.068546,
-0.157020,
-0.194020,
-0.208080,
-0.028067,
0.191760,
0.039722,
0.071244,
0.008744,
0.091123,
-0.001941,
0.007982,
0.001152,
0.033851,
0.022208,
0.054205,
0.038416,
0.019454,
0.083094,
0.079650,
0.059604,
0.005512,
0.052258,
0.021029,
0.036335,
0.030346,
0.050659,
0.037749,
0.062433,
0.073883,
0.038388,
0.000754,
0.030235,
0.012207,
0.014207,
-0.068978,
0.015697,
-0.094460,
0.020288,
0.000180,
-0.016409,
0.067845,
-0.013340,
0.038701,
0.051896,
-0.140630,
-0.011063,
0.005445,
-0.015438,
0.023611,
-0.051885,
-0.057835,
-0.026494,
-0.037206,
-0.050796,
0.012393,
0.022323,
-0.013493,
-0.046184,
0.006223,
0.102500,
0.029913,
0.049860,
0.009819,
0.022478,
0.057065,
0.009147,
0.040371,
0.027687,
0.107350,
-0.044418,
0.064746,
0.074138,
0.043883,
0.118890,
-0.053233,
0.016096,
-0.009332,
-0.045437,
-0.004786,
-0.097107,
0.037147,
-0.013418,
0.036708,
-0.021710,
-0.103090,
-0.046652,
0.031078,
0.017938,
0.044840,
-0.021597,
-0.039979,
0.071133,
0.087899,
0.089649,
-0.147400,
-0.119490,
0.023123,
-0.015717,
0.169160,
-0.079721,
-0.046474,
-0.008810,
-0.042805,
0.057813,
-0.270290,
-0.177520,
-0.098159,
-0.112110,
-0.186950,
0.018989,
0.012791,
0.017809,
0.016718,
-0.020037,
0.020410,
-0.012405,
-0.000012,
0.029990,
0.038829,
-0.017374,
-0.003609,
-0.057531,
0.029569,
0.019767,
0.006280,
0.008541,
0.035162,
-0.013324,
0.026896,
-0.019787,
0.023681,
0.027579,
0.004942,
-0.030099,
-0.162680,
0.063487,
0.097023,
0.156130,
-0.023581,
-0.014624,
0.065698,
0.006232,
0.068042,
0.047134,
0.122280,
0.004483,
0.002752,
-0.038377,
-0.043777,
0.155470,
0.018894,
0.049528,
0.073280,
0.057202,
0.133330,
0.035748,
0.009709,
-0.065839,
0.050811,
0.063969,
0.054701,
0.072483,
-0.026391,
0.054735,
0.045117,
-0.032174,
-0.085018,
-0.040226,
0.068997,
0.072943,
0.017497,
-0.013263,
-0.018447,
0.102300,
0.037429,
0.085862,
0.055931,
0.074058,
0.068718,
0.024832,
0.011991,
-0.006338,
-0.047456,
0.034826,
0.023895,
0.030437,
-0.020036,
0.125990,
0.085255,
0.035208,
0.021809,
0.037141,
0.025191,
0.063766,
0.007955,
-0.063626,
0.037821,
0.063700,
0.001696,
0.022694,
-0.023610,
0.000234,
0.082386,
0.000984,
-0.025218,
0.030974,
-0.018530,
-0.062672,
-0.053982,
-0.111840,
-0.017023,
0.113080,
0.080053,
-0.085095,
-0.152450,
-0.133980,
-0.050365,
0.055572,
-0.020921,
-0.054824,
-0.018494,
-0.069507,
-0.088829,
-0.145790,
-0.144330,
-0.028746,
-0.076468,
-0.081448,
-0.034095,
0.031387,
-0.001208,
-0.006350,
0.016060,
0.034301,
0.055518,
0.074796,
-0.047624,
0.079857,
0.021949,
-0.059159,
0.020852,
0.094031,
-0.118140,
-0.139580,
0.042487,
-0.048352,
0.014007,
-0.043177,
-0.115460,
0.062460,
-0.054115,
-0.049411,
0.066697,
0.029626,
-0.150410,
-0.211490,
-0.099527,
-0.115150,
-0.064511,
0.050174,
0.048471,
0.073603,
0.054904,
0.152270,
0.037181,
0.071975,
0.135720,
0.110720,
0.127910,
0.057388,
0.159720,
0.151940,
0.155450,
0.149920,
0.007432,
0.060084,
0.039214,
0.081024,
0.031634,
0.044202,
0.076087,
0.054596,
0.078604,
0.085587,
-0.036867,
-0.004263,
-0.026792,
-0.014528,
-0.001202,
-0.023215,
-0.014925,
0.080997,
0.003907,
0.000276,
-0.024323,
-0.036299,
0.047004,
0.018449,
0.008437,
0.024369,
-0.038762,
0.043659,
0.027880,
-0.023404,
-0.049747,
0.007245,
-0.052633,
-0.067800,
-0.062595,
0.140620,
0.034265,
-0.032391,
0.051475,
0.226600,
0.031718,
-0.023583,
-0.016598,
0.009742,
0.037462,
-0.080416,
-0.068751,
-0.080759,
-0.063982,
-0.024422,
0.009835,
-0.126860,
-0.009861,
-0.081634,
-0.003539,
-0.046800,
-0.000821,
-0.074637,
-0.049666,
-0.067859,
-0.095347,
-0.118390,
-0.037527,
-0.005469,
-0.058483,
-0.016561,
0.054585,
0.086019,
0.037871,
0.001755,
-0.009864,
0.023381,
0.091046,
0.057803,
0.033332,
-0.023090,
-0.009767,
0.017869,
0.089300,
-0.005262,
-0.066700,
-0.006827,
0.023151,
0.012514,
0.029843,
-0.002781,
0.004815,
0.079031,
0.080867,
0.024215,
0.021834,
-0.024624,
0.035134,
0.000571,
0.056713,
0.054772,
0.000721,
-0.017926,
0.025908,
0.040614,
0.050587,
-0.021928,
-0.025673,
0.018157,
-0.034133,
0.036196,
0.042907,
-0.022306,
-0.033807,
0.052896,
-0.074268,
0.016970,
-0.030818,
-0.039213,
-0.120720,
0.012435,
0.107820,
0.092428,
0.135830,
0.103700,
-0.050684,
0.101930,
0.112110,
0.152720,
0.112250,
0.026071,
-0.075441,
-0.065962,
-0.026109,
-0.053956,
-0.054809,
-0.047019,
-0.008664,
0.004133,
-0.050175,
-0.013414,
-0.015952,
0.039687,
0.064779,
0.117060,
0.087099,
-0.036469,
-0.059030,
0.035781,
0.060218,
0.029009,
0.034662,
0.039551,
0.068785,
-0.035392,
0.078564,
0.105040,
0.083013,
-0.175320,
-0.126410,
0.170430,
0.152580,
-0.066106,
-0.084400,
-0.089063,
-0.009882,
0.019501,
0.022216,
-0.004506,
-0.019713,
0.031148,
0.020369,
0.031560,
-0.005124,
-0.015759,
-0.003209,
0.004937,
-0.016061,
0.027589,
0.026269,
0.019571,
0.012525,
-0.008619,
0.025637,
0.035999,
-0.031539,
-0.016239,
-0.009268,
0.005237,
0.045947,
-0.214570,
-0.243400,
-0.151930,
-0.159580,
-0.221990,
-0.049604,
-0.053646,
-0.191480,
-0.034742,
0.041384,
-0.032007,
-0.149490,
-0.015515,
0.030269,
-0.025959,
-0.137950,
-0.054910,
0.001565,
-0.065734,
-0.103580,
-0.078054,
0.043083,
0.034187,
-0.027235,
-0.134250,
0.038665,
0.029951,
0.062943,
0.065999,
-0.033860,
0.015431,
0.017895,
-0.024682,
-0.031179,
-0.030024,
-0.006405,
-0.014088,
-0.010060,
-0.033729,
-0.032178,
0.000674,
0.023633,
-0.015981,
0.059900,
0.014523,
0.033800,
0.019850,
0.068651,
0.023309,
0.017504,
0.111670,
0.102490,
0.100370,
0.077286,
0.126940,
0.070301,
0.098442,
0.174370,
0.152220,
0.099009,
-0.004479,
0.012441,
0.078731,
0.005697,
-0.019732,
-0.171140,
-0.045860,
0.014300,
-0.047402,
-0.171660,
-0.026440,
-0.031270,
-0.122440,
-0.096669,
-0.117000,
0.003197,
0.066859,
0.010051,
0.039476,
0.065896,
-0.187660,
-0.019807,
0.038123,
0.060812,
-0.058333,
-0.203420,
0.018954,
0.040257,
0.067089,
0.057631,
-0.093591,
-0.071497,
-0.053822,
-0.020423,
-0.044858,
0.150220,
0.085997,
0.093784,
0.063833,
0.092299,
0.157240,
0.136180,
0.089150,
0.056776,
-0.020529,
0.017799,
0.039077,
0.059832,
0.113350,
0.034635,
-0.039529,
-0.040497,
0.029465,
0.022199,
0.054216,
-0.090885,
-0.043750,
-0.036758,
0.000892,
0.038707,
0.016312,
-0.052899,
-0.047667,
-0.036187,
0.080887,
0.075725,
-0.028447,
-0.079655,
0.008554,
-0.008206,
0.014007,
-0.002060,
0.014646,
0.010416,
-0.012352,
-0.043207,
-0.126420,
-0.096402,
0.001191,
-0.010363,
-0.255970,
-0.130640,
-0.105310,
-0.118940,
-0.002868,
-0.062660,
0.023626,
0.039836,
-0.069584,
-0.068921,
-0.059457,
-0.100610,
0.133070,
0.055937,
0.125480,
-0.219450,
-0.247970,
0.001574,
-0.083742,
0.031855,
-0.108280,
-0.163140,
0.037296,
-0.071658,
0.071598,
-0.246050,
0.011190,
0.072795,
-0.092559,
-0.053641,
-0.153260,
0.119710,
0.107720,
0.011414,
0.141200,
0.033632,
0.047919,
0.051164,
0.105570,
-0.016201,
-0.041075,
0.066303,
0.045517,
0.096423,
0.022564,
0.026427,
-0.001835,
-0.142020,
0.037640,
0.157710,
0.119080,
-0.056179,
0.005107,
0.026351,
0.177380,
-0.021829,
-0.018462,
0.031309,
-0.003130,
0.014735,
0.090746,
0.035940,
0.003911,
0.102580,
0.185420,
-0.057237,
-0.026022,
-0.028791,
0.036987,
0.167880,
0.029694,
-0.015194,
0.024069,
-0.050734,
0.032923,
-0.023114,
-0.019252,
-0.181420,
-0.103780,
0.001258,
0.103870,
-0.038865,
-0.128570,
0.035921,
-0.083232,
-0.106590,
0.028003,
0.054369,
0.134070,
0.121010,
-0.064258,
-0.070727,
-0.050469,
0.013119,
0.022698,
0.076271,
-0.052597,
-0.089885,
0.008471,
0.079617,
0.005693,
-0.039256,
0.083844,
0.004105,
0.121460,
0.026998,
0.150780,
0.104930,
0.026440,
0.211800,
-0.310670,
-0.066853,
0.037469,
-0.049975,
-0.027971,
-0.159270,
0.013977,
-0.065333,
-0.105730,
-0.111700,
-0.196760,
-0.026016,
-0.029248,
-0.082949,
0.013630,
-0.100400,
-0.000791,
0.034000,
0.067561,
0.032485,
-0.062065,
0.004852,
0.048580,
0.078288,
0.021967,
0.185590,
0.174670,
0.110910,
-0.025624,
-0.012680,
0.109760,
-0.019583,
0.065905,
0.023935,
0.099087,
0.009012,
0.019316,
-0.026524,
0.063345,
0.061314,
-0.091949,
0.015248,
-0.025494,
-0.020627,
0.076767,
-0.005651,
-0.051514,
-0.019832,
-0.189350,
-0.027132,
-0.141280,
-0.028296,
0.021578,
0.144590,
0.218560,
-0.060528,
0.015645,
0.019439,
0.148740,
0.227540,
-0.060521,
0.086699,
0.021833,
0.071285,
0.075668,
-0.071265,
0.077793,
0.057643,
-0.018168,
-0.176450,
0.026155,
-0.002052,
-0.035083,
-0.103580,
-0.273240,
-0.141020,
-0.057885,
-0.091049,
-0.125810,
-0.128400,
-0.067841,
0.050993,
0.074804,
0.048178,
-0.064017,
-0.041661,
0.167530,
0.194100,
0.064836,
-0.045944,
-0.069941,
0.171480,
0.158850,
-0.054314,
-0.125440,
-0.158050,
0.040371,
-0.088506,
-0.084520,
-0.136280,
0.001831,
-0.009820,
-0.010745,
0.022309,
0.012861,
-0.010712,
-0.005107,
-0.004333,
0.005925,
0.017963,
-0.026456,
-0.013469,
-0.038725,
-0.045391,
-0.003930,
0.023770,
-0.018491,
-0.010934,
0.007681,
-0.031494,
-0.011762,
0.004302,
0.038900,
-0.041389,
-0.040034,
-0.009613,
-0.005508,
0.031083,
-0.045762,
0.060409,
0.162700,
0.018704,
-0.053550,
-0.050774,
-0.007560,
-0.053149,
-0.009599,
0.020679,
0.077000,
-0.019862,
-0.297530,
-0.153670,
-0.008781,
0.149970,
0.030241,
-0.263680,
-0.086101,
-0.055884,
-0.003149,
0.056508,
0.148640,
0.044318,
-0.047614,
-0.044995,
0.029601,
0.163050,
0.167400,
-0.015003,
-0.021410,
0.104370,
0.028066,
0.090897,
-0.031401,
-0.147320,
-0.007942,
-0.007930,
0.116580,
0.036109,
0.112760,
-0.073865,
-0.102590,
-0.053514,
0.069275,
0.135920,
0.006715,
0.168260,
0.114150,
-0.061143,
0.004186,
-0.004229,
0.037175,
0.009906,
-0.053140,
-0.001636,
-0.013664,
-0.063537,
0.034262,
-0.077965,
-0.067177,
-0.192110,
-0.269680,
-0.074343,
0.022845,
-0.029106,
-0.074301,
-0.192770,
-0.061554,
-0.186460,
-0.262330,
-0.096891,
0.022082,
-0.025787,
-0.004418,
-0.027989,
-0.023240,
-0.050957,
-0.027778,
0.043636,
-0.000369,
-0.016775,
0.037027,
0.016983,
-0.008480,
-0.008281,
0.007880,
0.019364,
0.016739,
-0.003434,
0.030887,
0.005495,
-0.006938,
0.010955,
0.041614,
-0.006965,
0.017300,
-0.015189,
0.028508,
0.101910,
0.183340,
0.062817,
-0.189620,
0.062697,
0.193030,
0.179910,
-0.017887,
-0.145090,
-0.090470,
-0.024450,
-0.094913,
-0.170180,
0.014042,
0.006573,
0.014414,
-0.036619,
-0.014341,
0.200440,
0.037396,
-0.001211,
0.078207,
0.003127,
-0.081747,
0.025126,
0.011299,
-0.048266,
0.004276,
-0.061027,
-0.030032,
0.001633,
-0.125930,
-0.098181,
-0.125250,
-0.066840,
-0.013229,
-0.119190,
-0.083056,
-0.032609,
0.028522,
0.144480,
0.090374,
-0.038744,
0.064332,
0.209070,
0.258760,
0.276840,
0.077419,
0.170190,
0.105530,
0.072677,
0.072177,
0.001334,
0.047551,
0.054864,
0.160800,
0.095713,
-0.015035,
0.058748,
-0.010802,
0.097360,
0.169200,
-0.017028,
-0.039463,
-0.045620,
0.061087,
0.154920,
0.047749,
-0.021538,
-0.073238,
0.023151,
0.044179,
0.135820,
0.093218,
0.010171,
-0.067744,
0.081635,
0.007975,
0.070281,
0.043833,
0.038512,
0.059895,
0.078034,
0.051108,
0.082900,
0.081944,
0.140090,
-0.001146,
-0.117910,
-0.010288,
0.082420,
0.043439,
0.008862,
-0.155250,
-0.122710,
0.028906,
0.094501,
0.069853,
0.003325,
0.059649,
-0.002422,
-0.004156,
-0.036278,
0.065823,
0.125740,
0.011389,
0.110680,
0.085177,
0.056600,
-0.037109,
-0.174740,
-0.149090,
0.087418,
-0.164800,
-0.261150,
-0.124690,
-0.174110,
-0.240350,
-0.129110,
-0.125090,
-0.130420,
-0.173910,
-0.144680,
-0.025860,
-0.023561,
-0.030662,
-0.061750,
-0.044622,
0.086402,
-0.026744,
-0.090263,
-0.059936,
-0.009975,
-0.158020,
-0.114200,
-0.068288,
-0.042663,
-0.119110,
-0.248940,
-0.121410,
-0.066007,
-0.072500,
-0.131900,
-0.181310,
-0.057149,
-0.062525,
-0.068526,
0.012147,
-0.078165,
-0.006788,
-0.051329,
-0.059738,
0.027633,
-0.034808,
-0.009275,
-0.055085,
-0.059805,
0.016476,
-0.008759,
-0.041244,
-0.025838,
-0.032913,
0.007675,
-0.068532,
0.008208,
-0.053441,
-0.053466,
0.033954,
-0.036675,
-0.031755,
-0.027027,
-0.052464,
-0.035318,
0.036725,
0.011406,
0.098533,
0.206470,
0.166650,
0.025862,
-0.010899,
-0.206000,
0.060676,
0.200060,
-0.018149,
-0.052269,
-0.101350,
0.128760,
0.147600,
0.076861,
-0.022197,
-0.146550,
0.122480,
0.194330,
-0.062010,
-0.190920,
-0.086847,
0.032836,
0.081540,
-0.052845,
-0.051261,
-0.008865,
-0.019778,
0.160320,
-0.166650,
-0.057279,
0.002506,
0.036905,
0.084253,
-0.083751,
0.091191,
0.000895,
-0.031426,
-0.008900,
-0.111850,
0.068669,
0.045433,
-0.041970,
-0.163730,
-0.004822,
-0.027102,
-0.034905,
-0.080157,
-0.294860,
-0.006726,
0.046128,
-0.006543,
0.022468,
-0.003685,
0.013688,
0.005177,
0.039906,
0.021481,
0.046638,
-0.051526,
0.016106,
-0.000477,
-0.037812,
-0.064996,
-0.018196,
0.034792,
-0.021441,
-0.037035,
-0.007419,
-0.006849,
-0.004054,
0.023794,
-0.039273,
0.027185,
-0.000862,
-0.035158,
0.141310,
0.129710,
-0.006540,
-0.022804,
-0.061577,
-0.034525,
0.088077,
-0.194930,
0.106480,
0.021042,
0.031642,
0.078301,
-0.052034,
0.022568,
0.085366,
0.013289,
-0.039477,
-0.031336,
-0.044836,
0.053603,
-0.076911,
-0.073994,
0.035144,
0.069367,
0.137780,
0.054968,
0.166070,
0.064494,
-0.010001,
-0.215690,
-0.038874,
-0.020155,
0.078484,
0.010503,
-0.075568,
-0.139870,
-0.097066,
0.102140,
0.169690,
-0.090016,
-0.100730,
-0.070061,
-0.084615,
-0.025087,
-0.217420,
-0.236340,
-0.095463,
-0.120290,
0.012654,
-0.013102,
0.023496,
0.028934,
0.031525,
0.032282,
0.018896,
-0.028000,
0.035280,
0.021885,
-0.038732,
-0.025369,
0.006981,
0.002736,
0.007442,
-0.014405,
-0.013995,
-0.014338,
0.009136,
0.032227,
0.027988,
0.012132,
-0.001505,
0.006887,
-0.026901,
-0.020963,
-0.028791,
0.032715,
-0.044231,
-0.004800,
0.111670,
0.176150,
0.070309,
0.077043,
0.029308,
-0.074087,
0.068260,
0.084917,
0.118870,
0.093863,
-0.088108,
0.063954,
0.075692,
0.143120,
0.050418,
-0.160870,
-0.078817,
0.019238,
-0.072272,
-0.095120,
-0.030152,
-0.009858,
-0.021580,
-0.006235,
-0.002549,
-0.037269,
0.021749,
0.002918,
0.004503,
0.011394,
0.012631,
-0.023093,
0.016680,
0.023016,
0.019548,
-0.004935,
0.021192,
0.032897,
0.011086,
0.038592,
-0.027083,
0.002710,
-0.038253,
-0.019086,
-0.005441,
-0.182550,
-0.096935,
-0.088716,
-0.045067,
-0.000998,
-0.064291,
0.001202,
0.017798,
0.067199,
0.064840,
-0.162550,
-0.111950,
-0.019784,
0.094234,
0.107960,
-0.009148,
-0.076734,
-0.044206,
-0.097910,
0.037065,
0.080192,
0.093182,
0.060818,
0.093387,
0.008571,
0.004034,
-0.064443,
-0.039000,
0.117740,
0.118740,
-0.110750,
-0.079393,
-0.008251,
0.127370,
0.115110,
-0.104210,
-0.099766,
0.127930,
0.203000,
0.123420,
0.034564,
-0.115900,
0.126660,
0.073963,
0.065057,
0.095136,
-0.004114,
0.074424,
0.157440,
0.134760,
0.131620,
0.169320,
0.103230,
0.143130,
0.173940,
0.105810,
0.043162,
-0.090453,
0.024029,
0.210510,
-0.106900,
-0.044854,
0.136890,
0.046898,
0.037569,
-0.161540,
0.029947,
0.205490,
0.246460,
-0.043023,
-0.106940,
-0.195990,
0.059193,
0.129340,
0.090236,
0.060101,
0.084168,
0.178030,
0.074176,
-0.000532,
-0.182140,
0.043605,
0.175090,
0.030192,
-0.058390,
-0.006427,
0.032336,
-0.081544,
-0.077535,
-0.055050,
0.095691,
-0.022153,
0.052246,
-0.018280,
-0.140650,
0.061032,
-0.074039,
-0.101740,
-0.035354,
0.039441,
0.257170,
-0.166640,
-0.223160,
-0.142990,
-0.092350,
0.065335,
-0.129960,
-0.207850,
-0.191350,
0.034248,
0.012321,
-0.012404,
-0.115410,
-0.021138,
0.016521,
0.060311,
0.038948,
0.043967,
0.085385,
0.041365,
0.120670,
0.071325,
0.096821,
0.070858,
-0.061995,
-0.081912,
-0.005956,
0.023670,
0.062371,
0.169290,
0.088600,
-0.056274,
-0.062043,
-0.037669,
0.042120,
-0.012982,
0.014419,
0.052772,
0.005435,
0.043725,
-0.237300,
-0.223250,
-0.026681,
0.093018,
0.050884,
-0.016586,
-0.229680,
-0.181550,
0.014354,
0.076679,
-0.092590,
-0.094103,
-0.021973,
-0.016973,
-0.124600,
-0.041880,
-0.089133,
0.088688,
-0.046894,
-0.169140,
-0.077615,
-0.126340,
0.053715,
-0.069970,
-0.236470,
-0.017430,
-0.157350,
0.074392,
0.002757,
-0.210340,
-0.010258,
-0.014625,
0.025187,
0.040808,
-0.389910,
0.119950,
0.025392,
-0.008522,
0.072359,
-0.041746,
0.030275,
0.068591,
0.158210,
0.031455,
-0.131890,
-0.147240,
-0.009278,
0.008774,
-0.104710,
0.024985,
-0.285550,
-0.196350,
-0.089570,
-0.008552,
-0.011621,
-0.347050,
-0.196410,
-0.059600,
-0.017601,
-0.122370,
0.063038,
-0.019366,
-0.090524,
-0.223120,
-0.196350,
0.282260,
0.116000,
0.028312,
-0.071160,
-0.061072,
0.112860,
0.063578,
0.078114,
0.064948,
0.081791,
-0.041458,
-0.047956,
0.022238,
0.088370,
-0.032008,
-0.127940,
-0.178690,
-0.167280,
-0.008552,
-0.172530,
0.063867,
0.036908,
0.097940,
-0.025442,
-0.053166,
-0.114750,
-0.016699,
0.134780,
-0.021867,
-0.039409,
-0.140630,
-0.021939,
0.053263,
-0.027819,
-0.011888,
-0.204210,
-0.197220,
0.052607,
0.032852,
-0.126940,
-0.162300,
0.023489,
0.205760,
0.021949,
-0.157090,
0.045120,
-0.057029,
0.006955,
0.046663,
-0.052155,
-0.118650,
0.007193,
-0.014168,
-0.002371,
-0.181960,
-0.222710,
-0.080787,
0.117370,
0.026246,
-0.081844,
-0.293100,
-0.107310,
-0.101860,
-0.178280,
-0.345110,
-0.041413,
0.083823,
-0.054021,
-0.124650,
-0.271480,
-0.014882,
-0.180930,
-0.079166,
-0.128500,
0.033831,
0.047803,
-0.097228,
-0.137910,
-0.147920,
-0.042013,
0.120530,
0.021970,
-0.020542,
-0.044480,
-0.088143,
0.069095,
0.118290,
0.088923,
0.079549,
0.019995,
-0.022319,
-0.027637,
-0.032185,
0.089481,
0.036072,
0.006877,
-0.025774,
0.007048,
-0.012729,
-0.015303,
0.017797,
0.009252,
0.001970,
-0.051367,
-0.010002,
-0.001990,
0.032596,
-0.013719,
0.036114,
-0.029590,
0.051015,
0.012211,
0.008867,
0.053621,
-0.015423,
0.030650,
-0.014629,
0.008410,
-0.001693,
0.018230,
-0.094275,
0.004226,
0.017617,
0.073026,
0.029039,
-0.024269,
0.038842,
0.080369,
0.089470,
0.097971,
0.022948,
0.088906,
0.065752,
0.080519,
0.016447,
-0.106990,
-0.081476,
-0.021772,
0.008654,
0.081304,
-0.152700,
-0.192390,
-0.081932,
-0.137580,
0.033394,
0.010696,
0.147430,
-0.010206,
-0.131000,
-0.041229,
0.117680,
0.141150,
-0.008599,
-0.000529,
-0.123920,
0.147940,
-0.034272,
0.020887,
0.070263,
-0.025909,
-0.076268,
-0.114190,
-0.088395,
0.014677,
-0.035247,
-0.121630,
-0.122980,
-0.141760,
-0.011805,
0.093892,
-0.044468,
0.109470,
0.095114,
0.003491,
0.107890,
-0.041581,
-0.040027,
-0.027197,
-0.071401,
0.008787,
0.058333,
-0.090764,
-0.132690,
-0.059618,
-0.018201,
0.084559,
-0.137490,
-0.159270,
-0.097307,
-0.053654,
0.105020,
0.078008,
-0.083721,
-0.125970,
0.026123,
0.017352,
0.034325,
0.005539,
0.016569,
-0.027641,
-0.016042,
-0.033073,
0.018868,
0.010426,
0.020023,
0.014083,
-0.036984,
-0.008532,
0.000349,
0.026684,
0.013016,
-0.016055,
-0.025736,
-0.038156,
-0.010036,
-0.014010,
0.004784,
-0.032285,
-0.011794,
-0.036609,
0.028895,
0.012066,
-0.072273,
0.061765,
0.128500,
0.034784,
-0.050143,
-0.110170,
0.012731,
0.052734,
0.018462,
0.083503,
0.107320,
-0.018113,
0.011340,
0.092788,
-0.080196,
-0.019698,
0.035435,
0.002086,
0.166650,
-0.161010,
-0.063393,
0.092977,
0.072674,
-0.120250,
-0.128150,
-0.025476,
0.022378,
-0.070502,
0.009381,
-0.058270,
0.014129,
0.016738,
-0.040162,
0.100300,
-0.054149,
-0.103600,
0.000064,
-0.003381,
0.130990,
0.097132,
0.037947,
0.033878,
0.044312,
0.145720,
0.105320,
0.078889,
0.068828,
0.060135,
0.096636,
0.148090,
0.051679,
-0.048888,
-0.048804,
-0.050940,
0.056611,
-0.030894,
0.009000,
0.010991,
-0.227320,
-0.034887,
-0.011436,
-0.069090,
0.138580,
-0.149700,
-0.127850,
-0.022962,
-0.004095,
0.047687,
-0.094594,
0.014921,
-0.058372,
-0.083225,
-0.072372,
-0.061783,
0.013363,
0.069652,
0.011394,
0.113670,
0.024609,
-0.095396,
-0.007776,
-0.042845,
0.139320,
-0.045894,
-0.078803,
0.057473,
0.112900,
0.000624,
0.076225,
0.031624,
0.210440,
0.173350,
0.030265,
0.017356,
0.029037,
-0.009625,
0.021731,
0.119860,
0.142640,
-0.040845,
0.012420,
0.116070,
0.162590,
0.037401,
-0.024036,
0.091222,
0.094717,
-0.057874,
0.030811,
0.091343,
0.138500,
0.032579,
-0.010828,
0.139010,
-0.061270,
0.010536,
-0.051181,
-0.130710,
0.061518,
0.095993,
0.092623,
0.247750,
0.226720,
0.060171,
0.091884,
0.102550,
0.014765,
-0.062510,
-0.016715,
-0.001271,
-0.013295,
-0.014326,
-0.075548,
-0.017437,
0.025721,
0.014566,
0.054029,
0.089133,
-0.023568,
0.004238,
0.005495,
0.147180,
0.071096,
-0.106010,
-0.017433,
0.071002,
0.100260,
0.111390,
-0.029561,
0.012061,
0.005500,
0.010410,
0.001242,
-0.036501,
-0.000740,
-0.024131,
-0.041534,
0.045715,
-0.035349,
0.005507,
-0.056498,
0.000423,
-0.005720,
-0.038565,
0.022563,
-0.057046,
0.048403,
-0.034830,
-0.002554,
-0.036357,
-0.035187,
0.048205,
0.076559,
-0.113490,
-0.126300,
-0.084157,
0.061577,
0.082489,
-0.035944,
-0.127350,
-0.058671,
0.048457,
-0.038131,
0.136620,
-0.159940,
-0.018024,
-0.044028,
0.103520,
0.093020,
0.015238,
0.202900,
0.159620,
0.058185,
0.161510,
0.075350,
0.216600,
0.269430,
0.116100,
0.267550,
0.156090,
-0.078009,
0.040408,
0.014184,
0.141460,
0.056247,
0.035468,
0.028550,
0.054565,
-0.053233,
-0.035696,
0.032308,
0.055848,
-0.040511,
-0.129390,
-0.076743,
-0.021115,
-0.075002,
-0.154070,
-0.065822,
-0.087708,
-0.148010,
-0.035642,
-0.104080,
-0.017383,
0.020840,
0.020696,
-0.004761,
0.060551,
-0.000080,
-0.004310,
-0.019989,
-0.021442,
-0.033929,
0.016216,
0.015691,
-0.032879,
0.029669,
0.013466,
0.024586,
0.025308,
0.028149,
0.038247,
-0.012469,
0.024962,
0.019147,
0.007645,
-0.030854,
-0.014546,
-0.040185,
0.115210,
0.021966,
0.076835,
0.009858,
0.039516,
0.022802,
0.101490,
-0.056208,
0.038599,
0.001251,
0.077950,
-0.154500,
-0.107520,
-0.015051,
-0.071881,
-0.194510,
-0.116880,
0.239280,
0.060593,
0.038734,
-0.126830,
-0.022035,
-0.032757,
-0.072339,
-0.038085,
-0.000989,
-0.005546,
-0.072275,
-0.047411,
-0.058540,
-0.060395,
0.016391,
0.018870,
-0.010456,
-0.057481,
0.011353,
0.050689,
0.000847,
-0.060170,
0.018733,
-0.044775,
0.025577,
-0.043150,
0.024952,
-0.024450,
-0.036226,
0.038383,
-0.031039,
-0.063249,
0.015138,
-0.000089,
-0.026524,
-0.007967,
0.004412,
0.022779,
0.003084,
-0.031370,
-0.016193,
-0.003156,
0.031556,
0.018396,
0.016906,
0.021788,
0.021421,
-0.031318,
-0.028779,
0.028025,
0.012485,
-0.033365,
-0.002201,
0.016308,
0.019348,
-0.023870,
0.033934,
0.004073,
0.001551,
0.092182,
0.076392,
0.029312,
0.025277,
-0.048321,
0.062438,
-0.081873,
0.036915,
-0.070509,
-0.059416,
-0.047028,
-0.062610,
-0.018352,
-0.027699,
-0.064097,
-0.065125,
-0.015108,
0.000645,
-0.047432,
-0.027232,
0.016296,
0.037178,
0.027803,
0.010056,
-0.035068,
-0.019784,
-0.018455,
-0.019317,
-0.018302,
0.019179,
-0.025759,
-0.012277,
-0.029807,
0.014293,
0.002421,
0.002558,
-0.015854,
0.004643,
0.030568,
-0.020725,
0.021263,
-0.029817,
-0.005820,
0.012652,
0.025141,
-0.022959,
0.002323,
-0.007194,
-0.047025,
-0.013124,
-0.014870,
-0.030494,
-0.072333,
-0.008180,
-0.049778,
-0.087942,
-0.057969,
-0.014142,
-0.022391,
0.005877,
-0.007311,
-0.007560,
-0.031916,
-0.076721,
-0.051223,
-0.005538,
0.021752,
0.018196,
-0.030918,
-0.031893,
-0.033580,
-0.004127,
-0.031200,
-0.066962,
-0.031410,
-0.024462,
-0.034580,
-0.065362,
-0.032848,
-0.039226,
-0.075442,
-0.074884,
-0.050972,
-0.123550,
-0.089084,
-0.041694,
0.015449,
-0.018253,
-0.127520,
-0.029006,
0.000077,
-0.005294,
-0.035713,
-0.035885,
-0.041318,
-0.010709,
-0.060713,
-0.105300,
-0.019118,
0.030469,
-0.008426,
-0.036627,
-0.057263,
-0.065926,
-0.029670,
-0.052455,
-0.054978,
-0.065376,
-0.040081,
-0.042245,
-0.009876,
-0.032694,
-0.088493,
-0.028990,
-0.070430,
-0.039097,
-0.078604,
-0.081441,
-0.033683,
-0.061898,
-0.066547,
-0.023213,
-0.019247,
-0.001718,
-0.039201,
-0.076144,
-0.021697,
-0.093380,
0.037032,
-0.021857,
-0.041115,
-0.075468,
-0.030694,
-0.029921,
0.033561,
-0.052763,
-0.008269,
-0.036855,
0.062958,
-0.001664,
0.035811,
-0.093518,
-0.007368,
0.078150,
-0.004640,
-0.009889,
-0.038805,
-0.035076,
-0.000409,
-0.007096,
-0.010087,
0.035959,
-0.053096,
0.040155,
-0.016709,
-0.031583,
-0.011128,
-0.121440,
0.033613,
0.001102,
0.012462,
-0.042369,
-0.012435,
0.019678,
-0.095585,
-0.023002,
-0.071977,
0.042678,
-0.044604,
-0.006590,
-0.045482,
-0.056721,
0.074122,
-0.099219,
-0.075110,
-0.044617,
-0.048334,
-0.058331,
-0.045105,
-0.055872,
-0.051058,
-0.003604,
-0.048626,
-0.007179,
-0.066854,
-0.014150,
-0.022414,
-0.043854,
-0.040614,
-0.026842,
-0.019604,
-0.018634,
-0.027032,
-0.014995,
-0.006976,
-0.014757,
-0.013920,
-0.037764,
-0.033965,
-0.068506,
-0.017407,
0.005893,
-0.010091,
0.018640,
-0.060010,
-0.049949,
-0.000398,
0.019989,
0.070645,
-0.039145,
-0.032472,
-0.024775,
0.030152,
-0.000499,
0.003137,
-0.006614,
0.016824,
0.006067,
-0.009371,
-0.013888,
0.034345,
0.072667,
-0.059579,
-0.052002,
-0.073074,
-0.033718,
0.007704,
-0.027512,
0.004833,
0.065331,
-0.003643,
-0.029950,
-0.056195,
-0.058680,
0.020425,
0.047077,
-0.005317,
-0.053990,
-0.008417,
-0.032811,
-0.030396,
-0.019261,
-0.038357,
0.031715,
-0.024464,
0.006167,
-0.027902,
0.033021,
-0.039124,
-0.005287,
0.027219,
0.013504,
0.046377,
-0.004999,
-0.045556,
0.042841,
0.006652,
0.011826,
0.017554,
-0.008497,
0.049769,
-0.036881,
-0.022052,
-0.019581,
-0.018537,
-0.029450,
-0.031943,
-0.060095,
-0.086230,
-0.013631,
-0.036949,
-0.009568,
-0.019098,
-0.052232,
-0.019773,
-0.021957,
0.033250,
-0.007268,
0.010807,
0.044486,
-0.013439,
0.053464,
-0.026209,
0.025156,
0.032427,
0.012121,
-0.016273,
-0.008820,
-0.025079,
-0.095131,
0.009747,
-0.039001,
-0.001059,
0.012538,
-0.006567,
-0.043570,
-0.059461,
0.009135,
0.019938,
-0.045994,
-0.018718,
-0.068487,
-0.026565,
-0.084330,
-0.012918,
-0.029005,
-0.043617,
-0.028786,
-0.039710,
-0.047545,
-0.072613,
0.000936,
-0.006061,
-0.074493,
-0.033758,
-0.037024,
-0.026635,
-0.024071,
-0.042909,
-0.005677,
-0.044076,
0.004128,
-0.031844,
-0.031926,
-0.026314,
0.002888,
-0.009207,
0.003052,
-0.016679,
-0.043858,
-0.019757,
0.014054,
-0.025926,
-0.031420,
-0.008369,
-0.077027,
-0.020201,
-0.016573,
-0.075353,
-0.051110,
-0.038066,
-0.049137,
-0.025726,
0.027856,
0.029125,
-0.035396,
-0.043379,
-0.019069,
0.011516,
-0.004814,
0.021307,
-0.007005,
0.008529,
0.006541,
0.013976,
0.026877,
-0.034942,
0.006863,
0.008591,
0.005029,
-0.019900,
-0.029062,
-0.009451,
-0.032501,
-0.027702,
0.026705,
0.005203,
-0.029715,
-0.005290,
0.000798,
-0.032563,
-0.027054,
0.021074,
-0.005537,
-0.123300,
-0.057566,
-0.048817,
-0.070642,
-0.040950,
-0.082776,
-0.039070,
-0.031454,
-0.025662,
0.034147,
0.057183,
-0.085741,
-0.028762,
-0.018225,
-0.101610,
0.041064,
-0.014881,
-0.008211,
-0.061815,
-0.052902,
-0.020286,
-0.066825,
0.002737,
-0.069488,
-0.093858,
-0.088734,
-0.044095,
-0.031532,
0.033752,
0.013076,
-0.001463,
-0.011374,
0.004432,
0.024347,
-0.020589,
-0.016722,
0.019495,
-0.045613,
-0.084707,
0.047050,
-0.044202,
-0.057753,
-0.009637,
-0.035610,
-0.054219,
-0.053021,
-0.079778,
-0.024068,
-0.035443,
-0.042837,
-0.030509,
-0.019580,
0.009677,
-0.018710,
-0.049669,
-0.026966,
-0.049131,
-0.067149,
0.012362,
-0.030038,
-0.073415,
0.000052,
0.023185,
0.019771,
-0.025542,
-0.028896,
0.038671,
-0.012882,
0.015251,
0.010716,
-0.000631,
-0.014441,
0.013865,
-0.007138,
-0.020790,
0.020000,
-0.023389,
-0.013145,
0.004502,
0.032438,
-0.023628,
-0.010638,
-0.003319,
0.026032,
0.029361,
0.002754,
0.015629,
-0.026964,
-0.000779,
-0.030941,
0.010872,
-0.028276,
-0.020405,
0.013811,
-0.030602,
-0.006510,
0.024825,
0.028473,
0.034526,
0.025296,
-0.017682,
-0.015318,
-0.048490,
-0.028703,
-0.126800,
-0.100980,
-0.090566,
-0.039589,
-0.065218,
-0.021241,
-0.037318,
-0.035532,
-0.036042,
-0.069296,
-0.065584,
-0.022307,
-0.022262,
-0.035770,
-0.080590,
-0.020586,
-0.019960,
-0.060556,
-0.095248,
-0.043763,
-0.023446,
-0.106040,
-0.046515,
0.007542,
0.040252,
-0.035856,
-0.000639,
-0.094560,
0.013747,
-0.004142,
-0.031205,
0.032982,
-0.031149,
-0.019940,
-0.049669,
0.014051,
0.042775,
0.003969,
-0.006504,
-0.041185,
-0.041552,
-0.023760,
0.053359,
-0.030698,
-0.068661,
0.039652,
-0.020325,
-0.068087,
-0.069732,
-0.040355,
-0.018650,
-0.071585,
-0.020566,
-0.009906,
-0.044264,
-0.001314,
0.019411,
-0.052269,
-0.008479,
0.029004,
0.022430,
0.058239,
0.048159,
0.017230,
0.023191,
-0.030503,
0.039629,
0.005809,
-0.006408,
0.012254,
-0.031046,
0.057908,
0.061669,
-0.040448,
0.003370,
-0.006491,
0.016172,
-0.046701,
-0.019208,
-0.052229,
-0.078592,
0.028330,
-0.023198,
-0.044377,
-0.011009,
-0.039369,
-0.069556,
-0.035481,
-0.029965,
-0.017115,
0.018506,
-0.016755,
-0.054521,
-0.009204,
-0.022881,
0.070636,
0.118740,
-0.032124,
-0.038445,
-0.009888,
-0.061477,
0.023128,
0.001103,
-0.014220,
-0.059437,
-0.040878,
-0.019088,
-0.023081,
-0.042818,
-0.036540,
-0.051406,
-0.053409,
-0.001309,
-0.034310,
0.004398,
-0.020098,
-0.068738,
-0.027572,
-0.020097,
-0.052806,
-0.017927,
-0.042953,
-0.035909,
0.006359,
-0.020017,
-0.031989,
-0.048728,
0.005989,
-0.057613,
-0.007956,
0.027948,
-0.049189,
-0.033482,
-0.009978,
-0.036401,
-0.002876,
-0.015408,
-0.035167,
-0.022271,
-0.065637,
-0.062277,
-0.060474,
-0.089691,
-0.059661,
-0.047199,
0.001946,
0.030492,
0.009921,
0.000508,
-0.027547,
-0.002804,
0.032906,
0.008699,
0.012312,
-0.033160,
0.025282,
0.022983,
0.010279,
0.026142,
0.015729,
0.009752,
-0.020001,
-0.031067,
-0.007804,
0.024258,
0.032919,
0.026970,
0.024749,
-0.018952,
0.035149,
0.024410,
0.073798,
-0.048262,
0.038634,
0.058279,
-0.083052,
0.067027,
0.009938,
0.079510,
0.077136,
0.008734,
0.129300,
-0.029877,
0.060682,
-0.002912,
0.002730,
-0.030618,
-0.065826,
-0.034526,
-0.036140,
-0.065428,
-0.036394,
-0.040921,
-0.108350,
-0.045064,
0.013078,
-0.006751,
-0.032577,
-0.055943,
-0.043633,
-0.071170,
-0.062753,
0.020063,
-0.068973,
-0.034496,
-0.060225,
-0.048665,
-0.041226,
-0.037970,
0.024299,
-0.050055,
-0.035125,
-0.034414,
-0.005850,
-0.020485,
-0.022840,
-0.007394,
-0.036084,
-0.006472,
-0.047854,
0.005101,
0.025838,
-0.018295,
0.031955,
-0.020097,
-0.008032,
0.009808,
-0.007162,
0.015964,
0.017308,
0.008843,
0.006369,
0.006545,
-0.030527,
0.004798,
0.016184,
-0.023063,
-0.001305,
-0.031176,
-0.000616,
0.018179,
0.026608,
0.006447,
0.008065,
-0.008295,
-0.010067,
-0.066126,
-0.031465,
-0.003816,
-0.058221,
0.013160,
-0.130100,
-0.010598,
-0.028290,
-0.026756,
0.024122,
-0.058556,
-0.054801,
-0.070575,
-0.070027,
-0.044409,
-0.010772,
0.004961,
-0.025844,
-0.003754,
0.043602,
0.034576,
0.010553,
0.042574,
-0.036843,
-0.068522,
-0.040049,
-0.013615,
-0.039920,
0.012956,
-0.063505,
-0.089449,
0.009803,
-0.027095,
-0.044669,
0.003275,
-0.030634,
-0.026400,
-0.016655,
-0.011761,
-0.061601,
-0.002380,
-0.016983,
-0.051509,
-0.041842,
-0.056970,
-0.031384,
-0.016545,
0.030414,
0.020464,
-0.000471,
0.019728,
-0.011568,
0.012882,
-0.006799,
-0.018430,
-0.011487,
0.030045,
-0.010196,
-0.010978,
0.023519,
-0.018387,
-0.004025,
-0.006523,
-0.034694,
-0.029783,
0.032160,
-0.009803,
-0.033453,
-0.035459,
-0.021265,
-0.009387,
0.007774,
0.014761,
0.039965,
-0.007380,
0.049719,
-0.009394,
-0.008737,
-0.002429,
0.019686,
0.044854,
0.013217,
0.026671,
-0.005980,
-0.002386,
0.004235,
-0.017096,
0.026040,
-0.006103,
-0.025623,
0.020368,
-0.027930,
0.000751,
0.005327,
0.005641,
-0.027109,
-0.037700,
-0.000709,
-0.007498,
0.019878,
0.043683,
0.000570,
-0.038334,
-0.021352,
0.021325,
-0.009611,
-0.007773,
-0.021980,
0.036096,
-0.022308,
0.029230,
0.026579,
0.009470,
0.040072,
-0.003136,
-0.025711,
0.006207,
0.001321,
-0.031136,
-0.005985,
0.017510,
0.000013,
0.003350,
-0.014308,
0.050310,
0.025730,
0.000882,
0.018605,
-0.030339,
0.019934,
0.016112,
-0.013160,
-0.008182,
-0.039240,
-0.035467,
-0.039027,
-0.043047,
-0.007458,
-0.004692,
0.002618,
-0.023850,
-0.024101,
-0.045280,
0.003564,
-0.015096,
-0.043762,
-0.027530,
-0.058456,
-0.027845,
-0.016293,
-0.053863,
-0.027232,
-0.063578,
-0.021903,
-0.047698,
-0.004327,
0.016593,
0.004950,
-0.038862,
-0.011101,
-0.006513,
-0.010703,
-0.017813,
-0.024649,
-0.006202,
-0.020879,
-0.008399,
-0.041602,
-0.044107,
-0.015996,
-0.004926,
-0.024978,
-0.030726,
0.018978,
-0.040146,
0.006406,
-0.059399,
-0.021271,
-0.030338,
-0.028314,
-0.042224,
-0.008756,
0.008618,
-0.041077,
-0.023847,
-0.011479,
-0.021907,
-0.002731,
0.014436,
-0.039345,
-0.022903,
-0.054881,
0.017559,
-0.036554,
-0.028615,
-0.038240,
-0.019884,
-0.017350,
-0.007751,
-0.016242,
-0.031897,
-0.076790,
-0.022047,
-0.040582,
0.031063,
0.001655,
-0.042661,
-0.031856,
-0.051286,
-0.025087,
-0.053417,
-0.043361,
-0.064012,
-0.012698,
-0.058877,
-0.020283,
-0.035593,
-0.023268,
-0.010306,
-0.055576,
-0.023408,
-0.001853,
0.006090,
-0.041151,
-0.014963,
0.001769,
0.001719,
-0.035868,
0.012461,
0.015155,
0.010001,
-0.044690,
-0.033115,
0.006913,
-0.008287,
-0.015899,
-0.036672,
-0.001546,
-0.051462,
-0.006427,
-0.016594,
0.007465,
-0.000419,
-0.001963,
-0.044197,
0.021735,
-0.034028,
-0.030042,
0.023131,
-0.021351,
-0.024460,
-0.059151,
-0.056130,
-0.032134,
-0.001216,
-0.033865,
-0.000118,
0.025759,
0.004083,
-0.037943,
-0.086729,
-0.032591,
-0.024515,
-0.030967,
-0.050223,
-0.031994,
-0.013695,
-0.014034,
-0.024950,
-0.060703,
-0.036786,
-0.013260,
0.024192,
-0.021333,
0.001969,
-0.009435,
-0.002556,
-0.022378,
-0.012590,
-0.003900,
-0.002789,
-0.030960,
0.003334,
-0.016854,
-0.056418,
-0.063026,
-0.049507,
-0.010480,
0.019088,
-0.036594,
0.003919,
-0.032766,
-0.036269,
0.013819,
0.010038,
-0.044614,
-0.020217,
0.007252,
0.029750,
0.002477,
-0.064232,
-0.034404,
-0.056643,
-0.032784,
-0.012038,
-0.028995,
-0.080562,
-0.029057,
-0.021984,
-0.031462,
-0.016517,
-0.017669,
-0.013314,
0.013516,
-0.002967,
-0.033892,
-0.024993,
-0.006435,
0.011210,
-0.008113,
0.004434,
-0.032760,
-0.007999,
-0.013234,
-0.000022,
0.020391,
0.048868,
0.042859,
-0.001744,
-0.039494,
-0.026164,
0.035526,
0.039433,
-0.013566,
-0.003474,
0.005913,
0.033923,
-0.029561,
0.001599,
0.017723,
-0.026359,
-0.030915,
-0.003473,
0.021458,
-0.015550,
0.003567,
-0.022911,
0.005706,
-0.039238,
0.009493,
-0.012348,
-0.005066,
-0.056648,
-0.035403,
-0.029028,
0.006769,
-0.056269,
-0.033128,
-0.005751,
-0.035301,
-0.043486,
-0.027559,
-0.001511,
0.034165,
-0.007873,
-0.044847,
-0.018351,
-0.042169,
-0.004011,
-0.061114,
0.003979,
-0.055287,
-0.031650,
-0.039447,
0.005116,
0.025341,
-0.000873,
-0.017037,
-0.016176,
0.049196,
-0.034325,
-0.039866,
0.001607,
-0.057105,
-0.008482,
0.002369,
-0.017610,
-0.027761,
-0.020066,
-0.052346,
-0.018191,
-0.010542,
-0.034365,
0.014777,
-0.004382,
-0.047195,
-0.034662,
-0.032101,
-0.006252,
-0.031595,
-0.018993,
0.021554,
-0.028289,
-0.033654,
-0.024235,
0.021103,
-0.045293,
-0.029263,
-0.039323,
-0.031121,
-0.035951,
-0.014391,
0.000027,
-0.040471,
-0.005572,
0.002976,
-0.016805,
0.009149,
-0.012170,
0.025799,
-0.007613,
-0.043875,
-0.039683,
-0.005406,
0.026092,
0.035754,
-0.025973,
0.011402,
0.014142,
-0.016705,
-0.028844,
0.019845,
0.016199,
0.020846,
0.025309,
0.013213,
-0.029754,
0.004462,
-0.012972,
0.000073,
0.009313,
0.007770,
-0.011879,
-0.025422,
-0.033721,
-0.025460,
-0.008137,
0.003686,
-0.038185,
-0.020348,
0.008442,
0.022885,
-0.014197,
0.013474,
0.041556,
0.027112,
-0.019965,
0.035423,
-0.009373,
0.015632,
-0.010909,
0.026989,
0.008017,
-0.007241,
-0.022344,
0.027230,
-0.020785,
0.034106,
-0.020588,
0.028153,
0.007254,
-0.011331,
0.011088,
0.026250,
0.010141,
0.026774,
0.019757,
-0.014604,
0.042427,
-0.017675,
0.001562,
-0.036126,
-0.025748,
0.005489,
-0.031389,
0.008155,
-0.019508,
-0.043292,
-0.010642,
0.006385,
-0.037907,
-0.020540,
-0.026299,
-0.019214,
-0.027865,
-0.011422,
-0.054784,
-0.033143,
0.023423,
0.045686,
-0.016438,
-0.019464,
-0.023907,
-0.028188,
0.020860,
0.004814,
-0.005389,
-0.042519,
-0.013536,
0.013235,
-0.039527,
-0.021924,
-0.062526,
-0.018234,
-0.006362,
-0.017041,
-0.071189,
-0.047473,
-0.011937,
-0.015663,
-0.014422,
-0.000325,
-0.036845,
-0.004007,
0.018819,
-0.009486,
-0.010403,
0.022902,
0.022042,
0.015585,
0.035399,
0.047478,
0.005220,
0.014544,
0.010957,
-0.001800,
0.035603,
0.023029,
-0.031101,
0.026064,
0.014803,
0.039160,
-0.037131,
-0.003143,
0.003179,
-0.021676,
-0.017560,
-0.013777,
0.006177,
-0.006594,
0.021276,
-0.032585,
-0.005399,
-0.023710,
-0.040328,
0.036586,
0.010851,
0.009654,
0.014916,
-0.039284,
-0.050225,
-0.006468,
-0.046984,
-0.035954,
0.002862,
0.000883,
-0.010073,
-0.050537,
0.015524,
-0.053705,
-0.003975,
0.032772,
0.026114,
0.036917,
0.011595,
-0.048435,
-0.047147,
-0.038895,
-0.041959,
-0.044694,
-0.045743,
-0.028724,
-0.052427,
-0.036351,
-0.067482,
-0.003519,
0.006404,
-0.043689,
0.003065,
-0.071658,
-0.038500,
0.012157,
0.020037,
-0.013731,
-0.017195,
-0.010185,
-0.005480,
-0.024977,
0.030648,
-0.028171,
0.015703,
0.008749,
-0.013807,
0.043292,
0.015064,
-0.010219,
-0.001096,
0.005171,
0.033371,
-0.010447,
-0.025608,
-0.034933,
-0.024291,
-0.014479,
0.008266,
-0.023824,
0.009993,
-0.015630,
0.007236,
0.017333,
-0.036965,
-0.011035,
0.023659,
0.027850,
-0.006840,
-0.037891,
-0.011197,
-0.014026,
-0.027714,
0.005948,
-0.055794,
-0.024164,
0.000828,
0.024505,
-0.005901,
-0.017235,
-0.049021,
-0.016063,
-0.027678,
-0.061821,
-0.021660,
-0.055849,
-0.014938,
0.005434,
-0.002148,
-0.019329,
0.007399,
-0.010104,
0.004817,
-0.004041,
-0.019127,
-0.037090,
-0.005225,
0.035636,
-0.009397,
-0.023497,
-0.022761,
-0.039454,
-0.043995,
-0.025950,
-0.005311,
-0.035471,
-0.009862,
-0.007372,
-0.023365,
-0.003159,
-0.005566,
-0.005516,
-0.001430,
0.002103,
-0.030858,
-0.017200,
-0.005388,
-0.025641,
-0.042495,
-0.024481,
0.032583,
0.021599,
-0.003370,
0.006280,
-0.023799,
0.005875,
-0.003986,
-0.009477,
0.023949,
0.029209,
0.014254,
0.033855,
-0.023856,
0.009452,
0.016369,
0.013789,
0.018710,
-0.021971,
-0.035658,
-0.042659,
-0.039972,
-0.036741,
-0.014492,
-0.023602,
-0.020988,
0.001639,
0.009393,
-0.012595,
-0.025301,
-0.009346,
-0.028247,
-0.007819,
-0.004769,
0.024946,
-0.009460,
-0.028146,
-0.015939,
0.028498,
-0.000294,
-0.023567,
0.019929,
0.001307,
-0.034044,
0.011542,
-0.002509,
0.002696,
-0.009889,
0.007444,
-0.028418,
0.019265,
-0.005829,
0.018386,
-0.034394,
0.007903,
-0.044808,
-0.039390,
0.006474,
0.014462,
-0.021931,
0.034050,
-0.017736,
-0.011700,
-0.009895,
0.008336,
0.012484,
0.027370,
0.035051,
-0.001452,
-0.036316,
0.035578,
-0.017278,
0.037098,
0.052745,
-0.026925,
0.027399,
0.004705,
0.000488,
0.024416,
-0.021205,
0.005651,
0.008693,
0.024929,
-0.025070,
0.030579,
-0.012902,
-0.056989,
0.016901,
-0.027184,
-0.016698,
-0.045795,
-0.027924,
-0.002574,
0.019574,
-0.050323,
0.006979,
-0.020862,
0.014078,
0.011803,
0.027534,
-0.040477,
-0.002080,
0.025267,
0.000774,
0.017095,
-0.030181,
-0.025949,
0.023227,
0.000807,
0.028382,
-0.029768,
0.029065,
0.016081,
-0.019224,
-0.008155,
0.005930,
0.015763,
-0.023051,
-0.024494,
-0.028018,
-0.013965,
0.020326,
-0.023230,
-0.019064,
-0.018211,
-0.017569,
-0.030586,
-0.069600,
0.004295,
-0.015524,
-0.035688,
-0.015471,
-0.011298,
-0.046464,
0.001774,
-0.042619,
-0.032002,
-0.032059,
0.018084,
-0.041650,
-0.038188,
0.000658,
0.012040,
-0.014671,
-0.013504,
0.000463,
-0.003824,
-0.019989,
-0.026515,
-0.068141,
0.015702,
-0.057560,
-0.057477,
-0.088986,
-0.008696,
-0.008661,
-0.012181,
0.003357,
-0.056743,
-0.035573,
-0.055696,
-0.023420,
0.022856,
-0.024650,
-0.036210,
-0.003982,
-0.059866,
0.007572,
-0.064070,
-0.006117,
0.007270,
-0.046531,
-0.080027,
-0.015428,
0.000588,
0.017308,
0.002551,
0.019367,
-0.011593,
0.018909,
0.027231,
0.029479,
0.007345,
0.016122,
0.036962,
0.013679,
0.007081,
-0.018065,
0.031739,
0.010624,
0.022086,
0.011241,
0.033414,
0.029362,
-0.011109,
0.024933,
0.018801,
-0.033012,
-0.002986,
0.027410,
0.042463,
0.004772,
-0.020013,
-0.064807,
0.032009,
-0.006606,
-0.021005,
-0.023014,
-0.026125,
0.030643,
0.000265,
-0.010641,
-0.027632,
-0.026597,
-0.063591,
0.005210,
0.018937,
0.022984,
0.012483,
-0.012357,
0.005244,
0.028169,
-0.002697,
0.021623,
0.024342,
-0.029466,
-0.002473,
-0.022230,
-0.025409,
-0.008330,
-0.021865,
-0.013945,
-0.003914,
0.028718,
0.008899,
-0.012524,
0.019479,
-0.008281,
-0.017155,
-0.000377,
0.023444,
0.013084,
0.008709,
-0.020938,
-0.013082,
-0.025566,
-0.026280,
0.016037,
-0.028644,
-0.017217,
-0.053432,
-0.039382,
0.020283,
0.014489,
-0.009427,
-0.036628,
-0.072869,
-0.046908,
-0.036995,
-0.058111,
-0.032323,
-0.041592,
-0.051530,
-0.059695,
-0.023208,
-0.026462,
-0.073683,
-0.040313,
0.000666,
-0.063775,
-0.061600,
-0.025899,
-0.052931,
-0.072171,
-0.029997,
-0.074564,
-0.065130,
-0.041307,
-0.069691,
0.006322,
-0.065959,
-0.031610,
-0.020564,
-0.054512,
-0.003337,
-0.010986,
-0.012183,
0.004391,
-0.045760,
-0.023209,
-0.084653,
-0.073137,
-0.051265,
-0.030996,
-0.062170,
-0.041310,
-0.109670,
-0.023242,
-0.015095,
-0.074698,
-0.089179,
-0.065399,
-0.010484,
-0.068732,
-0.102310,
-0.068400,
-0.004121,
-0.050722,
-0.045539,
-0.063802,
-0.035606,
-0.029272,
-0.044347,
-0.048606,
-0.097022,
-0.053181,
-0.090314,
-0.095118,
-0.043134,
-0.072295,
-0.054744,
-0.052309,
-0.011493,
-0.047847,
-0.030829,
-0.040307,
-0.058059,
0.033231,
-0.000339,
-0.076213,
-0.010192,
-0.030749,
0.011453,
0.004752,
-0.025617,
-0.017424,
-0.007936,
0.013772,
0.007048,
-0.046092,
-0.084246,
-0.037578,
-0.026782,
0.013933,
-0.046137,
-0.110190,
-0.083457,
0.014313,
-0.056897,
0.042028,
0.030610,
0.042769,
0.043504,
-0.075206,
-0.032498,
0.067622,
-0.007259,
0.051449,
-0.039501,
-0.018788,
0.046370,
0.012835,
-0.005919,
-0.010594,
-0.064290,
0.028431,
-0.012591,
-0.025959,
-0.054554,
0.024723,
-0.016899,
-0.044302,
-0.013250,
-0.055428,
-0.073340,
-0.061822,
-0.027121,
-0.016396,
-0.041697,
-0.010021,
-0.053093,
-0.039403,
-0.022370,
-0.003855,
-0.034604,
-0.030244,
-0.062885,
-0.003633,
-0.055534,
-0.096808,
-0.062632,
-0.058196,
-0.047904,
-0.044096,
-0.039110,
-0.107190,
-0.092901,
-0.073204,
-0.052611,
0.066471,
0.063113,
0.003343,
0.019970,
-0.036529,
-0.000756,
-0.004079,
-0.001841,
0.046403,
-0.017167,
0.013051,
0.047963,
-0.021142,
-0.000627,
0.033733,
-0.015452,
-0.046958,
0.002632,
0.012584,
0.016210,
-0.023592,
-0.018773,
0.022979,
-0.021285,
0.028267,
-0.001234,
-0.011249,
0.010356,
-0.017823,
0.029020,
-0.065102,
-0.080000,
-0.049920,
-0.027571,
-0.023519,
-0.024581,
-0.077207,
-0.063317,
0.027840,
0.067892,
-0.012067,
-0.061029,
-0.005509,
0.048248,
0.009598,
-0.021364,
-0.056967,
-0.056180,
-0.041926,
-0.050108,
-0.089793,
-0.034136,
-0.037140,
0.003321,
-0.016040,
0.029561,
0.006897,
-0.033684,
-0.012873,
-0.016237,
-0.063587,
0.006927,
-0.038233,
0.015728,
-0.005586,
-0.009130,
-0.013861,
-0.030299,
0.013314,
0.001982,
-0.012909,
-0.022629,
0.003363,
-0.079236,
0.023821,
-0.021289,
-0.003793,
0.079810,
-0.001750,
-0.014891,
-0.070881,
0.000307,
-0.017973,
-0.031898,
0.010641,
-0.094130,
0.030822,
-0.016239,
-0.031815,
0.024836,
-0.007901,
-0.016930,
-0.031550,
-0.051617,
-0.015279,
-0.024084,
-0.043034,
-0.067682,
-0.034755,
-0.031410,
0.026119,
0.017765,
0.043586,
0.021489,
0.010886,
0.060283,
0.005213,
0.008351,
0.047377,
0.024587,
0.000693,
-0.081170,
-0.057823,
-0.009986,
-0.050065,
-0.020543,
-0.047711,
-0.024890,
-0.037888,
-0.005398,
-0.055841,
0.013598,
0.037045,
0.004609,
-0.028940,
-0.005064,
0.017710,
0.007777,
0.003473,
-0.071840,
-0.039230,
-0.036194,
-0.046639,
-0.050840,
-0.081172,
-0.060843,
-0.037000,
-0.009649,
-0.026040,
-0.089092,
-0.005161,
0.010808,
-0.002458,
-0.043521,
-0.051452,
-0.039587,
-0.036220,
-0.042249,
-0.080354,
-0.090863,
-0.022139,
0.017363,
0.032357,
0.027827,
0.030260,
-0.022559,
0.024938,
-0.031584,
0.003617,
0.015535,
-0.015467,
0.008372,
-0.021358,
-0.028617,
0.021043,
-0.015864,
0.005243,
-0.000884,
-0.016207,
0.030913,
-0.022321,
0.023105,
0.007994,
0.030653,
-0.002314,
0.048613,
0.015956,
0.064691,
0.019061,
0.025117,
0.021180,
-0.048021,
0.008770,
-0.048411,
-0.046471,
0.028457,
-0.040825,
0.015827,
-0.016383,
-0.047141,
-0.021409,
-0.059079,
0.007932,
0.008767,
0.026498,
-0.064349,
-0.062353,
0.022103,
-0.004347,
-0.007518,
0.069971,
-0.007858,
0.041025,
-0.003573,
0.015753,
-0.009557,
-0.053277,
0.058867,
-0.004647,
-0.015174,
0.019614,
0.001632,
-0.029560,
0.002322,
-0.051784,
-0.037978,
0.004809,
-0.026717,
-0.054368,
-0.010632,
-0.046271,
0.001169,
-0.016177,
0.006694,
0.030496,
0.027537,
-0.038348,
-0.017621,
-0.052584,
-0.029941,
0.041529,
0.055781,
-0.019205,
0.000855,
0.013105,
-0.009865,
-0.030435,
-0.083646,
-0.003544,
-0.043701,
0.000956,
-0.065685,
-0.040139,
-0.077155,
-0.071528,
-0.053756,
-0.017735,
-0.067479,
-0.057099,
-0.039890,
-0.001506,
-0.011850,
0.023275,
-0.013786,
0.001994,
0.030051,
-0.009836,
0.019742,
-0.024220,
-0.027164,
-0.028554,
0.024693,
0.014954,
-0.015480,
0.020073,
0.019591,
-0.014309,
-0.020866,
-0.011885,
0.001604,
0.016545,
-0.015605,
0.021174,
-0.038714,
0.031746,
-0.076028,
-0.094068,
-0.082988,
-0.099860,
-0.108430,
-0.079870,
-0.054974,
-0.129700,
-0.093130,
-0.049602,
-0.086740,
-0.069578,
-0.002879,
0.027078,
-0.020294,
-0.031067,
-0.028035,
-0.003439,
-0.006939,
0.017752,
-0.072367,
-0.035958,
0.006178,
-0.036702,
0.035893,
-0.019151,
-0.004730,
0.015762,
-0.086427,
-0.015459,
-0.042995,
0.016360,
-0.031499,
-0.009590,
-0.007963,
-0.054280,
-0.000066,
0.012845,
0.002156,
0.004657,
-0.034725,
-0.030804,
0.008920,
0.030282,
0.018192,
-0.034881,
-0.028055,
-0.002279,
-0.027592,
0.026713,
-0.033561,
-0.035889,
0.014043,
0.002371,
0.015435,
-0.010109,
-0.018795,
0.030107,
0.038354,
0.036441,
-0.057890,
-0.022093,
0.011128,
0.006443,
0.021092,
-0.063171,
-0.042134,
0.004635,
-0.056544,
-0.024554,
-0.070092,
-0.030942,
-0.010611,
-0.057194,
-0.089375,
-0.083638,
-0.018363,
-0.000691,
0.012379,
-0.046058,
-0.054743,
-0.036262,
-0.053057,
-0.025198,
-0.064256,
-0.000599,
-0.079627,
-0.085429,
-0.051346,
-0.070279,
-0.028023,
-0.025530,
-0.041170,
-0.053974,
-0.044456,
-0.039166,
-0.086368,
-0.096636,
-0.077518,
-0.036659,
0.022576,
-0.032693,
-0.022780,
-0.064037,
-0.052742,
-0.024185,
-0.042446,
-0.050115,
-0.023867,
-0.009362,
0.037514,
-0.054580,
-0.056252,
-0.010618,
0.012764,
-0.038815,
-0.032759,
-0.060240,
-0.106650,
-0.042518,
-0.065961,
-0.085049,
-0.065252,
-0.056772,
-0.082152,
-0.020972,
-0.058474,
-0.041353,
-0.045998,
-0.021147,
-0.061671,
-0.043867,
0.017616,
-0.039229,
-0.032437,
-0.039720,
0.006772,
0.011402,
-0.004077,
-0.041967,
-0.016219,
-0.049440,
-0.029561,
-0.052629,
-0.008493,
-0.048828,
-0.019446,
-0.005527,
-0.032274,
-0.062672,
0.029904,
0.008331,
-0.005983,
0.030781,
-0.013144,
0.037480,
0.009130,
0.030892,
0.026023,
0.017698,
0.002080,
0.021240,
-0.005578,
0.029303,
0.038669,
0.008819,
-0.019341,
-0.005567,
0.018400,
-0.029819,
0.009585,
0.032484,
0.039239,
0.020712,
0.000818,
-0.003247,
-0.030275,
0.045249,
0.010574,
-0.039310,
-0.030468,
-0.021338,
0.015738,
-0.027216,
0.021289,
-0.041412,
-0.083177,
0.049648,
-0.023577,
-0.004666,
-0.027383,
-0.029550,
-0.013014,
-0.007565,
-0.023944,
0.033349,
-0.034902,
-0.020042,
-0.049221,
-0.086717,
-0.013805,
-0.016454,
0.006785,
-0.049876,
-0.024289,
0.011401,
-0.023425,
-0.019938,
0.021902,
-0.035057,
0.003626,
0.002884,
-0.058480,
0.015112,
-0.043430,
-0.050589,
-0.058581,
-0.024904,
-0.000259,
-0.044764,
0.003805,
-0.037003,
-0.058437,
-0.019618,
-0.069762,
0.029251,
-0.013355,
-0.003378,
-0.019054,
0.027948,
-0.003363,
0.011268,
0.028736,
0.005016,
-0.014363,
0.004237,
-0.005970,
0.008868,
0.005692,
0.003342,
0.005756,
-0.000910,
-0.008848,
0.016678,
-0.008398,
0.009054,
0.003536,
0.022629,
0.036281,
0.018155,
-0.057568,
-0.032334,
0.016722,
-0.048125,
-0.010144,
-0.027241,
-0.077488,
-0.061845,
-0.030432,
-0.041312,
-0.048719,
-0.083671,
-0.055943,
-0.034130,
-0.046502,
0.007791,
-0.034053,
-0.065478,
-0.098916,
-0.029951,
-0.070901,
-0.044828,
-0.051434,
-0.030578,
-0.025536,
-0.103080,
-0.115890,
0.062864,
0.101010,
0.056239,
-0.198330,
-0.092936,
-0.125370,
0.134990,
0.100830,
-0.025322,
-0.124740,
-0.071357,
0.024019,
0.093454,
-0.177110,
-0.058071,
0.042092,
0.073287,
0.012893,
-0.021833,
0.191410,
0.138670,
0.108140,
0.100340,
-0.006068,
-0.016527,
0.011284,
0.030606,
0.039942,
-0.043749,
-0.018146,
-0.021614,
0.027650,
0.019834,
-0.009766,
0.011204,
0.018357,
-0.033070,
-0.013594,
0.028611,
0.028185,
0.019487,
-0.009147,
-0.036513,
0.010813,
0.022758,
-0.000257,
-0.025240,
0.039993,
-0.120740,
-0.215570,
-0.128090,
-0.149120,
-0.238920,
-0.258290,
-0.071704,
-0.191300,
-0.066170,
-0.088862,
-0.097752,
-0.019683,
0.006494,
-0.067716,
0.001610,
0.042470,
-0.020759,
0.002390,
-0.003187,
0.053285,
0.131580,
0.127440,
0.029396,
-0.027577,
0.079519,
0.058836,
0.010246,
0.004554,
-0.062190,
-0.050418,
0.023782,
0.042183,
-0.023620,
-0.005000,
-0.053871,
0.043986,
0.027868,
0.024048,
0.018489,
-0.021984,
0.007194,
-0.041200,
-0.034861,
-0.009838,
0.026589,
0.004533,
-0.004023,
0.012260,
0.007397,
0.015817,
-0.008537,
0.070993,
-0.000217,
-0.042510,
-0.029047,
-0.027567,
0.063661,
0.094910,
0.089455,
0.022815,
0.125820,
0.139910,
0.107080,
0.019682,
0.118000,
0.062448,
0.110200,
0.033109,
0.008683,
0.108990,
-0.069835,
0.046963,
-0.032928,
0.073023,
0.116280,
0.130790,
-0.036393,
0.047280,
0.049119,
0.101520,
-0.020500,
-0.040543,
0.000090,
-0.073906,
0.025154,
-0.125340,
-0.103910,
0.074437,
-0.006518,
0.018011,
-0.066171,
0.072536,
0.070143,
0.027751,
0.035411,
-0.019198,
0.056699,
0.093151,
0.039296,
-0.037561,
0.122050,
0.073937,
0.061018,
-0.017485,
0.090133,
0.006021,
0.077311,
0.116940,
-0.034163,
-0.011196,
0.119460,
0.055841,
0.090423,
0.052372,
-0.021703,
0.023333,
-0.007413,
0.099710,
0.040734,
0.007469,
-0.093599,
0.033424,
0.071635,
0.077479,
0.049010,
0.091887,
-0.015722,
-0.013917,
0.085092,
0.224040,
0.004491,
0.057074,
0.012152,
-0.099400,
0.012114,
-0.155610,
-0.005073,
-0.057735,
-0.128000,
-0.026832,
-0.162990,
-0.225890,
-0.216260,
-0.136210,
-0.111940,
-0.226410,
-0.194620,
-0.018059,
-0.169760,
-0.170050,
0.103300,
0.116810,
-0.081215,
-0.110970,
-0.141040,
-0.010358,
0.093608,
0.060587,
-0.002384,
-0.211230,
-0.084904,
0.133960,
-0.142770,
-0.202500,
-0.052635,
-0.080669,
0.016845,
-0.121300,
-0.176140,
-0.061280,
-0.186880,
-0.085542,
-0.134900,
-0.136920,
-0.107330,
-0.053673,
-0.011261,
0.090807,
0.061377,
-0.016311,
-0.039687,
0.055109,
0.052302,
0.021936,
-0.074977,
0.057010,
0.120360,
-0.013690,
0.060557,
0.025388,
0.056958,
0.026804,
0.000779,
0.061110,
0.050194,
0.026365,
0.074014,
0.072051,
0.040965,
-0.005522,
0.003669,
0.085899,
0.043120,
0.094438,
0.052556,
0.036580,
0.122510,
-0.028767,
-0.031445,
0.021542,
0.024321,
0.117760,
-0.008549,
0.061213,
0.026191,
-0.046459,
0.063262,
0.028565,
0.021833,
0.013689,
-0.035274,
0.146360,
0.005417,
-0.109470,
-0.075979,
0.002277,
-0.093009,
-0.038482,
-0.061104,
0.099074,
-0.030584,
-0.043745,
-0.114360,
-0.027444,
-0.097517,
-0.086095,
-0.111780,
-0.039006,
-0.077399,
-0.012207,
-0.019567,
0.042633,
0.040394,
0.044394,
-0.072269,
-0.047063,
0.024302,
0.176320,
0.071184,
0.016447,
-0.025235,
-0.002926,
-0.015281,
-0.013507,
-0.068340,
-0.002624,
-0.053449,
-0.106540,
-0.013300,
-0.091294,
-0.073635,
-0.145800,
-0.053459,
-0.120470,
0.054971,
0.126300,
-0.040104,
0.019871,
0.030413,
0.134580,
0.144950,
0.031915,
0.063924,
-0.001691,
0.005260,
0.119980,
0.057675,
-0.005682,
0.003053,
0.083230,
-0.006767,
0.023795,
0.028541,
0.001895,
-0.062405,
-0.066969,
-0.047327,
0.032817,
0.010131,
-0.005707,
0.066993,
-0.025819,
-0.026329,
0.016592,
-0.208810,
0.011348,
-0.018192,
0.022634,
-0.022744,
-0.099506,
-0.113630,
-0.119400,
-0.056071,
-0.139570,
0.023485,
-0.060219,
-0.039585,
-0.049436,
0.143700,
0.110780,
-0.011213,
0.073772,
0.047787,
0.007718,
0.029730,
-0.085728,
0.104390,
0.032756,
-0.084151,
0.038832,
-0.046205,
-0.053767,
-0.039581,
-0.081161,
0.199690,
-0.065897,
0.052121,
0.051517,
-0.058095,
-0.175860,
-0.104210,
0.011441,
0.075594,
0.037946,
-0.099079,
0.002584,
0.105800,
0.172930,
0.121720,
0.005111,
0.011747,
0.141590,
0.183690,
0.103950,
0.023406,
-0.012128,
0.021287,
0.017335,
0.034099,
-0.021066,
-0.055810,
-0.038462,
-0.005810,
-0.010359,
0.010032,
-0.010709,
0.026140,
0.009621,
0.020194,
-0.023450,
-0.003365,
0.012019,
-0.039003,
-0.001687,
0.025602,
0.010073,
0.031813,
0.024911,
0.036930,
-0.032622,
-0.016456,
0.023000,
0.018845,
-0.013596,
-0.027260,
-0.087797,
0.061961,
-0.114620,
-0.109870,
-0.030925,
0.022447,
-0.183640,
-0.105620,
-0.288760,
-0.224960,
0.038422,
-0.099867,
-0.009078,
-0.002980,
-0.119360,
0.072424,
0.018239,
0.014604,
-0.070738,
-0.012923,
0.048222,
0.107340,
0.121680,
0.094312,
0.098527,
-0.085189,
-0.072012,
0.011511,
0.040168,
0.017705,
-0.094469,
-0.076854,
-0.042576,
-0.029710,
-0.122120,
-0.041336,
-0.046107,
-0.053907,
-0.063076,
-0.198920,
-0.028932,
-0.057832,
-0.020229,
-0.116740,
-0.108080,
0.027741,
0.043323,
0.042650,
-0.133050,
-0.226580,
0.058503,
0.016722,
0.007683,
0.062567,
0.073090,
0.032773,
0.004417,
0.080746,
0.095910,
0.000038,
0.085707,
0.095403,
0.029219,
0.133490,
-0.001327,
0.018780,
0.048408,
-0.073578,
0.016607,
-0.007925,
0.007713,
-0.014413,
0.011888,
0.052160,
0.118810,
-0.038045,
0.017838,
0.004206,
-0.000284,
0.026237,
0.025436,
0.008153,
-0.055032,
-0.011083,
-0.003902,
0.018795,
-0.016290,
0.021629,
-0.017691,
-0.044239,
-0.027466,
0.023666,
-0.021274,
-0.054103,
-0.030889,
0.026941,
0.032871,
0.025141,
0.016141,
0.033827,
0.163390,
0.120840,
0.139880,
0.009902,
0.114130,
0.100020,
0.001508,
-0.021719,
0.006131,
0.171760,
0.008053,
0.087235,
-0.098986,
-0.127450,
-0.028949,
-0.163250,
-0.128270,
-0.139770,
-0.149780,
-0.067771,
-0.104890,
-0.015657,
-0.004169,
-0.095084,
-0.095771,
0.166900,
-0.065722,
-0.021181,
0.018523,
0.044601,
0.007430,
-0.123830,
0.014183,
-0.023473,
0.110360,
-0.077783,
-0.024293,
-0.054054,
-0.034976,
0.031070,
-0.260430,
-0.268860,
-0.232080,
-0.175350,
-0.076670,
-0.084030,
-0.112900,
-0.110860,
-0.044443,
-0.053604,
-0.064850,
0.069322,
-0.002569,
-0.028586,
-0.049061,
-0.086665,
0.121490,
0.012153,
0.036607,
-0.011840,
-0.041749,
0.087382,
-0.015623,
-0.003668,
-0.015430,
0.026931,
-0.006976,
-0.030840,
0.000353,
0.035846,
0.017484,
0.003494,
0.027753,
0.040420,
0.015350,
-0.031478,
-0.042874,
0.035645,
0.131200,
0.002500,
0.004046,
0.027051,
-0.072395,
0.027404,
0.013142,
0.123410,
0.130000,
-0.030031,
-0.016797,
0.123370,
0.044926,
-0.039986,
-0.039656,
0.062988,
-0.043169,
-0.128770,
-0.111530,
-0.054906,
0.002940,
-0.053435,
0.035339,
0.048173,
0.064978,
-0.022356,
0.121850,
0.164400,
0.068423,
0.096984,
0.151530,
0.259540,
0.068583,
-0.027803,
-0.006967,
0.084868,
0.057532,
-0.038822,
-0.064622,
-0.134240,
-0.087800,
-0.045908,
0.051077,
0.097111,
0.054608,
0.018779,
0.007775,
0.011011,
-0.058233,
-0.129610,
-0.125370,
-0.208350,
0.004163,
-0.005019,
-0.181980,
-0.134410,
-0.037170,
-0.117240,
-0.207540,
-0.152060,
-0.172770,
-0.146000,
-0.041635,
-0.096967,
-0.109060,
-0.123590,
-0.107600,
0.032686,
-0.038193,
-0.044867,
-0.014754,
-0.093321,
0.020008,
0.040667,
0.051388,
0.024620,
0.049814,
0.004871,
0.032020,
0.062199,
0.030414,
-0.003091,
0.045836,
0.013250,
0.048117,
0.058653,
0.054446,
0.000611,
0.034858,
0.042282,
0.048370,
0.015068,
0.033113,
0.019525,
0.015140,
0.044422,
0.067538,
0.017779,
0.030733,
0.040209,
0.024576,
-0.028166,
-0.083564,
0.034479,
0.082315,
0.022755,
-0.118910,
-0.005331,
0.060482,
0.213880,
0.125890,
-0.050387,
0.040503,
0.230720,
0.238700,
0.116680,
0.003776,
0.096769,
0.087026,
0.257680,
0.141430,
0.007884,
-0.034921,
0.057483,
0.030020,
0.028690,
-0.004756,
-0.105400,
-0.033137,
-0.035246,
-0.107370,
0.044943,
-0.064641,
-0.059780,
-0.122510,
-0.127240,
0.061118,
-0.050012,
-0.042240,
-0.009387,
-0.010081,
0.127580,
0.045793,
0.068688,
-0.019588,
-0.020451,
0.160670,
0.012905,
-0.003736,
-0.065698,
-0.060018,
-0.020411,
-0.023966,
-0.023191,
-0.014618,
-0.004771,
-0.048704,
-0.003919,
0.058238,
0.034626,
0.032365,
0.010978,
-0.047755,
0.020039,
-0.054408,
-0.030942,
0.024613,
-0.044617,
-0.015952,
-0.005470,
0.024109,
-0.013976,
0.074910,
0.002809,
0.038498,
0.124790,
0.072761,
0.048267,
-0.030360,
-0.095473,
-0.125460,
-0.112190,
-0.062997,
-0.090067,
-0.099461,
-0.030284,
-0.052325,
0.069367,
0.101200,
0.008901,
-0.022935,
0.050789,
-0.044607,
0.060949,
0.058985,
0.118640,
0.047436,
0.066373,
0.132180,
-0.070029,
0.012966,
0.019223,
0.010928,
-0.039125,
0.047932,
0.021252,
0.064257,
-0.056324,
-0.043068,
-0.104530,
-0.145290,
0.087222,
0.161220,
-0.003856,
-0.175700,
-0.182960,
0.011879,
0.053430,
-0.241050,
-0.150820,
-0.213750,
-0.099858,
0.034755,
0.025879,
0.010602,
-0.034476,
0.038372,
0.006275,
0.010561,
0.035265,
0.006206,
-0.022613,
0.020292,
0.009939,
0.001085,
0.030312,
0.019190,
-0.027960,
-0.009225,
-0.016210,
0.024575,
0.044974,
0.041536,
-0.016663,
0.020496,
-0.012669,
-0.032570,
-0.178050,
0.038095,
-0.014132,
-0.010030,
-0.039186,
-0.029283,
0.041577,
0.036927,
0.048417,
-0.032503,
-0.153770,
-0.039747,
0.036701,
-0.060689,
-0.008021,
-0.124450,
0.042098,
0.050841,
-0.012533,
-0.004246,
0.003064,
-0.031621,
-0.043224,
0.111930,
0.000245,
0.004657,
-0.083188,
-0.002960,
0.071446,
0.027122,
-0.014492,
-0.000659,
0.011426,
-0.015707,
-0.003140,
-0.035191,
-0.045181,
-0.005839,
-0.044911,
0.018430,
0.033239,
-0.013925,
-0.027117,
-0.017536,
-0.008456,
0.022510,
-0.021889,
-0.004839,
0.026418,
0.077192,
-0.031726,
-0.116000,
-0.082511,
-0.111730,
0.033577,
-0.015382,
-0.037490,
-0.160570,
-0.138100,
-0.028462,
0.085774,
0.018838,
0.135730,
0.125570,
0.002415,
0.088638,
0.021222,
0.146580,
0.151030,
-0.086740,
-0.062826,
-0.008755,
0.050719,
0.031987,
-0.021752,
0.025139,
0.000477,
-0.165260,
-0.098528,
0.007416,
0.025422,
-0.038409,
-0.210810,
-0.124070,
0.090104,
0.063358,
-0.100200,
-0.177730,
-0.055786,
0.057904,
-0.061595,
-0.235180,
-0.117130,
-0.177250,
-0.063839,
-0.051971,
-0.221520,
-0.263380,
-0.105570,
-0.014082,
0.079178,
-0.019171,
-0.018712,
0.002975,
0.120060,
0.044983,
-0.158730,
-0.169650,
-0.156040,
0.069042,
0.081898,
-0.076812,
-0.016046,
-0.054488,
0.118360,
0.056839,
0.007128,
0.029452,
0.134230,
0.052175,
0.174140,
0.094910,
-0.021072,
-0.016815,
0.114360,
-0.098523,
-0.025153,
-0.056121,
0.042501,
0.108610,
0.023051,
-0.048955,
0.010565,
-0.108680,
-0.065909,
-0.016410,
0.015659,
-0.067908,
-0.117040,
0.046344,
0.015746,
-0.089320,
0.052427,
0.046569,
0.049849,
-0.002272,
-0.079127,
0.013318,
0.034505,
0.129470,
0.044551,
0.007189,
0.023436,
-0.020123,
-0.095972,
0.062783,
0.106430,
0.011675,
-0.011007,
-0.130270,
0.131300,
0.014667,
0.019775,
-0.033538,
-0.104030,
0.094681,
0.064409,
-0.007760,
0.005682,
0.006837,
0.258280,
0.162250,
0.245350,
0.146140,
0.083199,
0.078878,
0.064442,
-0.071665,
-0.196830,
0.048796,
0.116450,
-0.130370,
-0.029376,
-0.122020,
0.072703,
0.126250,
-0.003501,
0.007250,
-0.045860,
0.043772,
0.120540,
0.072693,
-0.102730,
0.013279,
0.099414,
0.181560,
0.023650,
-0.176980,
-0.140810,
0.041658,
0.155520,
0.023998,
-0.074347,
0.037744,
-0.013955,
0.192500,
0.116300,
-0.025073,
0.041386,
0.144910,
-0.004975,
-0.057206,
-0.083556,
-0.071062,
0.117030,
0.012733,
-0.066280,
0.018938,
-0.032110,
0.058662,
-0.041892,
-0.004221,
0.117410,
0.046115,
-0.023080,
0.022773,
0.111980,
0.097960,
0.183320,
0.001731,
0.044517,
0.040431,
0.137360,
0.037753,
0.085283,
-0.009552,
-0.060833,
0.107760,
0.054363,
0.044599,
0.088420,
0.004473,
0.024933,
-0.065090,
0.057377,
0.047790,
-0.043814,
-0.085125,
-0.106660,
-0.117590,
-0.028372,
-0.101810,
0.105350,
-0.096040,
-0.143290,
0.038166,
-0.029632,
-0.042750,
-0.032754,
-0.186540,
0.076703,
0.082381,
-0.050331,
-0.101980,
-0.238800,
0.023406,
-0.024748,
-0.024921,
-0.060910,
-0.145730,
0.041734,
-0.108370,
-0.121820,
-0.083821,
-0.108310,
-0.066791,
0.117700,
0.167460,
0.063266,
-0.005621,
0.008022,
0.060953,
0.009107,
-0.075665,
-0.129620,
-0.010891,
0.051255,
0.065142,
-0.099475,
0.022520,
0.015128,
-0.020355,
-0.002231,
-0.023708,
-0.044292,
-0.049705,
-0.066768,
0.128090,
0.079558,
0.047735,
-0.034349,
-0.034701,
-0.068577,
-0.123290,
-0.269650,
-0.006305,
-0.008737,
-0.077299,
-0.150770,
-0.266880,
0.037263,
-0.057749,
0.099060,
0.160330,
-0.185540,
0.004107,
-0.039201,
0.035031,
0.128250,
-0.164110,
-0.012188,
0.042222,
-0.176820,
-0.151350,
-0.348300,
0.017771,
-0.087090,
-0.089848,
-0.032689,
0.032603,
0.039797,
-0.060410,
-0.057110,
-0.183600,
-0.068308,
0.144100,
-0.082487,
-0.113290,
-0.035759,
-0.034392,
0.104620,
0.058544,
-0.016112,
0.032068,
-0.026289,
0.031990,
0.076221,
0.076472,
0.089539,
0.119780,
0.052680,
0.013936,
0.010794,
-0.011625,
-0.009199,
0.033078,
0.051826,
-0.053867,
-0.048545,
0.004974,
0.034559,
0.032443,
-0.052530,
-0.028769,
0.033766,
-0.015057,
-0.000056,
0.000067,
0.070157,
0.016047,
0.007831,
0.009507,
-0.007557,
0.020464,
0.002940,
-0.106010,
-0.074376,
0.053357,
0.001430,
-0.034656,
-0.115020,
-0.009861,
-0.040893,
-0.065894,
0.013468,
0.013772,
0.067635,
0.087928,
-0.018895,
0.049459,
0.008145,
0.004795,
0.091443,
0.045544,
-0.022196,
-0.305880,
-0.280890,
-0.288450,
-0.257550,
-0.138380,
-0.297910,
-0.160410,
-0.006140,
-0.007554,
-0.030763,
-0.046628,
0.047535,
-0.082924,
-0.002792,
-0.033950,
-0.040974,
-0.063343,
0.005241,
0.021948,
-0.039524,
-0.015396,
0.000710,
-0.028959,
0.049232,
-0.000555,
0.023950,
-0.053575,
-0.012650,
-0.049943,
0.120060,
-0.107480,
-0.125200,
-0.089273,
-0.168930,
-0.092902,
-0.010592,
-0.044519,
-0.120460,
-0.071489,
-0.020701,
-0.006024,
0.011651,
0.063957,
0.080715,
0.009944,
-0.003208,
0.005447,
0.054549,
0.035177,
0.203170,
-0.037212,
0.026565,
-0.139080,
-0.043722,
0.157110,
-0.044747,
-0.007489,
0.037328,
0.004039,
-0.036090,
-0.029910,
-0.038545,
-0.005798,
-0.026162,
0.029720,
-0.039657,
-0.040531,
-0.040051,
-0.009876,
0.002794,
-0.008727,
-0.016325,
-0.011711,
0.013489,
0.026056,
-0.020219,
-0.000382,
-0.015040,
-0.021560,
0.010894,
0.156060,
0.156480,
-0.098892,
-0.080143,
0.040992,
0.184330,
0.069044,
-0.153060,
-0.133040,
0.047744,
0.081139,
-0.057731,
-0.079116,
0.024504,
0.034220,
0.088732,
-0.032436,
0.113300,
0.064570,
0.057566,
0.179960,
0.043649,
0.048472,
0.058107,
-0.017449,
-0.125130,
-0.039577,
0.015614,
0.034914,
-0.125830,
0.026026,
0.136030,
0.105280,
0.128050,
0.069342,
0.068484,
-0.041627,
-0.004049,
-0.040561,
0.075522,
-0.020709,
0.001401,
0.049545,
0.040553,
0.022002,
0.059996,
0.068114,
0.112430,
0.154520,
0.059477,
-0.186130,
-0.160980,
-0.076572,
-0.087357,
-0.039390,
-0.177580,
-0.032551,
0.016256,
0.064090,
0.068730,
-0.176380,
0.010935,
0.073921,
0.012374,
-0.014157,
-0.129950,
0.051541,
0.061821,
0.128850,
-0.044149,
-0.098438,
0.042773,
-0.002245,
0.064809,
0.034693,
0.029460,
-0.025162,
-0.067196,
-0.106050,
0.121070,
-0.025963,
0.016146,
0.010506,
-0.112720,
0.063657,
-0.006007,
0.042475,
0.001497,
-0.012586,
0.136710,
0.146790,
0.094860,
0.033579,
-0.011710,
0.077625,
0.139860,
-0.002357,
0.067478,
0.026578,
0.136790,
-0.038972,
-0.161750,
-0.071967,
0.012554,
0.113550,
0.024304,
-0.035965,
-0.170290,
-0.135710,
-0.014472,
-0.075656,
0.050112,
0.114880,
-0.054779,
-0.052103,
0.111010,
0.067129,
0.291170,
0.142530,
0.129240,
0.095295,
-0.012323,
0.042055,
0.092708,
0.110240,
-0.072184,
0.010280,
0.011689,
0.082518,
0.022984,
-0.005772,
-0.020048,
0.061777,
0.017039,
-0.037313,
0.002332,
0.098495,
-0.010272,
-0.070990,
-0.068932,
0.050419,
0.147420,
0.133520,
0.020698,
0.016371,
0.061930,
0.069783,
0.145650,
0.168850,
0.106300,
-0.066477,
-0.056408,
-0.048940,
-0.051280,
-0.010535,
-0.038073,
0.039678,
-0.054854,
-0.047871,
0.018290,
-0.068909,
0.045352,
-0.077381,
-0.080323,
0.026638,
-0.042884,
0.011660,
-0.034060,
-0.038532,
-0.023161,
-0.030841,
-0.023636,
-0.074239,
-0.071121,
0.032730,
-0.207580,
0.067735,
0.138480,
0.080697,
-0.003423,
-0.156040,
-0.122600,
0.053093,
-0.065851,
-0.045860,
0.005307,
-0.094863,
-0.073358,
0.005232,
0.107540,
-0.052876,
-0.029474,
-0.134180,
0.013324,
-0.032034,
0.080684,
0.084965,
0.010774,
0.077906,
0.010580,
-0.052401,
0.021334,
0.003391,
0.068193,
-0.111460,
0.001662,
0.052182,
0.086046,
-0.017170,
-0.140940,
-0.077094,
-0.026079,
-0.135090,
-0.034238,
-0.025880,
0.055035,
0.065038,
-0.001701,
0.083033,
-0.138810,
0.098741,
0.004413,
0.021274,
-0.061569,
-0.197790,
-0.001014,
-0.050024,
-0.052448,
-0.004426,
-0.003367,
0.020852,
0.026230,
-0.016585,
0.003500,
-0.022839,
-0.012401,
0.002445,
-0.006630,
-0.014188,
-0.018314,
-0.004539,
-0.008272,
-0.014957,
-0.022903,
-0.016011,
0.013321,
0.010567,
-0.011132,
-0.026276,
-0.051026,
0.075683,
0.138730,
0.131410,
0.071670,
0.126860,
-0.055566,
-0.055549,
0.046686,
0.148360,
0.142950,
-0.097354,
0.176210,
0.011731,
-0.034389,
0.093509,
-0.072317,
-0.014682,
0.041292,
-0.052614,
0.050730,
-0.016320,
-0.085430,
-0.073753,
-0.094634,
-0.070880,
0.016113,
0.004799,
-0.032893,
-0.022744,
-0.019791,
0.019409,
-0.008463,
-0.014514,
-0.016056,
-0.004685,
-0.009496,
0.001759,
-0.019803,
-0.004868,
0.022391,
-0.021926,
0.004152,
0.037550,
-0.024903,
-0.017859,
-0.021087,
0.017830,
0.010548,
-0.001242,
-0.032301,
-0.023186,
0.026194,
0.010857,
0.018124,
0.007051,
-0.024615,
-0.006245,
-0.023184,
0.019582,
-0.004638,
-0.019791,
0.019500,
0.018010,
-0.013547,
-0.033998,
-0.006666,
0.023468,
-0.023487,
-0.017208,
-0.021447,
0.015934,
-0.020151,
-0.009451,
0.011125,
-0.019185,
0.026796,
0.026238,
-0.031806,
-0.004142,
-0.037450,
-0.001810,
-0.025536,
-0.026845,
-0.013463,
-0.032681,
0.027548,
-0.029978,
0.008112,
-0.033485,
-0.000723,
-0.004735,
-0.022697,
-0.001865,
-0.021187,
0.026278,
-0.006936,
-0.022900,
-0.017243,
-0.007731,
0.010260,
-0.022914,
0.014837,
0.033932,
0.020023,
-0.032100,
0.006720,
-0.018331,
0.021499,
-0.016397,
-0.006467,
0.013697,
-0.039614,
0.014991,
-0.033392,
0.028900,
-0.041208,
-0.033524,
-0.020669,
-0.013910,
-0.012222,
-0.017936,
-0.006968,
-0.035161,
-0.021801,
-0.024426,
-0.037956,
-0.000299,
-0.007049,
-0.040138,
0.021980,
-0.003048,
0.028723,
0.007570,
-0.015156,
-0.018340,
0.020715,
0.017632,
-0.026467,
0.028281,
0.019542,
-0.022252,
-0.013200,
-0.041347,
0.023957,
-0.023409,
-0.009666,
-0.022978,
-0.004800,
0.015027,
0.028351,
0.015941,
0.041060,
0.014183,
-0.030047,
-0.003963,
0.021505,
0.032251,
-0.003576,
-0.022229,
0.011113,
0.013245,
-0.011162,
0.009617,
0.018708,
0.009463,
-0.026511,
0.025340,
-0.010434,
0.004892,
-0.021106,
-0.007736,
0.007286,
-0.003706,
-0.039642,
-0.034905,
0.010575,
0.022760,
-0.000551,
0.011558,
-0.032511,
-0.015647,
-0.018708,
0.003793,
-0.041280,
-0.025452,
-0.007935,
0.006215,
-0.023159,
0.001150,
-0.032017,
0.006975,
-0.010452,
0.028763,
0.005233,
0.015347,
-0.027643,
-0.006468,
-0.033905,
-0.018329,
0.011064,
-0.040714,
-0.009583,
-0.035180,
-0.005919,
0.022924,
0.003614,
0.022359,
0.006590,
0.000781,
-0.033509,
0.011366,
-0.021233,
-0.001205,
0.025029,
-0.022237,
-0.018620,
-0.007821,
-0.037414,
0.024752,
0.001284,
0.028565,
-0.005444,
-0.004278,
-0.037893,
-0.005500,
0.006706,
-0.035200,
-0.007030,
0.017490,
-0.019518,
0.027080,
0.026369,
0.001083,
-0.023824,
-0.018509,
0.005400,
0.022018,
0.021766,
-0.012020,
-0.020660,
-0.019464,
-0.039432,
-0.020570,
0.025051,
0.013024,
-0.000870,
0.010182,
-0.021464,
0.004490,
-0.030952,
-0.007027,
0.001684,
-0.002566,
0.003092,
-0.017794,
-0.013834,
-0.013797,
0.026811,
0.017068,
0.016550,
-0.036588,
-0.007323,
0.006755,
-0.016305,
0.029276,
0.013058,
0.024477,
-0.040462,
-0.029535,
0.019156,
-0.036239,
0.006566,
-0.022247,
0.011637,
-0.024644,
-0.010623,
-0.009527,
0.025615,
0.021822,
-0.029741,
0.001202,
-0.031499,
0.005076,
0.023553,
0.023701,
-0.004443,
-0.040075,
-0.024151,
0.022998,
0.022197,
0.022248,
-0.038459,
0.020999,
-0.024805,
-0.023527,
-0.006711,
-0.036493,
0.000929,
-0.030077,
0.015860,
0.009632,
0.005914,
-0.008472,
-0.041325,
0.025916,
-0.028096,
0.015883,
-0.039458,
0.013361,
-0.028218,
0.011278,
-0.011448,
-0.004139,
-0.037070,
-0.038526,
0.025347,
0.027684,
0.026563,
0.017309,
0.013401,
0.018648,
-0.002294,
-0.004690,
-0.030743,
0.005271,
-0.008037,
-0.040549,
0.010151,
-0.012828,
0.003174,
0.039726,
0.019953,
0.009977,
0.017466,
-0.025185,
0.027086,
0.014185,
0.016598,
-0.002054,
0.020008,
-0.028416,
-0.029606,
0.008133,
0.000790,
0.013698,
-0.007084,
-0.016304,
0.039570,
0.016950,
-0.020856,
-0.032891,
-0.022216,
0.024423,
-0.028069,
0.001730,
-0.013660,
-0.022515,
-0.015383,
-0.002997,
-0.030302,
-0.011004,
-0.019144,
0.026386,
-0.024922,
-0.003529,
-0.016419,
-0.008645,
-0.035292,
-0.033556,
-0.019585,
-0.009963,
-0.009740,
-0.037266,
-0.026902,
-0.013736,
-0.027117,
-0.011129,
-0.019550,
-0.004767,
0.027745,
-0.007472,
-0.027092,
0.026228,
-0.004088,
0.004130,
-0.026433,
0.023448,
0.009501,
-0.000763,
-0.005111,
-0.037170,
0.000440,
0.020354,
-0.021861,
-0.014884,
-0.005571,
0.017627,
0.005038,
0.015981,
-0.011722,
0.001176,
-0.023441,
0.014069,
-0.029906,
0.000536,
-0.039400,
-0.009454,
-0.002437,
-0.036702,
0.001980,
-0.007694,
0.018542,
-0.004095,
-0.010390,
0.004640,
-0.015793,
0.023703,
-0.024336,
-0.023674,
-0.009576,
0.020673,
0.017765,
-0.035846,
-0.006635,
0.008106,
-0.018142,
-0.027210,
0.007837,
-0.000846,
-0.008141,
-0.023358,
-0.011789,
0.003459,
-0.038989,
-0.033298,
0.027952,
-0.033625,
0.024724,
-0.037337,
-0.019942,
0.011623,
-0.006196,
0.013181,
0.007609,
-0.021467,
-0.000114,
0.001387,
-0.031582,
-0.031137,
0.009128,
-0.020006,
-0.020894,
-0.019177,
-0.026118,
0.016533,
0.002228,
-0.024960,
-0.025148,
0.026657,
0.026297,
-0.020742,
-0.036239,
-0.037836,
-0.005559,
-0.015422,
0.022831,
-0.012535,
0.009647,
-0.008315,
-0.039095,
0.001063,
0.027335,
-0.012098,
-0.021082,
0.017032,
0.023539,
-0.039022,
0.017157,
-0.003083,
0.006162,
-0.017784,
0.004953,
-0.026539,
-0.022007,
0.022616,
-0.016764,
0.012361,
0.024506,
-0.037311,
0.005770,
-0.040621,
0.019262,
-0.023063,
0.023348,
-0.014828,
0.022849,
0.015924,
0.028902,
-0.039321,
-0.004064,
-0.023401,
0.011323,
0.016086,
-0.014455,
0.005766,
0.002277,
0.021311,
0.013281,
0.019440,
-0.011078,
-0.038533,
-0.002231,
0.009275,
0.022473,
0.001290,
0.012031,
-0.036970,
-0.001575,
0.010501,
-0.010970,
-0.037646,
-0.010761,
-0.020102,
0.020824,
0.020241,
0.022584,
0.001351,
-0.005639,
0.027901,
-0.030264,
0.025717,
-0.022304,
-0.007174,
-0.011411,
0.021806,
0.030020,
0.023991,
-0.011323,
-0.017628,
-0.031846,
-0.016336,
0.040497,
0.012761,
0.026683,
0.026941,
0.014100,
-0.016947,
0.027497,
-0.018717,
-0.020357,
-0.016066,
-0.041073,
0.009864,
0.000285,
-0.040354,
0.011508,
0.004879,
-0.002666,
-0.041189,
-0.035837,
-0.019288,
0.022100,
-0.017119,
-0.017031,
-0.016257,
-0.004304,
-0.036276,
0.029342,
-0.007499,
-0.001405,
-0.005208,
0.013849,
-0.031644,
0.013774,
-0.003818,
-0.033571,
0.011348,
-0.033989,
-0.001494,
-0.018318,
-0.025236,
-0.041089,
-0.040647,
-0.025952,
-0.009975,
-0.000957,
-0.038697,
0.012699,
0.005802,
0.021577,
0.001324,
0.017311,
-0.016388,
-0.012896,
-0.014831,
0.012707,
-0.010753,
-0.025601,
-0.035344,
-0.015320,
0.021724,
-0.018674,
-0.025714,
0.003266,
0.001516,
-0.035769,
0.019669,
-0.033349,
-0.004305,
-0.041343,
0.014472,
-0.021176,
-0.036329,
0.016989,
0.024296,
0.023842,
-0.010911,
0.009781,
0.002901,
0.022676,
0.023725,
-0.034075,
0.016560,
-0.002345,
-0.029483,
-0.037243,
0.016354,
-0.032534,
0.006582,
-0.004392,
-0.004619,
-0.006106,
-0.030887,
-0.004075,
0.000199,
-0.000885,
0.001472,
0.039101,
0.003156,
-0.017383,
-0.011323,
-0.023139,
-0.023686,
-0.025025,
-0.004980,
-0.035597,
0.022599,
-0.037866,
0.013636,
0.023909,
0.014121,
-0.028051,
-0.008921,
-0.023885,
-0.035204,
0.028705,
-0.012846,
0.001231,
0.035005,
-0.020358,
0.003354,
0.024806,
-0.011346,
-0.028851,
-0.005114,
0.011432,
0.014447,
0.014656,
-0.018201,
0.015867,
0.019882,
0.005508,
-0.005758,
-0.017978,
-0.024294,
0.015649,
0.000296,
-0.039223,
0.005722,
-0.011803,
-0.001578,
-0.029226,
0.021668,
-0.008814,
-0.026839,
-0.007933,
0.010190,
0.018050,
-0.001466,
0.025977,
0.021312,
-0.005893,
-0.006100,
0.024238,
-0.036176,
0.014976,
-0.035403,
0.028894,
0.027946,
0.013945,
0.004558,
-0.029864,
-0.011045,
0.002242,
-0.011474,
-0.021397,
0.029142,
-0.005618,
0.015965,
-0.029609,
0.014731,
-0.002460,
0.030083,
0.017719,
-0.010042,
-0.009785,
-0.001877,
-0.034391,
0.023210,
-0.031916,
-0.017152,
-0.023160,
-0.012221,
0.029060,
-0.012903,
-0.006083,
-0.029724,
0.027430,
-0.014166,
-0.018089,
-0.012791,
-0.035746,
-0.027844,
-0.016523,
-0.015175,
0.034136,
-0.018104,
-0.031631,
0.010676,
-0.016482,
-0.019810,
0.015330,
-0.001971,
0.005370,
0.013590,
-0.034667,
-0.016212,
-0.032180,
0.015369,
0.021549,
-0.023208,
-0.015765,
0.009076,
-0.022132,
0.028100,
-0.030054,
-0.035936,
-0.013609,
0.010519,
-0.038748,
0.015645,
0.005665,
0.020402,
-0.023058,
-0.005947,
-0.011938,
-0.021678,
-0.034972,
0.024897,
0.012466,
-0.028647,
-0.009586,
-0.032675,
-0.039871,
-0.020780,
-0.014939,
-0.035406,
-0.007781,
0.026398,
0.006039,
0.016087,
0.019530,
0.015113,
-0.004832,
-0.002265,
-0.009967,
-0.021354,
-0.010227,
-0.027427,
-0.016689,
0.002945,
0.009652,
-0.026736,
-0.017416,
-0.005477,
-0.032520,
-0.029055,
0.018415,
-0.012652,
-0.024466,
0.003475,
0.006793,
-0.033804,
0.021609,
-0.016143,
-0.034464,
-0.035467,
0.023724,
-0.027526,
-0.037908,
-0.023552,
0.028064,
0.022548,
-0.013680,
0.006638,
0.017557,
-0.038991,
-0.005554,
0.000739,
-0.016202,
-0.017536,
-0.025882,
-0.039531,
-0.024042,
-0.032649,
-0.024833,
-0.013535,
-0.010580,
-0.014678,
-0.013776,
-0.039253,
-0.027669,
-0.027601,
0.025879,
0.001373,
-0.047416,
0.025008,
0.000710,
-0.045579,
-0.012534,
0.009299,
0.026156,
-0.034191,
-0.007833,
-0.048005,
0.005319,
-0.027160,
-0.029077,
0.028130,
-0.060246,
0.023102,
-0.026804,
0.002366,
0.024194,
0.025805,
-0.026743,
0.006249,
0.019525,
-0.008804,
-0.023631,
0.028614,
-0.022396,
0.010082,
0.012277,
0.022293,
0.006449,
0.029468,
-0.021559,
-0.003921,
0.012456,
0.004811,
-0.025356,
-0.040146,
0.004362,
0.037618,
-0.002873,
-0.020103,
-0.021041,
-0.028753,
-0.041799,
-0.039792,
-0.030071,
-0.035246,
-0.004601,
0.000655,
-0.013561,
-0.062116,
-0.029479,
-0.021587,
-0.002821,
0.004118,
-0.043836,
-0.022686,
0.011999,
-0.029048,
-0.009727,
-0.017668,
-0.018588,
-0.002601,
0.008706,
0.023996,
-0.019749,
0.020166,
-0.035335,
0.027376,
-0.015543,
0.040032,
0.031162,
0.021657,
0.013044,
-0.016103,
0.021869,
0.019656,
0.018977,
-0.011536,
-0.036421,
-0.013525,
0.035547,
-0.030994,
0.011116,
-0.001093,
0.035333,
0.000710,
-0.035369,
-0.034783,
0.022445,
0.019480,
-0.028173,
-0.037357,
0.017658,
-0.000585,
0.020830,
-0.013596,
0.006196,
0.034359,
-0.023022,
-0.008255,
0.001444,
0.008993,
-0.021587,
0.007382,
-0.054201,
-0.006694,
-0.005141,
-0.035538,
-0.050976,
-0.010428,
-0.009726,
0.011909,
0.020524,
-0.030277,
-0.005670,
-0.030662,
0.012580,
-0.015187,
-0.023916,
0.011550,
-0.008550,
-0.009241,
-0.020269,
-0.039326,
0.019317,
-0.028013,
-0.028747,
-0.016087,
0.013967,
-0.025599,
0.026448,
-0.039560,
-0.056521,
0.024014,
0.005293,
0.021728,
-0.045820,
-0.050451,
-0.008312,
-0.029878,
-0.030419,
-0.005091,
-0.012926,
-0.033642,
-0.000697,
-0.034251,
0.003492,
0.026988,
-0.011573,
0.017121,
-0.000160,
-0.036653,
0.033726,
-0.005308,
-0.028799,
-0.003699,
0.023611,
0.029878,
-0.018505,
-0.038507,
0.014642,
-0.037402,
0.011742,
-0.035620,
-0.046505,
-0.023602,
-0.064146,
-0.004042,
-0.041095,
0.026582,
-0.023044,
-0.004262,
-0.035152,
-0.052743,
0.008833,
0.000200,
0.005333,
-0.027661,
-0.033042,
0.009631,
-0.008945,
-0.032403,
-0.033606,
0.005521,
-0.023656,
-0.052306,
0.000753,
0.014094,
-0.035814,
-0.000898,
-0.013769,
-0.000740,
-0.007232,
-0.037713,
-0.052303,
-0.047004,
-0.007809,
0.004191,
-0.055244,
-0.023411,
-0.041011,
-0.015235,
0.005494,
-0.000612,
-0.037007,
-0.012660,
-0.003769,
-0.047748,
-0.022432,
-0.036812,
-0.018383,
0.006960,
-0.019992,
-0.026178,
0.001260,
0.021434,
0.012173,
-0.009604,
-0.029920,
-0.005000,
-0.025596,
-0.027196,
-0.002196,
-0.035588,
-0.002615,
-0.038344,
0.010028,
0.016040,
-0.031898,
-0.028567,
0.001783,
-0.004101,
-0.014082,
-0.029129,
-0.020799,
-0.028047,
0.029723,
-0.010643,
0.008544,
0.013861,
-0.001851,
0.007995,
0.024538,
0.010641,
-0.010629,
-0.001896,
0.020201,
0.007107,
0.002284,
-0.009290,
-0.014735,
0.028326,
0.012640,
0.008550,
-0.043711,
-0.038732,
-0.016363,
-0.033008,
-0.023090,
-0.018955,
-0.034676,
0.011839,
-0.021810,
-0.008245,
0.012033,
-0.006035,
-0.015309,
0.017490,
0.021879,
0.002578,
-0.034972,
0.009093,
-0.026332,
-0.041789,
0.027082,
0.013171,
0.000015,
-0.014734,
0.015135,
-0.025874,
-0.009167,
0.022414,
-0.015045,
0.010490,
0.010807,
0.010132,
-0.019050,
-0.012193,
-0.025777,
-0.021562,
-0.032300,
-0.052839,
-0.027060,
0.027119,
0.005410,
-0.035063,
-0.056666,
0.008650,
-0.003989,
-0.028794,
0.029770,
0.003311,
-0.038037,
-0.019429,
-0.023794,
0.007038,
-0.022234,
0.001733,
0.030788,
0.007227,
-0.037123,
-0.027773,
0.016398,
-0.013013,
-0.031048,
0.017494,
-0.034288,
0.008556,
0.009487,
0.004989,
-0.016810,
0.019839,
-0.027974,
-0.011476,
0.019158,
0.016693,
-0.005198,
0.011249,
-0.024200,
0.017964,
-0.029132,
-0.030790,
0.018991,
-0.018400,
-0.058413,
-0.061114,
0.003272,
0.028095,
-0.030168,
-0.037915,
-0.007791,
0.028582,
-0.053947,
-0.051608,
-0.001974,
-0.031914,
0.034719,
0.000277,
-0.011217,
-0.032423,
-0.027262,
-0.003235,
-0.012555,
-0.051718,
-0.007395,
-0.003193,
-0.034088,
0.025105,
-0.006397,
-0.057427,
-0.029851,
0.024283,
-0.029647,
0.026993,
-0.015989,
-0.007691,
0.015072,
-0.026337,
0.007507,
0.002371,
0.029408,
0.029529,
-0.021352,
-0.037189,
-0.035753,
-0.002766,
0.036116,
0.001565,
-0.024491,
-0.036447,
-0.002799,
-0.013870,
0.004437,
0.016358,
-0.033241,
0.027169,
-0.028593,
-0.032963,
-0.030010,
0.022746,
-0.037305,
0.002953,
0.006799,
-0.030042,
0.006226,
0.009591,
-0.004449,
-0.003186,
0.020451,
-0.000289,
-0.009179,
-0.017777,
-0.002463,
0.027655,
0.022420,
-0.015267,
0.011397,
0.023079,
-0.033321,
0.000964,
-0.036453,
-0.029248,
-0.034137,
-0.018716,
0.018956,
-0.024509,
-0.035850,
-0.045603,
-0.029188,
-0.012429,
0.000153,
0.004841,
-0.043578,
-0.015358,
-0.016371,
-0.030630,
-0.040361,
-0.030934,
-0.001893,
-0.018384,
-0.021931,
-0.030934,
-0.008062,
0.006489,
-0.009785,
-0.033035,
-0.060451,
-0.029202,
-0.019597,
-0.050992,
0.001462,
-0.052399,
0.005536,
-0.021061,
-0.003177,
-0.025499,
-0.006120,
0.000389,
0.006688,
-0.010379,
-0.055836,
-0.031819,
0.001063,
0.012377,
-0.009668,
-0.004177,
-0.024264,
-0.044783,
-0.038978,
-0.031745,
-0.011616,
-0.041257,
-0.007426,
-0.016790,
0.024360,
-0.027439,
-0.019469,
-0.033674,
-0.001286,
-0.001232,
0.012454,
-0.032804,
-0.027252,
-0.034496,
-0.025096,
0.007019,
-0.038024,
-0.004552,
0.017125,
-0.025516,
0.026253,
0.003119,
-0.020350,
-0.003549,
-0.020380,
-0.011503,
-0.007690,
-0.016959,
-0.007861,
-0.016161,
-0.029119,
-0.002012,
-0.018650,
-0.000843,
0.027924,
-0.032472,
0.018518,
0.002875,
-0.002430,
0.028383,
-0.023707,
0.028515,
0.016124,
-0.012502,
0.028054,
-0.017467,
-0.030146,
-0.024435,
0.028855,
0.026986,
0.023590,
0.034943,
0.016897,
-0.029205,
0.000960,
0.015801,
-0.030586,
-0.002106,
0.018922,
-0.013526,
0.027962,
0.029372,
-0.008937,
-0.013547,
-0.010328,
-0.001540,
0.018868,
-0.018402,
0.030433,
-0.010696,
-0.015112,
-0.012854,
0.004343,
-0.032964,
0.016452,
0.021622,
-0.033022,
-0.015522,
-0.004721,
0.017717,
-0.004623,
-0.028835,
0.009615,
-0.041901,
-0.029888,
-0.020131,
-0.007051,
-0.008855,
-0.004292,
-0.003478,
-0.009834,
-0.019589,
-0.008259,
-0.036007,
-0.019058,
-0.023570,
-0.019555,
-0.049073,
-0.018564,
-0.021008,
-0.052660,
-0.006318,
-0.058822,
0.008397,
-0.032634,
-0.013695,
-0.005348,
-0.039651,
-0.003511,
-0.043906,
-0.026858,
-0.020328,
-0.022354,
0.014341,
0.002803,
-0.004659,
-0.001953,
0.011135,
-0.058008,
-0.021135,
0.018310,
-0.004659,
-0.015218,
-0.004637,
-0.012161,
-0.001085,
-0.038011,
0.020929,
-0.041823,
-0.052918,
-0.031684,
-0.037406,
0.025386,
-0.040479,
0.005211,
0.008101,
-0.036949,
0.023983,
-0.041696,
0.018782,
-0.032724,
-0.031955,
-0.002245,
-0.038264,
-0.038662,
0.013281,
-0.004478,
-0.051977,
0.001197,
-0.001466,
-0.038302,
-0.023099,
-0.018107,
-0.027876,
-0.015561,
0.016021,
0.009613,
-0.030966,
0.028476,
-0.030735,
0.015660,
-0.037807,
-0.005205,
0.000101,
-0.025868,
-0.036027,
-0.003926,
0.006186,
0.020934,
0.011755,
0.032788,
-0.000213,
-0.027935,
0.013286,
-0.036670,
0.010981,
0.014464,
0.019694,
-0.042353,
-0.006909,
-0.014911,
-0.017123,
0.006856,
-0.009098,
0.003088,
-0.044395,
-0.038747,
-0.027011,
0.001675,
-0.018313,
0.004177,
0.010916,
0.000373,
-0.018583,
0.006948,
-0.005334,
-0.006623,
0.005701,
-0.000472,
-0.005571,
0.001683,
-0.032369,
-0.046097,
0.007097,
0.010556,
0.026613,
-0.010901,
0.011767,
-0.008213,
0.029198,
-0.037427,
0.029042,
0.002745,
0.004387,
-0.015626,
-0.015283,
0.011274,
-0.017836,
0.007380,
-0.004400,
-0.023974,
0.001781,
-0.024484,
0.022085,
-0.001501,
-0.028156,
-0.003155,
-0.021195,
0.003467,
0.017544,
-0.037876,
-0.045654,
-0.050554,
0.000044,
0.006240,
-0.031579,
0.009534,
-0.026905,
0.033679,
0.000454,
0.005281,
-0.042385,
0.006612,
0.003164,
0.009392,
-0.012294,
-0.004500,
-0.015026,
0.008993,
-0.019241,
0.018919,
-0.023024,
-0.029501,
0.001716,
-0.031080,
-0.028658,
-0.033172,
-0.030641,
-0.018563,
-0.037702,
-0.004562,
-0.001640,
-0.000464,
-0.046332,
0.005140,
0.016208,
0.004538,
-0.017156,
-0.014505,
-0.001904,
-0.019016,
0.014909,
-0.002042,
-0.010382,
0.014143,
-0.019180,
-0.031538,
0.001872,
0.021552,
0.001778,
-0.002159,
0.016589,
-0.041295,
0.018012,
-0.039971,
0.009265,
0.019508,
-0.008823,
-0.031770,
0.021899,
-0.016102,
-0.023874,
-0.033183,
-0.024034,
0.024542,
-0.019851,
0.005419,
0.005929,
-0.007787,
0.010912,
-0.007027,
-0.039056,
-0.014905,
0.018722,
-0.040286,
-0.005651,
-0.029818,
-0.029880,
-0.033227,
0.012033,
-0.032288,
-0.026003,
-0.034565,
0.028327,
0.000281,
-0.011397,
-0.004241,
0.006922,
-0.023788,
0.030862,
0.028094,
-0.033904,
-0.009503,
-0.020840,
-0.018639,
0.001090,
-0.012289,
-0.014892,
-0.146160,
0.007702,
-0.054957,
-0.014295,
-0.016113,
-0.021078,
-0.034616,
0.109590,
0.154750,
0.034090,
0.007504,
0.070129,
-0.001159,
0.055103,
0.047606,
0.072494,
0.017815,
-0.011073,
0.053639,
0.046083,
0.103060,
-0.085373,
-0.007679,
-0.128560,
0.024349,
-0.005559,
-0.007546,
0.010012,
0.005241,
-0.025959,
-0.010569,
-0.002175,
0.024717,
-0.027766,
0.000328,
-0.023420,
0.037787,
-0.002538,
0.006907,
0.000293,
0.018727,
-0.028842,
0.010073,
-0.020168,
-0.023375,
-0.019077,
0.017217,
-0.030395,
0.033512,
-0.006288,
0.207190,
0.094323,
0.046742,
0.140890,
0.139640,
0.074084,
0.052077,
-0.002068,
0.095234,
0.134760,
0.006339,
0.024878,
0.093526,
0.093306,
0.095386,
0.061150,
0.028488,
0.067526,
0.116470,
-0.003982,
-0.013957,
-0.067885,
0.022793,
0.045759,
0.024290,
-0.097600,
-0.096552,
0.038622,
0.037205,
0.074313,
0.003507,
-0.033198,
-0.002945,
0.001616,
0.032184,
0.069584,
0.018670,
0.056353,
0.011369,
0.023271,
0.086716,
0.061630,
0.034748,
-0.012518,
-0.015063,
0.003366,
0.049088,
0.024165,
-0.042872,
0.008616,
0.075052,
0.039925,
-0.017378,
-0.026734,
-0.095555,
-0.006623,
-0.046591,
0.014247,
-0.039256,
-0.093556,
-0.094440,
0.001999,
0.012257,
0.029827,
-0.117530,
-0.008685,
0.026218,
-0.035364,
-0.084837,
-0.159120,
-0.064067,
-0.050327,
0.014055,
0.009926,
-0.043674,
-0.116430,
-0.059909,
-0.113790,
-0.148460,
-0.334840,
0.041282,
0.051736,
0.000873,
-0.009233,
-0.120280,
0.025547,
0.006629,
0.076053,
0.025952,
-0.074260,
0.036231,
0.083401,
0.156200,
0.095915,
-0.130080,
-0.036415,
0.025407,
0.023921,
0.172980,
0.046957,
-0.189040,
-0.126870,
-0.111380,
-0.161680,
-0.268810,
-0.064305,
0.068263,
-0.041493,
-0.090369,
-0.095749,
-0.070493,
0.055098,
0.034804,
-0.055758,
-0.123350,
0.081414,
0.012879,
0.035636,
0.069527,
-0.029491,
0.106160,
0.087470,
0.020065,
-0.026644,
0.085793,
-0.054261,
-0.116950,
-0.059724,
-0.097686,
-0.170510,
0.090167,
0.048315,
-0.061276,
-0.120430,
-0.061531,
0.039118,
0.094424,
0.051519,
-0.057039,
-0.048999,
0.045247,
0.056412,
0.276710,
0.092878,
-0.117710,
-0.016472,
0.045448,
0.144750,
0.016904,
-0.078538,
0.209790,
-0.073752,
-0.067348,
-0.021587,
-0.119690,
0.192420,
0.047066,
-0.015633,
-0.047703,
0.001558,
0.069928,
-0.017949,
-0.033608,
-0.011967,
-0.043571,
0.053039,
0.008475,
-0.076367,
0.049275,
-0.021393,
0.056406,
-0.013172,
0.030660,
-0.015473,
-0.011711,
-0.027904,
0.099824,
-0.024294,
-0.067164,
-0.093811,
0.012818,
-0.002357,
-0.033038,
-0.088125,
-0.169230,
-0.157230,
-0.041813,
0.125180,
-0.067957,
-0.121420,
-0.051433,
-0.015855,
0.014973,
0.041243,
-0.011298,
0.073589,
-0.006171,
-0.005917,
0.051408,
0.140570,
0.112800,
0.009612,
0.076647,
0.036674,
0.032034,
-0.013975,
-0.039443,
0.046117,
0.055151,
0.100010,
-0.028898,
0.043510,
0.104350,
0.116290,
0.064054,
0.004371,
0.026627,
0.042650,
0.024195,
-0.060097,
-0.007508,
0.000464,
0.057065,
-0.012987,
-0.008442,
0.002884,
0.021014,
-0.040360,
-0.127250,
-0.310770,
0.150050,
0.103200,
0.053861,
-0.070164,
-0.232210,
0.115760,
0.018189,
0.091909,
0.055993,
-0.097196,
0.043481,
-0.076695,
-0.076427,
0.011221,
0.010721,
0.056293,
-0.071658,
-0.053922,
0.000778,
-0.033215,
0.123450,
0.003584,
0.127670,
-0.019294,
-0.062484,
0.093502,
0.073385,
-0.027393,
-0.012094,
0.017135,
0.168180,
-0.014741,
-0.014906,
-0.045986,
0.043373,
0.042879,
0.045247,
-0.081126,
0.061892,
0.116620,
0.015435,
0.117820,
0.074014,
0.048858,
0.077424,
-0.096980,
-0.130540,
-0.047548,
0.039844,
-0.026248,
0.027816,
0.094854,
0.061803,
-0.019361,
0.077116,
0.092840,
0.104360,
-0.054602,
-0.159230,
0.057611,
-0.031323,
-0.002475,
0.122260,
-0.016507,
0.033873,
-0.083769,
-0.018260,
0.012843,
0.109230,
0.016504,
0.046278,
-0.078454,
-0.003277,
-0.012017,
-0.210810,
0.000201,
-0.027553,
-0.040708,
-0.015898,
-0.219380,
0.036387,
-0.089347,
-0.018516,
0.039683,
-0.077053,
0.052443,
-0.048559,
0.030453,
-0.013733,
0.071887,
-0.094223,
-0.040553,
-0.079373,
0.088813,
0.044289,
0.347360,
0.023893,
-0.031372,
-0.022143,
0.046617,
0.227130,
0.026294,
-0.022731,
-0.130650,
0.004814,
0.167080,
-0.100830,
-0.076203,
-0.060665,
0.078851,
0.152540,
-0.098351,
-0.098548,
-0.021498,
0.087866,
0.156030,
-0.038866,
0.029788,
0.052959,
0.145240,
-0.013287,
-0.005020,
-0.021250,
0.010293,
0.026720,
0.012801,
0.006285,
-0.033392,
0.027224,
0.052935,
0.079569,
-0.013979,
0.013314,
0.023372,
0.061395,
0.049526,
-0.005591,
0.007329,
0.034722,
0.048492,
0.019575,
0.012904,
0.003778,
0.030276,
0.068049,
-0.098886,
-0.062429,
-0.171290,
-0.213960,
-0.123080,
-0.078669,
-0.038256,
-0.008050,
0.046890,
-0.029559,
0.083650,
0.003743,
0.011022,
0.028876,
-0.001283,
0.033862,
0.033633,
0.045738,
0.043967,
0.031504,
-0.028215,
-0.097049,
-0.002693,
0.063545,
-0.003058,
0.018268,
-0.028503,
-0.023665,
0.011191,
0.122950,
0.019303,
0.055894,
0.037095,
0.086490,
0.119820,
0.116840,
0.035850,
0.074610,
0.039418,
0.087057,
0.091528,
0.009261,
0.017968,
-0.030420,
0.087640,
0.046242,
0.092290,
-0.000707,
-0.027835,
0.016514,
-0.257020,
-0.051915,
0.009589,
-0.110700,
-0.049809,
-0.088846,
-0.050673,
-0.027075,
0.127480,
-0.017974,
-0.103730,
-0.017208,
-0.033539,
0.025676,
0.051145,
-0.099479,
0.058997,
-0.009865,
0.062799,
0.074091,
-0.054242,
0.070576,
0.065878,
0.096852,
-0.135920,
-0.027782,
0.001544,
-0.014324,
-0.003619,
-0.028221,
0.048897,
0.011638,
-0.013305,
-0.012262,
-0.031107,
0.009848,
0.014949,
-0.027822,
0.028026,
0.022126,
0.029636,
0.021209,
0.043838,
0.027153,
-0.046465,
-0.050246,
-0.030567,
-0.025200,
0.016073,
0.034045,
-0.197750,
-0.044052,
-0.049159,
-0.173260,
-0.219100,
-0.046111,
0.042571,
0.038505,
0.074618,
-0.072106,
0.009230,
0.195360,
0.157210,
0.073967,
-0.067970,
0.033626,
0.111550,
0.146510,
0.085980,
-0.052289,
0.161960,
0.072767,
-0.044964,
0.025835,
0.113620,
-0.099805,
-0.044967,
0.014589,
-0.056832,
-0.125420,
0.024164,
0.076688,
0.061431,
-0.023043,
-0.003820,
0.062459,
0.034217,
0.015123,
0.028638,
0.000028,
0.012480,
-0.010132,
0.067520,
0.009494,
0.040263,
0.069927,
0.028366,
0.098509,
-0.001337,
-0.014876,
0.010440,
0.007830,
-0.038397,
0.038128,
0.179380,
-0.005574,
0.059310,
0.052939,
0.086208,
0.127230,
0.007225,
-0.052281,
0.040174,
0.007644,
-0.018382,
0.013322,
-0.022224,
-0.015556,
0.024192,
-0.027973,
-0.033356,
0.034399,
-0.022887,
0.046336,
-0.000605,
-0.075178,
0.003549,
0.051680,
0.057584,
0.087034,
-0.020922,
0.000021,
0.041714,
-0.025162,
0.064412,
-0.011414,
0.009458,
-0.011477,
0.013170,
0.086885,
0.074772,
0.099255,
0.064366,
-0.122930,
-0.061292,
0.169140,
0.082853,
0.038171,
-0.106580,
-0.091173,
0.058517,
0.095968,
-0.028027,
0.034616,
0.045931,
0.012688,
0.113130,
0.080986,
0.119720,
0.047889,
-0.025645,
0.149530,
0.208960,
0.085338,
-0.109270,
0.105750,
0.076681,
0.101550,
0.041654,
-0.015486,
-0.034611,
-0.023478,
0.051479,
0.164570,
0.107140,
0.111410,
0.133800,
0.046273,
0.113710,
0.232870,
0.116090,
0.126540,
0.171410,
0.109020,
0.097849,
0.144520,
0.234290,
0.162240,
0.101100,
0.087416,
0.175520,
0.199020,
0.084131,
0.002797,
0.019094,
0.028270,
0.008729,
0.001946,
0.011387,
0.053636,
-0.074676,
0.006790,
0.014881,
-0.020425,
0.016190,
0.006570,
0.028081,
0.025951,
-0.005829,
0.019566,
0.077686,
-0.001665,
0.038628,
-0.039305,
0.065151,
0.112580,
-0.007141,
0.015959,
0.019463,
0.072564,
-0.024477,
-0.021053,
0.004950,
-0.017207,
0.038854,
0.123450,
0.184270,
0.053431,
-0.010388,
-0.007766,
-0.070192,
-0.034252,
0.066857,
-0.043167,
-0.087431,
0.047881,
-0.154390,
-0.189240,
-0.089396,
-0.032878,
0.029132,
-0.053065,
-0.087155,
0.018790,
0.000530,
0.044013,
0.005765,
-0.099430,
0.015607,
-0.027087,
0.108290,
-0.065244,
-0.028024,
0.087335,
-0.038760,
0.129390,
0.037425,
0.009740,
0.071035,
-0.028072,
0.062310,
-0.008863,
-0.057712,
0.034505,
0.008472,
0.063584,
-0.052895,
0.044576,
0.111190,
0.045145,
-0.080253,
0.017711,
-0.016199,
-0.085486,
0.021087,
-0.008130,
0.007952,
0.068931,
0.079994,
0.066816,
-0.000514,
-0.011852,
-0.003294,
0.023051,
-0.014570,
-0.008159,
-0.007393,
0.003977,
-0.019117,
-0.004373,
0.050300,
-0.032687,
-0.041192,
-0.028954,
0.005736,
0.018386,
-0.027545,
-0.041540,
-0.034669,
0.042212,
-0.219770,
-0.048138,
-0.125500,
-0.094588,
-0.029176,
0.033430,
0.047129,
0.042620,
0.086187,
0.101280,
-0.059883,
0.054302,
0.005260,
-0.038579,
0.017202,
0.023711,
-0.116710,
-0.141330,
-0.078291,
-0.071028,
0.137970,
-0.029192,
-0.067468,
-0.077678,
-0.110630,
-0.034010,
0.006820,
-0.022924,
-0.035174,
0.024389,
-0.015967,
0.011930,
-0.000609,
0.011884,
-0.021661,
0.005112,
-0.013865,
-0.018604,
-0.003806,
0.016863,
-0.009107,
-0.013142,
-0.007260,
0.027584,
-0.032769,
0.024322,
-0.013232,
0.025409,
-0.039366,
-0.048427,
-0.025901,
-0.008082,
-0.016397,
-0.011585,
-0.015339,
-0.029029,
-0.011359,
0.025807,
0.032363,
-0.035533,
0.012579,
-0.026124,
-0.001151,
-0.024729,
-0.012026,
0.028805,
0.014701,
-0.035231,
-0.015332,
-0.011970,
0.031437,
-0.009852,
-0.028956,
-0.034252,
0.002315,
-0.018308,
-0.040288,
-0.010892,
0.000635,
0.005460,
0.017393,
-0.048370,
-0.012112,
-0.038898,
-0.017780,
-0.041141,
-0.004487,
0.012395,
-0.041372,
0.005003,
0.033768,
0.008421,
0.006236,
0.001255,
0.001507,
-0.021413,
0.001068,
0.022763,
-0.004976,
-0.004589,
-0.029042,
-0.002315,
-0.013927,
-0.003207,
0.005859,
-0.007106,
0.034729,
-0.030341,
0.017523,
-0.004093,
0.003942,
-0.033002,
0.021790,
0.020459,
-0.020815,
0.019004,
0.014229,
-0.028847,
-0.026930,
0.001603,
-0.019571,
-0.018686,
0.010431,
-0.002506,
-0.004960,
-0.030620,
-0.044195,
0.005509,
-0.010842,
-0.034025,
-0.022320,
0.014562,
-0.001216,
-0.012839,
0.018605,
-0.020554,
0.016253,
-0.009988,
-0.042508,
-0.039646,
0.027090,
-0.018389,
0.002354,
-0.007898,
0.023271,
-0.003457,
-0.035020,
0.024444,
-0.008901,
-0.025992,
-0.006605,
-0.018994,
-0.035281,
0.010483,
-0.005140,
0.008122,
-0.004913,
-0.025746,
-0.000911,
-0.000007,
-0.035873,
-0.042482,
-0.024841,
0.007422,
0.011534,
0.004147,
-0.033680,
0.019108,
0.001068,
-0.010609,
0.000628,
-0.045703,
0.009415,
-0.037391,
-0.037572,
-0.004040,
-0.007394,
-0.003068,
-0.039172,
0.019260,
0.025375,
0.013919,
0.008136,
-0.042689,
0.020933,
-0.007248,
-0.005602,
0.025985,
0.027004,
-0.019928,
-0.010539,
-0.009026,
0.027937,
0.012041,
-0.028766,
0.023379,
0.006477,
-0.042669,
0.015230,
-0.022164,
0.011742,
-0.018059,
-0.036736,
0.015384,
-0.039766,
-0.001731,
0.020997,
-0.031283,
-0.036419,
-0.018135,
-0.039660,
-0.028008,
-0.017794,
0.010967,
0.006608,
0.007383,
-0.022452,
0.011087,
-0.028567,
-0.033398,
-0.038103,
-0.032492,
-0.033138,
-0.012166,
0.016827,
-0.007631,
-0.052536,
-0.040886,
-0.042144,
-0.034387,
-0.003711,
0.000520,
-0.016710,
0.018542,
0.013539,
-0.040512,
-0.009071,
0.009339,
0.019276,
-0.032267,
-0.039820,
-0.016348,
-0.025710,
0.027078,
0.027348,
-0.013557,
-0.019536,
-0.011512,
-0.011951,
0.016848,
-0.033421,
0.001850,
0.009793,
-0.032181,
0.013137,
-0.027410,
0.024607,
-0.017788,
0.014319,
0.026422,
0.005183,
0.015324,
-0.037009,
-0.004007,
0.009452,
-0.007947,
0.004768,
-0.036409,
0.014527,
-0.015735,
-0.021532,
0.020844,
0.025702,
-0.045436,
0.012839,
-0.036236,
0.008224,
-0.033575,
0.028573,
0.022628,
-0.020068,
-0.007573,
0.025522,
0.017147,
-0.037758,
0.022506,
-0.036941,
-0.007127,
0.000091,
0.004453,
0.016656,
-0.036197,
0.000396,
-0.016174,
-0.004552,
-0.020218,
-0.024948,
-0.028248,
-0.045482,
0.007391,
-0.030638,
0.014924,
-0.046215,
0.006303,
0.002277,
0.009328,
0.025375,
-0.023066,
0.007741,
0.011837,
-0.028197,
-0.031870,
-0.033107,
0.003144,
-0.017861,
0.006333,
-0.029812,
-0.029147,
-0.034459,
-0.001757,
0.003078,
-0.026505,
-0.026390,
-0.031811,
-0.008411,
-0.029861,
0.030799,
-0.027954,
-0.038151,
0.020143,
0.001038,
-0.030016,
-0.023180,
-0.008415,
-0.043431,
-0.044094,
-0.006432,
-0.040300,
0.016252,
-0.040362,
-0.028343,
-0.003586,
0.005407,
0.013232,
0.010734,
0.033882,
-0.019221,
-0.012252,
-0.043902,
0.001526,
0.002706,
-0.036078,
-0.037906,
0.000099,
-0.013022,
-0.010464,
0.001752,
0.020378,
-0.024778,
-0.026921,
0.022615,
-0.030444,
-0.017337,
-0.017103,
0.020048,
-0.014830,
0.026877,
-0.031675,
0.024452,
-0.026730,
-0.036886,
0.012540,
-0.028876,
0.009795,
0.006963,
0.007050,
-0.001145,
-0.001396,
-0.007241,
-0.013885,
-0.040730,
-0.053487,
-0.037071,
0.012518,
0.013801,
-0.010460,
-0.010668,
-0.011809,
0.018021,
-0.018908,
0.038621,
-0.014344,
0.024532,
-0.027567,
0.033710,
-0.005504,
-0.014431,
-0.006685,
-0.024949,
-0.021803,
-0.021737,
-0.036023,
-0.006519,
0.012472,
-0.023417,
0.013186,
-0.003184,
-0.010970,
-0.033082,
-0.002575,
-0.011338,
-0.011872,
-0.034297,
0.006489,
-0.023924,
-0.056632,
0.004392,
-0.045034,
0.003831,
-0.015554,
-0.000222,
-0.017944,
-0.023728,
0.013190,
-0.022821,
0.007640,
0.011111,
-0.008507,
0.003057,
-0.020772,
-0.003363,
0.015617,
-0.003288,
0.034955,
0.004642,
-0.019043,
0.008224,
-0.000155,
0.029357,
-0.015935,
0.014767,
0.019027,
0.008506,
-0.006642,
-0.006525,
-0.023090,
0.007939,
0.016245,
0.026879,
-0.005041,
0.023985,
0.003593,
-0.020258,
-0.005586,
-0.035616,
0.019828,
-0.018703,
0.005409,
-0.015198,
0.009818,
-0.037304,
-0.003133,
0.017514,
0.017798,
-0.041784,
-0.011264,
-0.028542,
-0.008761,
0.031537,
0.027189,
-0.008199,
0.000644,
-0.011495,
-0.019381,
-0.020718,
-0.028231,
0.010564,
0.020054,
-0.004781,
-0.012355,
-0.041105,
0.000877,
0.021902,
-0.026363,
0.014573,
0.013565,
-0.010942,
-0.035783,
-0.032403,
-0.019067,
0.023369,
-0.034859,
-0.021611,
0.002506,
-0.038096,
0.006534,
-0.009918,
-0.020943,
0.025162,
0.026889,
-0.000929,
-0.037853,
0.010404,
0.017056,
-0.026979,
-0.036586,
-0.009106,
-0.008442,
-0.032999,
-0.000819,
-0.016355,
0.003230,
0.021521,
0.012129,
-0.023831,
-0.010183,
-0.024147,
0.012303,
0.009023,
-0.001587,
0.016973,
-0.002924,
-0.019394,
-0.030953,
0.019365,
0.019410,
-0.020110,
0.015896,
-0.027463,
-0.023101,
-0.023022,
-0.020402,
-0.016842,
0.000814,
-0.008470,
-0.019426,
-0.000922,
-0.018546,
-0.004870,
0.024175,
0.010493,
-0.021660,
-0.035737,
0.014321,
0.026059,
0.032310,
0.010399,
-0.020915,
0.029964,
-0.007645,
-0.040096,
0.024769,
-0.019474,
0.004510,
-0.046286,
0.014726,
0.016432,
-0.003181,
0.015975,
-0.044954,
0.028625,
0.013703,
-0.000448,
0.000733,
-0.008777,
-0.003893,
-0.022032,
-0.018240,
-0.021591,
-0.027179,
0.012637,
0.004774,
-0.014819,
0.020486,
-0.044913,
0.011988,
-0.038367,
0.010906,
-0.036216,
0.022384,
-0.024911,
-0.013580,
0.025499,
-0.014226,
0.018967,
-0.022084,
-0.005663,
0.003056,
0.028163,
-0.015656,
0.004679,
-0.021319,
-0.013848,
0.004411,
-0.043230,
-0.016549,
-0.037679,
-0.028477,
-0.013313,
-0.006041,
-0.010136,
-0.008104,
-0.050235,
0.018106,
-0.032107,
-0.007052,
-0.026132,
-0.011759,
-0.003054,
-0.016354,
-0.000647,
0.007580,
-0.054167,
0.014720,
0.024035,
0.014274,
0.015559,
0.010467,
-0.009998,
0.006291,
-0.022153,
-0.001095,
0.004423,
0.011905,
-0.005500,
-0.033254,
0.029484,
0.014177,
0.012452,
0.014555,
-0.032877,
0.007864,
0.007471,
0.023336,
0.009102,
-0.003370,
0.021223,
-0.027058,
-0.004519,
0.018840,
-0.015766,
-0.040650,
0.000144,
0.024340,
0.021708,
0.011134,
-0.005068,
-0.027478,
-0.019935,
-0.023550,
-0.034128,
0.002630,
-0.026809,
-0.005318,
-0.026443,
-0.001264,
-0.038956,
-0.012447,
-0.002653,
-0.023682,
0.027374,
0.008960,
-0.007653,
-0.004837,
0.023847,
0.038180,
0.001324,
-0.004063,
-0.030711,
-0.024051,
-0.023192,
0.018152,
0.035980,
0.034104,
-0.014197,
0.010064,
0.014588,
-0.004578,
-0.036291,
0.020961,
0.001615,
-0.017239,
-0.010353,
-0.035443,
0.009408,
-0.011521,
0.003011,
0.003000,
-0.004198,
0.019566,
0.006073,
-0.029403,
-0.037495,
0.021931,
0.020160,
0.027410,
0.018675,
0.015972,
0.028210,
-0.001535,
-0.025830,
0.013892,
-0.019156,
-0.011883,
0.018322,
0.034801,
-0.005080,
-0.013446,
0.029516,
-0.011828,
0.029220,
-0.029989,
-0.010847,
-0.013660,
-0.023035,
0.036097,
-0.021423,
0.009123,
-0.003400,
0.033150,
0.002781,
0.029738,
0.032085,
0.008490,
0.028737,
-0.031230,
0.000945,
-0.028071,
-0.033121,
-0.013748,
-0.022631,
0.012760,
-0.019901,
-0.010149,
-0.024582,
0.000491,
-0.014457,
-0.002125,
0.025301,
0.025920,
-0.014275,
-0.010216,
-0.023725,
0.001331,
-0.004444,
-0.021225,
0.011438,
0.003772,
-0.033242,
0.003447,
-0.002254,
-0.045161,
-0.030731,
0.007288,
-0.037863,
-0.038127,
-0.024553,
-0.021362,
-0.011422,
0.009195,
-0.032466,
0.013938,
0.016598,
-0.015318,
-0.017703,
-0.011196,
0.014745,
-0.005123,
0.004373,
-0.006052,
-0.008015,
-0.016215,
0.021527,
0.011153,
0.027707,
-0.027117,
0.007806,
-0.014582,
-0.002761,
-0.018373,
0.005520,
0.025171,
0.002565,
-0.019724,
0.039979,
0.026968,
-0.015619,
0.028068,
-0.016876,
0.006293,
-0.009361,
0.034986,
-0.029697,
0.033834,
0.034453,
0.002208,
0.014030,
0.036101,
0.023957,
-0.005846,
-0.011095,
-0.026823,
0.018122,
0.007436,
0.004026,
-0.031515,
0.004371,
-0.016700,
-0.032955,
0.007052,
-0.038453,
-0.020715,
-0.001823,
-0.038700,
-0.034477,
-0.026327,
0.026567,
0.021967,
-0.002096,
-0.007809,
-0.017623,
0.004057,
-0.008482,
0.006068,
-0.027635,
0.023413,
0.027093,
-0.045252,
-0.052325,
-0.042813,
-0.040318,
-0.013944,
-0.035525,
-0.054458,
-0.070588,
-0.008055,
0.019367,
0.021171,
-0.001159,
-0.002695,
0.010350,
-0.020824,
-0.014917,
-0.026312,
-0.049973,
-0.017234,
-0.015503,
0.022850,
0.037644,
0.024120,
0.032061,
0.029644,
0.013160,
0.002647,
-0.027273,
0.001641,
0.007147,
0.039851,
0.006152,
0.036897,
-0.018049,
0.024353,
0.004499,
-0.028021,
0.036072,
-0.019121,
-0.006454,
-0.025792,
0.015596,
-0.029366,
0.014832,
0.017156,
-0.020597,
-0.008439,
0.009096,
-0.022638,
0.036759,
-0.004876,
0.021224,
0.026690,
-0.007255,
-0.012844,
-0.037795,
-0.026625,
-0.001634,
-0.061129,
-0.022226,
-0.015479,
0.017879,
-0.002839,
-0.006327,
0.028547,
-0.003988,
0.029321,
-0.014475,
-0.023659,
-0.016610,
-0.005546,
-0.011155,
0.020186,
0.027552,
-0.022728,
-0.017432,
-0.032932,
-0.004540,
0.020842,
-0.004102,
-0.031297,
-0.013805,
-0.026445,
-0.004619,
0.027298,
-0.000208,
0.024490,
-0.023496,
0.008056,
-0.009760,
-0.038086,
-0.012984,
0.009013,
-0.030178,
0.000543,
-0.021525,
0.027800,
-0.038672,
-0.058633,
-0.016614,
-0.027996,
-0.021533,
-0.036835,
-0.005397,
0.001957,
-0.041515,
-0.008964,
0.002034,
-0.014017,
-0.011944,
-0.044361,
-0.007380,
0.006134,
-0.027593,
-0.000408,
-0.007137,
-0.047446,
0.007458,
-0.027591,
-0.054675,
-0.030533,
-0.069789,
-0.010381,
0.022585,
-0.021671,
-0.040083,
-0.012097,
-0.032259,
-0.001137,
0.014055,
0.010727,
-0.020262,
-0.027445,
0.016678,
0.004417,
-0.039678,
0.018135,
0.007120,
0.012271,
0.005412,
-0.012350,
-0.018456,
0.017686,
0.006112,
-0.009008,
-0.000624,
0.029234,
-0.017498,
-0.008864,
-0.009978,
-0.014349,
-0.010595,
-0.004265,
-0.030959,
-0.013711,
0.016461,
0.010124,
-0.041355,
-0.035671,
-0.043807,
-0.019089,
-0.018058,
0.015958,
-0.033239,
-0.014896,
-0.029043,
-0.030739,
-0.025679,
0.011707,
0.003932,
-0.033380,
-0.009033,
-0.015888,
-0.044733,
-0.006231,
0.001776,
0.001977,
-0.044318,
-0.053099,
-0.066104,
-0.009705,
-0.020395,
-0.023028,
-0.011944,
-0.015267,
0.005946,
0.030995,
0.024330,
-0.047281,
-0.070348,
-0.005135,
-0.043248,
0.001740,
-0.073872,
-0.053366,
-0.002019,
-0.002311,
0.004941,
-0.010749,
-0.008031,
0.057562,
-0.064764,
-0.003276,
-0.051737,
0.047032,
-0.005872,
-0.015174,
-0.028610,
-0.042478,
-0.003180,
0.001793,
-0.008982,
-0.017537,
0.005796,
0.010325,
0.002557,
0.020223,
-0.016496,
0.010137,
-0.007310,
-0.013757,
0.004979,
-0.036706,
0.022241,
-0.043340,
-0.004659,
0.024640,
-0.029185,
0.018721,
-0.027539,
-0.010436,
-0.022912,
0.032462,
0.007159,
-0.001411,
-0.050999,
0.001467,
-0.027967,
-0.034963,
0.012976,
-0.026945,
0.023816,
-0.005460,
-0.006636,
0.015870,
-0.000221,
-0.013992,
-0.041161,
-0.023176,
-0.029560,
-0.024435,
0.021988,
0.016952,
-0.023101,
-0.003254,
-0.007121,
-0.025724,
-0.002751,
-0.065646,
0.009131,
-0.037135,
-0.019428,
0.009633,
-0.031114,
-0.004641,
-0.024961,
-0.037760,
-0.041109,
0.045801,
-0.007231,
-0.053819,
-0.011241,
-0.024984,
-0.006284,
0.006666,
-0.032806,
0.025814,
-0.023258,
-0.037908,
-0.048645,
-0.053928,
0.016830,
0.028335,
-0.041065,
-0.036283,
0.025640,
0.049034,
0.011047,
-0.029842,
-0.019758,
0.012779,
0.029922,
0.050841,
-0.011634,
-0.053441,
-0.009797,
0.022923,
-0.031487,
-0.046848,
-0.065803,
-0.048379,
-0.003616,
-0.012009,
-0.017513,
-0.030610,
-0.027758,
0.004054,
0.015265,
-0.006734,
-0.012095,
0.005270,
-0.024136,
0.020225,
-0.025300,
0.018835,
0.020920,
0.006449,
0.010168,
-0.068034,
-0.046623,
-0.038466,
0.006751,
-0.039978,
-0.016150,
0.010556,
-0.054941,
-0.053112,
-0.032490,
-0.004904,
-0.037923,
0.007169,
0.005716,
0.013677,
-0.066993,
-0.021319,
-0.004128,
0.008938,
-0.027664,
-0.070441,
0.010300,
-0.034105,
-0.025913,
-0.012743,
-0.044050,
0.032069,
-0.022548,
-0.010089,
0.001769,
0.007259,
-0.062136,
-0.014404,
-0.005203,
0.028289,
-0.064014,
-0.001987,
-0.033147,
-0.015775,
0.003631,
0.054360,
-0.051479,
0.001022,
0.034440,
-0.032210,
0.030936,
-0.045888,
-0.023237,
-0.029015,
-0.052514,
-0.058258,
0.008648,
-0.024701,
0.008940,
-0.005198,
-0.028770,
-0.037289,
-0.072321,
-0.061126,
-0.018013,
0.030638,
-0.029136,
-0.041797,
-0.057075,
-0.069784,
-0.006557,
0.024107,
0.005684,
0.021143,
-0.018347,
-0.027520,
-0.012708,
-0.027647,
0.008850,
-0.016383,
-0.002205,
-0.023216,
-0.024107,
-0.018850,
-0.057379,
0.023615,
0.025757,
0.023348,
0.034498,
0.013903,
0.033592,
-0.001668,
0.000101,
0.018380,
-0.002806,
-0.026843,
-0.041070,
0.034084,
-0.021928,
0.021324,
-0.018305,
0.014473,
0.026584,
-0.024979,
0.038522,
0.009036,
-0.001669,
0.010135,
-0.029940,
0.023173,
-0.010013,
0.005997,
-0.033487,
0.014407,
0.026066,
0.032912,
0.029444,
-0.034755,
0.001800,
0.010114,
0.004834,
-0.029955,
-0.015264,
0.027500,
-0.016879,
-0.010741,
-0.025955,
-0.037192,
-0.041643,
-0.042915,
-0.011477,
-0.038000,
-0.009562,
-0.018232,
-0.046869,
-0.013707,
-0.016450,
-0.059802,
-0.001584,
-0.009064,
0.024765,
-0.062599,
-0.046660,
-0.035855,
-0.033106,
-0.011112,
-0.042638,
-0.001452,
-0.036664,
-0.036797,
-0.032293,
-0.014847,
0.003895,
0.002448,
-0.019408,
-0.036718,
-0.047080,
-0.049180,
0.001535,
-0.022429,
-0.008826,
-0.005809,
-0.014129,
-0.006862,
-0.050666,
0.028013,
0.032635,
-0.026963,
-0.059734,
-0.028673,
-0.009516,
0.019712,
-0.038759,
-0.027381,
-0.028040,
-0.009706,
-0.016778,
-0.010130,
-0.039475,
-0.025626,
-0.030653,
-0.038861,
-0.018529,
-0.019648,
-0.025600,
0.016692,
-0.010482,
-0.035020,
-0.016304,
0.004099,
-0.001486,
-0.032118,
-0.014489,
0.010561,
-0.023592,
0.001513,
-0.030398,
0.010716,
-0.027498,
-0.015813,
0.012503,
-0.022450,
-0.030974,
-0.013202,
0.025429,
0.030810,
-0.003416,
-0.015542,
-0.010501,
0.006147,
-0.028870,
-0.039213,
-0.036705,
0.001874,
0.020784,
-0.028030,
0.000465,
0.013009,
-0.052297,
-0.032343,
-0.008628,
0.015866,
-0.056073,
-0.011626,
0.001928,
-0.011001,
-0.037965,
0.002102,
0.031908,
0.002164,
-0.024395,
0.000906,
0.019376,
0.027058,
0.012800,
0.022569,
0.008702,
0.000641,
-0.049440,
0.001286,
0.014277,
-0.048635,
-0.028489,
0.001725,
-0.041470,
-0.010911,
0.002536,
-0.013445,
-0.062210,
-0.009413,
-0.022082,
-0.062863,
0.030391,
-0.022387,
-0.063663,
-0.029743,
-0.031682,
-0.042519,
-0.064236,
-0.030703,
0.001676,
0.038243,
-0.032503,
-0.052418,
0.012871,
-0.038313,
-0.037187,
-0.003251,
-0.014248,
-0.022710,
-0.010785,
-0.005122,
-0.024123,
-0.023552,
0.009660,
0.001837,
-0.000679,
-0.057392,
-0.031908,
-0.025475,
-0.059165,
-0.034319,
-0.001162,
-0.006264,
-0.015463,
-0.036377,
-0.002171,
-0.003989,
-0.068464,
-0.012653,
-0.006964,
-0.037965,
-0.012407,
-0.024687,
-0.008441,
-0.021829,
0.024044,
-0.040668,
-0.050059,
0.013298,
-0.030032,
0.009522,
-0.015688,
0.051260,
-0.017730,
-0.010176,
-0.049290,
-0.004324,
-0.001496,
-0.057759,
-0.041555,
-0.000573,
0.016151,
-0.019448,
-0.017980,
-0.032921,
-0.011763,
0.020961,
-0.025882,
-0.040184,
-0.037322,
0.011736,
-0.001450,
0.011481,
0.002884,
0.018937,
0.004484,
-0.003977,
-0.041722,
-0.020398,
-0.023538,
0.006345,
0.012226,
-0.027381,
-0.019968,
-0.011151,
-0.046247,
-0.051095,
-0.011008,
-0.044999,
-0.026842,
-0.017941,
-0.046827,
-0.058485,
0.002506,
-0.024282,
-0.028134,
0.006634,
0.004526,
-0.015618,
-0.021565,
-0.062212,
-0.009916,
0.008852,
-0.007097,
-0.046740,
-0.053701,
-0.052418,
-0.017673,
-0.005804,
-0.000384,
-0.010643,
-0.016721,
-0.017620,
0.018170,
-0.022365,
-0.024879,
-0.016284,
0.004932,
-0.007611,
0.020450,
0.004053,
0.024047,
-0.016929,
0.007902,
0.027364,
0.014875,
0.006791,
0.015533,
-0.022304,
-0.008252,
0.024349,
-0.018776,
0.026602,
0.009227,
-0.028910,
-0.033804,
-0.056529,
-0.032178,
0.014893,
-0.015250,
0.001574,
-0.003382,
-0.047678,
0.011328,
0.010963,
-0.051867,
-0.011430,
0.015514,
0.010743,
-0.008913,
-0.017033,
-0.030944,
-0.009625,
-0.011802,
0.000239,
0.027731,
0.012408,
-0.023826,
-0.014336,
-0.014439,
-0.053401,
-0.025373,
-0.048579,
-0.023143,
-0.060008,
-0.012894,
-0.058661,
-0.051425,
-0.063587,
-0.007723,
-0.039521,
-0.017685,
-0.065612,
-0.029607,
-0.012531,
0.015939,
-0.062346,
-0.005289,
-0.053744,
0.028674,
-0.017386,
-0.041895,
-0.014489,
-0.041761,
-0.041813,
-0.034158,
-0.037547,
0.013104,
-0.038557,
-0.029570,
-0.027885,
-0.023234,
-0.003368,
0.009423,
-0.009458,
-0.000295,
0.005071,
-0.009433,
0.032872,
-0.020468,
0.040495,
0.018128,
-0.008807,
0.000348,
-0.015789,
-0.014363,
0.026284,
0.024049,
-0.020072,
-0.024446,
-0.038913,
-0.012845,
-0.003965,
-0.071869,
-0.014007,
0.015981,
-0.039318,
0.003855,
-0.033266,
0.017845,
0.001247,
-0.031117,
0.020943,
-0.006075,
0.031896,
-0.006458,
-0.017989,
-0.031036,
-0.028754,
-0.030169,
-0.023041,
0.003682,
0.016873,
-0.019276,
-0.004918,
-0.016675,
0.105610,
0.055714,
0.019946,
0.063870,
0.041273,
-0.068234,
0.010491,
-0.024889,
0.063948,
-0.005134,
-0.117890,
0.106630,
-0.077250,
-0.118390,
-0.028683,
-0.190250,
0.074500,
0.032782,
0.013986,
0.086592,
-0.045732,
0.019666,
0.131710,
-0.027192,
0.008266,
0.019354,
-0.019111,
-0.028303,
-0.029998,
-0.005636,
-0.001581,
-0.016654,
0.024962,
-0.009454,
-0.008284,
0.013736,
-0.024015,
0.011186,
-0.036950,
0.041040,
-0.001267,
-0.005513,
-0.025820,
-0.014545,
0.011508,
-0.017389,
0.030672,
-0.005980,
0.183360,
-0.042878,
0.006340,
0.071847,
0.065811,
0.153530,
-0.020503,
-0.066368,
0.072963,
0.040287,
0.143340,
0.034728,
-0.059444,
0.036895,
0.024161,
0.030713,
-0.038752,
-0.007264,
0.016319,
0.105480,
0.028504,
0.022698,
-0.014079,
-0.025249,
0.059515,
0.022264,
0.064178,
0.013725,
0.059158,
0.139130,
-0.004308,
0.031735,
0.012272,
0.023353,
-0.010000,
0.047438,
-0.019540,
0.036655,
-0.023446,
0.001190,
-0.002459,
0.015926,
0.030851,
0.053195,
0.062882,
-0.010815,
-0.048651,
-0.045861,
0.004131,
0.007075,
0.102380,
0.208160,
0.090812,
0.000610,
0.020805,
0.081325,
0.066659,
0.057752,
0.053398,
0.041126,
-0.054842,
0.022937,
0.108420,
-0.044816,
0.002146,
0.038557,
0.053562,
0.079854,
0.064406,
0.017602,
0.142030,
0.091754,
0.114230,
0.087152,
0.051268,
0.159430,
0.007483,
0.105610,
0.166640,
0.092547,
-0.017565,
-0.015281,
0.103570,
0.005735,
-0.019467,
0.134100,
0.038162,
0.033162,
0.114390,
0.071513,
0.065166,
-0.059363,
0.047681,
0.090190,
0.165260,
0.018068,
-0.046129,
0.010045,
0.080227,
-0.076618,
0.042803,
0.098783,
0.050200,
0.060720,
-0.086539,
0.108190,
0.080303,
-0.009800,
0.033488,
0.010042,
0.044307,
0.011718,
-0.077380,
-0.105530,
-0.046656,
0.023055,
-0.162260,
-0.131020,
-0.127580,
-0.113110,
0.015396,
-0.013799,
-0.018261,
-0.036430,
-0.114900,
-0.043005,
0.024900,
0.097704,
0.079667,
0.085593,
0.025982,
0.020236,
-0.060452,
-0.028622,
-0.023536,
-0.049774,
0.044446,
0.095347,
0.055173,
-0.059914,
0.034012,
0.010818,
-0.061751,
0.027191,
-0.044271,
0.058644,
-0.058949,
0.062541,
-0.110250,
-0.024403,
-0.075149,
0.063838,
-0.035615,
0.043693,
0.068062,
-0.068271,
0.033835,
-0.022401,
0.007419,
0.068914,
0.060277,
0.078160,
-0.002471,
0.032534,
0.038205,
-0.060990,
-0.097102,
-0.050915,
0.016862,
0.104840,
-0.123750,
-0.259290,
-0.231120,
-0.174580,
0.087590,
-0.049293,
0.035180,
0.026635,
-0.002190,
-0.135760,
-0.082292,
0.023432,
-0.086324,
-0.115140,
-0.349420,
-0.111640,
-0.000263,
-0.063057,
-0.173040,
-0.342700,
-0.131410,
-0.065931,
-0.045342,
-0.145660,
-0.197500,
-0.098676,
-0.056362,
0.090144,
0.097183,
0.041376,
0.120550,
0.010835,
-0.029135,
0.051606,
0.031908,
-0.009478,
-0.099331,
-0.164650,
-0.149770,
0.007278,
0.041541,
-0.014051,
-0.103210,
-0.037761,
-0.074161,
-0.076679,
0.091146,
0.015681,
0.026113,
-0.010591,
0.096056,
0.174520,
0.173940,
0.121900,
0.150370,
0.084969,
-0.019717,
0.031966,
0.002926,
0.072448,
0.188090,
-0.137780,
-0.249280,
-0.108040,
-0.031492,
0.030430,
-0.095231,
-0.161860,
-0.064615,
-0.063362,
0.084929,
-0.069122,
-0.129570,
-0.053588,
-0.039704,
0.149130,
0.044423,
0.050830,
0.181600,
0.005145,
-0.042064,
0.123300,
0.061097,
0.113950,
0.052046,
0.030214,
-0.002031,
-0.077953,
-0.071531,
0.060752,
0.045949,
-0.052664,
-0.023696,
0.016038,
0.045075,
0.009004,
-0.054676,
-0.062776,
-0.005100,
0.141580,
-0.010414,
0.037350,
0.107840,
0.077926,
0.069951,
0.187380,
0.093277,
0.038227,
0.048061,
-0.011224,
0.160560,
-0.014881,
-0.155070,
-0.273310,
-0.046904,
0.112020,
-0.032948,
-0.192570,
-0.281110,
-0.012288,
0.130440,
-0.007639,
-0.163340,
-0.234820,
-0.144080,
0.223900,
0.051198,
-0.148920,
-0.196580,
-0.157590,
-0.050622,
-0.101480,
-0.100840,
-0.038216,
0.008184,
0.043103,
-0.151630,
-0.083559,
-0.151080,
-0.037677,
-0.033286,
-0.178060,
-0.056781,
-0.110240,
-0.045744,
-0.067396,
-0.088726,
0.006496,
-0.106670,
0.063287,
-0.053243,
-0.076775,
-0.068616,
0.005606,
0.206610,
-0.113260,
-0.014673,
0.016450,
-0.016995,
-0.106010,
-0.110300,
0.062539,
0.106630,
0.137370,
-0.012790,
-0.079443,
0.125380,
0.170640,
0.103770,
-0.000549,
-0.043703,
-0.042212,
0.005293,
0.002647,
-0.144380,
-0.281830,
-0.207060,
-0.126690,
-0.127520,
-0.192300,
-0.006047,
0.023116,
0.018627,
0.068063,
0.057813,
-0.048520,
-0.015092,
-0.027578,
0.051241,
0.003371,
0.010434,
-0.019482,
0.031742,
-0.006501,
0.007529,
0.033199,
0.022892,
0.026601,
0.040282,
0.041898,
0.029791,
0.032601,
0.044937,
0.006493,
0.036661,
-0.027460,
-0.056288,
0.036586,
-0.086491,
-0.021833,
0.001920,
-0.109590,
-0.025137,
-0.174590,
-0.251050,
-0.055027,
0.016532,
-0.122640,
-0.072807,
-0.111240,
-0.010495,
0.017599,
0.082990,
0.010292,
-0.083994,
0.193680,
0.174000,
0.127300,
-0.014571,
0.017317,
0.062172,
0.019881,
0.013448,
-0.006532,
0.096033,
0.001895,
-0.047657,
0.008175,
-0.091646,
0.001629,
-0.018931,
-0.050544,
-0.035579,
-0.065338,
-0.024888,
0.023696,
-0.026750,
-0.009041,
-0.028824,
-0.081234,
0.045487,
0.024683,
-0.003938,
0.056028,
-0.035336,
0.004907,
0.128900,
0.148290,
0.071961,
0.098460,
-0.070967,
0.064861,
-0.044678,
0.013332,
0.090756,
-0.086098,
-0.100400,
-0.053065,
-0.149670,
-0.005725,
0.070655,
-0.181930,
-0.151310,
-0.116950,
-0.131060,
-0.004762,
-0.273090,
-0.195440,
-0.019197,
-0.119010,
0.023564,
0.003018,
-0.018031,
0.035658,
0.024286,
0.013929,
0.006808,
0.003800,
0.021976,
0.000894,
0.024858,
0.027228,
0.033198,
0.008866,
0.027045,
0.003594,
-0.014270,
0.030015,
-0.006925,
-0.000661,
0.039571,
0.023402,
0.010597,
0.009586,
-0.012184,
0.145220,
0.099319,
0.149060,
0.147600,
0.068865,
0.031891,
-0.026353,
-0.063116,
0.023780,
0.023047,
0.006405,
-0.058405,
-0.028603,
-0.084989,
0.122290,
-0.047016,
-0.138080,
0.020243,
0.088160,
0.100420,
0.098025,
0.066614,
0.005638,
0.068007,
0.023153,
0.151870,
0.062929,
0.139930,
0.030079,
0.155240,
0.058857,
-0.096557,
0.036755,
0.001521,
0.055998,
0.081997,
0.020942,
0.045553,
0.009067,
0.034679,
0.089566,
0.034922,
-0.043624,
-0.018472,
0.003533,
0.001640,
-0.069752,
-0.078818,
-0.104780,
0.029562,
0.070958,
0.088563,
0.045367,
0.107040,
0.131390,
0.087718,
-0.006507,
-0.022745,
-0.013642,
0.105450,
0.070885,
-0.065944,
-0.081951,
0.006194,
0.088296,
0.032723,
-0.008366,
-0.084900,
-0.033682,
0.060115,
0.234090,
0.075945,
-0.003714,
0.012410,
0.072685,
-0.007764,
-0.017026,
-0.040199,
-0.033437,
-0.052189,
-0.087856,
-0.239590,
-0.328440,
-0.187310,
-0.120210,
-0.027720,
-0.186320,
-0.353750,
-0.156490,
-0.127690,
-0.097869,
-0.145750,
-0.241740,
-0.139160,
-0.088279,
-0.087351,
0.021527,
0.037725,
-0.001660,
0.003256,
0.019579,
-0.045520,
-0.062457,
-0.072572,
0.006574,
-0.054708,
0.028790,
-0.018458,
-0.074898,
-0.067607,
-0.074221,
-0.207340,
0.012294,
-0.030707,
0.032803,
-0.074922,
-0.128730,
-0.086958,
0.051212,
-0.068701,
0.082828,
-0.016865,
0.013163,
-0.001358,
0.052186,
-0.007487,
0.054665,
0.030755,
0.046965,
0.028005,
0.046219,
0.105390,
0.056819,
0.019029,
0.119600,
0.107860,
0.167070,
0.146740,
0.122870,
0.089948,
0.069879,
0.112350,
0.083559,
0.102010,
0.038821,
0.119950,
0.076625,
0.091507,
0.114930,
0.020555,
0.047038,
0.046889,
0.031304,
0.044131,
-0.059009,
-0.028465,
-0.052460,
0.037735,
0.014804,
-0.012201,
0.066633,
-0.009009,
0.047132,
0.100080,
-0.007935,
0.072240,
-0.011837,
0.045869,
0.050282,
-0.026318,
-0.049039,
0.034413,
0.033409,
0.051419,
-0.020096,
-0.108000,
-0.079458,
-0.035781,
-0.083016,
-0.017074,
0.084866,
0.000532,
-0.002666,
-0.069329,
-0.107660,
-0.127060,
0.035365,
-0.003855,
-0.124800,
-0.184880,
-0.052298,
-0.131030,
-0.056751,
-0.121880,
-0.234410,
-0.150270,
-0.199740,
-0.087832,
-0.098572,
-0.196620,
-0.032364,
-0.165410,
-0.056423,
0.043653,
0.071786,
0.164190,
-0.049475,
-0.049925,
0.043849,
-0.053249,
0.100410,
0.114940,
0.042652,
-0.054555,
0.023520,
0.068662,
-0.047219,
-0.048376,
0.061235,
0.059625,
-0.079987,
-0.034909,
0.099187,
0.107300,
0.099897,
-0.039302,
0.049524,
0.013169,
0.005577,
0.019315,
-0.006752,
0.006414,
0.018753,
0.028853,
-0.035278,
-0.011073,
0.028191,
-0.013235,
0.022174,
-0.034464,
-0.013602,
-0.017787,
-0.062924,
0.020991,
-0.013972,
-0.047781,
-0.040119,
-0.002966,
-0.017472,
-0.011915,
-0.059300,
-0.017743,
0.014482,
0.026537,
0.100310,
0.053474,
0.051897,
0.007954,
0.065502,
0.159370,
-0.072794,
-0.049613,
-0.145930,
0.176890,
0.226980,
-0.018596,
-0.086148,
-0.094879,
-0.085819,
0.191700,
-0.164090,
-0.066878,
-0.016941,
0.025169,
0.122380,
0.020525,
-0.010232,
0.020465,
0.015876,
-0.011676,
-0.030115,
0.002326,
0.020698,
0.009455,
0.008242,
-0.025636,
0.014723,
0.019356,
0.023626,
0.017708,
-0.002980,
0.011838,
-0.022366,
0.030558,
-0.031047,
-0.026030,
0.001113,
0.011382,
-0.010412,
-0.014584,
0.011058,
-0.026278,
0.027879,
0.032852,
0.005539,
-0.020203,
-0.005952,
-0.028675,
-0.017925,
-0.008750,
0.003009,
0.034913,
0.025630,
0.022917,
0.002828,
0.013553,
-0.015724,
0.033922,
0.022581,
-0.013273,
0.020683,
-0.003536,
-0.010927,
0.009218,
0.000311,
0.010196,
0.018737,
-0.002125,
0.020974,
0.024062,
0.011154,
0.020938,
-0.010054,
0.009945,
0.014573,
0.002812,
-0.014131,
0.000393,
-0.033462,
0.014769,
-0.016089,
-0.011620,
0.019009,
-0.020257,
0.003894,
-0.049530,
-0.015820,
-0.017662,
-0.037616,
0.001795,
-0.006930,
0.012188,
0.009252,
0.033004,
-0.010605,
0.025333,
0.040443,
0.016418,
0.025359,
0.004597,
0.013096,
0.014776,
-0.001130,
0.008994,
0.009455,
-0.032565,
-0.015504,
0.024213,
-0.012857,
0.032499,
-0.027813,
0.006401,
-0.010772,
0.017902,
-0.019356,
0.011783,
0.010795,
-0.039877,
0.010212,
0.012212,
0.022003,
0.001685,
-0.002760,
-0.039610,
-0.021298,
0.000846,
0.014822,
-0.004802,
0.002773,
-0.010553,
-0.028004,
0.006512,
-0.011692,
-0.026453,
-0.012359,
-0.016795,
-0.015938,
-0.078168,
-0.012693,
0.025606,
-0.034392,
-0.043542,
-0.003113,
-0.025009,
0.015905,
-0.012800,
-0.030028,
-0.021007,
0.007577,
-0.051545,
0.024178,
0.019721,
-0.046296,
0.024905,
-0.028274,
0.025276,
-0.007517,
-0.021798,
-0.008121,
0.005895,
0.026904,
-0.021474,
-0.004867,
-0.029863,
0.000203,
0.005597,
-0.035251,
-0.035888,
-0.044152,
-0.028004,
0.011655,
0.027892,
0.028878,
0.006343,
-0.044819,
-0.036875,
0.017489,
0.007536,
-0.005730,
0.012073,
-0.000237,
0.000153,
0.009335,
-0.031433,
-0.001926,
-0.002120,
-0.017794,
0.023115,
-0.026095,
-0.017203,
0.001752,
-0.014927,
-0.024687,
0.011429,
-0.024417,
-0.008306,
-0.023436,
-0.043222,
0.013340,
0.018404,
-0.039845,
0.006184,
-0.009182,
-0.035771,
-0.014979,
0.003694,
-0.046100,
0.010042,
0.019715,
-0.009998,
-0.012133,
0.020449,
-0.007476,
-0.020587,
0.015366,
0.000481,
-0.006192,
0.003774,
0.001784,
0.029594,
0.005611,
-0.032231,
-0.044417,
-0.004470,
0.012490,
0.027038,
-0.029604,
-0.000987,
0.006324,
-0.038321,
-0.008149,
-0.001074,
-0.003782,
-0.019754,
-0.022196,
0.005618,
-0.017847,
0.028307,
-0.011863,
0.010368,
-0.028040,
-0.030975,
-0.036345,
-0.007639,
-0.046111,
-0.023058,
0.003508,
-0.014189,
0.001891,
-0.050274,
0.006802,
-0.026532,
-0.010189,
0.003113,
-0.009880,
-0.029840,
0.010021,
-0.044487,
-0.042739,
0.013387,
-0.004611,
-0.003745,
-0.034241,
-0.037884,
0.006546,
0.016893,
-0.028997,
-0.006097,
-0.042348,
-0.043939,
0.004667,
0.016375,
-0.005681,
-0.027395,
-0.022325,
0.013404,
-0.033290,
-0.012905,
0.012777,
-0.039107,
0.027674,
-0.008812,
0.027045,
0.004585,
0.021989,
-0.018742,
0.014990,
-0.008799,
0.025774,
-0.007217,
0.037717,
-0.014419,
-0.014241,
-0.039652,
0.000106,
-0.013089,
0.003164,
-0.014091,
0.014033,
-0.017488,
-0.009816,
-0.024282,
0.022567,
0.007544,
-0.027847,
0.012098,
-0.012748,
-0.021830,
-0.017035,
0.007350,
-0.028661,
0.006897,
-0.043809,
-0.026989,
-0.009642,
-0.011602,
-0.030171,
0.007166,
-0.015863,
0.023148,
-0.034019,
0.027079,
0.021097,
-0.000800,
-0.013639,
-0.009918,
-0.005710,
-0.002713,
-0.017668,
-0.020637,
-0.039061,
-0.016337,
-0.043416,
-0.043603,
-0.047943,
-0.009280,
-0.002457,
-0.007846,
-0.022677,
-0.009155,
-0.030393,
0.003568,
-0.000754,
0.004444,
-0.016744,
-0.036548,
0.007910,
0.000757,
0.025478,
-0.022307,
0.010901,
-0.032374,
0.016068,
-0.033428,
-0.030761,
-0.034786,
0.005302,
0.004659,
0.004498,
-0.026139,
-0.044784,
-0.003748,
0.001788,
0.012942,
-0.006629,
-0.013782,
-0.009706,
-0.036850,
-0.033438,
0.019027,
0.003669,
0.020174,
-0.004154,
0.001297,
-0.014166,
-0.040145,
-0.011986,
0.030384,
-0.015272,
-0.030730,
-0.039252,
0.005817,
-0.021682,
-0.041674,
-0.002858,
-0.050332,
-0.009638,
-0.030829,
-0.023836,
-0.018797,
0.024178,
0.005478,
0.007050,
0.018482,
-0.043750,
-0.017511,
0.018903,
-0.023537,
0.014836,
-0.034055,
0.014615,
-0.001432,
-0.001634,
0.003436,
-0.039343,
-0.034409,
0.014242,
-0.030817,
0.002648,
0.002125,
-0.001155,
0.004793,
0.014443,
0.027981,
0.007301,
-0.015209,
0.017715,
0.029474,
0.029679,
0.033860,
-0.021945,
-0.013652,
-0.011312,
-0.008252,
0.000859,
-0.019038,
0.034734,
-0.008606,
0.043573,
0.026091,
0.032879,
0.014765,
0.027058,
-0.012205,
-0.014784,
0.018167,
-0.019384,
-0.015519,
-0.000338,
0.014849,
0.018031,
0.019330,
-0.006203,
0.006213,
-0.008092,
-0.009781,
0.013664,
0.023304,
-0.010809,
0.020102,
-0.039855,
-0.034153,
-0.014680,
-0.014676,
-0.032617,
0.007152,
0.021687,
-0.018299,
-0.029220,
-0.030713,
0.008522,
-0.009256,
-0.009950,
-0.005690,
-0.030656,
-0.036469,
-0.006106,
0.023352,
-0.018040,
-0.002034,
0.033247,
-0.045829,
-0.009392,
0.018880,
0.005623,
0.019220,
0.018195,
-0.001887,
-0.039478,
-0.031405,
-0.024594,
0.009056,
-0.017789,
0.001154,
-0.016289,
-0.058477,
-0.000100,
0.000837,
-0.007653,
-0.019868,
-0.034525,
-0.004098,
0.012248,
-0.018119,
-0.039648,
-0.007801,
-0.017972,
-0.014665,
-0.027985,
-0.032324,
-0.020978,
0.039320,
0.024001,
-0.006753,
0.005625,
-0.005831,
-0.004303,
0.003013,
0.008965,
0.015862,
-0.012382,
-0.032507,
0.005429,
-0.030559,
-0.020835,
-0.007816,
-0.009119,
0.000933,
-0.017802,
0.007064,
0.010850,
0.037164,
-0.006735,
-0.022318,
-0.015235,
0.024361,
0.014958,
0.041173,
0.004852,
-0.013519,
0.042871,
-0.008230,
-0.002466,
0.018504,
-0.019713,
-0.020104,
-0.032421,
0.022533,
-0.029312,
-0.037771,
-0.002308,
-0.012445,
-0.033442,
-0.004913,
0.008612,
-0.020646,
-0.006283,
-0.022660,
-0.007255,
-0.037457,
0.032842,
0.019972,
0.012952,
0.024804,
-0.020759,
0.032561,
0.024042,
0.021521,
-0.024595,
0.029087,
0.031287,
0.010883,
-0.008893,
0.021450,
0.013069,
-0.012431,
-0.039744,
0.002537,
-0.026650,
-0.033610,
0.012183,
-0.005589,
-0.010643,
-0.002742,
0.005239,
0.017403,
-0.038636,
0.005358,
0.000160,
0.021670,
0.005967,
-0.041465,
-0.011274,
0.014960,
-0.028525,
0.003752,
-0.040930,
-0.029773,
-0.000159,
-0.020316,
0.006331,
-0.035510,
-0.031459,
0.002439,
-0.016774,
0.000799,
-0.019392,
-0.021342,
-0.023778,
-0.002907,
-0.040359,
-0.040018,
-0.040407,
-0.035747,
0.010282,
-0.021719,
0.018251,
-0.028923,
-0.015514,
-0.045254,
-0.013629,
-0.030559,
-0.029569,
0.010050,
-0.033104,
-0.022166,
0.018977,
-0.035159,
-0.011113,
-0.034088,
0.015517,
-0.003622,
0.028875,
-0.017937,
-0.028351,
-0.026976,
-0.034669,
-0.031667,
0.006199,
0.005450,
-0.024131,
-0.002781,
-0.045029,
-0.013880,
-0.011918,
0.025028,
-0.042316,
-0.030809,
0.011550,
-0.008674,
0.010640,
-0.022329,
0.006152,
0.000199,
0.019431,
0.012430,
0.010229,
0.032158,
-0.032248,
-0.011179,
0.023401,
0.006217,
-0.031362,
-0.032244,
-0.005078,
-0.033532,
-0.012632,
0.009702,
-0.017199,
0.022389,
-0.010027,
-0.004639,
-0.014849,
-0.025863,
-0.022178,
-0.004220,
-0.011871,
-0.025377,
-0.013707,
0.022339,
0.001684,
-0.000862,
0.005171,
-0.009106,
-0.026794,
-0.016713,
-0.024153,
0.020291,
0.016154,
-0.023381,
-0.053403,
-0.051503,
-0.038978,
0.015982,
-0.035447,
-0.016281,
0.000054,
0.010018,
-0.010756,
0.010210,
-0.010070,
-0.021190,
-0.023102,
0.022980,
0.031804,
0.023873,
0.040724,
0.027907,
0.038227,
0.005048,
0.007798,
-0.020485,
-0.011906,
0.014954,
-0.010314,
-0.012608,
0.008036,
-0.019135,
0.014194,
-0.004009,
0.026762,
-0.020048,
0.005313,
0.027988,
-0.018148,
0.042031,
-0.021172,
-0.016345,
-0.025526,
0.015578,
0.014382,
-0.017514,
0.025626,
0.000948,
0.008391,
0.025984,
0.014452,
-0.014984,
-0.000015,
-0.025752,
0.014565,
-0.000772,
0.024863,
-0.019960,
-0.002331,
-0.010581,
0.038025,
0.022691,
0.043326,
-0.020366,
0.015120,
-0.006940,
-0.022793,
0.013839,
-0.032079,
0.003473,
0.030563,
0.005509,
-0.009244,
0.022429,
-0.039630,
-0.029900,
-0.014707,
-0.030473,
-0.024455,
-0.033552,
-0.029507,
-0.029047,
-0.014650,
-0.035301,
-0.041417,
-0.016366,
0.014259,
0.014150,
-0.048419,
-0.009053,
0.004933,
0.014004,
-0.007856,
0.019758,
0.023946,
-0.022464,
0.030161,
0.026582,
0.032398,
-0.008350,
0.012960,
-0.004730,
0.028982,
0.039694,
0.025966,
0.030249,
0.028871,
-0.015858,
0.030361,
-0.012341,
0.001487,
-0.001410,
-0.018391,
0.015026,
0.020019,
0.004830,
0.001774,
-0.010562,
-0.021383,
-0.026951,
0.010718,
-0.019907,
-0.004999,
-0.029280,
0.013883,
-0.020489,
-0.005080,
-0.033140,
-0.007283,
0.022365,
-0.012726,
-0.040620,
-0.025793,
0.011252,
0.025524,
-0.014006,
0.006661,
0.010251,
0.031928,
-0.059797,
-0.089274,
-0.010882,
-0.062727,
0.041660,
-0.171590,
-0.074460,
-0.040090,
-0.061190,
-0.154220,
0.004209,
-0.060744,
-0.042501,
-0.085285,
-0.035055,
-0.138790,
-0.137720,
-0.180320,
-0.157240,
-0.055251,
-0.135090,
-0.075354,
0.065030,
0.035577,
0.045624,
-0.016382,
-0.023010,
-0.023789,
0.025333,
-0.027294,
0.012861,
0.006453,
0.040598,
-0.017861,
0.003342,
0.016609,
-0.000817,
0.006328,
0.010573,
0.003396,
0.010473,
0.010609,
0.006394,
-0.003426,
-0.027167,
-0.007241,
0.003882,
-0.016814,
0.033934,
0.054318,
0.094839,
0.046563,
0.117020,
0.117980,
0.033764,
-0.083987,
0.120700,
0.158790,
0.098096,
-0.049561,
0.058237,
0.143870,
0.175440,
0.054841,
-0.067293,
0.119180,
0.092109,
0.033130,
-0.032132,
-0.114480,
0.104940,
0.113030,
-0.113550,
-0.033051,
-0.048387,
-0.045774,
-0.054533,
-0.047572,
-0.025652,
-0.008861,
-0.006499,
-0.002660,
-0.054472,
-0.009302,
-0.023165,
-0.016670,
-0.056417,
0.000320,
-0.060134,
-0.053073,
0.055432,
0.032008,
-0.012614,
-0.009853,
0.051409,
-0.060268,
-0.062221,
-0.007137,
0.015665,
0.038520,
0.038026,
0.075047,
0.030961,
0.053166,
0.093726,
0.087788,
-0.110140,
-0.067436,
0.005018,
0.065935,
0.080099,
-0.078219,
0.024497,
-0.001325,
0.049348,
0.085796,
0.020977,
0.091756,
-0.034124,
-0.083286,
0.034543,
-0.106580,
-0.050550,
-0.091932,
-0.071316,
0.062689,
-0.084264,
0.027974,
0.059641,
0.077305,
0.113650,
-0.042187,
-0.005778,
0.110870,
0.063116,
0.022667,
0.099730,
0.111400,
0.096381,
-0.004084,
0.155070,
0.179710,
0.322530,
0.174900,
0.047456,
0.059470,
0.174520,
0.159750,
-0.035113,
0.008303,
0.068591,
-0.081744,
-0.047046,
0.046315,
0.101200,
0.032573,
-0.051097,
0.027689,
0.073927,
0.135120,
0.058331,
-0.065729,
-0.017821,
0.126010,
0.146630,
-0.002710,
0.060289,
-0.036986,
-0.026924,
0.139590,
0.038099,
0.002991,
0.017377,
-0.085723,
0.101610,
0.121180,
0.010425,
0.127980,
0.094348,
0.050720,
0.084196,
0.137250,
0.071363,
0.133300,
0.010079,
-0.047278,
-0.016894,
-0.126520,
0.014019,
-0.026788,
-0.080296,
0.053573,
-0.103940,
-0.068896,
-0.042894,
0.029457,
0.125470,
0.202450,
0.080265,
0.136930,
-0.127250,
0.087551,
0.092982,
0.165100,
0.260580,
0.028530,
0.091130,
0.091893,
-0.010255,
0.077492,
0.050340,
0.031454,
0.015513,
0.041883,
0.002626,
0.072310,
-0.002255,
-0.059529,
0.048920,
0.018323,
-0.050275,
0.037847,
-0.071140,
-0.120510,
0.034532,
-0.107960,
-0.133900,
-0.089496,
0.033016,
0.159620,
-0.122610,
-0.278470,
-0.078073,
0.003375,
0.105710,
-0.070602,
-0.269110,
-0.025792,
-0.052386,
0.122560,
-0.067417,
-0.271750,
-0.205630,
-0.260230,
-0.030577,
0.103100,
-0.045776,
0.017832,
-0.069303,
-0.010917,
-0.102520,
-0.052686,
-0.086858,
0.038524,
0.030587,
-0.131290,
-0.222440,
-0.157340,
0.039877,
-0.057631,
-0.027331,
-0.194470,
-0.212940,
0.046312,
-0.126530,
0.072132,
-0.039157,
-0.128700,
-0.153360,
-0.134700,
0.128370,
-0.000047,
-0.273270,
-0.276660,
-0.184630,
-0.077527,
-0.040371,
0.043476,
0.074273,
-0.020977,
-0.034383,
-0.088996,
-0.156290,
-0.108640,
-0.024260,
-0.119770,
-0.091106,
-0.143710,
-0.148520,
-0.013318,
-0.095955,
-0.159590,
-0.108870,
-0.010989,
-0.072096,
-0.077411,
-0.017120,
0.032389,
-0.124530,
-0.142550,
-0.019600,
-0.011033,
0.038105,
0.045711,
0.024529,
0.015704,
-0.015403,
0.123350,
-0.073854,
-0.110830,
-0.024772,
-0.022224,
0.077678,
0.050198,
-0.063580,
0.059560,
0.084221,
0.091399,
0.141690,
-0.033149,
0.176610,
0.186650,
0.165390,
0.129790,
0.069900,
0.082939,
0.034863,
-0.019148,
0.071326,
0.196770,
0.028909,
-0.084716,
-0.064147,
0.070243,
-0.037174,
0.034029,
-0.061253,
0.065620,
-0.000529,
-0.070536,
0.046295,
-0.061593,
-0.105800,
-0.044507,
-0.045547,
0.006507,
-0.109580,
-0.107230,
-0.102820,
-0.106430,
-0.135990,
-0.048278,
0.079947,
0.128470,
0.045667,
0.034170,
-0.042216,
-0.112140,
-0.019244,
0.106450,
0.025144,
-0.091136,
0.008699,
0.061827,
-0.060758,
-0.016075,
-0.002213,
-0.075655,
-0.054379,
-0.125330,
0.096066,
0.016026,
-0.062177,
0.003413,
-0.199850,
-0.037880,
-0.030298,
0.066991,
0.001959,
-0.116520,
0.017914,
0.000130,
-0.021174,
-0.078076,
-0.068948,
0.004492,
0.053188,
0.016418,
-0.063527,
-0.115280,
-0.024390,
-0.067298,
-0.012204,
0.027652,
-0.080152,
0.003519,
0.042491,
0.069561,
0.090186,
-0.089026,
-0.039149,
-0.026743,
-0.031238,
-0.038706,
0.007355,
-0.009043,
0.016704,
-0.015323,
0.056921,
0.011240,
-0.030394,
-0.007120,
0.032787,
0.002840,
-0.023270,
0.008802,
-0.000884,
-0.006817,
-0.001503,
-0.031419,
-0.036655,
-0.047069,
-0.043867,
0.007467,
-0.014083,
0.100370,
0.078843,
0.116280,
0.231990,
0.024364,
-0.015837,
0.023335,
-0.037234,
0.006857,
-0.044136,
-0.032253,
-0.075021,
-0.069190,
0.063746,
-0.054008,
-0.018959,
0.008443,
-0.061457,
-0.040666,
-0.100750,
-0.026312,
0.046358,
0.098393,
0.021090,
0.022867,
0.133530,
-0.003903,
0.068424,
-0.069792,
-0.138710,
-0.003918,
0.005587,
0.040569,
0.008022,
-0.043159,
-0.054636,
0.121020,
0.046950,
0.042789,
-0.092107,
-0.007151,
0.070838,
0.003497,
0.005062,
-0.086348,
0.013602,
-0.076288,
-0.064250,
0.091496,
0.008704,
0.110200,
0.098393,
0.191090,
0.115640,
0.153460,
0.145830,
0.035058,
0.120210,
0.028358,
0.039312,
0.181150,
0.110740,
0.116960,
0.041962,
0.058269,
0.002161,
-0.015510,
0.027512,
0.096824,
0.073260,
-0.057636,
-0.045505,
-0.065220,
0.027172,
0.047114,
0.025782,
0.042246,
0.040870,
-0.021305,
0.046196,
-0.039333,
-0.015113,
0.013972,
-0.008091,
-0.005958,
-0.012989,
0.009717,
0.017870,
0.002270,
0.003718,
-0.019102,
0.008149,
0.030113,
0.040247,
-0.023899,
0.013507,
-0.006775,
0.010559,
0.001405,
0.018956,
-0.103090,
-0.059806,
0.078292,
0.140970,
0.050265,
-0.117200,
-0.026001,
0.112940,
0.243790,
0.090813,
-0.027967,
-0.081318,
0.079815,
0.066918,
0.023173,
0.122210,
-0.060038,
0.028736,
-0.017092,
0.049264,
0.033519,
-0.053477,
-0.035196,
-0.141020,
0.049179,
0.320180,
0.194030,
0.081243,
0.124730,
0.091247,
0.104930,
0.063901,
-0.064134,
0.010951,
0.039650,
-0.005622,
0.037096,
0.003365,
0.042054,
0.071230,
0.011177,
-0.022102,
-0.011088,
0.002969,
0.096450,
0.002714,
0.003246,
-0.000725,
-0.027816,
0.009297,
-0.015437,
0.043417,
-0.062215,
0.004139,
-0.058223,
0.029515,
0.000704,
-0.009990,
0.016792,
0.018105,
0.089065,
-0.020872,
-0.054715,
-0.027899,
0.033258,
0.077420,
0.073387,
-0.037974,
0.023932,
0.081126,
-0.115910,
-0.009066,
-0.086284,
0.049438,
0.064477,
0.131200,
0.000550,
0.017104,
-0.043481,
0.051860,
0.004374,
-0.027695,
0.029170,
0.019842,
0.049289,
0.014393,
-0.013321,
-0.023551,
-0.001591,
0.039176,
-0.052082,
-0.181190,
-0.025960,
-0.177170,
-0.141210,
0.032108,
-0.050024,
0.074267,
0.034365,
-0.011886,
0.038219,
0.018228,
-0.075148,
0.100240,
0.034818,
0.186920,
0.144130,
0.198240,
0.153970,
0.210190,
0.116070,
0.151210,
0.246140,
0.141410,
-0.032512,
0.045743,
-0.114020,
0.024343,
0.052470,
-0.061603,
0.105290,
-0.067891,
-0.030352,
-0.179330,
-0.095836,
-0.021746,
0.010663,
0.024656,
-0.033868,
-0.029672,
-0.114810,
0.023970,
0.015393,
0.060396,
-0.025910,
-0.054082,
-0.041233,
0.036272,
0.071690,
0.032127,
-0.111160,
-0.058118,
-0.042370,
0.043249,
-0.056719,
-0.022773,
0.015728,
-0.051979,
-0.021877,
-0.011877,
0.037747,
0.022525,
-0.018740,
0.029262,
0.046828,
0.049503,
-0.022726,
0.049978,
0.034070,
0.038676,
0.038730,
-0.001726,
0.065651,
0.096655,
0.008131,
0.033359,
0.028100,
0.020255,
0.021060,
0.036833,
0.018777,
0.019720,
0.058442,
0.054969,
-0.048532,
0.053787,
-0.143110,
-0.042321,
0.156990,
0.102020,
0.124420,
0.013512,
-0.066825,
-0.003187,
-0.027268,
0.053870,
-0.006923,
-0.116550,
-0.066751,
-0.006674,
0.064350,
0.004756,
-0.028467,
-0.098998,
0.029341,
-0.067131,
0.094068,
0.126460,
0.113980,
-0.030315,
-0.112640,
-0.019676,
0.000182,
0.011928,
0.142870,
-0.026449,
0.136090,
0.083394,
0.112900,
0.082181,
0.046279,
0.012577,
0.042404,
0.093328,
0.052687,
-0.047072,
-0.000584,
-0.044365,
0.052427,
0.133360,
0.034660,
0.071996,
0.010651,
0.085070,
0.037037,
0.039608,
-0.034669,
-0.006836,
-0.005569,
-0.006521,
0.029256,
-0.008268,
-0.036538,
-0.014889,
-0.030773,
-0.007042,
0.010508,
0.040458,
0.043735,
0.031290,
0.008685,
-0.030143,
-0.020739,
0.026340,
0.022395,
0.018570,
0.006834,
-0.020940,
-0.030600,
-0.026919,
0.036032,
0.051077,
-0.053256,
-0.018200,
0.073457,
-0.037510,
-0.074455,
0.015692,
-0.064389,
-0.055701,
-0.138030,
-0.154900,
0.015644,
0.063882,
-0.015168,
-0.096969,
-0.040825,
-0.181540,
-0.115000,
-0.088156,
-0.152840,
-0.012079,
-0.030098,
-0.201390,
-0.078692,
-0.030200,
0.022716,
0.004151,
-0.018463,
0.014832,
-0.002371,
-0.019283,
-0.012398,
0.031212,
-0.003844,
-0.011531,
0.030770,
-0.016954,
-0.032039,
-0.021135,
-0.015216,
-0.015193,
-0.016328,
0.012022,
-0.037331,
-0.028708,
-0.007091,
-0.030681,
0.003403,
-0.030911,
0.038993,
-0.005397,
-0.028654,
0.016411,
0.012458,
0.033994,
0.014782,
0.037125,
0.021296,
0.025619,
0.031132,
0.012256,
-0.003810,
-0.011796,
-0.020868,
0.028934,
0.044363,
-0.003049,
-0.010365,
-0.012499,
-0.004534,
0.019287,
-0.011342,
-0.021287,
0.037302,
-0.028791,
-0.032198,
-0.017067,
-0.036376,
-0.000072,
0.020158,
-0.016451,
0.012244,
0.015928,
-0.027790,
-0.037349,
0.004239,
-0.009561,
-0.019837,
-0.025653,
-0.009249,
-0.017786,
-0.048793,
-0.025924,
-0.056117,
-0.024289,
0.011947,
-0.041137,
0.011838,
-0.008090,
0.021502,
-0.000051,
0.003872,
0.005700,
-0.022993,
0.020729,
-0.011217,
-0.033711,
0.017574,
-0.003287,
-0.016591,
-0.009955,
-0.034094,
0.012687,
-0.039986,
0.019400,
0.000954,
0.000728,
-0.034553,
0.008809,
-0.032992,
-0.041620,
-0.036976,
-0.021582,
0.011932,
0.018638,
0.035053,
0.068711,
-0.007712,
-0.040519,
0.030134,
0.019554,
0.016701,
0.027613,
-0.037595,
0.005949,
0.001591,
-0.066482,
0.015434,
-0.027047,
-0.013091,
-0.007270,
-0.009167,
-0.007688,
-0.017635,
0.007273,
-0.021283,
0.002186,
-0.021269,
-0.009137,
0.033231,
0.016969,
-0.006969,
0.012528,
0.049563,
-0.009550,
0.030664,
0.035212,
0.017813,
0.034466,
0.015250,
0.031816,
0.017471,
-0.000294,
-0.015947,
-0.024230,
0.037028,
-0.049677,
0.003131,
0.012807,
-0.018666,
0.004808,
0.026197,
-0.019971,
-0.031445,
-0.013068,
0.017454,
-0.019932,
-0.028198,
0.008122,
-0.053746,
-0.032608,
0.024813,
0.008577,
0.008611,
-0.002883,
0.020182,
0.004027,
-0.013554,
0.019442,
0.017810,
-0.040511,
0.013412,
-0.024839,
0.004900,
-0.007236,
-0.053605,
-0.021076,
-0.033922,
-0.023845,
-0.000692,
0.004375,
0.032381,
0.001753,
-0.027811,
-0.008862,
-0.030438,
0.001268,
-0.000765,
-0.000745,
-0.030217,
-0.014156,
-0.003237,
-0.004535,
0.037062,
0.020780,
-0.010950,
0.010674,
-0.022535,
0.002419,
-0.052067,
-0.034249,
-0.006530,
-0.013984,
-0.041865,
0.008153,
0.007216,
0.019686,
0.039093,
0.005014,
0.029045,
-0.016011,
-0.034145,
-0.030221,
0.010557,
0.034396,
-0.023725,
-0.014559,
-0.025269,
-0.015030,
-0.033963,
-0.007026,
-0.005034,
-0.006493,
-0.009713,
0.006139,
0.011300,
0.012070,
-0.002549,
0.037763,
-0.006577,
-0.013131,
-0.002997,
0.018389,
0.042509,
-0.009008,
0.015399,
0.012692,
0.008416,
-0.036112,
-0.057063,
-0.052004,
-0.031565,
-0.015071,
0.039233,
-0.042639,
-0.036663,
-0.073921,
-0.060208,
-0.037259,
0.001682,
-0.035709,
-0.065693,
-0.059697,
-0.045638,
-0.027721,
-0.018704,
0.002509,
0.013594,
-0.006704,
0.002590,
0.021070,
0.024223,
-0.001451,
0.006579,
0.007640,
0.026531,
0.012538,
-0.025333,
-0.030967,
0.000687,
-0.040569,
0.002570,
-0.012042,
-0.042076,
0.010399,
0.021230,
-0.031933,
-0.017201,
-0.045453,
0.027260,
-0.025347,
0.009149,
-0.030343,
0.016861,
-0.022585,
-0.030023,
0.009833,
0.036513,
-0.025225,
0.004348,
0.023416,
-0.020170,
0.010529,
0.015266,
-0.031561,
-0.041064,
0.003042,
-0.020858,
-0.040561,
-0.010670,
-0.029536,
-0.006373,
-0.035686,
-0.008026,
-0.029586,
0.027560,
-0.010428,
0.011452,
-0.002442,
-0.052591,
-0.020690,
-0.002450,
-0.031386,
-0.024969,
0.009352,
-0.010951,
0.006435,
-0.018581,
-0.057399,
0.021196,
0.025013,
0.010801,
-0.034439,
0.002530,
-0.014167,
-0.036073,
-0.043399,
-0.010751,
-0.037848,
0.007612,
-0.012771,
-0.036750,
0.020027,
-0.007642,
-0.035975,
-0.027966,
-0.018307,
-0.054617,
0.011514,
-0.005071,
-0.013753,
-0.014619,
0.015311,
0.003931,
0.020183,
-0.003078,
-0.017783,
0.010190,
0.007142,
0.030392,
-0.001034,
-0.026572,
0.022916,
-0.008346,
-0.020737,
-0.023911,
-0.006781,
0.002882,
0.010592,
0.021688,
-0.015311,
0.017142,
0.047228,
-0.003914,
0.008588,
-0.012307,
-0.052501,
-0.022789,
-0.018637,
-0.061213,
0.014035,
-0.009052,
0.004409,
-0.005023,
-0.042757,
0.030754,
0.018140,
-0.011135,
-0.005164,
-0.026353,
-0.033886,
-0.029717,
-0.030625,
0.005125,
-0.011146,
-0.023877,
0.028088,
-0.019799,
0.033397,
0.022153,
-0.034353,
-0.017369,
0.005753,
-0.024151,
-0.030095,
-0.031066,
0.023965,
-0.019006,
-0.003360,
-0.014501,
-0.000477,
-0.017184,
0.000650,
-0.025866,
0.025776,
-0.020617,
-0.014267,
0.004909,
0.007471,
0.010175,
-0.034922,
-0.010505,
0.040464,
-0.006772,
-0.014769,
0.033613,
0.038259,
-0.026501,
-0.006840,
0.000005,
-0.029449,
-0.001457,
0.005756,
-0.012328,
-0.000109,
-0.009589,
0.011370,
-0.005497,
0.011405,
0.017454,
-0.027893,
0.016904,
-0.026314,
-0.056463,
-0.000473,
-0.048834,
-0.021350,
0.003359,
-0.029258,
-0.029581,
-0.032717,
-0.030224,
-0.017725,
-0.013774,
0.006494,
-0.013987,
-0.032030,
-0.049060,
-0.000240,
0.000381,
-0.016380,
-0.035494,
-0.034711,
-0.042181,
-0.047977,
-0.007392,
0.002043,
0.007699,
-0.033425,
0.015745,
0.005296,
0.003340,
0.018101,
0.010896,
-0.030116,
-0.028110,
0.022079,
-0.019782,
-0.039885,
0.017892,
-0.012930,
0.026059,
-0.022556,
-0.044648,
0.006585,
0.010630,
-0.005196,
0.011927,
0.004899,
0.016865,
-0.010338,
-0.016191,
-0.012109,
0.010475,
0.034738,
0.012573,
-0.011720,
0.037119,
-0.006873,
0.005652,
-0.017874,
0.011320,
0.013777,
-0.010578,
0.008620,
-0.036931,
0.000549,
0.011196,
-0.024055,
0.013714,
0.015346,
-0.020795,
-0.020104,
0.005905,
-0.008305,
0.001175,
-0.007492,
-0.010612,
-0.013599,
-0.033513,
0.031620,
0.015775,
-0.002150,
0.035174,
0.017602,
-0.001515,
-0.016535,
0.029423,
0.028274,
0.018157,
-0.013561,
-0.013397,
-0.035033,
0.018593,
0.033569,
-0.000861,
0.004611,
0.007044,
0.013743,
0.020672,
-0.031718,
-0.010495,
-0.054970,
-0.031562,
-0.006793,
-0.029630,
-0.028908,
0.013253,
-0.044185,
0.035992,
-0.007516,
0.023100,
-0.012491,
-0.026339,
0.009747,
-0.009990,
-0.028372,
-0.004040,
-0.043032,
-0.009278,
-0.045228,
0.014232,
-0.008684,
-0.038433,
-0.018739,
0.008097,
-0.033404,
-0.019514,
-0.037436,
-0.033667,
0.006668,
0.017175,
-0.028571,
-0.039131,
0.007407,
-0.035867,
-0.019600,
-0.021621,
-0.043821,
-0.016256,
0.015133,
0.010991,
0.026730,
-0.020778,
-0.008162,
0.000734,
-0.032784,
-0.037565,
0.001361,
-0.017844,
-0.015151,
-0.011822,
-0.005355,
-0.021341,
0.012984,
-0.013546,
-0.011552,
0.014702,
0.013157,
0.018258,
-0.043759,
0.026084,
-0.003525,
-0.052317,
0.010071,
-0.037553,
-0.024316,
-0.024692,
-0.002592,
-0.041900,
-0.011937,
-0.021034,
-0.005581,
-0.016938,
-0.006473,
-0.000787,
-0.051330,
-0.054782,
-0.021798,
0.006148,
-0.037838,
-0.054867,
-0.042229,
0.009385,
-0.008975,
-0.015253,
0.028310,
-0.026469,
-0.009548,
-0.025794,
0.026704,
-0.009816,
-0.023988,
-0.014427,
-0.017862,
-0.021284,
-0.027827,
-0.057503,
-0.023487,
-0.011820,
0.002611,
-0.027185,
-0.012653,
-0.038677,
0.030212,
-0.025783,
-0.017377,
0.031538,
0.000895,
-0.024059,
-0.025829,
-0.008863,
-0.049674,
0.017854,
-0.011272,
0.005701,
-0.018620,
-0.029254,
-0.057220,
-0.035130,
-0.014604,
0.029582,
-0.039678,
-0.023580,
0.023139,
0.010555,
-0.017636,
-0.004148,
0.008839,
0.011335,
-0.033767,
0.009072,
0.012026,
-0.010513,
-0.013662,
0.000843,
0.006504,
0.012261,
-0.015944,
0.028885,
0.005732,
0.033398,
0.005763,
0.010787,
-0.041324,
-0.028328,
-0.019468,
0.018844,
-0.006583,
0.023052,
-0.025307,
0.034624,
-0.004659,
0.000223,
0.000730,
-0.018821,
-0.021057,
-0.005151,
0.010502,
0.038281,
-0.008155,
0.001415,
0.029879,
-0.013313,
0.032064,
0.001133,
0.026032,
-0.007698,
0.023398,
0.031775,
0.040856,
0.002219,
-0.020865,
0.016129,
-0.014251,
-0.028425,
-0.031021,
0.042542,
0.011575,
0.019422,
0.014880,
0.012694,
0.013720,
0.005227,
-0.028933,
-0.015284,
-0.041043,
-0.006803,
0.015623,
0.008385,
-0.017685,
0.000956,
0.018810,
0.002467,
0.024005,
0.022423,
0.026273,
0.049074,
-0.028844,
0.008451,
0.003034,
0.005675,
0.018902,
-0.009331,
0.012716,
0.009365,
-0.026158,
0.002434,
0.012400,
-0.033544,
-0.007630,
0.002466,
-0.040000,
0.011042,
-0.002855,
-0.045023,
-0.022224,
-0.002028,
-0.022508,
-0.058030,
-0.017070,
0.007841,
-0.024279,
0.032717,
0.023633,
0.026516,
0.034235,
-0.005908,
-0.030732,
0.008972,
0.019524,
-0.004869,
-0.028680,
0.026930,
0.032506,
0.004116,
-0.026624,
-0.010661,
0.019929,
0.040610,
-0.008909,
-0.004224,
-0.020715,
0.013145,
-0.027638,
-0.010978,
0.017347,
0.004446,
-0.005061,
0.036588,
-0.000250,
0.018303,
-0.001312,
0.005269,
0.006497,
0.011992,
-0.047070,
-0.008144,
0.012300,
0.006103,
-0.015534,
0.036167,
0.022981,
0.029640,
-0.022553,
0.000401,
-0.037650,
-0.043082,
-0.000373,
-0.030755,
-0.051639,
0.004104,
-0.026552,
0.025789,
-0.026429,
-0.049764,
-0.073650,
-0.090273,
-0.043163,
-0.219360,
-0.124550,
-0.065602,
-0.035044,
0.003136,
-0.070244,
-0.119900,
-0.066878,
-0.002027,
0.078788,
0.112000,
0.035926,
0.111860,
0.120770,
0.069886,
0.287840,
0.167190,
0.100720,
0.067326,
0.025314,
0.005966,
0.022287,
-0.027518,
0.029498,
-0.016069,
-0.024385,
-0.030664,
-0.005846,
-0.025456,
0.024798,
0.045548,
0.007903,
0.003218,
0.013998,
0.036765,
-0.014460,
-0.036592,
-0.023533,
0.004028,
0.027677,
-0.007234,
0.022462,
0.011284,
-0.040366,
-0.038975,
0.126000,
0.081768,
0.020091,
0.084909,
0.109660,
0.020791,
-0.069996,
0.083964,
0.073386,
0.075193,
-0.014990,
-0.150140,
0.039062,
0.063279,
0.093734,
0.171060,
0.032032,
0.109720,
0.093536,
0.212270,
0.311910,
0.167710,
0.154600,
0.050166,
0.118240,
0.017575,
-0.058699,
0.009016,
-0.001174,
-0.023966,
0.034571,
0.034350,
0.017688,
0.035068,
-0.000196,
0.062338,
0.024480,
0.021298,
-0.018514,
-0.022791,
-0.022632,
0.033893,
-0.012435,
0.013317,
-0.037796,
-0.059918,
-0.028811,
-0.025332,
0.001906,
-0.043643,
-0.036512,
-0.051643,
-0.033393,
-0.034059,
0.036438,
0.033717,
-0.001714,
-0.005572,
0.005759,
0.117040,
0.097193,
0.080004,
0.004469,
-0.009867,
0.101250,
0.066288,
0.059041,
0.033116,
0.094866,
0.065761,
-0.056793,
-0.085889,
-0.029993,
-0.063667,
-0.138320,
0.119260,
0.106810,
0.040099,
0.115550,
0.094514,
0.167710,
0.039187,
0.003734,
-0.011622,
0.128090,
0.159810,
-0.065424,
-0.107740,
-0.078302,
0.007278,
0.083246,
-0.097076,
-0.102930,
-0.116030,
-0.156880,
-0.019748,
-0.034694,
-0.069801,
-0.147070,
-0.246910,
0.124260,
0.023531,
-0.048296,
0.036810,
0.204430,
0.068179,
-0.087934,
-0.079180,
-0.039077,
0.039444,
0.064837,
-0.028717,
-0.055984,
-0.025392,
-0.022124,
0.007014,
-0.001684,
0.026399,
-0.001444,
-0.101260,
-0.015488,
-0.027501,
0.022432,
0.080353,
-0.074386,
0.074151,
0.087919,
0.123230,
-0.041108,
0.051496,
-0.020588,
0.028903,
-0.026173,
-0.124180,
0.087123,
0.008181,
0.010345,
-0.055458,
-0.090709,
0.112810,
-0.082402,
-0.109610,
-0.083915,
-0.080719,
0.009346,
-0.057521,
-0.092832,
-0.083889,
-0.070801,
-0.013604,
-0.094981,
-0.120090,
-0.054115,
-0.028557,
-0.074491,
-0.140390,
-0.170520,
-0.171140,
-0.088399,
-0.121460,
-0.019695,
-0.026083,
-0.185140,
-0.048793,
-0.042873,
-0.137920,
-0.064743,
-0.134910,
-0.002976,
0.078438,
-0.217100,
-0.162860,
-0.064846,
-0.116710,
0.163450,
0.003755,
-0.142330,
-0.133380,
-0.059028,
0.034204,
-0.055594,
0.027274,
0.005502,
0.011130,
0.062187,
0.029424,
0.144400,
0.168870,
0.133200,
0.068669,
0.096266,
0.182620,
0.160560,
0.175540,
0.097980,
-0.046549,
0.024608,
0.042722,
0.026921,
-0.009673,
-0.007228,
-0.163920,
-0.164030,
-0.149370,
-0.097267,
0.021179,
0.067027,
-0.097503,
0.009935,
0.001290,
0.142730,
0.197940,
0.152400,
0.178010,
0.204190,
0.006320,
0.154540,
0.090922,
0.118590,
0.268860,
-0.208890,
0.075848,
0.085505,
0.124480,
0.372980,
-0.088693,
-0.065517,
-0.059185,
-0.064194,
0.058109,
-0.042624,
-0.028076,
-0.081929,
-0.098510,
-0.080253,
0.025650,
0.129560,
0.068472,
0.017568,
-0.039214,
0.007798,
0.031915,
0.092907,
0.038829,
-0.107970,
0.120650,
0.065832,
0.081552,
0.052234,
-0.000705,
0.065365,
-0.055997,
-0.046188,
-0.140200,
-0.127880,
0.102650,
0.222990,
0.108350,
0.094384,
0.019062,
0.099383,
0.087490,
-0.038455,
0.053062,
0.116490,
-0.007100,
-0.076319,
-0.082229,
-0.066158,
0.028935,
-0.154520,
-0.215140,
-0.184630,
-0.129140,
-0.195850,
-0.206640,
-0.179750,
-0.082769,
-0.119000,
-0.168370,
0.011932,
-0.197000,
-0.116900,
-0.047783,
-0.059274,
0.030721,
-0.175410,
-0.109790,
-0.088248,
-0.099051,
-0.018238,
-0.086749,
-0.054956,
-0.008199,
-0.139500,
0.055483,
-0.013243,
-0.019301,
0.035518,
0.028563,
-0.153440,
-0.103010,
-0.048072,
0.049404,
-0.175900,
-0.169570,
-0.127920,
-0.017160,
0.015087,
-0.065987,
-0.140810,
-0.088450,
-0.071344,
-0.102670,
0.064431,
-0.271910,
-0.213560,
-0.117590,
-0.166900,
0.047462,
-0.275570,
-0.226160,
-0.146130,
-0.138880,
0.018415,
-0.054490,
-0.025770,
-0.048504,
0.025391,
-0.051342,
-0.081906,
-0.066763,
-0.084464,
-0.004073,
-0.015358,
-0.149430,
-0.112620,
-0.061113,
0.027521,
0.001282,
-0.095195,
-0.113300,
-0.035554,
-0.000366,
-0.038583,
-0.221230,
-0.094980,
-0.043960,
-0.002931,
-0.107360,
0.010025,
-0.003245,
-0.057369,
-0.010667,
0.016322,
-0.051206,
-0.019554,
0.025916,
-0.030159,
-0.019561,
-0.016130,
-0.049331,
-0.026646,
-0.052384,
-0.005863,
0.000616,
-0.000107,
0.001458,
-0.012998,
0.013430,
0.010756,
-0.039883,
-0.020904,
-0.027266,
-0.038302,
-0.103830,
-0.076842,
-0.014026,
-0.040989,
0.000217,
-0.087741,
0.071301,
0.053536,
-0.051721,
-0.133310,
0.035741,
0.035483,
-0.113380,
-0.045180,
-0.052014,
0.154440,
-0.064712,
-0.055855,
-0.145610,
-0.038826,
-0.192910,
-0.264750,
-0.188890,
-0.227520,
-0.214640,
-0.087723,
-0.065535,
-0.058663,
-0.056376,
-0.014407,
-0.141410,
0.012600,
-0.018401,
0.009466,
-0.088097,
-0.063830,
-0.088681,
-0.163340,
0.015164,
-0.127900,
-0.145740,
-0.146190,
-0.167960,
-0.165890,
-0.111280,
-0.048534,
-0.094307,
-0.142320,
-0.179340,
-0.254620,
0.124580,
0.042158,
-0.023227,
-0.012866,
0.083191,
-0.011372,
0.066011,
0.111490,
0.107260,
0.114280,
0.140120,
0.089756,
0.046839,
0.071710,
0.011505,
0.093829,
0.100060,
0.030311,
-0.078249,
0.058769,
-0.004550,
0.154160,
0.064729,
-0.052506,
0.114060,
0.039654,
0.026284,
-0.014274,
-0.018441,
0.002265,
-0.000383,
0.012600,
0.008866,
0.020116,
0.034170,
0.018040,
-0.033383,
0.018703,
-0.040634,
0.000964,
0.001765,
0.019593,
-0.028539,
-0.039552,
0.016323,
0.046001,
0.024957,
0.014967,
0.001591,
0.002818,
0.157470,
-0.049501,
-0.007814,
-0.020932,
0.036684,
0.173070,
-0.024202,
-0.021077,
-0.023868,
-0.038435,
-0.065459,
-0.091192,
-0.075023,
-0.148300,
-0.025778,
-0.080923,
-0.121550,
-0.020646,
-0.076761,
-0.071511,
-0.088906,
0.001902,
0.011477,
0.057052,
0.031469,
0.001700,
0.057731,
0.066190,
-0.009667,
-0.041655,
-0.080031,
-0.035494,
-0.032729,
0.020995,
-0.023465,
0.033171,
-0.038065,
-0.128410,
-0.046241,
-0.039594,
0.112450,
0.074323,
-0.021885,
0.000261,
-0.039335,
0.131150,
0.068470,
0.086237,
0.016377,
0.011200,
-0.140410,
-0.025778,
-0.124190,
-0.117740,
-0.076786,
-0.107220,
-0.061627,
-0.020905,
-0.077362,
0.061033,
0.059081,
0.069143,
-0.023001,
-0.104460,
0.035423,
0.106430,
0.003639,
-0.055480,
0.022152,
-0.028391,
0.142130,
0.039959,
0.062587,
0.080151,
0.028879,
0.005871,
-0.053304,
-0.005028,
-0.060847,
0.009985,
-0.062230,
-0.028830,
0.027115,
0.042912,
0.009521,
-0.026270,
0.070091,
0.041090,
0.051764,
0.035668,
-0.043220,
0.046247,
-0.014814,
0.038616,
0.103890,
0.105990,
-0.112860,
-0.136440,
-0.041368,
-0.017516,
0.041791,
-0.067687,
-0.075449,
0.008526,
0.097949,
0.059857,
0.005485,
0.011172,
0.027141,
0.063332,
-0.052072,
-0.020718,
0.095766,
-0.023063,
0.083787,
0.123080,
0.070402,
-0.000726,
-0.048018,
0.087292,
0.112320,
-0.005085,
0.012651,
-0.008257,
0.029352,
0.010315,
-0.020378,
-0.041757,
0.026623,
-0.086094,
0.020748,
-0.080314,
-0.102280,
-0.022010,
0.038035,
0.004026,
-0.071206,
-0.061024,
-0.152200,
0.000994,
0.124690,
-0.058374,
-0.131690,
-0.088189,
-0.039452,
0.037666,
0.095134,
-0.007170,
-0.005895,
-0.029567,
-0.001800,
0.021096,
-0.022837,
-0.031637,
0.001291,
-0.044957,
0.012563,
-0.052362,
0.033724,
-0.083709,
-0.049114,
0.022055,
-0.066444,
-0.020175,
0.062270,
-0.001169,
-0.005189,
-0.017525,
-0.009543,
0.077202,
0.022481,
-0.051125,
-0.007821,
0.002050,
0.050261,
-0.288680,
-0.069972,
0.009684,
-0.069489,
-0.028038,
-0.145260,
0.068985,
0.035871,
-0.004491,
-0.079296,
0.047749,
0.039265,
0.112030,
0.071906,
0.072295,
0.179370,
0.122890,
0.028414,
0.042079,
0.068951,
0.269570,
0.106110,
-0.042878,
0.055651,
-0.006436,
-0.041454,
0.051360,
-0.024340,
0.017503,
0.071318,
-0.016230,
0.015730,
-0.035018,
0.026569,
-0.032098,
0.000392,
0.062652,
-0.022020,
-0.041492,
0.055605,
-0.017122,
-0.035044,
-0.027735,
-0.070285,
0.019793,
-0.095913,
-0.003619,
-0.035772,
-0.076674,
0.081476,
0.019181,
0.021587,
-0.043467,
-0.003493,
-0.035692,
-0.008307,
0.021370,
0.030177,
-0.006194,
-0.041299,
-0.048839,
-0.008750,
-0.014885,
-0.017520,
-0.000658,
0.028871,
-0.001774,
-0.008633,
-0.026655,
0.040705,
-0.067263,
0.015970,
0.039367,
-0.012720,
-0.011493,
0.168140,
-0.016166,
0.001311,
-0.059506,
-0.062299,
-0.021573,
-0.066166,
0.006435,
-0.089047,
-0.015665,
0.040645,
0.058391,
-0.035111,
-0.096136,
-0.046492,
0.073472,
0.115330,
-0.003657,
-0.121680,
-0.013763,
-0.116870,
-0.087487,
0.004466,
-0.062409,
0.021711,
0.003621,
0.058295,
0.070903,
0.125500,
0.023144,
0.015785,
0.017873,
-0.023663,
-0.000497,
-0.075563,
0.072190,
0.054327,
-0.087244,
-0.088536,
-0.240760,
-0.015192,
0.027595,
0.046900,
-0.094893,
-0.241370,
0.002698,
0.044694,
-0.010840,
-0.020708,
-0.181820,
0.025577,
0.041022,
0.009862,
0.036484,
-0.000378,
-0.002124,
-0.010108,
0.007329,
0.023294,
-0.026127,
0.009260,
-0.008956,
0.010944,
0.002862,
0.041002,
-0.029567,
-0.010049,
0.000379,
-0.001086,
0.009217,
0.021403,
-0.054811,
0.023089,
0.007731,
0.015703,
-0.249110,
-0.109020,
-0.164160,
-0.228040,
-0.183560,
-0.050256,
-0.006420,
0.051681,
0.036634,
0.000784,
0.013224,
-0.049070,
0.053150,
0.032660,
-0.038453,
-0.124540,
-0.101220,
-0.106130,
-0.174060,
-0.228160,
-0.158530,
-0.011238,
0.088087,
-0.052653,
-0.091760,
0.014320,
-0.025205,
0.024646,
-0.004404,
-0.010536,
0.035761,
0.008976,
-0.019410,
0.021898,
-0.010048,
-0.064887,
-0.039088,
0.013244,
0.038693,
-0.000669,
-0.022054,
-0.039677,
-0.021137,
-0.040690,
-0.015930,
-0.014788,
-0.053097,
0.018544,
-0.005840,
-0.043423,
0.087562,
0.042765,
-0.020056,
0.024214,
0.065978,
0.112730,
0.006115,
-0.029553,
0.025238,
0.045431,
0.024068,
-0.057033,
-0.045872,
-0.033511,
-0.002922,
-0.019803,
0.016818,
-0.003691,
-0.011918,
0.077898,
-0.047830,
0.011535,
-0.084092,
-0.018301,
-0.040948,
0.110310,
0.131790,
0.146650,
0.119560,
0.164410,
0.144450,
0.087706,
0.068179,
0.017772,
0.003567,
0.066125,
0.088207,
0.028157,
0.038043,
0.054947,
-0.119140,
-0.011048,
0.062168,
0.077758,
0.046772,
-0.039956,
0.138330,
0.195410,
0.055478,
-0.000483,
0.033039,
0.042955,
0.090724,
0.102710,
0.116940,
-0.049915,
0.070982,
0.064249,
0.028351,
0.026395,
-0.020735,
0.003838,
0.082542,
0.052488,
0.061787,
-0.024702,
0.081462,
0.043860,
0.073862,
0.179620,
0.009012,
-0.069114,
-0.015419,
0.078060,
0.162620,
0.125050,
-0.042645,
0.022928,
0.082868,
0.104810,
0.037326,
-0.035319,
-0.131180,
-0.059271,
0.001740,
-0.050445,
-0.043972,
-0.086008,
-0.078267,
0.069307,
0.020776,
0.143760,
0.069930,
0.052047,
0.068324,
0.114220,
-0.034758,
-0.009178,
0.107100,
-0.006071,
-0.349430,
-0.164260,
-0.115130,
-0.123860,
-0.030574,
-0.212150,
-0.135940,
-0.051880,
-0.067196,
-0.071404,
-0.246780,
-0.132390,
-0.118130,
-0.117410,
-0.073719,
-0.190840,
-0.112350,
-0.057088,
0.018089,
-0.034228,
-0.183780,
-0.087693,
0.011359,
0.101090,
-0.077818,
0.008511,
-0.057515,
-0.021166,
0.082895,
0.040958,
-0.159280,
-0.104420,
-0.033983,
0.003410,
-0.012126,
0.048139,
-0.005734,
-0.031856,
-0.042822,
0.098276,
0.140630,
-0.069666,
0.000152,
-0.016024,
0.129860,
0.004787,
-0.057918,
-0.011312,
0.022847,
0.056593,
-0.075618,
0.051868,
0.078746,
0.109130,
0.168640,
0.014819,
0.118370,
0.099197,
0.223160,
0.195630,
-0.052270,
-0.005320,
0.058919,
0.161260,
-0.006091,
-0.124900,
-0.178430,
-0.235640,
-0.004742,
-0.035521,
-0.149590,
-0.202660,
-0.215360,
-0.048213,
-0.080639,
-0.072244,
-0.040257,
-0.026423,
0.021042,
0.025303,
0.034077,
0.103400,
0.154760,
0.122850,
0.023954,
0.071721,
0.142870,
0.091474,
0.053829,
0.009849,
-0.032871,
-0.112290,
-0.049434,
0.034641,
0.009350,
-0.048296,
-0.129210,
-0.030731,
0.073623,
0.185040,
-0.186730,
-0.138320,
-0.186470,
-0.112860,
-0.021091,
-0.319060,
-0.067835,
-0.077447,
-0.115680,
0.013006,
-0.207960,
-0.168360,
-0.015833,
-0.086461,
-0.064997,
-0.008055,
-0.051982,
-0.103360,
-0.098834,
-0.027302,
0.180500,
0.113600,
0.021780,
0.061011,
0.147580,
0.042136,
-0.036230,
0.050710,
0.079700,
0.209380,
-0.193210,
-0.069689,
0.082672,
0.124370,
0.223010,
-0.047648,
0.008849,
-0.038891,
0.154600,
0.149490,
-0.195860,
0.006635,
0.018133,
0.105340,
0.102180,
-0.250190,
-0.215410,
-0.157220,
-0.052197,
-0.028284,
-0.066569,
0.065429,
-0.046836,
0.003113,
0.244020,
0.007576,
-0.075210,
0.007570,
0.064221,
0.138640,
-0.085956,
0.025609,
-0.079127,
-0.081240,
0.086083,
-0.076507,
0.013110,
0.063016,
0.001597,
-0.019927,
-0.047885,
0.076292,
0.063021,
-0.054517,
-0.074079,
-0.295730,
-0.229490,
-0.248260,
-0.186430,
-0.017016,
-0.274210,
-0.204520,
-0.194310,
-0.122250,
0.001062,
-0.151370,
-0.053073,
0.093703,
0.022635,
0.118400,
-0.122200,
-0.012682,
0.164000,
-0.037003,
0.024289,
0.098956,
0.043339,
-0.001429,
-0.019373,
0.030460,
0.004010,
-0.006203,
-0.028298,
-0.052950,
-0.038448,
-0.012351,
-0.011687,
-0.010942,
-0.021929,
-0.040684,
-0.010273,
-0.000592,
-0.039142,
-0.021409,
-0.020685,
-0.031718,
-0.049307,
-0.041568,
-0.007741,
-0.016879,
-0.029684,
-0.033917,
-0.017769,
-0.051433,
-0.062540,
-0.072805,
-0.058415,
-0.067909,
-0.113910,
0.074365,
0.166970,
0.025257,
-0.005805,
-0.021326,
0.072605,
0.100970,
0.046746,
0.065229,
0.115090,
-0.017707,
-0.141600,
0.011414,
-0.006362,
-0.100750,
0.082704,
-0.017122,
0.073150,
0.323030,
0.038666,
0.162760,
-0.083547,
-0.107980,
-0.115990,
-0.148150,
-0.093356,
-0.091424,
-0.170540,
-0.139550,
-0.113950,
-0.137160,
-0.065592,
-0.034729,
-0.052846,
-0.138250,
-0.041705,
0.058930,
-0.034194,
-0.061737,
-0.031113,
0.035731,
0.030517,
-0.001780,
-0.044996,
0.020728,
0.011321,
-0.005621,
-0.063441,
-0.119140,
0.004668,
0.026406,
0.074715,
-0.049196,
-0.033159,
-0.000143,
-0.014821,
0.103470,
0.116480,
0.009202,
0.114320,
-0.024612,
-0.011257,
0.069782,
0.049212,
0.073895,
0.036101,
0.062215,
0.012579,
0.066462,
-0.015416,
-0.056756,
0.021465,
0.001241,
-0.009173,
-0.014775,
0.006272,
-0.015003,
0.005570,
0.000147,
0.020982,
-0.004629,
0.011395,
0.002193,
0.010738,
-0.011111,
0.008330,
-0.054573,
-0.017636,
0.014500,
-0.028032,
0.034649,
0.024473,
0.003666,
0.037033,
0.000737,
-0.022215,
0.081438,
0.093634,
0.070478,
0.115420,
0.170120,
0.004889,
0.103720,
0.065328,
0.035103,
0.125420,
-0.113800,
0.018353,
0.002941,
0.122840,
0.030659,
-0.053778,
-0.029208,
0.024178,
0.101790,
0.058695,
-0.004133,
-0.053247,
-0.081255,
0.053963,
-0.048828,
-0.032012,
-0.048615,
-0.144840,
-0.154740,
-0.024957,
-0.115270,
-0.148740,
-0.153220,
-0.161240,
-0.077630,
-0.161250,
-0.087429,
-0.109690,
-0.131800,
-0.147350,
-0.049708,
-0.030876,
-0.010895,
0.020981,
-0.085480,
0.005040,
0.090303,
0.035717,
0.104270,
-0.000951,
0.080529,
0.079720,
0.047924,
0.087154,
-0.063361,
0.104120,
-0.006688,
0.040261,
0.135740,
-0.006372,
0.045918,
-0.062126,
-0.034782,
-0.001730,
-0.061241,
-0.064398,
0.023657,
-0.039159,
-0.008249,
0.015245,
-0.205460,
-0.129450,
-0.047221,
-0.022074,
-0.011288,
0.015300,
-0.040520,
-0.015059,
0.032861,
0.078563,
0.097297,
0.009996,
-0.018025,
0.044599,
0.007717,
0.042163,
0.120440,
0.045317,
0.040293,
-0.034003,
0.119410,
0.012823,
0.059896,
0.026901,
-0.051494,
-0.017006,
-0.073934,
-0.043573,
-0.095400,
-0.019980,
-0.095976,
0.024878,
0.079690,
-0.080390,
0.038828,
0.074760,
0.061177,
-0.057402,
0.018855,
0.055810,
0.066634,
0.048493,
0.041687,
0.149540,
0.098856,
0.113280,
0.012837,
0.022337,
0.086761,
0.035348,
0.032667,
-0.034158,
-0.071076,
0.017741,
-0.014399,
-0.032616,
-0.016264,
-0.040972,
-0.037774,
-0.099124,
-0.106560,
-0.093227,
-0.132680,
0.054015,
-0.055963,
-0.162860,
-0.193750,
-0.085125,
-0.092905,
-0.132770,
-0.005711,
-0.136440,
-0.045281,
-0.041339,
-0.121210,
-0.148350,
-0.083706,
-0.030050,
-0.062041,
0.003962,
-0.033882,
0.019710,
0.003160,
-0.011888,
-0.009640,
-0.011020,
0.027439,
0.004544,
-0.050622,
-0.010096,
-0.016040,
0.021436,
-0.048644,
-0.052519,
0.022854,
0.025577,
-0.008347,
-0.002378,
0.041844,
-0.012168,
-0.011215,
-0.022189,
-0.008295,
0.054561,
-0.018371,
0.074650,
-0.018382,
-0.125550,
-0.085148,
0.033755,
-0.081627,
-0.168270,
-0.193290,
-0.114470,
0.035521,
-0.174550,
-0.137580,
-0.258100,
-0.192570,
-0.030788,
-0.125230,
-0.167350,
-0.237240,
0.123670,
-0.016513,
-0.158610,
-0.103540,
-0.048746,
0.164720,
0.095574,
-0.202570,
-0.075964,
-0.051186,
-0.125370,
-0.053833,
-0.005249,
-0.060370,
-0.080840,
-0.078349,
-0.020172,
0.085787,
0.054447,
0.000494,
-0.053654,
-0.016325,
0.069005,
-0.007152,
-0.031527,
-0.023210,
-0.001388,
0.090165,
0.002262,
0.040790,
0.044741,
-0.070354,
0.005426,
-0.013278,
-0.044419,
-0.011219,
-0.041907,
0.050443,
0.009818,
0.072063,
0.027899,
0.007500,
-0.017517,
0.041145,
-0.003344,
0.023894,
-0.006202,
0.008708,
0.034184,
0.068176,
0.004200,
0.053391,
-0.020313,
-0.021211,
-0.000433,
-0.015491,
0.001984,
0.044340,
0.127700,
0.120510,
0.095258,
0.079082,
0.015398,
-0.031336,
0.052312,
0.090913,
0.057086,
0.171690,
-0.047498,
-0.005540,
0.054057,
0.009410,
0.075123,
0.069956,
0.000777,
0.055038,
-0.054201,
0.130750,
0.027971,
-0.021461,
-0.078278,
-0.051225,
-0.002348,
-0.010860,
0.040044,
-0.026831,
-0.067775,
0.086611,
0.064919,
0.067371,
0.050044,
0.042407,
0.003046,
-0.029026,
-0.056378,
0.209410,
0.104070,
-0.101760,
-0.102030,
-0.140410,
0.115970,
0.081295,
0.032663,
-0.060018,
0.029271,
0.124450,
0.082125,
0.001467,
-0.001217,
0.013906,
0.021229,
0.011699,
0.018853,
0.013126,
0.015175,
-0.014878,
-0.014370,
-0.001108,
-0.034173,
0.009085,
-0.000142,
-0.004184,
0.004332,
0.020500,
0.004702,
-0.005911,
0.033143,
-0.030545,
0.021795,
0.014727,
0.023424,
0.008383,
-0.036167,
0.025544,
-0.023165,
-0.126070,
-0.097915,
0.037248,
-0.032224,
-0.222570,
-0.086014,
-0.005194,
0.145330,
-0.112250,
-0.330970,
-0.023177,
0.059137,
-0.039789,
-0.060992,
-0.143350,
-0.063285,
0.037833,
-0.182830,
-0.190000,
-0.154400,
-0.051707,
0.010838,
-0.028100,
-0.013305,
-0.024609,
-0.013340,
0.000121,
0.027040,
-0.012155,
0.026334,
0.019862,
0.034817,
0.045612,
0.007623,
0.030411,
-0.014138,
0.007653,
-0.022828,
-0.029079,
0.001215,
0.046273,
-0.031963,
0.009623,
0.054067,
0.056628,
-0.010379,
-0.043272,
0.079937,
0.056533,
0.039515,
0.044462,
0.150000,
0.033469,
0.009553,
0.075543,
0.083523,
0.075256,
-0.050612,
0.050578,
0.171850,
0.189210,
-0.059401,
-0.124000,
0.102200,
0.067405,
0.046948,
-0.081168,
-0.068075,
0.039564,
0.063958,
0.027760,
-0.045274,
0.034178,
0.145840,
0.046849,
-0.044585,
-0.011859,
-0.019357,
-0.089251,
-0.067385,
-0.175710,
-0.233310,
-0.021439,
-0.017864,
-0.054831,
-0.117800,
-0.316160,
-0.227200,
-0.101300,
0.081021,
-0.104050,
-0.332300,
-0.156140,
-0.143190,
-0.026135,
0.018402,
-0.146530,
-0.071147,
0.004218,
0.064481,
0.041392,
-0.024884,
-0.042734,
0.062496,
0.144280,
0.009496,
-0.023985,
0.014035,
0.066419,
0.157590,
-0.026069,
-0.242660,
0.104040,
-0.011799,
0.169880,
0.024524,
-0.081839,
0.100300,
0.123400,
0.075758,
0.024150,
-0.110450,
0.061140,
-0.006410,
0.005513,
0.036626,
-0.022491,
0.019582,
-0.175570,
-0.189630,
-0.021919,
-0.012493,
-0.050377,
-0.017338,
-0.100240,
-0.110870,
-0.143280,
-0.032724,
-0.019642,
0.071037,
0.014866,
-0.088590,
0.034443,
0.039948,
-0.030191,
-0.103660,
-0.152820,
0.004591,
-0.045291,
0.025702,
0.040125,
-0.060416,
0.078669,
0.094899,
-0.064889,
0.059852,
0.020363,
0.130300,
-0.005892,
-0.176140,
0.044417,
0.013808,
0.072640,
-0.154970,
-0.112140,
0.071797,
0.022549,
-0.012954,
-0.221880,
-0.151340,
-0.106070,
-0.024893,
-0.053352,
0.009322,
0.020433,
0.110000,
-0.148110,
-0.239840,
-0.117280,
0.011435,
0.049381,
-0.142230,
-0.211000,
-0.132690,
-0.076730,
0.019319,
-0.129610,
-0.205660,
0.078780,
0.123700,
0.241800,
0.052782,
-0.130530,
-0.093248,
0.006865,
0.058735,
-0.024668,
-0.106280,
-0.186140,
-0.141290,
-0.145120,
0.016012,
0.062389,
-0.069844,
-0.194200,
-0.127880,
-0.052799,
0.170810,
0.059110,
-0.044040,
-0.027999,
-0.095291,
0.063555,
0.102280,
-0.060334,
0.027195,
-0.039699,
-0.024053,
0.017323,
-0.045646,
0.062270,
-0.021640,
0.019470,
0.012400,
-0.053325,
0.015146,
0.094982,
-0.061965,
0.026735,
-0.051686,
-0.093470,
-0.037790,
-0.134860,
-0.118330,
-0.130650,
0.036859,
-0.012332,
-0.142840,
-0.044244,
0.065556,
0.042171,
-0.003711,
0.047904,
-0.054201,
0.068849,
0.097784,
0.099885,
-0.061224,
0.078818,
0.112650,
0.125740,
0.066523,
0.036277,
0.015932,
-0.087484,
-0.045949,
-0.003543,
0.019155,
-0.042835,
-0.071980,
0.030662,
0.023501,
-0.020460,
-0.017580,
-0.060622,
0.002592,
0.123770,
-0.030030,
0.003313,
0.060371,
0.018130,
0.108630,
0.021522,
-0.024587,
-0.036449,
0.019387,
-0.086087,
-0.093550,
-0.276780,
-0.114230,
-0.311570,
0.111500,
0.009526,
-0.006756,
-0.228290,
-0.239960,
-0.169180,
0.058032,
0.017728,
-0.041967,
-0.077617,
0.057501,
0.085891,
-0.053643,
-0.150820,
-0.167330,
-0.121420,
0.049882,
-0.087591,
-0.230960,
-0.039862,
-0.075558,
0.017338,
-0.174920,
-0.044647,
0.005457,
-0.096437,
-0.053959,
-0.147280,
0.104910,
0.096056,
-0.017376,
-0.096748,
-0.050689,
0.058345,
0.027982,
-0.006344,
-0.191230,
-0.063939,
-0.070507,
0.101670,
0.139510,
0.064978,
0.012544,
0.041114,
0.010371,
-0.022511,
0.011173,
0.051469,
0.038076,
0.076762,
0.015571,
0.017668,
0.008777,
0.064072,
0.103600,
0.071404,
0.037371,
0.009015,
0.053739,
-0.049552,
0.004259,
0.038677,
-0.006781,
-0.030229,
-0.049841,
0.126550,
-0.030516,
0.025203,
0.032879,
0.006170,
0.056489,
-0.027500,
-0.033588,
-0.006773,
0.003547,
0.016591,
0.043168,
-0.048612,
-0.023447,
0.048803,
0.078428,
0.047366,
-0.000489,
0.031906,
0.006107,
0.057361,
0.030285,
0.006373,
0.007427,
0.033467,
0.044539,
0.026928,
-0.039278,
-0.064474,
-0.168440,
0.003116,
0.021874,
-0.094477,
-0.010153,
-0.171170,
-0.083741,
0.118200,
0.045581,
0.048197,
-0.089387,
-0.017155,
-0.020984,
0.009390,
0.006305,
-0.158730,
-0.077378,
0.028763,
0.010206,
0.130390,
-0.002418,
-0.019525,
0.028984,
-0.030236,
-0.013934,
0.042445,
0.101790,
0.023240,
-0.103480,
-0.142660,
0.040544,
0.136350,
0.033892,
-0.018684,
-0.114390,
-0.098415,
0.099520,
0.075535,
-0.049766,
-0.033133,
-0.045067,
0.066963,
0.086025,
0.121100,
0.072850,
-0.041510,
0.047004,
-0.001468,
-0.036610,
-0.013004,
-0.048261,
0.039637,
-0.006042,
-0.139350,
-0.274370,
-0.013794,
0.101020,
-0.095438,
0.041840,
-0.153170,
0.043160,
-0.042153,
-0.157460,
0.035712,
-0.105030,
-0.057755,
0.013697,
-0.235310,
-0.106090,
-0.090114,
-0.032476,
-0.160530,
0.020377,
0.028201,
-0.022622,
-0.033973,
0.018957,
0.002522,
0.007780,
0.006356,
0.007918,
-0.002825,
-0.024857,
-0.000795,
0.004482,
0.012479,
-0.024787,
0.008946,
-0.003348,
-0.025553,
-0.018607,
-0.016963,
-0.035182,
0.028707,
0.017964,
0.007123,
-0.004257,
0.078989,
-0.103670,
-0.087587,
-0.108210,
-0.034315,
-0.116540,
-0.083320,
-0.025396,
-0.123620,
-0.257920,
-0.338370,
-0.138910,
0.017098,
-0.036334,
-0.186520,
-0.465680,
-0.016424,
0.004598,
-0.062624,
-0.134650,
-0.017977,
0.018626,
-0.029857,
0.019502,
-0.030674,
0.034314,
-0.042373,
-0.158140,
-0.025301,
-0.035529,
0.001013,
0.011110,
-0.007075,
0.027236,
0.029703,
-0.095286,
-0.040323,
0.014032,
0.025703,
0.109680,
-0.111800,
0.023298,
0.079809,
0.000542,
0.091084,
-0.094006,
-0.018669,
0.022760,
-0.052464,
0.176960,
-0.015008,
0.054764,
0.000550,
0.065283,
0.142870,
0.064890,
0.008700,
0.060145,
-0.036132,
0.083331,
0.104530,
0.036038,
-0.079040,
-0.002614,
0.051454,
0.119090,
-0.022862,
-0.022711,
-0.015865,
0.002228,
0.016359,
0.003243,
-0.069154,
-0.047576,
-0.040547,
-0.064782,
-0.160270,
-0.236660,
-0.127880,
0.051930,
-0.279390,
-0.294820,
-0.324230,
-0.200530,
-0.169350,
-0.091245,
-0.194770,
-0.227420,
-0.086474,
0.039473,
-0.089769,
0.001867,
-0.048700,
-0.023197,
-0.000218,
0.029479,
-0.000813,
-0.012192,
-0.041439,
-0.037962,
-0.065300,
-0.277970,
-0.195370,
-0.149710,
-0.248170,
-0.260810,
-0.130940,
-0.354470,
-0.252840,
-0.251250,
-0.240540,
-0.223470,
-0.150540,
-0.083371,
-0.068824,
-0.219760,
-0.097068,
-0.093302,
-0.021930,
-0.120180,
-0.139920,
-0.091008,
-0.065457,
0.008588,
-0.067582,
-0.037953,
0.058074,
0.039721,
0.063677,
0.099971,
0.105960,
0.115810,
0.087306,
0.038676,
0.147630,
0.144330,
0.132950,
0.083554,
0.016375,
0.003426,
0.096951,
0.120630,
0.026542,
-0.049400,
0.024950,
0.125360,
0.048438,
-0.001894,
0.048233,
0.013618,
0.011713,
0.053978,
0.043122,
0.047638,
-0.047412,
0.034752,
-0.032747,
0.019194,
0.003674,
-0.057456,
-0.014556,
-0.007779,
0.018696,
-0.043013,
-0.020800,
0.050420,
0.003936,
0.014074,
0.026076,
0.010580,
0.043479,
0.024165,
-0.005817,
0.018848,
-0.003947,
-0.046692,
-0.031325,
0.077429,
-0.186370,
-0.098983,
0.087323,
0.000897,
0.123290,
-0.100440,
-0.022781,
-0.027116,
-0.065524,
-0.048337,
-0.067529,
-0.182700,
0.004013,
-0.048206,
-0.043101,
0.015931,
-0.039497,
-0.057819,
-0.062485,
-0.062309,
-0.048732,
0.008131,
0.058446,
-0.044140,
-0.046627,
0.065446,
0.100890,
0.208440,
-0.089862,
-0.247810,
-0.031003,
0.061553,
0.105220,
-0.129340,
-0.111850,
0.045644,
0.113790,
-0.140060,
-0.111450,
-0.033623,
0.090393,
0.165840,
-0.228710,
-0.051920,
0.107550,
0.062343,
0.119860,
0.063260,
0.006358,
0.055787,
0.053115,
0.000334,
0.022268,
0.011386,
0.063259,
0.009953,
0.015796,
0.011780,
-0.031084,
0.011082,
0.016688,
0.031496,
0.037797,
-0.008874,
0.009216,
-0.008977,
-0.029275,
0.017632,
0.037257,
-0.006704,
0.007106,
0.042359,
-0.173960,
-0.144560,
0.015074,
0.161730,
0.157050,
-0.049494,
-0.278220,
-0.132540,
-0.007562,
0.192900,
0.082144,
-0.010569,
-0.033810,
0.011657,
0.007201,
0.020196,
0.079203,
0.071978,
0.092400,
0.016576,
-0.000050,
-0.006033,
0.087797,
0.054187,
-0.072103,
-0.015429,
0.056364,
0.024242,
0.045042,
0.161740,
-0.087523,
-0.023708,
-0.029887,
0.002097,
-0.010651,
0.052721,
0.050642,
-0.024899,
0.024041,
0.041101,
0.034185,
0.031182,
-0.050886,
-0.029946,
-0.002172,
0.176490,
0.030827,
0.063758,
-0.116530,
0.004790,
0.024499,
0.017604,
0.031411,
0.020538,
0.022582,
-0.020917,
0.028872,
0.025299,
0.035227,
-0.036107,
-0.036831,
0.021443,
0.010692,
0.003747,
-0.012736,
0.000658,
-0.010083,
0.026680,
0.024881,
-0.009527,
-0.027574,
-0.012947,
0.003993,
0.004994,
-0.061395,
0.051855,
0.098474,
0.259750,
0.160260,
0.104170,
0.045988,
0.111000,
0.142250,
0.052001,
0.106990,
0.029520,
0.045483,
0.078855,
-0.012263,
-0.106030,
0.048385,
0.012118,
0.038871,
-0.013792,
-0.111020,
0.065330,
0.059792,
-0.022856,
0.018721,
-0.186130,
-0.026551,
0.003477,
0.002940,
0.015193,
0.022402,
0.011125,
0.039746,
0.025271,
0.008141,
-0.018006,
0.040495,
0.000237,
-0.009178,
0.004487,
-0.049279,
0.030667,
0.054772,
0.045591,
-0.002023,
0.039547,
0.019788,
-0.016167,
-0.003669,
0.041262,
0.078812,
-0.078774,
-0.119520,
-0.158680,
-0.125510,
-0.010211,
0.075001,
-0.122350,
-0.111550,
-0.060239,
0.037602,
-0.041425,
-0.113530,
-0.090322,
-0.102410,
-0.068683,
-0.125100,
-0.143640,
-0.086744,
-0.166100,
-0.266470,
-0.253400,
-0.275760,
-0.248840,
-0.302120,
-0.286470,
-0.124530,
-0.106160,
0.038692,
0.035309,
0.085943,
0.001622,
0.091616,
0.174870,
0.066016,
-0.000016,
0.033932,
-0.072634,
0.087887,
-0.088671,
-0.098821,
0.084657,
0.085569,
0.193540,
0.034965,
-0.071912,
0.109600,
0.195710,
0.364940,
0.167700,
0.063855,
-0.036986,
-0.077514,
-0.091646,
-0.083193,
-0.125420,
0.006933,
-0.044042,
0.028973,
-0.026968,
-0.003634,
0.014307,
-0.041562,
-0.059827,
0.006949,
0.106560,
-0.071865,
0.021049,
-0.104510,
-0.042643,
-0.041366,
-0.041366,
-0.099191,
-0.061997,
-0.117190,
-0.027555,
-0.056723,
-0.094953,
0.008387,
-0.052228,
-0.012252,
0.010797,
0.043985,
-0.016896,
-0.009093,
0.050670,
0.022158,
-0.000938,
-0.117700,
-0.134880,
-0.058856,
-0.087035,
-0.028367,
0.010427,
-0.001919,
0.104500,
-0.009695,
0.083960,
0.203840,
0.013248,
0.162620,
0.158920,
0.193840,
0.228690,
0.121430,
0.093709,
0.017828,
0.073266,
0.045233,
0.016461,
0.135340,
-0.063269,
-0.010983,
-0.023338,
0.037706,
0.039628,
0.029575,
0.045848,
-0.082464,
-0.045177,
0.018488,
0.030025,
0.091454,
-0.005754,
-0.065355,
0.098168,
-0.195800,
-0.278910,
-0.284090,
-0.293590,
-0.266590,
-0.163930,
-0.256130,
-0.200550,
-0.032792,
0.028747,
-0.115650,
-0.280150,
-0.101120,
-0.129450,
-0.198630,
-0.035123,
-0.145310,
-0.013544,
-0.149640,
-0.232530,
-0.060530,
-0.079676,
-0.011427,
-0.177050,
-0.131740,
0.049329,
-0.016293,
-0.072269,
-0.055242,
0.074373,
-0.050701,
-0.154300,
-0.147470,
-0.018249,
0.062184,
-0.013817,
-0.101140,
-0.118870,
-0.042308,
0.047527,
-0.095413,
-0.116270,
-0.055113,
-0.003945,
0.104310,
0.074089,
0.066392,
-0.093277,
0.005073,
0.099275,
0.118000,
-0.011471,
-0.004295,
-0.040243,
0.097054,
0.036544,
-0.028851,
0.054911,
-0.028580,
0.152880,
0.013396,
0.070105,
-0.006534,
-0.047085,
0.084413,
0.109560,
-0.009845,
-0.178350,
-0.129720,
-0.034402,
0.186460,
0.119170,
0.020770,
0.059762,
0.234930,
-0.058191,
0.050913,
0.008871,
0.111930,
-0.054223,
-0.049004,
-0.007670,
0.137750,
0.124530,
0.000971,
-0.037076,
-0.033128,
0.114010,
0.072096,
0.031820,
-0.166230,
0.024342,
0.043002,
-0.023783,
-0.007284,
0.095937,
0.121290,
0.194610,
0.067948,
0.098073,
0.238540,
0.127350,
0.109910,
-0.005964,
0.067467,
0.063816,
0.023245,
0.059015,
0.082679,
0.100460,
0.135290,
0.088185,
-0.023117,
0.034544,
0.044010,
0.054979,
0.081273,
-0.043909,
-0.047287,
-0.161480,
0.029042,
0.068352,
0.026838,
0.045503,
0.142910,
-0.027665,
0.024086,
0.034172,
0.216210,
0.029936,
-0.007620,
-0.090893,
-0.006503,
0.011117,
0.063745,
-0.053098,
0.028807,
-0.005451,
-0.043354,
0.035943,
-0.035855,
-0.016592,
-0.024003,
0.006167,
-0.040230,
-0.004111,
0.061891,
-0.063028,
0.066859,
-0.234300,
-0.011963,
-0.155980,
-0.094137,
-0.001184,
-0.050204,
0.020372,
-0.032665,
-0.059984,
-0.074909,
-0.053540,
-0.039957,
-0.035107,
0.002204,
-0.094697,
-0.124420,
-0.061741,
-0.098602,
-0.014834,
-0.116080,
-0.136480,
-0.089890,
-0.071933,
-0.093078,
-0.095564,
-0.175810,
-0.021976,
0.013951,
0.001982,
0.010630,
0.002572,
-0.010617,
-0.030933,
0.003390,
0.060516,
0.036857,
0.052033,
-0.023355,
0.006947,
-0.015981,
0.000311,
0.033714,
0.021548,
-0.035693,
0.045918,
-0.007086,
0.025870,
-0.006093,
0.045477,
0.052157,
-0.015561,
-0.021681,
0.171730,
0.175910,
0.189480,
0.068319,
0.054995,
0.139340,
0.060415,
0.086222,
0.072038,
-0.119380,
0.008707,
0.088379,
0.072071,
0.036624,
-0.084503,
0.028516,
-0.011008,
-0.018831,
0.016119,
-0.142260,
-0.001951,
0.014535,
0.070228,
0.012066,
0.248500,
0.159790,
0.078625,
0.030482,
0.067298,
0.025788,
0.028538,
0.079896,
0.063496,
0.119970,
0.011455,
0.014504,
0.092586,
0.032597,
0.147550,
-0.082350,
0.007748,
0.032409,
0.035686,
0.079968,
-0.128490,
-0.036788,
0.081804,
0.100470,
0.105760,
0.016551,
0.033456,
0.031992,
-0.073582,
-0.135180,
0.027270,
0.033802,
0.009245,
0.019926,
-0.115280,
-0.098216,
-0.032975,
-0.056144,
-0.086572,
0.030533,
-0.112340,
0.026268,
-0.005313,
-0.137360,
-0.044291,
-0.316390,
-0.111490,
-0.193000,
-0.254670,
-0.089869,
-0.002887,
0.003641,
0.010482,
-0.002845,
-0.014601,
0.013097,
-0.022164,
-0.014513,
-0.022500,
-0.024775,
0.041487,
0.040588,
-0.031882,
-0.018603,
0.020976,
0.033407,
0.010742,
0.009267,
-0.024948,
-0.004387,
-0.005799,
0.014806,
0.011058,
0.007325,
0.025507,
-0.093922,
-0.019990,
0.099513,
0.239820,
0.000218,
-0.056810,
-0.002844,
0.050193,
0.137310,
0.002439,
0.001685,
-0.075049,
0.069288,
0.081044,
-0.035474,
0.038601,
-0.102620,
0.127210,
0.119600,
0.154410,
0.205100,
0.163870,
0.201980,
0.240490,
0.168030,
0.130550,
0.213170,
0.079196,
0.072356,
0.105360,
0.061448,
0.077872,
-0.004860,
-0.048189,
0.040550,
-0.038726,
-0.035725,
-0.005633,
-0.006226,
-0.021776,
0.005397,
0.031893,
0.049374,
-0.000289,
0.016139,
0.158990,
0.103180,
0.092620,
0.073886,
0.021946,
0.073546,
0.168920,
0.096520,
0.139380,
0.132600,
0.078683,
0.004686,
-0.021013,
-0.037990,
-0.024034,
-0.018422,
-0.038107,
-0.097840,
-0.053832,
0.020324,
0.015847,
0.012561,
-0.019688,
0.066137,
0.118590,
-0.040207,
-0.010026,
-0.069900,
0.031153,
0.087980,
-0.047918,
-0.095123,
-0.094424,
-0.106070,
-0.165920,
-0.014989,
-0.065900,
0.072591,
0.015391,
-0.082534,
-0.078861,
-0.117730,
-0.066146,
0.008419,
-0.057226,
-0.054395,
-0.049129,
0.053635,
0.054768,
0.101090,
0.059170,
-0.025175,
0.028776,
0.027809,
0.040580,
-0.006888,
-0.052446,
-0.209980,
-0.065128,
-0.228050,
-0.039135,
-0.086809,
-0.130400,
-0.199850,
-0.276860,
0.036512,
0.005604,
0.103040,
0.077886,
-0.015646,
-0.120140,
-0.047823,
-0.105540,
-0.066229,
-0.093605,
-0.052022,
-0.010448,
-0.028143,
-0.122230,
-0.156360,
0.179710,
0.096481,
0.198280,
0.121220,
0.115710,
0.056866,
0.066643,
0.083670,
0.045414,
0.048989,
0.024755,
0.003495,
0.023846,
0.054447,
0.061400,
-0.056007,
-0.039513,
-0.033813,
0.019347,
0.076743,
-0.120780,
-0.054254,
-0.043713,
-0.028393,
0.109030,
-0.005986,
-0.015138,
-0.030839,
0.013835,
0.032517,
0.030791,
0.011435,
0.070114,
0.008828,
-0.004718,
0.024949,
-0.000798,
0.032386,
-0.015595,
-0.008811,
0.027462,
-0.013445,
0.027882,
0.065726,
-0.039077,
0.022751,
-0.009866,
0.027143,
-0.050198,
-0.017939,
0.206730,
0.037196,
-0.065226,
0.009826,
0.051668,
0.027072,
0.000365,
-0.023620,
0.152330,
0.097402,
-0.051653,
0.038368,
-0.004897,
0.029386,
0.005516,
-0.093333,
-0.041830,
-0.063285,
-0.052256,
-0.041865,
-0.120130,
-0.053959,
-0.017663,
-0.030925,
0.003817,
0.044861,
-0.038499,
-0.033743,
0.069039,
0.020423,
-0.074433,
0.098039,
0.080031,
0.123320,
0.111870,
-0.076950,
0.023134,
0.055201,
0.060942,
0.024836,
-0.045262,
-0.045173,
0.012198,
-0.127680,
-0.053415,
-0.029745,
-0.067058,
-0.070582,
-0.127330,
-0.185890,
0.000001,
-0.031204,
-0.005538,
0.057330,
0.021071,
0.055450,
-0.023648,
-0.016245,
0.038646,
0.001215,
-0.008016,
0.002783,
0.001846,
-0.023072,
0.029205,
-0.035784,
0.015891,
0.003599,
-0.030118,
-0.009264,
-0.017083,
-0.019875,
-0.045413,
-0.021555,
0.011708,
-0.005979,
-0.013584,
-0.084214,
-0.028143,
-0.147220,
0.123160,
-0.023283,
-0.038656,
0.046275,
-0.012334,
-0.075017,
-0.061339,
0.042111,
0.091339,
0.074866,
-0.065849,
-0.126100,
-0.167820,
-0.077814,
-0.007146,
-0.001893,
-0.033305,
-0.070656,
0.015022,
0.110850,
-0.004894,
-0.013337,
0.022957,
0.024852,
0.000383,
-0.030020,
-0.016480,
-0.013254,
0.014578,
0.030987,
-0.019146,
-0.042936,
-0.017852,
-0.029242,
0.035416,
-0.008606,
-0.025062,
-0.012220,
-0.035634,
0.009605,
-0.027091,
0.027805,
-0.010830,
-0.005188,
-0.005419,
-0.006071,
-0.026343,
-0.023047,
0.005486,
-0.024712,
-0.014639,
-0.020979,
-0.010697,
-0.002641,
0.006829,
-0.022604,
-0.026595,
0.012935,
0.019229,
-0.018202,
0.012350,
-0.015743,
-0.024850,
-0.002040,
0.029164,
-0.021940,
0.022134,
0.006039,
-0.017309,
0.011390,
-0.017883,
0.007702,
-0.015933,
-0.008361,
-0.041105,
-0.038061,
-0.006205,
-0.014490,
-0.030635,
0.021563,
0.017434,
0.006625,
-0.025394,
0.003555,
-0.014862,
-0.006729,
0.037729,
0.020098,
-0.025056,
-0.031812,
-0.010053,
-0.014754,
0.018378,
-0.018260,
-0.022848,
-0.019351,
-0.039573,
-0.040711,
-0.023870,
-0.014642,
0.032414,
-0.020914,
0.018756,
-0.017763,
0.001477,
-0.014785,
-0.005644,
-0.017893,
-0.038889,
-0.005294,
-0.033492,
0.004849,
-0.027625,
-0.031370,
-0.030268,
-0.009961,
-0.022198,
-0.019101,
-0.009327,
-0.003505,
-0.047851,
0.003619,
-0.007500,
0.011412,
-0.029450,
-0.008243,
-0.017631,
-0.023964,
0.016170,
0.007630,
0.016208,
-0.022709,
-0.018589,
-0.040475,
0.014332,
-0.009799,
-0.001449,
-0.012121,
-0.020134,
0.003152,
0.012923,
-0.005043,
-0.032460,
0.000120,
-0.010504,
-0.012106,
-0.001624,
0.003346,
0.022465,
0.035023,
-0.002731,
0.024102,
0.003206,
-0.040629,
0.026557,
0.019864,
0.039408,
0.018907,
-0.004048,
-0.033332,
0.013920,
-0.027462,
0.029718,
-0.014745,
0.029755,
0.029043,
-0.039555,
0.001823,
-0.038558,
-0.005974,
-0.032906,
0.015388,
-0.017387,
-0.013009,
-0.032896,
0.008000,
0.028992,
-0.029503,
-0.000967,
0.004133,
0.016883,
-0.025188,
0.028847,
-0.033404,
-0.032397,
-0.001419,
-0.007951,
0.013230,
-0.031892,
0.004609,
0.000223,
-0.039103,
0.019464,
-0.014300,
0.007981,
0.000559,
0.009115,
0.005459,
0.012969,
0.007459,
-0.026314,
0.007667,
-0.031781,
-0.004819,
-0.027203,
-0.004639,
-0.013815,
-0.014191,
-0.021265,
0.025365,
0.015790,
-0.021928,
-0.019509,
0.024989,
0.013517,
-0.013645,
0.018720,
-0.004033,
0.019294,
0.002614,
-0.040060,
-0.040963,
0.007234,
-0.011437,
-0.008553,
0.019641,
-0.051536,
0.026911,
0.003823,
-0.033928,
-0.035112,
-0.003254,
-0.004507,
-0.019725,
0.008349,
0.000765,
-0.027836,
0.001720,
0.010144,
0.013137,
-0.043568,
-0.039127,
-0.028448,
-0.044423,
-0.008585,
-0.027010,
-0.018579,
0.013497,
-0.003893,
0.017350,
0.016454,
-0.028783,
-0.015658,
-0.013179,
-0.010558,
-0.016671,
-0.021985,
0.006713,
-0.024916,
-0.004911,
-0.012390,
0.004499,
0.012190,
-0.005069,
-0.024453,
-0.023517,
-0.012199,
-0.004451,
-0.030996,
-0.007850,
-0.030078,
0.021690,
-0.010840,
-0.024270,
-0.008071,
-0.003526,
-0.038799,
0.006914,
0.015231,
0.007098,
-0.009049,
0.007242,
0.017262,
-0.024085,
-0.023920,
-0.004663,
-0.040785,
0.029288,
-0.034961,
0.028236,
-0.031030,
0.007040,
0.015636,
-0.000361,
-0.024281,
-0.012362,
-0.010189,
0.009757,
-0.040467,
0.034833,
-0.027491,
-0.011025,
-0.001346,
0.014021,
0.029054,
-0.038888,
0.009948,
-0.003416,
-0.015383,
0.004623,
-0.020757,
-0.039205,
0.028691,
0.001805,
0.028953,
-0.023191,
-0.007696,
0.008202,
0.018151,
0.027836,
-0.021143,
-0.012157,
-0.004543,
0.016835,
0.008014,
-0.013027,
-0.008579,
-0.032959,
-0.001092,
0.018834,
-0.029650,
-0.008595,
-0.006306,
-0.000071,
0.025954,
0.010053,
0.022893,
-0.028660,
0.029235,
0.022411,
0.028200,
0.001406,
-0.001308,
-0.033868,
-0.003785,
-0.032027,
0.022222,
0.025003,
0.010421,
-0.024399,
0.000001,
-0.014209,
-0.011751,
-0.011751,
0.026414,
0.026009,
-0.024024,
0.022332,
0.005066,
0.016397,
0.016356,
-0.032695,
0.005445,
-0.028278,
-0.019402,
-0.007717,
-0.027354,
-0.014157,
-0.015962,
-0.011868,
-0.018437,
0.021876,
0.007177,
-0.022243,
-0.032108,
-0.012982,
0.037650,
0.005880,
0.002014,
-0.021724,
0.016010,
-0.027986,
-0.036229,
-0.032125,
0.024121,
-0.013559,
-0.022060,
0.031161,
0.007368,
-0.014336,
0.010783,
0.039022,
0.019546,
-0.039604,
0.028309,
-0.039808,
-0.032853,
-0.014828,
0.021892,
0.006025,
-0.034981,
0.011931,
0.008072,
-0.009305,
0.006977,
-0.005955,
-0.014820,
0.007418,
0.005010,
-0.047313,
-0.002772,
-0.018817,
-0.043922,
-0.016330,
0.012515,
-0.017106,
-0.029764,
-0.043760,
0.006021,
0.017684,
0.028530,
0.017991,
0.014869,
0.020992,
0.012711,
-0.015261,
0.023720,
-0.012868,
0.005962,
-0.036986,
-0.023443,
-0.004814,
-0.037608,
-0.019505,
-0.017450,
-0.000876,
-0.040050,
0.012400,
-0.014729,
0.007854,
-0.004304,
-0.017512,
0.022010,
0.010823,
-0.001521,
-0.038203,
0.015507,
-0.025667,
-0.037297,
-0.002429,
0.021140,
-0.024098,
0.004385,
0.001518,
0.007819,
-0.022501,
0.014717,
-0.034712,
-0.035133,
0.027511,
0.013255,
0.009011,
0.005654,
0.018306,
-0.036282,
-0.005996,
0.012905,
-0.034826,
0.023250,
-0.039358,
0.003495,
-0.008206,
-0.036389,
-0.011180,
-0.032104,
-0.012182,
0.002255,
0.001310,
-0.017729,
-0.008984,
-0.025000,
-0.002715,
0.007614,
0.000259,
-0.022550,
0.001830,
0.005184,
-0.019881,
-0.049256,
-0.002696,
-0.001531,
0.037807,
-0.031058,
0.008815,
0.003701,
0.028150,
0.018633,
0.013374,
-0.027832,
-0.006403,
0.002416,
0.011319,
-0.003039,
0.008992,
-0.031266,
-0.026013,
0.014599,
0.012865,
-0.015315,
0.024867,
-0.014402,
0.006034,
-0.020933,
0.013649,
-0.006969,
-0.035033,
-0.038795,
0.024303,
-0.032634,
0.018502,
-0.009404,
0.017829,
0.005977,
-0.013871,
0.008259,
-0.012566,
0.019903,
-0.036797,
-0.033083,
0.012608,
0.024291,
0.007320,
-0.027547,
-0.019635,
-0.006269,
-0.037082,
-0.026750,
0.016961,
0.015248,
-0.015442,
0.017477,
0.035071,
-0.032386,
0.026433,
0.013686,
-0.010908,
-0.034834,
0.006917,
-0.036878,
-0.041238,
0.008086,
0.006940,
0.020234,
0.015749,
-0.033776,
-0.030474,
0.022360,
-0.009748,
-0.034090,
-0.007975,
0.000866,
-0.031852,
-0.015334,
0.005638,
-0.037877,
-0.040765,
-0.015850,
0.011752,
0.006182,
-0.031937,
-0.014004,
0.006863,
0.006035,
0.017926,
-0.020622,
-0.020288,
-0.020495,
-0.019348,
-0.025884,
-0.009450,
0.001414,
0.018083,
0.004813,
-0.008913,
-0.034039,
0.004595,
0.002072,
0.023231,
0.006070,
-0.013386,
-0.002973,
-0.030512,
-0.029169,
0.006725,
0.007713,
-0.037496,
0.024220,
-0.023841,
-0.014450,
0.013830,
-0.028279,
0.021901,
-0.020856,
0.007405,
-0.023508,
0.009337,
0.021685,
0.018437,
-0.010897,
-0.035974,
-0.019011,
-0.000122,
-0.035423,
-0.043482,
-0.039576,
0.010309,
0.015879,
-0.000523,
-0.003623,
-0.012319,
-0.024877,
-0.031671,
0.019615,
-0.015408,
0.015586,
0.014672,
-0.000113,
0.021786,
-0.015894,
-0.009354,
0.027706,
-0.039535,
-0.011577,
-0.023393,
0.029807,
0.019874,
0.003932,
0.014107,
0.015843,
0.029132,
-0.005157,
-0.029012,
0.014458,
0.006589,
-0.037413,
-0.033392,
-0.021719,
-0.031758,
-0.004208,
-0.025180,
0.009472,
0.020648,
0.028860,
0.020147,
-0.018831,
-0.039934,
0.021827,
-0.030327,
0.002461,
-0.023582,
-0.003959,
-0.021505,
-0.031750,
0.025658,
-0.040760,
-0.012898,
0.006770,
-0.035916,
-0.032552,
0.005700,
0.005264,
-0.036788,
-0.025230,
-0.040544,
0.021508,
0.018767,
-0.000208,
0.012630,
-0.042780,
0.009568,
-0.041424,
-0.003912,
-0.044762,
0.006901,
-0.037370,
0.007516,
-0.041878,
-0.000090,
-0.044745,
-0.002810,
-0.038525,
-0.045227,
-0.030994,
-0.003556,
-0.047334,
-0.022915,
-0.023392,
0.004995,
0.011806,
-0.032670,
-0.000746,
-0.026744,
-0.006111,
0.007719,
-0.004993,
-0.022696,
0.031298,
0.022759,
0.020055,
-0.024469,
-0.007512,
-0.006851,
0.019345,
-0.007684,
-0.035394,
0.011722,
-0.015789,
0.003303,
0.007994,
0.011412,
-0.031495,
-0.001900,
-0.021521,
0.009614,
0.006969,
0.013885,
0.008334,
-0.049027,
-0.005330,
-0.020932,
-0.007639,
-0.021360,
0.009187,
-0.029832,
-0.050608,
-0.012714,
-0.034853,
-0.023134,
-0.021392,
0.015102,
-0.016042,
0.024577,
0.003150,
0.009608,
-0.053771,
0.019550,
-0.006430,
-0.024911,
0.009031,
0.003973,
-0.031508,
-0.018861,
-0.016932,
-0.006006,
0.020787,
0.024348,
-0.013482,
-0.024513,
-0.036343,
-0.022445,
-0.024169,
-0.022322,
-0.027251,
0.007043,
0.004951,
-0.033024,
-0.012414,
0.018566,
0.011226,
-0.025628,
0.017455,
0.021952,
0.028917,
0.005114,
-0.035205,
-0.019628,
0.002854,
0.016774,
-0.031641,
-0.027492,
0.009571,
0.009038,
0.003458,
0.014399,
0.017802,
-0.018703,
-0.032577,
-0.000213,
-0.018437,
0.029660,
0.001442,
-0.022001,
0.024657,
-0.012630,
-0.027203,
0.027268,
0.024924,
-0.017806,
0.027709,
-0.000281,
0.001787,
-0.033789,
-0.009912,
-0.032478,
0.025991,
-0.008719,
0.013056,
0.022452,
-0.039841,
0.006300,
0.028677,
-0.037128,
-0.012323,
0.028210,
-0.024011,
0.011093,
-0.020761,
-0.028238,
-0.022438,
0.010932,
-0.019191,
-0.024824,
-0.011077,
-0.015033,
0.023274,
0.006003,
0.025184,
-0.022032,
-0.013774,
0.013858,
0.016093,
-0.027776,
0.006146,
-0.005185,
-0.027212,
-0.019278,
-0.016805,
-0.027058,
-0.026102,
-0.032231,
0.025360,
0.012586,
0.004072,
-0.018331,
0.016255,
-0.005603,
0.026957,
0.027487,
0.024150,
0.005765,
-0.018071,
0.022934,
0.040947,
0.006762,
0.040770,
0.022566,
-0.000370,
0.017557,
0.032514,
0.038990,
0.037225,
-0.018177,
-0.012346,
-0.005151,
0.026030,
-0.025731,
0.035559,
0.014758,
0.008474,
-0.002426,
-0.040638,
0.012365,
0.031722,
-0.018670,
-0.011698,
-0.017193,
0.003496,
-0.003159,
-0.014247,
-0.020210,
-0.001454,
-0.018510,
-0.013801,
-0.024711,
-0.003079,
-0.034106,
-0.003069,
-0.039704,
-0.051743,
-0.043303,
-0.012344,
-0.047892,
-0.046122,
-0.016637,
-0.028652,
0.000333,
-0.031564,
-0.027203,
-0.015995,
0.024906,
-0.021066,
0.003377,
0.016090,
0.024759,
-0.029019,
-0.000621,
0.012371,
0.027505,
-0.028569,
-0.010825,
-0.022244,
-0.030851,
0.037538,
-0.013068,
0.001242,
0.010717,
-0.005300,
0.037710,
0.035111,
-0.005527,
0.008495,
0.011886,
-0.011708,
-0.059171,
0.000080,
-0.007914,
-0.001216,
-0.040907,
-0.009732,
-0.011412,
-0.020643,
-0.010559,
-0.006761,
-0.004357,
-0.042685,
0.006870,
-0.034281,
-0.003153,
-0.030722,
0.015971,
0.002212,
0.004966,
0.004868,
0.002108,
-0.043959,
0.028231,
0.010575,
0.001014,
-0.009719,
0.026678,
-0.031503,
-0.044175,
-0.006157,
0.013407,
0.015385,
-0.045986,
-0.029833,
-0.024427,
-0.023160,
-0.034629,
-0.004417,
-0.025193,
0.017912,
0.016180,
0.026169,
-0.011434,
0.033944,
0.011635,
0.028367,
-0.004701,
0.003184,
0.016377,
-0.008106,
-0.017665,
0.019337,
0.009170,
0.018668,
-0.010641,
0.022291,
-0.000641,
-0.021952,
-0.032446,
0.019242,
0.010804,
0.028704,
0.008620,
0.016061,
-0.037443,
-0.027475,
-0.036862,
0.012818,
0.012709,
0.028539,
-0.018398,
-0.003301,
-0.002086,
0.016889,
-0.019148,
-0.004844,
0.016002,
-0.020205,
0.019696,
-0.043932,
0.001144,
-0.030932,
-0.017835,
-0.025118,
0.012424,
-0.022316,
-0.025631,
-0.002625,
0.020586,
-0.014308,
-0.024424,
-0.011372,
0.013607,
-0.007366,
-0.025598,
-0.018842,
0.023576,
-0.025555,
-0.011567,
-0.036628,
0.001396,
-0.003319,
-0.005282,
-0.017672,
0.022353,
0.009832,
-0.008680,
-0.034893,
-0.016281,
-0.027464,
0.013614,
-0.049143,
-0.016656,
0.016595,
-0.042860,
-0.017229,
0.002933,
-0.047573,
-0.045079,
-0.016120,
0.020789,
0.029904,
-0.036300,
0.009923,
-0.037748,
-0.024313,
0.005490,
-0.043017,
-0.048073,
-0.041394,
0.011266,
-0.026050,
-0.015778,
-0.006976,
-0.016521,
-0.008715,
-0.042834,
-0.028328,
0.002403,
-0.008598,
0.005800,
-0.037727,
-0.031974,
-0.016683,
-0.027388,
0.021632,
0.007561,
-0.002757,
-0.019970,
0.016878,
0.028701,
0.022306,
-0.026830,
0.001289,
0.015501,
0.007568,
-0.020862,
-0.028506,
0.017727,
0.020581,
0.029566,
0.009362,
-0.003912,
-0.032507,
-0.026097,
-0.020469,
-0.033118,
0.007170,
0.023713,
-0.007779,
-0.017717,
-0.039049,
0.017625,
-0.019299,
-0.019537,
0.020488,
0.023057,
-0.027969,
-0.007746,
-0.027916,
0.022156,
-0.005345,
-0.019385,
0.012830,
-0.034257,
0.012950,
-0.025666,
0.025489,
0.010971,
-0.005137,
-0.023783,
-0.043480,
0.028565,
-0.016932,
0.011235,
-0.017419,
-0.000309,
-0.033031,
-0.035705,
0.027433,
-0.023749,
0.023048,
0.009647,
-0.007682,
-0.012783,
-0.029159,
-0.003527,
0.019260,
-0.021022,
-0.004331,
-0.000187,
-0.038402,
-0.016752,
0.018309,
-0.048665,
-0.011527,
0.017740,
-0.027861,
-0.032280,
-0.020499,
0.006289,
-0.027532,
-0.030079,
0.013220,
-0.041522,
-0.035625,
0.028774,
-0.038742,
0.007354,
0.015907,
0.004680,
-0.016865,
0.011247,
0.018564,
0.007182,
-0.014175,
0.025485,
-0.023721,
-0.027034,
0.024494,
-0.021117,
0.025063,
0.026008,
-0.013406,
-0.016535,
0.006094,
-0.040048,
0.004763,
-0.031486,
-0.027967,
0.003437,
-0.048726,
-0.026207,
-0.040401,
0.000946,
-0.009217,
0.010435,
-0.043593,
-0.054798,
0.005164,
-0.007043,
-0.033428,
-0.047383,
0.004421,
-0.022654,
0.014922,
0.019303,
-0.019584,
-0.005775,
0.021825,
-0.041912,
0.011708,
-0.029676,
-0.033437,
-0.044956,
-0.004000,
-0.016150,
-0.018462,
-0.017627,
0.001090,
-0.039834,
-0.052702,
-0.044889,
-0.050617,
-0.024276,
0.017879,
-0.040005,
-0.033403,
0.000671,
-0.037665,
-0.037715,
-0.020986,
-0.010425,
-0.002429,
-0.026646,
-0.005745,
0.016797,
0.006600,
-0.036344,
-0.011399,
-0.018850,
-0.002637,
-0.005778,
-0.031339,
0.035812,
-0.022522,
0.016799,
-0.037923,
0.022708,
0.015694,
-0.029314,
-0.002216,
0.029415,
-0.036114,
-0.026829,
-0.017845,
0.034450,
0.021493,
0.001074,
0.030754,
0.021729,
-0.003478,
-0.004109,
0.032366,
-0.000379,
0.009999,
-0.031939,
0.022307,
0.017957,
-0.010499,
0.017446,
-0.020171,
0.012810,
-0.013113,
-0.015481,
-0.041067,
-0.002910,
0.023439,
-0.029265,
-0.026193,
0.000240,
-0.026224,
0.008417,
-0.015276,
0.016765,
-0.037224,
-0.038225,
0.015342,
0.012517,
-0.024176,
0.032373,
-0.008897,
0.016306,
0.009877,
-0.007651,
0.024855,
0.024008,
0.016244,
0.031633,
0.032056,
-0.011475,
-0.025561,
-0.003575,
0.002210,
0.011379,
0.010666,
0.009102,
0.025562,
0.001979,
0.015841,
-0.024566,
0.002609,
-0.030851,
0.031349,
-0.005212,
-0.026561,
-0.013664,
-0.037182,
0.003072,
0.022849,
-0.011671,
-0.031675,
-0.031870,
-0.013367,
0.012181,
0.001859,
-0.025022,
0.003669,
-0.006950,
0.000362,
-0.037019,
0.021487,
-0.008153,
0.023425,
-0.043744,
-0.006257,
-0.001512,
0.022937,
0.001798,
0.004907,
-0.020904,
-0.031547,
0.003642,
0.032365,
0.025382,
-0.026776,
0.022573,
0.030141,
0.005680,
-0.028951,
0.006764,
-0.019575,
0.037326,
0.026758,
-0.026865,
0.032721,
-0.009715,
0.036378,
0.023172,
-0.025320,
0.013413,
0.014138,
-0.030040,
-0.012632,
0.017251,
-0.004014,
-0.041266,
-0.007540,
-0.021426,
0.007373,
-0.002456,
0.020984,
-0.011912,
-0.026279,
0.020856,
0.003954,
-0.001393,
0.015987,
0.020880,
-0.022668,
-0.028878,
0.002474,
-0.026302,
-0.011395,
0.002043,
-0.037048,
-0.011886,
-0.030976,
-0.006934,
-0.028879,
-0.005112,
0.018923,
-0.036752,
-0.021252,
-0.036597,
-0.008960,
-0.033336,
-0.042410,
0.019001,
0.024120,
0.023996,
-0.038622,
-0.012337,
-0.024885,
-0.032107,
-0.033434,
-0.014390,
0.005448,
-0.003166,
0.011012,
-0.000437,
-0.023545,
-0.003233,
0.015884,
0.038830,
-0.011202,
0.029536,
-0.024844,
0.012104,
0.011192,
-0.010953,
0.021624,
0.019803,
-0.009259,
0.010443,
-0.006907,
-0.008444,
0.002907,
0.007948,
0.006926,
0.002742,
-0.003460,
-0.040298,
-0.036642,
-0.043503,
-0.036142,
-0.014910,
-0.006333,
-0.016706,
-0.015204,
-0.009329,
-0.003818,
-0.018073,
-0.054588,
0.016857,
0.007026,
-0.044930,
0.011236,
-0.051221,
-0.029241,
-0.025990,
0.015453,
0.003789,
-0.019259,
0.003236,
-0.040948,
-0.038703,
0.016077,
-0.037198,
-0.019113,
-0.003192,
-0.035023,
0.007006,
0.025547,
0.022428,
0.020481,
-0.037165,
-0.028117,
-0.033907,
0.010337,
0.018976,
0.018294,
0.007040,
0.016789,
0.011473,
-0.021425,
-0.002527,
-0.002274,
-0.022658,
0.007475,
-0.039179,
-0.003771,
-0.002902,
0.037954,
-0.025788,
0.014473,
-0.016270,
-0.027454,
0.034515,
-0.015452,
0.005092,
-0.029331,
0.028177,
-0.007484,
-0.017748,
-0.032189,
-0.005559,
-0.027438,
-0.018849,
-0.006042,
-0.003763,
-0.006769,
-0.018847,
-0.032014,
-0.026891,
-0.006101,
-0.032476,
0.019298,
-0.040168,
-0.015936,
-0.025447,
-0.024093,
0.016256,
0.018053,
-0.027963,
-0.012472,
-0.037474,
0.027053,
-0.014968,
-0.007569,
-0.025950,
0.004822,
-0.018552,
0.023732,
-0.006053,
0.043820,
0.012545,
-0.028805,
0.016528,
-0.012345,
-0.029770,
0.031142,
0.040376,
0.032491,
0.030864,
-0.016469,
0.017170,
0.018729,
0.032997,
-0.023631,
-0.019033,
0.018858,
-0.041691,
-0.002159,
-0.017529,
-0.004305,
-0.026824,
-0.043702,
-0.038805,
-0.033338,
-0.009201,
-0.034883,
-0.018090,
-0.027066,
0.022015,
0.023617,
0.005510,
0.020282,
-0.005378,
0.002442,
-0.031011,
0.007380,
-0.017922,
0.032683,
0.024349,
0.036917,
0.017184,
-0.007770,
0.003377,
-0.026576,
0.019445,
0.022122,
-0.021114,
0.020307,
-0.005220,
-0.003735,
-0.016706,
-0.004883,
-0.015058,
-0.003553,
-0.041099,
-0.015700,
0.005084,
-0.002329,
-0.026004,
-0.000759,
-0.027319,
0.015141,
0.023366,
-0.004268,
0.042638,
-0.006062,
-0.018963,
0.004886,
-0.021255,
-0.020957,
0.019183,
0.009375,
0.032478,
0.004655,
0.014547,
-0.025038,
0.019964,
-0.018236,
0.035603,
0.021894,
-0.013879,
0.024095,
0.034391,
0.032448,
-0.014753,
0.000374,
0.028440,
0.022175,
-0.018891,
0.012374,
-0.013746,
0.022826,
-0.019703,
-0.042068,
-0.003624,
-0.017301,
-0.010447,
-0.020994,
0.015633,
-0.027695,
-0.028112,
-0.005400,
0.008912,
0.017408,
-0.004779,
-0.018435,
-0.003242,
0.014936,
-0.009504,
-0.030655,
0.018415,
-0.014155,
-0.011663,
0.012370,
-0.030147,
0.001162,
0.018161,
0.023590,
-0.038464,
0.011558,
0.005170,
0.021468,
0.022498,
-0.018407,
0.017237,
0.023143,
-0.004488,
-0.007496,
-0.004680,
0.022465,
-0.002212,
-0.036834,
-0.001753,
-0.001058,
-0.014491,
-0.011335,
0.009484,
0.002104,
0.015512,
-0.004630,
0.025566,
-0.015838,
-0.023791,
-0.033506,
-0.033047,
0.028077,
0.014322,
-0.022428,
0.009050,
0.023930,
-0.006290,
-0.025411,
0.027681,
0.008866,
-0.014083,
-0.025281,
-0.019420,
0.016517,
-0.035201,
-0.030714,
-0.030727,
0.011948,
-0.022962,
-0.040396,
0.002512,
-0.007550,
-0.026763,
-0.011909,
0.009318,
-0.037130,
-0.029747,
-0.009592,
-0.024289,
-0.000907,
-0.022407,
0.027236,
0.014122,
0.024152,
-0.021917,
0.011145,
0.023037,
-0.012472,
-0.024085,
-0.005340,
0.012221,
-0.038866,
-0.031778,
-0.003498,
0.014634,
-0.035514,
0.002547,
0.028843,
-0.007779,
0.008396,
-0.021340,
-0.036411,
-0.018601,
-0.012176,
0.018878,
0.020739,
-0.016476,
-0.001431,
0.011220,
-0.008357,
0.006322,
-0.039063,
-0.029938,
-0.031643,
-0.037144,
0.021236,
-0.001031,
-0.007036,
0.009631,
-0.023678,
0.024549,
0.007349,
0.009492,
0.021746,
-0.023576,
-0.012980,
-0.009106,
0.017880,
-0.006520,
-0.036983,
0.002994,
0.018508,
0.008995,
0.014056,
-0.019596,
0.006281,
0.016104,
-0.004661,
-0.025448,
-0.022293,
0.018174,
-0.011743,
0.025695,
-0.025573,
-0.032808,
0.009568,
0.002686,
-0.010461,
0.020668,
-0.034260,
0.019161,
-0.040581,
-0.005519,
-0.017976,
0.029183,
0.014533,
-0.018927,
0.005023,
0.018731,
0.008425,
-0.038301,
0.024517,
-0.000079,
-0.029415,
-0.018331,
-0.011792,
-0.005135,
-0.027046,
0.002137,
0.023471,
0.015811,
0.005613,
-0.001445,
0.010912,
0.009512,
-0.039789,
0.026540,
0.003128,
-0.035333,
-0.040710,
-0.003305,
0.011760,
0.014737,
-0.034854,
0.026585,
0.018571,
-0.027035,
0.016120,
0.022913,
-0.032796,
-0.039104,
-0.025152,
0.024830,
-0.028016,
-0.031623,
0.019377,
0.000010,
0.010415,
-0.006263,
0.000200,
0.012020,
-0.040002,
0.005157,
-0.001393,
-0.033384,
-0.022816,
-0.005294,
-0.029199,
-0.009571,
-0.038335,
-0.029875,
-0.011823,
0.003725,
-0.020653,
-0.007139,
-0.005117,
-0.025217,
0.007063,
0.005940,
-0.025086,
-0.000656,
0.000718,
-0.033261,
0.006867,
-0.020473,
-0.023443,
-0.009688,
-0.026829,
0.013731,
-0.040981,
0.019339,
0.021894,
-0.017497,
-0.016031,
0.022654,
0.006450,
0.003946,
-0.034342,
0.010694,
-0.002529,
-0.026659,
-0.024523,
-0.038753,
-0.035962,
0.006218,
0.015939,
0.012339,
0.018228,
0.004936,
-0.025939,
0.020808,
-0.039705,
0.003768,
0.017106,
-0.001496,
0.008170,
0.019437,
-0.036216,
0.016620,
-0.011533,
-0.038066,
0.020736,
-0.023707,
0.032448,
0.009797,
0.004592,
0.000631,
-0.000183,
0.022751,
-0.014658,
0.010654,
-0.037821,
0.013610,
0.019456,
0.026937,
0.011430,
-0.017483,
-0.016053,
-0.020797,
0.017346,
0.005253,
0.028765,
0.023944,
-0.002692,
0.016024,
0.017947,
0.005121,
0.000552,
-0.007236,
0.025972,
-0.016325,
0.014745,
0.014887,
0.023220,
-0.011795,
0.008823,
0.002701,
-0.023462,
0.029083,
-0.018982,
-0.027739,
0.000143,
0.016013,
-0.020212,
0.021228,
-0.006448,
-0.026299,
-0.013148,
-0.034303,
0.019121,
-0.038033,
-0.017550,
0.008780,
-0.029107,
-0.029285,
-0.030896,
-0.009773,
0.017818,
-0.032821,
0.004520,
-0.035043,
-0.005529,
-0.026264,
-0.038841,
-0.001405,
0.007494,
-0.038786,
-0.031457,
0.001029,
0.004666,
0.013852,
0.002592,
-0.013918,
-0.013661,
-0.018675,
-0.010713,
0.023756,
0.025371,
-0.000288,
0.015132,
-0.035402,
-0.000165,
-0.027643,
-0.020317,
0.003713,
0.012744,
0.022125,
-0.017073,
-0.020600,
0.010912,
0.029230,
0.003322,
-0.001074,
-0.000635,
0.009214,
-0.041299,
0.022834,
-0.035549,
-0.011113,
0.012291,
-0.036937,
-0.005835,
-0.034636,
0.006663,
0.029068,
-0.038516,
0.025541,
-0.018883,
-0.002158,
-0.017018,
-0.035122,
-0.028818,
-0.014594,
-0.001261,
0.005573,
-0.010546,
0.004810,
0.020940,
0.011517,
-0.003117,
-0.032809,
-0.011879,
0.016339,
0.020757,
-0.013308,
-0.011812,
-0.028977,
0.000253,
-0.021084,
-0.020537,
-0.033546,
0.001015,
-0.017101,
0.016146,
0.004059,
0.010281,
-0.007500,
-0.031343,
0.023389,
-0.009263,
-0.020810,
-0.018886,
-0.039696,
-0.035906,
0.020568,
-0.025960,
-0.000467,
0.015069,
-0.010066,
-0.009419,
0.013106,
0.021424,
0.012126,
-0.029452,
-0.016658,
-0.034403,
-0.036021,
0.011107,
0.021774,
0.004512,
0.025202,
0.019600,
0.017109,
-0.028950,
0.022147,
-0.010166,
-0.006375,
-0.017107,
0.023276,
-0.021018,
0.003411,
0.022351,
0.019094,
-0.006781,
-0.039595,
-0.027911,
-0.031450,
0.011931,
0.018501,
0.009530,
-0.035818,
0.006707,
-0.004840,
-0.030330,
-0.018002,
-0.037509,
-0.020980,
-0.025523,
-0.028093,
0.002407,
0.004798,
-0.038550,
-0.004243,
-0.038381,
-0.001865,
0.004818,
-0.028121,
-0.003508,
-0.002758,
-0.004612,
-0.006209,
0.027531,
0.017857,
-0.023835,
-0.002024,
-0.026496,
0.021866,
-0.033384,
-0.031951,
-0.005475,
-0.039449,
-0.002249,
-0.000809,
-0.008000,
-0.030053,
-0.002858,
-0.030596,
-0.025457,
-0.033901,
0.012347,
-0.000924,
0.026398,
0.028398,
-0.027546,
-0.009221,
-0.001003,
-0.001110,
-0.032992,
-0.010086,
0.004104,
-0.013693,
-0.024654,
0.004447,
-0.040554,
-0.037554,
-0.028765,
0.003082,
0.014578,
-0.006500,
-0.007652,
-0.013079,
0.020381,
0.017829,
0.019557,
-0.013613,
0.023093,
-0.025817,
-0.034894,
0.008446,
-0.008805,
-0.009365,
0.009311,
-0.012438,
-0.018285,
0.018695,
0.018475,
0.022562,
-0.020197,
-0.026211,
-0.027234,
0.008017,
0.004235,
0.030346,
-0.008512,
-0.012824,
0.017671,
-0.022712,
-0.020378,
-0.025700,
-0.033934,
0.020708,
-0.018623,
-0.016230,
-0.008212,
-0.026408,
-0.006198,
0.004380,
0.024720,
-0.015715,
-0.029110,
0.024325,
-0.013648,
-0.008994,
0.010409,
-0.015875,
-0.038236,
-0.025550,
0.028327,
-0.036077,
-0.010710,
-0.008999,
0.020020,
-0.034067,
-0.025754,
-0.012981,
-0.035093,
0.010339,
0.016984,
-0.020222,
-0.003197,
-0.023266,
-0.019249,
0.000262,
-0.038100,
-0.006625,
-0.005816,
-0.002184,
-0.005532,
-0.016139,
-0.013661,
-0.032009,
-0.007521,
0.021898,
0.000832,
-0.003182,
-0.029856,
-0.022637,
-0.011399,
0.003318,
-0.033323,
-0.014020,
0.021386,
-0.026065,
0.005147,
-0.006242,
0.021167,
-0.020045,
-0.030436,
0.007400,
0.016787,
-0.022821,
0.012155,
0.024945,
-0.020257,
0.028473,
-0.027309,
0.012345,
0.028114,
0.018420,
0.017238,
-0.030328,
0.016533,
0.028644,
-0.035407,
0.015722,
0.015885,
0.015438,
-0.005939,
0.003493,
0.005779,
0.028298,
0.008234,
-0.013617,
-0.011871,
-0.003194,
-0.022940,
-0.037397,
0.016377,
-0.002933,
-0.009264,
-0.017637,
0.008178,
0.001324,
0.012219,
0.001689,
0.020306,
0.001984,
0.006046,
-0.031860,
-0.014180,
-0.034572,
-0.039836,
0.027860,
0.018233,
-0.020159,
-0.014236,
-0.000272,
-0.009727,
-0.010602,
-0.015850,
0.013963,
0.002589,
0.012031,
-0.031277,
0.022384,
0.009166,
0.007251,
0.017157,
-0.000574,
-0.034738,
-0.033946,
-0.008563,
-0.031307,
-0.025495,
-0.017505,
-0.001033,
-0.027104,
-0.037883,
-0.000040,
-0.027714,
0.020358,
-0.011937,
0.000467,
-0.023679,
-0.038430,
-0.025756,
-0.003037,
-0.019827,
0.000564,
-0.023067,
-0.032018,
0.019438,
0.017972,
-0.009817,
-0.021953,
-0.028018,
-0.000679,
-0.029478,
-0.023263,
-0.028728,
0.001923,
0.022742,
0.019049,
0.012129,
-0.021703,
-0.016812,
-0.036273,
-0.017530,
0.018298,
-0.010626,
-0.034172,
0.026296,
-0.032677,
-0.007033,
-0.038509,
0.016255,
-0.013599,
0.020887,
-0.009508,
0.016762,
-0.028045,
-0.035537,
-0.028913,
-0.041309,
-0.028689,
0.027318,
0.004791,
-0.027792,
-0.011267,
0.008385,
-0.011120,
0.018196,
-0.015162,
0.025716,
0.007534,
0.016694,
0.010711,
-0.021635,
-0.034674,
0.028150,
-0.005750,
-0.034064,
0.023655,
-0.013510,
-0.015388,
0.003845,
-0.001545,
-0.035276,
-0.040958,
0.024999,
0.004663,
0.010588,
-0.037552,
0.007564,
-0.019896,
-0.039878,
-0.039171,
-0.002389,
0.014969,
-0.000858,
0.011822,
0.023415,
0.000517,
-0.025666,
-0.035892,
-0.038257,
-0.020860,
-0.026894,
0.023088,
-0.009430,
0.006327,
0.023417,
-0.028858,
0.010389,
-0.030530,
-0.000099,
0.000000,
0.005918,
0.020193,
-0.016658,
-0.007851,
-0.020450,
0.006758,
-0.011413,
0.014100,
0.028881,
0.028487,
-0.008183,
0.003562,
-0.011431,
-0.012181,
0.003173,
0.006435,
0.012132,
0.022673,
0.012398,
0.027924,
-0.006598,
0.018880,
0.029202,
0.012686,
0.002865,
-0.033580,
-0.028050,
-0.000933,
0.007401,
-0.002034,
0.025081,
0.015773,
-0.017686,
0.007351,
0.014032,
-0.021742,
-0.032141,
-0.029112,
0.017630,
-0.029760,
-0.016404,
0.009874,
-0.038961,
0.003882,
-0.035275,
-0.027512,
-0.026428,
-0.016800,
0.021827,
0.010441,
0.001788,
-0.004394,
0.012214,
0.012355,
-0.033847,
0.005886,
-0.025698,
-0.019737,
-0.000923,
0.019024,
-0.003017,
0.016680,
0.016086,
-0.003662,
-0.025061,
0.011376,
-0.024803,
0.014804,
-0.036834,
-0.015546,
0.000755,
-0.006436,
0.030837,
-0.034190,
-0.017950,
-0.024409,
-0.018698,
0.002182,
0.018461,
0.004497,
-0.035113,
0.023535,
-0.015640,
0.016371,
0.012759,
-0.002103,
0.003309,
-0.005991,
0.012981,
0.005593,
-0.029428,
0.021749,
0.027048,
-0.018461,
0.000267,
-0.025508,
-0.027755,
0.028053,
-0.018411,
-0.029136,
0.010537,
0.028883,
-0.036892,
-0.015042,
-0.025662,
0.015234,
-0.042419,
-0.036389,
0.000753,
0.021793,
0.007430,
0.002491,
-0.007474,
-0.022719,
-0.042300,
-0.021562,
-0.032404,
0.024632,
-0.009982,
0.008180,
-0.001491,
0.024318,
-0.017573,
-0.025004,
0.020064,
0.010362,
0.003012,
0.004973,
-0.026819,
0.026952,
0.018695,
-0.039873,
-0.017549,
0.009147,
-0.007395,
0.023974,
0.018999,
0.023962,
-0.040863,
-0.034767,
-0.020497,
0.020650,
0.013039,
0.021211,
0.012745,
-0.019643,
0.002769,
0.002340,
-0.033512,
-0.017845,
0.015796,
-0.014475,
-0.021075,
-0.013730,
0.000116,
-0.025580,
0.020909,
-0.038666,
0.005029,
-0.005579,
0.009671,
-0.011033,
-0.017212,
-0.039896,
-0.004791,
-0.020594,
0.016555,
-0.043018,
0.002737,
-0.004795,
-0.019440,
-0.015903,
0.002066,
-0.026831,
-0.017710,
-0.017115,
-0.012793,
0.006340,
-0.019188,
-0.031580,
-0.036120,
0.022092,
0.009911,
0.030079,
-0.042930,
-0.029107,
0.020358,
0.016269,
-0.001249,
0.028068,
0.030051,
0.024358,
-0.034743,
0.016949,
0.000951,
0.025448,
-0.029164,
0.008813,
-0.024267,
-0.011023,
0.007974,
-0.025633,
-0.028392,
0.018576,
-0.011462,
-0.019835,
0.011779,
0.016097,
-0.000906,
0.008937,
-0.027224,
-0.019421,
-0.026861,
0.000781,
0.024929,
-0.035268,
-0.035122,
-0.021113,
-0.001197,
0.003301,
-0.037030,
0.020139,
0.025910,
0.017723,
0.002979,
-0.010106,
0.022941,
-0.000825,
0.017559,
0.016769,
-0.006425,
0.020116,
0.006111,
0.032824,
-0.001731,
0.006840,
0.013259,
-0.003880,
0.007631,
-0.021708,
-0.041314,
-0.004097,
-0.026808,
0.016669,
0.017594,
-0.025124,
-0.019426,
-0.030591,
-0.039337,
-0.044079,
0.020103,
0.020081,
0.009510,
-0.038759,
-0.015765,
-0.005505,
0.019097,
-0.013122,
0.022376,
-0.025770,
0.004669,
-0.022722,
0.008494,
-0.002372,
0.007300,
0.005131,
-0.014539,
-0.007974,
0.012454,
-0.018829,
0.018953,
-0.021586,
-0.012973,
-0.019908,
-0.039858,
-0.018968,
0.012572,
-0.020120,
0.007403,
0.021744,
-0.032183,
0.000155,
-0.033770,
0.018135,
-0.001484,
0.025603,
-0.003498,
0.007340,
-0.029560,
-0.012379,
0.002503,
-0.031269,
-0.005179,
0.001142,
-0.020341,
0.007479,
-0.023861,
0.000296,
0.016844,
0.017579,
-0.026929,
0.020375,
-0.028156,
0.000228,
0.024407,
-0.022864,
-0.023339,
-0.018096,
-0.004527,
0.039535,
-0.004497,
-0.013411,
-0.030418,
-0.043215,
-0.009472,
-0.008463,
-0.037905,
-0.030442,
-0.008570,
-0.023157,
0.003177,
-0.014230,
0.019899,
-0.027278,
-0.026805,
0.016811,
0.005264,
0.014216,
0.007055,
0.004138,
0.017638,
-0.027969,
-0.034395,
-0.039307,
-0.009841,
0.026616,
0.010595,
-0.042861,
0.023074,
0.029199,
0.021093,
0.023365,
-0.010010,
0.005417,
-0.010657,
-0.011009,
-0.025099,
-0.020426,
-0.022876,
0.022628,
0.004291,
-0.002452,
0.004676,
0.038609,
-0.020951,
0.015027,
-0.021927,
0.033955,
0.028655,
-0.026280,
-0.016867,
-0.013167,
-0.011965,
0.028644,
0.031557,
0.006844,
-0.034878,
-0.038749,
-0.021540,
-0.020959,
0.011292,
0.022093,
0.001511,
0.014584,
-0.013917,
-0.028097,
0.030336,
0.028377,
0.035161,
0.015907,
-0.021163,
-0.032786,
-0.005372,
0.009639,
-0.001354,
-0.016417,
-0.036959,
-0.007225,
0.004686,
-0.037208,
-0.011716,
-0.022838,
-0.031135,
0.007188,
0.024387,
0.006965,
0.007156,
-0.023590,
0.002337,
-0.032040,
0.017506,
0.021180,
-0.023733,
0.023183,
-0.004086,
-0.041715,
-0.016101,
0.012957,
0.007493,
0.007524,
-0.037106,
-0.036790,
-0.022038,
0.009661,
-0.036021,
0.023122,
0.009964,
-0.037969,
-0.035958,
-0.023823,
-0.010739,
-0.024016,
0.001476,
-0.016462,
-0.009575,
-0.006621,
-0.014657,
-0.038262,
0.028502,
0.001577,
-0.033591,
0.022114,
-0.018439,
0.027946,
-0.000735,
-0.032114,
0.013820,
0.020018,
-0.035854,
0.009987,
-0.025491,
-0.041805,
-0.025481,
0.022329,
-0.017429,
-0.033490,
0.010010,
-0.039718,
-0.037200,
-0.033208,
-0.039956,
-0.013027,
-0.023472,
0.014839,
0.005055,
0.025951,
-0.007878,
-0.012412,
0.006604,
0.016662,
-0.003265,
0.020609,
-0.014923,
0.032825,
-0.007210,
0.013361,
0.003761,
-0.008321,
0.031279,
-0.019979,
-0.037525,
-0.009197,
0.014116,
0.012684,
-0.001931,
0.030993,
-0.043487,
-0.029688,
0.028065,
0.005660,
0.028758,
0.011527,
-0.005782,
-0.009741,
0.010324,
-0.021068,
0.026005,
0.022699,
-0.044007,
-0.017900,
-0.018745,
-0.035631,
-0.010891,
-0.040918,
-0.026987,
-0.004100,
-0.010437,
-0.028980,
-0.031560,
-0.012009,
-0.032274,
-0.018809,
0.002130,
-0.013564,
-0.041804,
0.001075,
0.000392,
0.007477,
-0.029110,
-0.033776,
-0.038619,
0.023957,
0.005982,
0.020783,
-0.013775,
-0.037576,
0.015726,
0.012678,
0.011874,
0.021958,
-0.033684,
-0.006524,
0.020399,
-0.021408,
-0.011307,
-0.035084,
-0.037321,
-0.015218,
-0.026337,
-0.013308,
-0.004857,
-0.031163,
0.014328,
0.018321,
-0.001980,
-0.019095,
-0.020550,
-0.021756,
0.014884,
-0.036493,
-0.009987,
-0.020957,
0.015658,
-0.032511,
-0.006307,
0.025869,
-0.023150,
-0.022024,
0.024019,
-0.000817,
0.006868,
-0.012204,
0.010490,
-0.028658,
-0.034955,
-0.031137,
0.025672,
-0.022579,
-0.022606,
-0.001395,
-0.032960,
-0.029209,
-0.019158,
-0.013329,
-0.018954,
-0.018056,
0.024153,
-0.029971,
-0.029652,
0.011739,
0.008131,
0.005981,
-0.020409,
0.024864,
0.008664,
0.020998,
0.008566,
0.017855,
-0.029204,
-0.032435,
0.021843,
-0.026384,
0.023562,
0.032571,
0.015208,
0.025829,
0.020571,
-0.000598,
-0.004765,
-0.032957,
0.000662,
-0.013396,
-0.044821,
0.028695,
-0.012246,
-0.037582,
-0.015380,
-0.015798,
-0.015582,
-0.017061,
-0.022625,
-0.024221,
-0.041322,
-0.007888,
0.009590,
0.008651,
-0.023125,
0.017800,
-0.010810,
0.014652,
-0.001183,
-0.033035,
0.011133,
0.000360,
0.017501,
0.005371,
0.025051,
-0.002261,
-0.008378,
-0.000431,
-0.035937,
-0.031690,
-0.001024,
-0.003379,
-0.007282,
0.022931,
-0.025131,
-0.017294,
-0.038516,
-0.012823,
0.009519,
0.013842,
0.006892,
-0.036798,
0.018541,
-0.039010,
-0.040677,
0.017770,
-0.033593,
-0.028410,
-0.007196,
-0.013288,
-0.017542,
-0.006614,
-0.031328,
-0.005750,
0.006045,
0.017651,
-0.037354,
-0.014343,
-0.008954,
0.006676,
-0.033046,
-0.020570,
-0.025748,
0.014450,
0.017929,
-0.019314,
-0.011685,
-0.004217,
-0.022060,
0.004220,
0.005679,
0.000471,
-0.038787,
0.030502,
0.013701,
-0.042243,
0.010295,
-0.005551,
0.029740,
-0.026755,
0.005145,
-0.005609,
-0.009111,
-0.008399,
-0.007823,
0.034237,
0.026391,
0.030655,
-0.035310,
0.009999,
0.020658,
-0.009574,
-0.015780,
-0.010920,
-0.043929,
0.014225,
0.007528,
0.005792,
0.002778,
-0.001482,
-0.030029,
-0.036793,
-0.018353,
-0.017974,
0.003672,
-0.000188,
-0.040260,
0.010147,
0.032310,
-0.014825,
0.003632,
0.008464,
-0.022303,
0.011390,
-0.013959,
-0.019777,
0.010341,
-0.029711,
-0.026557,
0.006967,
-0.027344,
0.005912,
0.001170,
-0.029498,
0.020375,
0.000559,
0.013264,
0.023246,
0.023296,
0.007524,
0.005001,
-0.035039,
0.019547,
-0.031729,
0.014368,
-0.024216,
0.012235,
-0.031157,
0.012427,
-0.026466,
-0.029487,
-0.042445,
0.024146,
-0.033645,
-0.003101,
-0.036506,
-0.028261,
0.005685,
0.018803,
0.009542,
0.025516,
-0.023368,
0.001522,
0.013834,
-0.008093,
0.011679,
0.004107,
0.003484,
0.039227,
0.002312,
0.005907,
0.006205,
0.021818,
-0.023055,
0.021866,
-0.001345,
-0.013145,
-0.034352,
0.010972,
-0.028317,
-0.000507,
-0.042029,
-0.014233,
0.010019,
0.022113,
0.013466,
0.010094,
-0.041377,
0.026771,
0.000251,
0.010479,
0.017120,
-0.035804,
-0.000735,
-0.001186,
0.036191,
-0.002478,
0.009892,
-0.021507,
0.022294,
-0.041427,
0.014124,
-0.021886,
-0.018127,
-0.001448,
-0.041288,
-0.014855,
0.010262,
-0.014131,
-0.000166,
-0.039480,
-0.026985,
0.013492,
0.018254,
0.024885,
-0.022404,
-0.028741,
-0.037318,
0.008763,
-0.039132,
-0.008373,
-0.013959,
-0.041777,
-0.007830,
0.013310,
-0.043832,
-0.034797,
-0.013146,
-0.017190,
-0.009217,
0.002302,
0.009899,
0.011513,
0.002025,
0.012339,
-0.009795,
0.014515,
-0.001404,
0.017897,
0.007056,
-0.011747,
0.023862,
-0.030248,
0.000074,
0.028056,
0.013721,
-0.020668,
0.025870,
-0.020881,
-0.041518,
0.001495,
0.004019,
0.006031,
-0.009550,
-0.024068,
0.005574,
-0.014371,
-0.034618,
-0.030606,
0.005144,
-0.010171,
-0.012805,
-0.020079,
0.018701,
0.025946,
-0.026658,
0.016133,
0.012909,
-0.024287,
0.026304,
-0.012201,
-0.015238,
0.020774,
-0.022938,
-0.013660,
0.013221,
0.005867,
0.016596,
-0.020891,
-0.038472,
0.001885,
-0.022389,
-0.028135,
-0.014659,
-0.029687,
-0.028384,
-0.021437,
0.015028,
-0.033294,
0.021456,
-0.035781,
-0.031728,
-0.025955,
-0.013783,
-0.036566,
0.011479,
-0.005776,
-0.017677,
-0.028515,
0.024605,
0.009040,
0.017515,
-0.039592,
0.004113,
0.029121,
-0.019438,
0.036419,
0.009601,
-0.020498,
-0.018641,
-0.028563,
0.003859,
0.017572,
0.021211,
-0.018527,
-0.042416,
-0.011513,
0.001556,
0.036354,
0.017229,
0.039154,
-0.019721,
-0.015073,
-0.018038,
0.025498,
0.020980,
-0.009503,
0.038883,
-0.055799,
0.003764,
-0.008011,
-0.042790,
0.016365,
-0.054683,
-0.016929,
0.032714,
0.004094,
0.003137,
-0.019176,
-0.000065,
-0.034193,
-0.014390,
-0.033378,
-0.031069,
-0.040845,
-0.026685,
-0.030468,
0.003705,
-0.023249,
-0.023105,
-0.036122,
-0.039922,
0.002882,
-0.026380,
0.028411,
-0.019451,
-0.017623,
-0.017479,
0.008089,
-0.033108,
0.006510,
0.022383,
0.004224,
0.033002,
0.030033,
-0.030418,
-0.032316,
-0.004175,
-0.025454,
0.008740,
-0.008421,
0.011147,
-0.022293,
-0.020033,
-0.014910,
-0.034629,
0.030585,
-0.029552,
0.003534,
-0.006626,
-0.031203,
0.019917,
-0.031761,
-0.004723,
-0.020305,
0.007645,
0.010988,
-0.022525,
-0.021788,
-0.003294,
-0.002655,
0.000667,
-0.019723,
0.013589,
-0.043025,
0.012378,
-0.036292,
-0.018993,
-0.032191,
0.025251,
-0.018224,
-0.032442,
-0.033413,
0.009896,
-0.019681,
-0.003166,
-0.011256,
-0.026826,
0.003691,
0.003867,
0.021704,
0.026473,
0.018502,
0.032521,
-0.011788,
-0.013473,
0.018257,
0.026235,
0.016856,
-0.020990,
-0.033588,
-0.063837,
-0.024880,
0.011566,
0.025336,
-0.025655,
0.002130,
0.006919,
-0.012681,
-0.003738,
-0.001359,
-0.012019,
-0.038730,
-0.002720,
-0.039667,
-0.022142,
-0.011928,
0.001435,
0.017567,
-0.012355,
-0.036810,
-0.010331,
-0.023701,
0.003873,
-0.008432,
0.030625,
0.013183,
-0.029763,
-0.016636,
0.023743,
-0.007691,
-0.036869,
0.018182,
-0.027029,
-0.009869,
-0.028724,
-0.034087,
0.010081,
-0.017105,
-0.009423,
-0.001959,
-0.031237,
-0.013657,
-0.020131,
-0.017940,
-0.036667,
0.020197,
-0.037587,
-0.009246,
-0.058939,
-0.006418,
-0.024896,
-0.033284,
0.008054,
0.011999,
-0.023401,
-0.031680,
-0.038389,
-0.035829,
-0.032738,
-0.028663,
-0.028886,
-0.027645,
-0.032216,
0.001349,
0.017404,
-0.039291,
-0.056651,
-0.012963,
0.002725,
-0.024180,
-0.006594,
-0.032572,
-0.064494,
-0.031511,
-0.035359,
-0.038851,
-0.013792,
-0.039607,
-0.020892,
-0.020639,
0.028729,
0.000771,
-0.008220,
-0.020621,
0.023550,
-0.019218,
0.019694,
-0.023292,
0.024052,
0.022030,
0.020855,
-0.023773,
-0.036325,
-0.038569,
0.018482,
-0.025487,
0.020751,
-0.021417,
-0.030139,
-0.005761,
-0.017845,
0.022447,
0.016131,
-0.037173,
0.012686,
0.006634,
0.021334,
-0.044076,
0.004007,
-0.031176,
-0.021052,
-0.006306,
-0.051664,
-0.019472,
-0.005518,
0.004941,
0.012980,
-0.035996,
-0.029721,
-0.005696,
0.026367,
0.027945,
-0.045332,
0.002130,
-0.010471,
-0.012008,
0.001355,
-0.026753,
-0.011861,
-0.018905,
-0.021689,
0.015570,
0.002958,
-0.007712,
-0.021809,
-0.003108,
-0.015490,
-0.022487,
-0.010369,
-0.057378,
-0.044519,
-0.033977,
-0.008276,
-0.047852,
0.022637,
-0.001752,
0.013509,
0.010525,
-0.025252,
0.030004,
0.017846,
0.031764,
-0.000673,
0.011827,
-0.052970,
-0.042441,
0.000160,
-0.003222,
-0.048433,
-0.021145,
-0.043405,
-0.030047,
-0.019365,
0.004171,
-0.016450,
-0.002709,
-0.052195,
0.001077,
-0.013048,
-0.015491,
0.020145,
-0.028913,
-0.023877,
0.028989,
-0.014586,
0.015624,
0.016651,
-0.019473,
-0.012966,
-0.062657,
-0.021378,
-0.000420,
-0.018489,
-0.026280,
0.004880,
-0.020361,
0.001968,
-0.008878,
-0.002803,
-0.023462,
0.012483,
-0.040640,
-0.015274,
-0.035166,
0.000540,
-0.005866,
0.031879,
-0.032373,
-0.019520,
-0.021664,
-0.021304,
0.029604,
0.022624,
0.027198,
-0.014760,
-0.018926,
-0.039284,
-0.044810,
-0.014968,
0.020900,
-0.014334,
-0.019693,
0.022224,
-0.006131,
-0.040549,
0.025931,
-0.068291,
0.025188,
-0.043088,
-0.014212,
-0.038687,
-0.050442,
-0.027656,
-0.041408,
0.025626,
-0.027716,
-0.063207,
-0.027839,
-0.020376,
-0.010790,
0.002264,
-0.018055,
-0.022801,
-0.008780,
-0.037516,
-0.021798,
-0.002654,
-0.020184,
-0.026342,
-0.039111,
-0.043987,
0.025850,
-0.033226,
0.022405,
0.023805,
0.007286,
-0.034045,
-0.018804,
-0.010307,
-0.034631,
0.018972,
-0.004209,
-0.012919,
0.005352,
-0.018459,
-0.027394,
-0.001740,
0.022787,
0.022504,
0.028579,
0.028326,
-0.009194,
0.003453,
0.015509,
-0.031847,
0.015374,
0.000785,
0.003078,
-0.017780,
0.018855,
-0.020850,
-0.010651,
0.023413,
0.015742,
0.038224,
0.013961,
-0.036116,
-0.010461,
0.017708,
0.006240,
-0.008275,
-0.018952,
-0.046636,
-0.008535,
0.009336,
0.012678,
0.003766,
-0.028027,
0.001425,
-0.034998,
-0.032632,
0.012006,
0.019852,
0.020714,
-0.030803,
-0.022247,
0.007707,
-0.012914,
-0.021968,
-0.034564,
0.023107,
0.010254,
-0.038050,
-0.006078,
-0.042781,
0.005999,
-0.044724,
0.015226,
-0.013938,
-0.004278,
-0.039952,
-0.021129,
-0.023452,
-0.032352,
-0.029938,
-0.012039,
-0.049995,
-0.006519,
-0.047285,
-0.052015,
0.010402,
0.017746,
0.006769,
-0.043824,
0.011505,
-0.051527,
-0.026868,
0.002878,
-0.012660,
-0.001772,
-0.031862,
-0.001259,
0.029566,
-0.030290,
0.028276,
0.006084,
-0.025435,
-0.023188,
-0.012889,
-0.004655,
-0.030982,
-0.011483,
0.012643,
-0.025510,
-0.036902,
-0.033090,
0.015165,
-0.008326,
0.002811,
-0.045295,
-0.020294,
-0.032626,
-0.027949,
-0.001293,
-0.052607,
-0.003402,
0.028150,
0.015674,
-0.028834,
-0.021820,
0.028497,
0.009865,
0.022524,
-0.001330,
0.025346,
0.024449,
-0.009301,
-0.002374,
-0.035121,
0.011255,
0.033326,
-0.026764,
0.007410,
0.003481,
0.011713,
-0.011545,
0.000124,
-0.031499,
0.014242,
-0.014524,
-0.007637,
-0.002668,
0.012327,
-0.023071,
0.004179,
-0.007772,
-0.040272,
-0.035587,
-0.023996,
0.002351,
0.017749,
0.013204,
0.006547,
0.029868,
-0.018748,
-0.024643,
0.025312,
-0.015754,
0.030923,
-0.016212,
-0.022311,
0.020010,
-0.012181,
-0.003821,
0.010247,
-0.004484,
-0.003651,
-0.011244,
0.025988,
-0.021371,
-0.045614,
-0.053106,
-0.037675,
0.000260,
-0.012478,
-0.024630,
-0.020613,
-0.004788,
-0.010044,
-0.028019,
-0.027371,
-0.014480,
-0.031296,
0.010549,
0.000617,
-0.029704,
-0.013217,
-0.042090,
0.009304,
-0.015353,
0.004158,
-0.040164,
0.009542,
-0.030664,
-0.009761,
-0.014172,
-0.016942,
0.030612,
0.004186,
0.002324,
-0.034540,
0.001390,
0.008978,
0.003492,
0.017856,
-0.009727,
-0.014298,
-0.034657,
-0.035060,
-0.015194,
-0.018260,
0.028185,
-0.017042,
-0.048604,
-0.038125,
-0.043297,
0.002286,
0.003038,
-0.021369,
-0.009574,
-0.018388,
0.002122,
0.022775,
-0.037616,
0.018037,
-0.037909,
-0.015811,
0.035069,
0.024658,
0.020129,
-0.007843,
-0.026182,
-0.027405,
-0.030372,
-0.031622,
0.020032,
0.029446,
0.017546,
0.005605,
-0.004932,
-0.003178,
-0.004474,
0.011562,
-0.036654,
0.021250,
0.011272,
0.008403,
0.014366,
-0.028484,
-0.000547,
0.012469,
-0.025363,
-0.029931,
-0.032323,
0.015069,
-0.009261,
-0.037763,
0.029139,
0.024355,
0.010236,
0.011829,
-0.008441,
-0.005720,
-0.008621,
-0.012598,
-0.008251,
-0.004003,
-0.031840,
-0.018848,
0.004381,
-0.055100,
-0.037907,
-0.060542,
-0.010815,
-0.009668,
0.003302,
0.016565,
-0.037997,
-0.035909,
-0.021250,
-0.015499,
-0.043833,
-0.030075,
-0.000719,
-0.026950,
0.026935,
-0.044447,
-0.012882,
-0.008646,
-0.029340,
-0.025865,
0.008049,
0.020213,
0.007027,
-0.029740,
0.000622,
0.025590,
-0.015555,
0.005203,
-0.018237,
0.014496,
-0.020436,
0.002187,
0.023150,
-0.018948,
-0.002112,
-0.017033,
0.033510,
0.005905,
-0.025706,
-0.031150,
0.028855,
-0.004991,
-0.029177,
-0.022798,
0.012255,
-0.016440,
0.023674,
-0.021128,
-0.044035,
0.018102,
-0.037687,
-0.025102,
-0.003762,
-0.052937,
-0.013973,
-0.030341,
0.011452,
-0.010659,
-0.047318,
-0.024983,
-0.036983,
0.024392,
-0.017191,
-0.014160,
-0.031659,
0.030886,
0.022664,
-0.004352,
0.027793,
-0.026192,
0.023769,
-0.006266,
-0.018163,
0.014080,
-0.034788,
-0.013898,
-0.023889,
-0.037102,
-0.012039,
-0.009760,
-0.033411,
-0.039975,
0.001455,
-0.008204,
-0.029763,
-0.007014,
-0.029995,
-0.036859,
-0.063492,
-0.013480,
-0.029116,
-0.000638,
-0.001525,
0.001832,
0.026515,
-0.019399,
-0.035518,
-0.024530,
-0.028979,
-0.008130,
-0.007433,
0.024528,
0.030594,
0.003298,
0.037182,
-0.030091,
-0.004009,
-0.008783,
-0.030721,
0.023875,
-0.037581,
0.006173,
0.000797,
-0.022944,
-0.016994,
0.013443,
-0.030597,
-0.010063,
0.032520,
0.014691,
-0.031376,
0.004509,
0.018447,
-0.058382,
-0.042823,
-0.012422,
-0.023223,
-0.024208,
-0.004071,
0.013842,
-0.008448,
-0.035248,
0.029128,
-0.002560,
0.009099,
-0.032149,
0.009598,
0.008015,
0.015970,
0.023201,
0.004161,
-0.035344,
-0.029382,
-0.002807,
-0.008564,
0.004445,
0.121490,
0.166630,
-0.054857,
-0.025153,
-0.167420,
0.081052,
0.028555,
0.069634,
0.082283,
-0.023127,
0.025396,
-0.025185,
0.004051,
-0.093160,
0.094401,
0.017420,
-0.087842,
-0.098432,
-0.125640,
0.131100,
-0.263960,
-0.363610,
-0.111170,
-0.154890,
-0.080009,
0.028049,
0.025775,
-0.026963,
-0.014004,
-0.019090,
0.043532,
0.004883,
-0.024834,
0.010313,
-0.010012,
-0.005614,
0.000283,
0.000462,
-0.005552,
0.037877,
-0.006111,
0.019258,
0.035928,
-0.022636,
-0.029336,
0.035550,
-0.041177,
-0.011678,
-0.052043,
0.007321,
-0.114910,
-0.084873,
0.007287,
0.113430,
-0.079371,
-0.104890,
-0.103010,
-0.034500,
0.087513,
-0.055042,
-0.156180,
-0.032309,
0.058131,
0.026975,
0.057560,
-0.007362,
0.035157,
-0.038227,
0.080656,
0.094892,
0.034503,
0.064417,
0.034637,
0.044342,
0.174340,
0.019973,
0.042019,
0.030092,
-0.005843,
-0.041419,
-0.008792,
-0.033603,
-0.034589,
-0.016395,
0.008695,
-0.029388,
-0.034641,
-0.038132,
-0.066483,
-0.020936,
0.033932,
-0.025847,
-0.035348,
0.007456,
0.024150,
-0.002207,
-0.027812,
-0.020328,
-0.007553,
0.027699,
-0.082908,
-0.104140,
-0.089372,
-0.055205,
-0.058432,
-0.044356,
-0.001775,
-0.093775,
-0.157670,
-0.035407,
-0.066282,
-0.058192,
-0.104920,
-0.116360,
-0.133090,
0.069170,
-0.004881,
-0.018159,
-0.025507,
0.044489,
-0.038140,
0.038459,
0.037396,
0.028500,
0.020868,
0.051901,
-0.033188,
-0.133690,
-0.036353,
0.022807,
0.064827,
-0.012916,
-0.133910,
0.020826,
-0.005168,
-0.077055,
-0.036496,
0.065764,
-0.042258,
-0.183390,
-0.066316,
-0.081527,
0.051073,
-0.056472,
-0.033915,
-0.098964,
-0.106610,
-0.075025,
-0.034733,
0.069484,
0.218620,
0.088231,
-0.025566,
0.089180,
0.231460,
0.097610,
0.040894,
-0.100410,
-0.120920,
0.093262,
0.062177,
0.139140,
0.006260,
-0.161610,
-0.031419,
0.071511,
0.106220,
0.016441,
0.010930,
0.008370,
-0.027415,
0.117250,
-0.012768,
0.003645,
0.072509,
0.112400,
-0.142650,
-0.067012,
0.068300,
0.041533,
0.074469,
-0.074443,
0.016930,
-0.021052,
-0.004445,
0.154820,
0.046183,
0.067336,
-0.132950,
-0.071049,
0.140790,
-0.045418,
0.141890,
-0.005313,
0.062904,
-0.017503,
-0.120710,
0.042550,
-0.081031,
0.082481,
-0.082514,
-0.098957,
-0.052866,
0.013613,
-0.152020,
-0.017783,
-0.068848,
-0.049578,
-0.021297,
-0.111570,
0.046159,
0.002407,
0.036797,
0.019919,
-0.024612,
0.118950,
0.079216,
0.037701,
0.072168,
-0.011305,
0.169650,
0.154390,
0.154450,
0.139240,
-0.052992,
0.145510,
0.023082,
-0.062552,
-0.162570,
0.038549,
0.096394,
0.062134,
0.007797,
-0.241980,
-0.062956,
0.101880,
0.034220,
0.027527,
-0.140870,
-0.100130,
0.116520,
0.055640,
-0.049262,
-0.048840,
0.010387,
0.048373,
0.152430,
0.035169,
-0.023687,
0.002139,
-0.013432,
0.010461,
0.017682,
0.007400,
0.006014,
0.105330,
0.075364,
-0.028343,
0.037522,
0.005114,
-0.045491,
-0.002844,
-0.088725,
-0.070165,
-0.031041,
0.069635,
0.075508,
0.033697,
-0.137950,
-0.130640,
0.017323,
0.071834,
0.110320,
-0.096796,
-0.329230,
0.174530,
0.025850,
-0.125670,
0.037593,
-0.063628,
-0.054418,
0.065505,
0.007415,
0.050209,
-0.041962,
-0.041450,
-0.057534,
-0.016861,
0.053029,
-0.020281,
-0.120540,
-0.088751,
-0.030422,
-0.021599,
-0.019415,
-0.267030,
-0.180060,
-0.060373,
-0.028715,
-0.152440,
0.105390,
0.013938,
0.013674,
0.031330,
-0.048792,
0.185330,
-0.061784,
-0.033326,
-0.006418,
-0.088356,
0.148220,
0.038240,
0.004391,
0.038992,
0.012080,
-0.047484,
-0.063261,
0.031198,
0.030460,
-0.118750,
0.002463,
-0.059048,
-0.056482,
0.056513,
-0.009339,
-0.047723,
0.025870,
0.118920,
0.100690,
0.129760,
0.028423,
0.099711,
0.048258,
-0.026551,
-0.019920,
0.091447,
0.057010,
0.071664,
0.058709,
0.095479,
-0.064204,
-0.126850,
-0.016819,
0.020686,
0.019633,
-0.053115,
-0.003021,
0.122630,
0.121800,
0.165080,
-0.079694,
-0.062513,
0.000548,
0.061612,
-0.083514,
-0.039294,
0.058727,
0.066263,
0.008083,
-0.105010,
-0.003381,
0.068268,
0.124560,
0.094491,
-0.185680,
0.020461,
0.008350,
-0.046389,
-0.091206,
-0.219430,
0.071788,
0.075287,
0.012552,
-0.019450,
-0.064013,
-0.127990,
-0.113400,
-0.112170,
-0.112670,
-0.064325,
-0.038113,
-0.188210,
-0.178000,
-0.207080,
-0.125620,
-0.026033,
-0.180570,
-0.065428,
-0.054402,
-0.076772,
0.009761,
-0.016369,
0.047527,
0.111010,
-0.013742,
0.072453,
0.056162,
0.083567,
0.092990,
0.055871,
0.035571,
0.011039,
-0.031889,
-0.033058,
-0.031752,
-0.012821,
-0.019405,
-0.037780,
-0.051188,
-0.002623,
-0.005769,
0.006994,
-0.015040,
-0.015215,
-0.023358,
-0.070734,
-0.049495,
0.003023,
-0.046777,
-0.026735,
-0.056998,
-0.017477,
-0.062160,
0.013591,
-0.032705,
0.010456,
-0.060918,
0.109910,
0.127980,
0.043854,
-0.207150,
0.020334,
0.094667,
0.134960,
0.010590,
-0.116890,
-0.030565,
0.049317,
0.034493,
0.067019,
-0.091545,
-0.026491,
-0.010484,
-0.029706,
-0.003044,
-0.133300,
-0.217570,
-0.088085,
-0.027121,
0.017511,
-0.056712,
0.034207,
0.029875,
0.064785,
0.007188,
-0.094992,
0.004149,
0.008524,
0.018675,
-0.000530,
0.066811,
-0.003843,
0.042666,
0.046446,
-0.038056,
0.023756,
0.002240,
0.036297,
0.103750,
-0.010135,
-0.065402,
-0.026700,
0.011268,
-0.020317,
0.117310,
-0.009806,
0.040143,
0.129670,
0.047878,
0.107410,
-0.017510,
0.030469,
0.064423,
0.046292,
0.075421,
0.057785,
0.119620,
0.072354,
0.104590,
0.027847,
0.012132,
-0.016425,
-0.001621,
0.024921,
0.006913,
0.167010,
0.197390,
0.150750,
0.221780,
0.190240,
-0.037250,
0.011118,
-0.005489,
0.002895,
0.016798,
-0.023000,
0.000083,
0.023191,
0.009458,
0.026949,
-0.005386,
0.006956,
-0.009717,
-0.020899,
0.007422,
-0.022332,
-0.023434,
0.026635,
0.006737,
0.017973,
0.027889,
-0.022037,
-0.005268,
0.020333,
-0.044180,
0.092751,
0.010721,
-0.078501,
-0.131430,
0.081400,
0.112080,
0.091335,
-0.001339,
-0.033133,
-0.091354,
0.027653,
0.121940,
0.070749,
-0.040504,
-0.165830,
-0.035117,
0.026872,
0.118140,
0.054454,
-0.013091,
-0.012280,
-0.024964,
-0.023755,
-0.031414,
-0.048014,
0.038827,
0.113690,
0.109790,
0.111100,
-0.174810,
0.021501,
0.148540,
0.097265,
0.128610,
-0.076333,
0.075251,
0.050446,
-0.021573,
0.014019,
-0.008263,
-0.003613,
-0.066305,
-0.018250,
-0.022500,
0.013438,
-0.047694,
-0.048467,
0.021742,
0.030356,
0.055009,
-0.092071,
-0.015813,
-0.106240,
-0.149760,
-0.006942,
-0.163500,
0.000693,
-0.068266,
0.025596,
0.097784,
-0.073656,
0.076000,
-0.014436,
-0.000527,
0.046707,
-0.038248,
0.105330,
0.080185,
0.013454,
0.027337,
-0.030217,
0.009714,
0.015303,
-0.009449,
0.037901,
0.106480,
0.021617,
-0.023755,
-0.058062,
0.084248,
0.104750,
0.128380,
0.092281,
-0.030046,
0.124010,
0.070525,
0.104550,
0.170840,
0.098835,
0.112180,
0.064729,
0.052423,
0.146800,
0.084172,
0.050497,
-0.110780,
-0.022001,
-0.025359,
-0.117560,
-0.048576,
0.140250,
-0.005092,
-0.024943,
0.093366,
0.237750,
0.006726,
0.035414,
0.013912,
0.148100,
0.108610,
-0.058246,
0.177940,
0.233720,
0.014060,
-0.049648,
0.006562,
0.093517,
0.221310,
0.069347,
0.058284,
-0.060662,
0.073466,
0.031851,
0.102720,
0.036128,
-0.104000,
-0.069790,
-0.057815,
-0.040336,
-0.068422,
-0.023603,
-0.026136,
-0.065123,
-0.067782,
-0.095543,
-0.011991,
-0.018758,
-0.080984,
-0.064381,
-0.071263,
0.036356,
0.030776,
-0.014272,
0.045653,
0.000333,
-0.027356,
-0.040966,
0.021034,
0.045915,
0.043592,
0.005078,
-0.043727,
-0.017120,
0.010318,
0.039530,
0.028544,
-0.026762,
0.006597,
0.034969,
0.034362,
-0.039240,
0.031443,
-0.007007,
-0.038736,
-0.031694,
-0.043271,
0.034372,
-0.044214,
-0.029474,
0.000107,
0.001963,
-0.031797,
-0.009414,
0.019813,
-0.041865,
-0.151120,
-0.025673,
-0.132190,
-0.145900,
-0.107090,
-0.163200,
-0.044803,
-0.200340,
-0.106530,
-0.110850,
-0.011806,
-0.077548,
-0.174550,
-0.028907,
0.110530,
-0.012931,
0.003773,
0.000912,
0.092538,
0.082779,
0.075940,
0.160910,
0.111350,
0.157430,
0.083789,
0.112890,
0.059431,
0.004990,
0.034006,
0.000101,
0.049640,
0.041344,
0.084845,
0.031791,
-0.055001,
0.054551,
0.006013,
-0.023503,
0.010831,
0.061022,
0.024464,
0.005277,
0.045168,
0.023456,
-0.134510,
-0.004077,
-0.003766,
0.005202,
-0.015835,
-0.074708,
0.024828,
-0.011737,
-0.005425,
-0.029111,
-0.005752,
0.052294,
0.052732,
-0.005513,
-0.042476,
0.021557,
0.009244,
-0.015643,
0.028956,
0.032253,
-0.008395,
-0.071745,
-0.016077,
0.011284,
0.028647,
-0.010627,
0.030664,
0.016819,
-0.001104,
0.017211,
0.023457,
0.099412,
0.094722,
0.097284,
-0.005285,
0.187650,
-0.041093,
0.059836,
0.187230,
-0.044151,
0.008201,
-0.056998,
-0.024592,
0.028899,
-0.068729,
-0.065136,
-0.107150,
-0.043488,
-0.029490,
-0.142910,
-0.071076,
0.094227,
-0.055253,
-0.106380,
-0.160530,
-0.233130,
0.012869,
0.091439,
0.101360,
0.004129,
0.140770,
0.015475,
0.076588,
0.161370,
-0.036104,
-0.048807,
0.051110,
0.148430,
0.063253,
0.042796,
0.011240,
0.083834,
0.006703,
0.042646,
0.003070,
-0.023034,
-0.025499,
-0.060228,
-0.151980,
-0.221900,
-0.117850,
0.004831,
-0.014053,
0.008838,
-0.007126,
0.000238,
0.003527,
-0.013172,
0.005149,
0.033043,
0.010266,
0.021589,
-0.006521,
-0.006175,
-0.007522,
-0.031210,
0.025959,
-0.030326,
0.030895,
-0.006022,
0.007689,
0.021831,
0.047200,
0.003893,
0.030753,
-0.045864,
-0.141180,
-0.003144,
-0.084034,
-0.129560,
-0.089038,
0.082320,
0.055471,
-0.005491,
0.014220,
0.058826,
-0.081279,
-0.001688,
0.131770,
-0.034819,
0.027491,
-0.094340,
0.034722,
0.139890,
0.060112,
0.018223,
-0.065233,
-0.057131,
0.053846,
0.092866,
-0.060722,
-0.013330,
0.017344,
0.015132,
0.040647,
0.107040,
0.019410,
0.013974,
0.052104,
0.057369,
0.067742,
0.033758,
0.098631,
0.038652,
-0.030469,
0.037420,
0.054604,
0.009299,
0.009559,
0.057488,
0.031098,
0.023266,
0.048165,
-0.020407,
-0.001994,
0.000910,
-0.090835,
-0.125380,
-0.109200,
-0.023138,
-0.077624,
-0.013439,
-0.030122,
-0.025466,
0.016097,
-0.111620,
-0.111890,
0.005026,
0.083140,
0.169150,
-0.096195,
-0.117340,
0.012176,
-0.019132,
0.043294,
-0.230460,
-0.229520,
-0.136930,
0.007020,
-0.053519,
-0.195280,
-0.089872,
0.030394,
-0.010985,
0.024091,
-0.130520,
0.101360,
0.181060,
0.122540,
0.080106,
-0.055793,
0.111790,
-0.039786,
-0.011777,
0.015744,
-0.077606,
0.085841,
0.074201,
0.085480,
-0.030263,
-0.099636,
-0.090363,
-0.006097,
0.040676,
0.155700,
0.008139,
-0.029156,
0.034687,
0.059259,
-0.138490,
-0.183350,
0.154100,
0.124370,
0.035552,
0.000575,
-0.005591,
0.131750,
0.175980,
0.022293,
-0.073258,
0.045107,
0.047119,
-0.002556,
-0.078531,
-0.123360,
-0.112720,
0.159240,
0.020923,
-0.064707,
-0.088413,
-0.026681,
-0.058895,
0.024385,
-0.032272,
-0.111190,
-0.050276,
-0.067251,
0.045733,
-0.000599,
-0.070907,
-0.058379,
-0.155210,
0.046912,
0.164020,
0.021717,
0.028914,
-0.017281,
0.006583,
0.071272,
-0.017624,
-0.091562,
-0.074530,
0.099710,
-0.033529,
-0.005218,
-0.083638,
0.243110,
0.012150,
0.017570,
-0.126300,
-0.320710,
0.087692,
0.092003,
-0.017907,
-0.038192,
-0.015293,
-0.034969,
0.082501,
0.015572,
0.018223,
0.024042,
0.062392,
0.037584,
-0.060203,
0.024395,
-0.026077,
0.206170,
0.038176,
0.137230,
0.092489,
0.000938,
-0.038631,
0.100260,
-0.022534,
-0.144990,
-0.163400,
-0.002835,
0.021818,
-0.058092,
-0.119810,
-0.222040,
-0.092203,
0.031188,
0.032061,
-0.019888,
-0.228160,
-0.080887,
-0.037483,
-0.117340,
-0.080250,
-0.115730,
-0.013954,
-0.176930,
-0.273120,
-0.115540,
0.012648,
0.176900,
-0.065430,
-0.007628,
0.040990,
-0.136670,
0.099483,
-0.012197,
0.107720,
0.099935,
0.122340,
-0.045912,
-0.080624,
0.053045,
-0.008307,
0.177650,
-0.045453,
-0.120490,
0.036795,
0.012813,
0.069133,
-0.019830,
-0.136080,
-0.027867,
0.080599,
-0.034505,
0.143710,
0.140750,
-0.048200,
-0.079813,
-0.142060,
0.056760,
-0.038859,
0.044186,
-0.068665,
0.046075,
0.021439,
-0.040233,
0.000807,
0.101090,
0.115200,
-0.096338,
-0.096657,
-0.142690,
0.010078,
0.077859,
-0.048994,
-0.247080,
-0.258190,
-0.111020,
-0.125750,
0.113480,
0.043121,
-0.045113,
-0.162780,
-0.241030,
0.078682,
0.128300,
0.036776,
0.003243,
0.010217,
-0.048899,
0.083267,
0.052729,
0.122030,
0.012471,
0.057541,
-0.005492,
0.033773,
0.009071,
0.050285,
0.089235,
0.015640,
0.012572,
-0.057459,
-0.010607,
0.144050,
0.079812,
0.058569,
-0.139140,
-0.131340,
0.138710,
0.157300,
0.085503,
-0.138550,
-0.125630,
0.121450,
0.146500,
0.039027,
-0.069420,
0.109750,
0.045974,
0.061861,
0.099961,
0.061208,
0.037048,
-0.162610,
0.024705,
0.127340,
0.066727,
0.090834,
0.071050,
0.079214,
0.087507,
0.118050,
-0.121480,
-0.040800,
0.073643,
0.074784,
0.145030,
-0.053094,
0.029933,
0.068915,
0.061001,
0.143460,
0.006496,
0.120160,
0.091475,
0.132450,
0.136170,
-0.052499,
-0.123380,
-0.073989,
-0.068885,
0.041415,
-0.165430,
0.286630,
0.062704,
-0.003702,
-0.043938,
0.089731,
0.187850,
-0.060451,
-0.076586,
-0.156040,
-0.047932,
0.128910,
-0.157990,
-0.177870,
-0.132460,
-0.053404,
0.181520,
-0.088130,
-0.117240,
-0.030165,
0.085448,
0.292620,
0.102500,
0.091415,
0.083709,
0.241020,
-0.011455,
0.000055,
0.041496,
-0.004006,
-0.022228,
0.050595,
-0.003707,
0.025078,
-0.012944,
0.054475,
0.009444,
0.012077,
-0.008781,
0.033111,
0.036019,
0.025577,
-0.027139,
0.020221,
0.032314,
0.039016,
0.053156,
0.010133,
0.026179,
0.049978,
0.016472,
-0.061587,
-0.119390,
-0.230400,
-0.166020,
-0.168040,
0.018569,
0.004370,
0.009320,
0.079600,
0.105520,
-0.087313,
-0.069873,
-0.060937,
-0.054942,
0.018789,
0.077797,
0.034068,
-0.053078,
-0.011319,
0.028474,
-0.011328,
-0.153550,
-0.212650,
-0.082755,
-0.134630,
-0.218790,
0.031197,
-0.037653,
-0.071387,
-0.004788,
-0.024385,
-0.005080,
0.036978,
0.131330,
-0.019980,
-0.022017,
-0.083561,
-0.051864,
0.088324,
-0.031796,
-0.039487,
-0.013979,
-0.079430,
-0.002491,
-0.003473,
-0.106380,
0.061253,
0.039818,
-0.007919,
-0.039739,
-0.226760,
-0.096350,
0.077022,
0.033242,
-0.140620,
-0.021836,
-0.035866,
-0.045276,
0.054675,
-0.056236,
-0.172070,
-0.006105,
0.002332,
0.158310,
0.080513,
-0.171210,
0.096470,
0.123500,
0.144630,
0.047643,
-0.197680,
-0.047440,
0.021501,
-0.032651,
-0.106870,
-0.015242,
0.029281,
0.017624,
-0.003680,
-0.032456,
0.020945,
-0.013654,
-0.025021,
-0.004708,
0.026389,
0.003725,
0.022538,
-0.047981,
-0.010043,
0.048599,
0.040416,
0.035678,
0.005453,
-0.012636,
0.004312,
0.009688,
-0.038533,
0.020996,
-0.024204,
-0.043940,
-0.081561,
0.079509,
0.177130,
0.067896,
-0.101670,
0.080922,
0.090990,
0.008837,
-0.075615,
-0.055269,
0.014092,
0.011534,
-0.002840,
0.016496,
-0.094544,
0.035403,
0.014741,
0.013456,
-0.030906,
-0.110620,
0.129380,
0.154310,
0.111140,
0.030929,
0.015994,
-0.171270,
-0.191110,
-0.124600,
-0.124870,
-0.003680,
0.032612,
-0.032979,
-0.016021,
0.002879,
0.075749,
0.097037,
-0.028423,
-0.050859,
-0.028016,
0.089942,
0.056545,
-0.045507,
0.009761,
0.032153,
0.050448,
-0.073801,
-0.033166,
0.093060,
0.064029,
0.001550,
-0.242210,
-0.104940,
-0.049703,
0.031343,
0.010879,
-0.124400,
0.093320,
0.048842,
-0.027512,
-0.006071,
-0.079342,
0.086530,
0.111920,
-0.045083,
-0.066385,
0.033730,
0.122250,
0.112650,
-0.002862,
-0.141060,
0.045716,
0.159070,
0.169380,
-0.056872,
-0.089437,
-0.261930,
0.074600,
0.109220,
0.056427,
-0.006729,
-0.055911,
0.059060,
0.039167,
-0.077602,
-0.145280,
0.005774,
0.053684,
0.103920,
0.055280,
0.028347,
0.014638,
0.109600,
0.017657,
-0.043132,
0.046513,
0.071315,
-0.041525,
-0.078771,
-0.133350,
-0.000613,
-0.050731,
0.134500,
0.072371,
0.045832,
-0.000994,
0.048670,
0.099224,
0.086323,
-0.042812,
0.024567,
-0.025211,
0.053430,
-0.001708,
-0.004086,
-0.023160,
-0.027443,
0.214590,
0.196290,
0.070082,
-0.000215,
-0.104620,
0.021820,
0.059617,
0.086929,
-0.063762,
0.004964,
0.049223,
0.055937,
-0.026050,
0.074521,
-0.020824,
0.012607,
0.084078,
-0.017369,
0.010367,
0.076593,
0.188780,
0.085666,
0.060779,
0.086514,
0.117170,
0.104370,
0.071438,
-0.017605,
0.096033,
0.049365,
0.028012,
0.039371,
0.029752,
0.037289,
-0.025701,
-0.000784,
0.010020,
-0.025833,
0.022100,
-0.007761,
0.042818,
0.048179,
0.005184,
0.081791,
0.024049,
0.024359,
0.026192,
-0.034486,
0.026827,
-0.001674,
0.012142,
0.021580,
-0.002292,
-0.031266,
-0.014229,
0.000780,
0.015863,
-0.073211,
-0.000240,
0.117570,
0.219990,
0.011030,
-0.039239,
0.042890,
-0.088101,
-0.083190,
-0.004752,
-0.060213,
-0.076590,
-0.085238,
-0.044108,
-0.032971,
-0.055675,
-0.039281,
-0.031681,
-0.057982,
-0.033882,
0.019989,
-0.008498,
0.082316,
-0.065888,
-0.201090,
-0.065797,
0.005211,
0.087262,
0.036186,
-0.014966,
0.010677,
-0.114950,
-0.019924,
0.086351,
0.101650,
0.104620,
0.051436,
-0.055001,
0.027033,
0.016314,
0.047852,
-0.004445,
-0.015631,
-0.073143,
-0.017961,
0.041055,
-0.018854,
-0.054044,
-0.058175,
0.053713,
-0.051299,
-0.136880,
-0.037489,
0.002240,
0.023916,
0.024227,
0.015948,
0.019535,
0.023956,
-0.005769,
0.004960,
0.027478,
0.033347,
0.019811,
0.009583,
0.028477,
0.000480,
0.055017,
-0.048845,
-0.040813,
-0.015559,
0.000736,
0.032203,
0.013810,
0.036598,
0.006047,
0.022812,
-0.167930,
-0.170090,
-0.078063,
0.067377,
0.110090,
0.053618,
-0.003413,
-0.110960,
-0.118280,
-0.066359,
-0.066198,
0.101970,
-0.028152,
-0.075165,
0.069012,
-0.116680,
-0.106840,
0.014412,
-0.003332,
0.036051,
0.029999,
-0.062035,
-0.041193,
-0.040725,
-0.098868,
0.046160,
0.060760,
0.018590,
-0.103990,
-0.044279,
0.032943,
0.030243,
-0.086614,
-0.059562,
-0.055192,
-0.005575,
-0.008112,
-0.069933,
-0.026025,
-0.006921,
-0.026129,
0.040032,
0.003495,
-0.034255,
0.059155,
-0.067752,
-0.070782,
-0.056944,
-0.082575,
0.038907,
0.012729,
0.024792,
-0.037050,
-0.016562,
0.011055,
0.033177,
-0.029543,
0.039429,
-0.016996,
-0.032706,
-0.009907,
-0.012204,
-0.000983,
-0.032073,
0.024398,
-0.035518,
0.021181,
-0.005131,
0.020771,
-0.038663,
-0.036783,
-0.021194,
0.025632,
0.033282,
0.027255,
0.008611,
-0.009514,
-0.036052,
-0.056189,
-0.043820,
0.012740,
-0.018147,
-0.036452,
-0.066676,
-0.072294,
0.013136,
-0.006833,
-0.061088,
-0.009496,
-0.061212,
-0.017957,
-0.035133,
-0.022107,
-0.027525,
0.006280,
-0.074263,
-0.034357,
-0.034283,
-0.102150,
0.010048,
0.018172,
-0.032791,
0.022161,
-0.011386,
-0.021821,
-0.012390,
-0.014712,
-0.009804,
-0.027571,
-0.004261,
0.015981,
0.014247,
-0.018562,
0.002293,
-0.024454,
-0.026808,
0.002832,
-0.013749,
0.011410,
0.000243,
-0.004307,
-0.038817,
0.000461,
-0.000697,
0.009333,
-0.038686,
-0.084989,
-0.079673,
-0.015451,
-0.058393,
-0.015153,
-0.013246,
-0.010470,
-0.058383,
-0.028042,
-0.078847,
-0.105550,
-0.089334,
-0.010817,
-0.048687,
-0.004432,
-0.041657,
-0.095953,
-0.066564,
-0.040265,
0.018185,
0.032489,
-0.004497,
-0.004768,
-0.002705,
-0.024913,
-0.071528,
-0.087948,
-0.079215,
-0.048932,
-0.043769,
-0.061931,
-0.049948,
-0.081300,
-0.069401,
-0.056357,
-0.035605,
-0.103650,
-0.110180,
-0.043427,
-0.012655,
0.028507,
-0.023840,
-0.016677,
0.015695,
-0.004723,
0.068496,
0.010149,
0.004475,
-0.005415,
0.024334,
0.009083,
-0.016778,
-0.005704,
-0.002634,
-0.056207,
-0.020763,
-0.031015,
-0.026103,
-0.050666,
-0.027976,
-0.054317,
-0.039068,
-0.037678,
-0.018647,
-0.023061,
-0.006307,
-0.035168,
-0.018341,
0.022110,
0.026497,
-0.007955,
0.033600,
-0.017051,
0.023853,
-0.045124,
0.046065,
-0.101410,
-0.091005,
-0.108790,
-0.078765,
-0.091048,
-0.014854,
-0.020193,
-0.032766,
-0.066349,
-0.047328,
-0.076091,
-0.078561,
-0.060223,
0.020754,
-0.077565,
-0.000148,
-0.023631,
-0.002776,
0.007946,
-0.044245,
-0.015807,
-0.017925,
-0.030193,
-0.004373,
0.051399,
0.016312,
0.006411,
-0.050895,
0.034961,
-0.050266,
-0.071973,
0.044890,
-0.061657,
-0.059797,
0.018732,
0.024589,
-0.024266,
-0.020780,
-0.049167,
-0.017010,
-0.038022,
-0.045163,
-0.057681,
0.001996,
-0.062083,
0.006181,
-0.036307,
-0.018919,
0.042121,
0.022538,
-0.074971,
-0.052029,
-0.083088,
0.020490,
0.023153,
-0.078370,
0.001812,
-0.040606,
0.042723,
0.045917,
-0.052644,
-0.016919,
-0.008286,
0.051114,
0.024260,
-0.034430,
-0.072790,
-0.056913,
0.007205,
-0.069171,
-0.077114,
-0.085331,
-0.072877,
-0.047908,
-0.040973,
-0.032187,
0.028855,
-0.011420,
-0.062871,
-0.029719,
-0.077769,
0.036369,
0.021104,
-0.042336,
0.000453,
0.035595,
0.004257,
-0.048847,
0.028360,
0.046542,
0.046526,
0.007243,
-0.025330,
-0.061955,
-0.047139,
-0.043342,
-0.018164,
-0.078336,
0.053797,
0.048263,
0.053905,
-0.098748,
-0.091389,
0.034660,
0.061175,
-0.102170,
-0.006612,
0.041608,
0.066082,
0.081616,
0.021216,
0.034248,
0.006947,
0.062478,
0.026487,
0.025260,
0.015300,
-0.075646,
0.043676,
0.073656,
0.024330,
-0.102600,
-0.094320,
-0.099591,
-0.068993,
-0.081403,
-0.100200,
-0.050531,
-0.103550,
-0.044973,
-0.087174,
-0.078259,
0.010878,
-0.063003,
-0.086846,
-0.061580,
0.009809,
-0.054012,
-0.026424,
-0.018111,
-0.028519,
-0.088694,
-0.118910,
-0.056944,
-0.077931,
-0.008539,
-0.077525,
-0.080313,
-0.048714,
-0.080733,
0.028787,
0.042633,
0.071513,
-0.024180,
-0.002701,
-0.021191,
0.026207,
0.016715,
-0.026665,
0.048661,
0.029030,
0.003598,
0.036525,
-0.055440,
-0.077456,
-0.012095,
0.011175,
-0.037112,
-0.106420,
0.048559,
-0.014763,
0.058271,
0.063621,
-0.007960,
-0.031764,
-0.005230,
-0.007403,
0.064418,
-0.102220,
-0.022502,
-0.024151,
-0.084714,
-0.037889,
0.017562,
-0.033131,
-0.011040,
-0.109530,
-0.043742,
0.020137,
-0.019654,
-0.018815,
-0.009208,
-0.070145,
-0.049856,
-0.028234,
-0.015202,
-0.000849,
0.026261,
0.001142,
0.023636,
0.041752,
-0.027791,
0.045049,
-0.007064,
0.036248,
-0.009838,
0.060913,
0.020645,
0.033486,
-0.016812,
-0.008031,
-0.039613,
-0.020000,
-0.054553,
-0.014705,
0.023818,
0.027195,
-0.010246,
0.009473,
0.015534,
0.048392,
0.057708,
0.069932,
-0.028012,
0.016045,
-0.005729,
-0.030409,
-0.002391,
-0.012435,
-0.024102,
0.030927,
-0.029750,
0.009358,
0.013423,
-0.014640,
-0.018271,
0.019330,
-0.018023,
-0.036430,
0.015752,
-0.011139,
0.002622,
-0.025426,
0.017302,
0.025869,
0.014568,
-0.030115,
-0.034773,
0.025668,
-0.072384,
0.010173,
0.020494,
0.013189,
-0.020461,
-0.071034,
-0.005805,
0.013724,
-0.020501,
-0.065803,
-0.031657,
-0.053328,
-0.021465,
-0.076968,
-0.051158,
-0.091866,
-0.071079,
-0.038775,
-0.062866,
0.020989,
0.022377,
-0.012318,
0.035180,
-0.000652,
-0.014511,
-0.088615,
-0.018716,
-0.069611,
-0.033046,
-0.032516,
-0.047227,
-0.048045,
-0.077635,
-0.080598,
-0.053880,
-0.090293,
-0.045680,
-0.008097,
-0.076391,
-0.105480,
-0.083283,
-0.094629,
-0.034415,
-0.062410,
-0.015586,
-0.086558,
-0.061673,
-0.064440,
-0.097524,
-0.008538,
-0.044496,
0.000430,
0.035852,
0.068010,
0.020408,
-0.050672,
-0.031819,
0.000701,
0.002909,
-0.026492,
0.024859,
0.065001,
-0.041854,
0.030371,
0.020539,
0.014409,
-0.030519,
-0.072394,
-0.016458,
0.031499,
0.031854,
-0.021912,
-0.063987,
-0.016220,
0.015432,
-0.006307,
0.034677,
-0.032672,
0.017465,
0.002443,
-0.028063,
0.000797,
0.022893,
-0.018492,
-0.035475,
0.021407,
0.002644,
0.018817,
0.001761,
-0.035127,
-0.029912,
0.010223,
0.028412,
-0.022123,
-0.000684,
-0.004045,
-0.013192,
0.018893,
-0.024710,
-0.049231,
-0.100720,
-0.020688,
-0.036733,
-0.005156,
-0.076486,
-0.067009,
-0.010235,
-0.099082,
-0.004196,
-0.044034,
-0.108780,
-0.065842,
-0.015638,
0.002551,
-0.020589,
0.022247,
-0.030371,
0.040350,
-0.012078,
0.062110,
0.068924,
0.043042,
-0.015178,
-0.025687,
-0.040241,
-0.052526,
-0.026965,
0.023161,
-0.036527,
-0.017674,
0.013558,
0.021767,
0.025671,
-0.030985,
-0.004703,
0.036041,
-0.022307,
-0.028730,
0.016910,
0.012676,
0.015551,
0.047256,
-0.003703,
0.020883,
-0.035933,
-0.057287,
-0.048937,
-0.047896,
-0.036221,
-0.061903,
-0.028818,
-0.085094,
-0.011596,
0.012450,
-0.065874,
-0.025893,
-0.074879,
-0.076770,
-0.018240,
-0.012937,
-0.085812,
-0.001200,
-0.053677,
-0.065972,
-0.019019,
-0.071638,
-0.019583,
0.018629,
-0.023078,
-0.026207,
-0.072021,
-0.082965,
-0.072131,
0.054670,
0.007923,
0.006374,
-0.011737,
-0.113640,
-0.047176,
0.036086,
-0.018078,
-0.014307,
0.061307,
0.068619,
-0.038207,
0.001354,
-0.081209,
-0.034126,
0.032495,
-0.063547,
-0.071253,
-0.034726,
-0.044203,
-0.066308,
-0.051150,
-0.078904,
-0.050442,
-0.001277,
-0.074553,
-0.013180,
-0.047457,
-0.038396,
-0.052531,
0.076410,
-0.041562,
-0.055865,
-0.026854,
-0.057783,
-0.031402,
-0.002053,
-0.062996,
-0.028265,
-0.001153,
-0.053276,
-0.034273,
-0.036941,
-0.032971,
-0.041101,
0.023220,
0.058133,
0.057580,
-0.000611,
-0.106620,
-0.009269,
-0.049969,
-0.009203,
-0.052932,
-0.029794,
-0.071535,
-0.050811,
-0.001024,
-0.044907,
-0.051685,
-0.070380,
-0.015587,
-0.031215,
-0.070630,
-0.047998,
-0.049410,
-0.057495,
-0.074338,
-0.052297,
-0.068744,
-0.016353,
0.008735,
-0.067310,
-0.007890,
-0.027590,
-0.078818,
-0.029446,
-0.007963,
-0.031091,
-0.012432,
-0.028161,
0.013650,
0.019776,
0.029652,
0.031399,
0.040071,
0.014000,
-0.016107,
0.006879,
0.019323,
0.018801,
0.027273,
-0.028900,
-0.038448,
0.011380,
-0.027488,
0.020011,
-0.010904,
-0.026146,
-0.010040,
0.023788,
-0.013195,
-0.040827,
-0.011618,
-0.049806,
0.073475,
0.028729,
-0.028938,
0.044804,
-0.042930,
-0.055321,
-0.070136,
-0.067127,
-0.005325,
0.084767,
0.032552,
-0.032348,
-0.089601,
-0.061708,
-0.037900,
-0.035917,
-0.004766,
-0.032646,
-0.083214,
-0.098670,
-0.014940,
0.022770,
0.056266,
-0.001731,
-0.051604,
-0.066512,
0.004145,
0.006504,
-0.047787,
-0.086036,
-0.082837,
-0.007141,
-0.026533,
-0.001518,
-0.120370,
-0.054447,
-0.061873,
-0.050915,
-0.111890,
-0.037858,
0.017181,
-0.013089,
-0.060297,
-0.048121,
-0.057103,
-0.003805,
0.015426,
-0.012033,
0.011200,
0.026769,
-0.035143,
0.026500,
-0.016274,
0.023185,
-0.040601,
0.029619,
-0.007423,
-0.025981,
0.005748,
-0.035957,
-0.010307,
0.020500,
-0.002146,
-0.035892,
-0.038790,
0.001781,
0.002341,
-0.009163,
0.002591,
0.018926,
0.008817,
0.000801,
0.023550,
0.054358,
-0.055335,
-0.042630,
0.035833,
-0.020606,
-0.074780,
-0.092544,
-0.048671,
-0.004183,
-0.016841,
-0.005699,
-0.030813,
-0.020272,
-0.031021,
-0.090808,
-0.045608,
-0.057177,
-0.047324,
-0.047576,
-0.044945,
-0.056998,
0.012400,
0.012657,
-0.059886,
-0.032152,
0.036548,
-0.072119,
-0.124220,
0.050664,
0.081244,
-0.004107,
0.018447,
-0.092732,
0.072982,
0.078951,
0.121950,
-0.005444,
-0.268850,
-0.164470,
-0.055394,
0.020139,
0.008479,
-0.258850,
-0.058621,
0.013634,
-0.001624,
0.049982,
-0.162960,
-0.007871,
-0.024067,
0.022852,
0.035005,
-0.023454,
0.012223,
-0.010349,
0.009319,
-0.021165,
0.030894,
0.018073,
0.011747,
0.003475,
0.033286,
0.013104,
0.014623,
0.021439,
0.015255,
-0.029707,
-0.015679,
-0.035020,
0.042036,
-0.029115,
-0.032122,
-0.028018,
0.089494,
-0.191980,
-0.052846,
0.091265,
0.150720,
-0.087227,
-0.154830,
-0.091998,
0.002849,
-0.085078,
-0.112920,
-0.124410,
-0.218260,
0.025248,
0.013033,
0.061138,
-0.014889,
-0.024021,
0.058327,
0.132890,
0.029942,
0.081617,
0.108680,
0.088455,
0.172080,
0.068438,
0.067190,
0.031564,
0.040540,
0.021641,
0.035827,
0.011649,
0.042677,
-0.011924,
-0.035165,
-0.005377,
-0.049036,
0.026694,
0.000295,
-0.046278,
0.005304,
-0.050656,
-0.007282,
0.059777,
0.044913,
0.047943,
-0.047472,
-0.037825,
0.019928,
0.002635,
-0.082210,
0.076398,
0.172170,
0.149530,
0.025260,
-0.110480,
0.029221,
0.061687,
-0.036100,
-0.031401,
-0.057582,
0.157320,
0.008165,
0.065199,
0.046867,
0.050797,
0.052065,
-0.091128,
0.006343,
0.099486,
-0.010369,
0.028359,
0.046832,
0.043444,
0.109570,
-0.000678,
0.078855,
0.050263,
-0.024786,
-0.122570,
0.005311,
-0.010802,
0.069899,
-0.130620,
0.033506,
-0.027359,
0.006115,
-0.126310,
-0.053465,
-0.099679,
0.197420,
0.087194,
-0.001039,
0.030759,
-0.056172,
0.088479,
-0.048389,
-0.086100,
-0.074354,
-0.220660,
-0.071430,
0.028069,
-0.019656,
-0.002653,
0.036797,
-0.064908,
0.054060,
0.037726,
0.084503,
0.100700,
-0.209860,
-0.066065,
0.003893,
-0.009467,
-0.067369,
0.041867,
0.003497,
-0.020100,
0.027687,
-0.043257,
0.038438,
0.080028,
0.041293,
0.127620,
0.127250,
0.071055,
-0.024759,
0.011199,
0.071668,
0.148290,
-0.034440,
0.030948,
0.093094,
0.071717,
0.132430,
-0.059809,
-0.011578,
0.012882,
0.132570,
0.141540,
0.004242,
-0.054959,
-0.060639,
-0.031173,
-0.032224,
0.056001,
-0.100000,
-0.076876,
0.048273,
-0.019374,
0.045720,
0.049003,
-0.121070,
0.045492,
0.030380,
-0.005332,
-0.079236,
0.014455,
0.167030,
0.014917,
-0.038592,
-0.110690,
0.078914,
0.020783,
0.036625,
-0.103060,
0.080701,
0.104430,
0.028337,
0.090157,
-0.127490,
-0.032456,
-0.083068,
-0.033115,
-0.087637,
-0.119090,
0.045469,
0.120500,
0.099542,
-0.026926,
-0.123230,
0.065762,
0.016797,
0.084373,
-0.055944,
-0.090701,
0.106490,
0.045012,
0.155880,
0.008841,
-0.074574,
0.000090,
-0.064192,
-0.040192,
-0.211630,
-0.153040,
-0.124850,
-0.113550,
-0.081606,
-0.118330,
0.182030,
0.129110,
0.171390,
0.041703,
-0.091996,
0.021090,
0.075586,
0.037370,
-0.036691,
-0.117980,
0.096406,
0.153950,
0.029465,
0.062842,
-0.036411,
0.135200,
0.146490,
0.051978,
-0.000698,
-0.129820,
-0.015278,
0.135660,
0.154960,
0.052443,
0.243490,
-0.066366,
-0.017145,
0.065997,
0.068279,
-0.107770,
0.078876,
0.035208,
0.040113,
0.150160,
0.009334,
0.028987,
0.015374,
0.113320,
0.144110,
-0.033622,
-0.023440,
-0.082573,
0.027909,
0.031509,
-0.153590,
-0.055504,
-0.101580,
-0.074546,
-0.012505,
-0.114100,
0.128380,
0.096658,
0.075301,
0.020756,
0.046232,
0.072223,
0.032586,
-0.052192,
-0.097697,
0.074086,
-0.034649,
-0.055826,
-0.202780,
-0.296480,
-0.028170,
0.024254,
-0.086276,
-0.149750,
-0.144940,
0.061142,
-0.022365,
0.039759,
-0.008675,
-0.045705,
0.113070,
-0.146080,
-0.046203,
-0.067964,
-0.048838,
-0.017136,
0.055643,
0.037516,
0.016534,
-0.059171,
0.064585,
0.027703,
-0.050262,
0.027979,
-0.018555,
-0.003479,
-0.079308,
-0.031781,
0.014517,
-0.000931,
0.008266,
0.056223,
0.090504,
-0.007576,
0.117750,
0.118120,
-0.088126,
-0.066566,
0.074852,
-0.053588,
-0.048715,
-0.019122,
-0.082414,
-0.043398,
-0.081969,
-0.073650,
0.044070,
0.095037,
-0.030901,
-0.049955,
0.033193,
0.084005,
0.012284,
-0.015018,
-0.082314,
0.083933,
-0.117050,
-0.008565,
0.079250,
0.016516,
0.366050,
-0.039517,
0.083412,
0.057834,
0.032741,
0.061288,
-0.132240,
0.114500,
0.194780,
0.179470,
0.036490,
-0.037469,
0.182880,
0.132200,
0.134930,
0.002355,
-0.000127,
0.059616,
-0.050970,
0.040769,
-0.015201,
-0.186570,
-0.141120,
-0.108390,
-0.066176,
-0.048899,
0.010564,
0.007304,
-0.014382,
0.023973,
-0.007845,
0.002281,
-0.011587,
0.004027,
-0.011544,
0.057334,
-0.025931,
-0.021863,
-0.022439,
0.026126,
0.019869,
-0.026333,
0.021504,
0.041368,
-0.029681,
-0.008302,
0.018993,
0.055441,
0.016851,
0.038212,
0.030796,
0.018648,
-0.002967,
-0.074694,
-0.091758,
-0.083920,
-0.125440,
-0.089082,
-0.019981,
-0.083203,
-0.104650,
-0.018404,
0.020263,
-0.086214,
-0.080081,
-0.022825,
0.069872,
-0.021648,
0.005851,
0.003276,
0.057954,
0.290860,
0.108370,
0.140590,
0.100570,
0.120050,
0.039155,
-0.016541,
0.033145,
0.075838,
0.064927,
-0.021416,
0.004935,
-0.025460,
-0.078468,
-0.100860,
0.031813,
-0.060667,
-0.090354,
-0.040180,
-0.055306,
0.072036,
-0.106730,
-0.046615,
-0.082242,
-0.025108,
-0.044211,
0.019720,
0.009362,
-0.115970,
0.009479,
-0.021088,
0.097693,
0.095009,
0.101610,
-0.036970,
-0.116440,
0.107990,
0.118620,
0.043907,
0.002623,
0.018312,
0.092201,
0.174840,
0.143220,
0.071440,
0.095151,
0.095120,
-0.091845,
0.019701,
0.074330,
0.310660,
0.188400,
0.229390,
0.154170,
0.049439,
-0.006369,
0.017534,
-0.019132,
-0.006375,
0.042944,
0.005938,
0.033150,
-0.026791,
-0.019509,
-0.000010,
-0.014217,
0.019695,
0.015397,
-0.027015,
-0.037902,
-0.014008,
0.035384,
0.005936,
0.019551,
-0.044108,
-0.010128,
0.006929,
-0.006725,
-0.008336,
0.017188,
-0.091309,
-0.155090,
-0.252930,
-0.364600,
-0.220850,
-0.092805,
-0.133900,
-0.080823,
-0.093618,
-0.140850,
-0.077588,
-0.053301,
-0.169900,
-0.103300,
0.004442,
0.083944,
0.073383,
-0.010811,
0.038875,
0.122900,
0.101940,
0.116360,
-0.031089,
-0.026141,
0.100490,
0.094370,
0.007443,
0.080978,
0.047795,
0.043806,
0.082539,
-0.000264,
0.101260,
0.015847,
0.015994,
0.101320,
0.091652,
0.034963,
-0.013790,
0.068526,
0.038054,
0.068159,
-0.063403,
-0.105040,
-0.012515,
-0.003576,
-0.010211,
-0.142330,
-0.208810,
-0.132810,
-0.017709,
-0.095052,
0.013070,
0.075263,
0.028107,
0.015742,
-0.067070,
-0.065240,
-0.033424,
0.053128,
0.016504,
-0.053668,
-0.067703,
-0.077349,
0.072001,
0.117130,
0.031806,
0.029569,
0.010988,
-0.055358,
0.082485,
0.110620,
0.041499,
0.060959,
-0.059712,
-0.055094,
0.000258,
-0.012071,
-0.009571,
-0.062068,
-0.031420,
0.042531,
0.073029,
-0.037969,
-0.035484,
-0.041470,
-0.008222,
0.007421,
0.025754,
-0.060924,
-0.154330,
-0.260320,
-0.245800,
-0.070670,
-0.125870,
-0.067535,
0.002839,
-0.159240,
-0.026958,
-0.053524,
-0.020743,
0.028617,
-0.140720,
-0.101400,
-0.044714,
-0.062459,
0.019954,
-0.023033,
-0.062489,
-0.090657,
-0.087595,
-0.144280,
0.086969,
-0.091523,
0.008887,
0.028038,
0.012439,
-0.068174,
-0.003964,
0.136680,
-0.036092,
0.018916,
-0.145370,
-0.027852,
0.023167,
0.020734,
-0.041523,
-0.093697,
-0.059502,
-0.005919,
-0.009420,
-0.079733,
-0.148600,
-0.045586,
-0.064744,
-0.024032,
-0.038483,
0.004283,
-0.000095,
-0.009669,
0.074504,
0.024214,
0.014105,
0.080829,
0.079762,
0.161900,
0.048662,
0.038382,
0.103750,
0.070684,
0.014314,
0.002597,
0.018139,
0.044097,
0.059348,
-0.008110,
0.018538,
0.068091,
-0.015289,
0.073772,
-0.000208,
0.006392,
0.002338,
0.028825,
0.087050,
0.061302,
-0.009263,
0.008559,
0.072047,
0.046621,
0.047401,
-0.007318,
-0.006561,
0.094408,
-0.022414,
-0.015717,
0.089410,
0.050359,
0.049411,
0.063512,
0.119700,
0.150920,
0.035479,
0.012609,
-0.081800,
0.158550,
0.071394,
0.175040,
0.168820,
0.016771,
-0.084393,
-0.050511,
-0.093381,
-0.149900,
-0.172630,
-0.307100,
-0.252760,
-0.141560,
-0.274320,
-0.282720,
0.064678,
-0.034236,
0.119660,
0.107210,
0.030646,
0.080827,
0.041121,
0.075648,
0.045180,
0.005806,
0.111180,
0.047728,
0.070936,
0.014644,
-0.022110,
0.108190,
0.002793,
0.037540,
0.027173,
-0.044669,
-0.040043,
-0.004672,
0.025385,
-0.051211,
0.090699,
-0.017742,
0.022436,
0.015150,
0.038302,
-0.002135,
0.000580,
-0.011353,
0.028046,
-0.004973,
-0.001461,
-0.002728,
-0.010680,
-0.016766,
0.012662,
-0.040226,
0.021430,
-0.010623,
-0.034551,
-0.036578,
0.014744,
-0.000623,
-0.032645,
-0.015258,
-0.039229,
-0.003808,
0.032979,
0.036043,
-0.034010,
-0.127710,
-0.140270,
0.086246,
0.072396,
-0.056268,
0.006695,
0.053291,
0.033162,
0.059162,
-0.074592,
-0.012519,
-0.109570,
-0.158150,
-0.177330,
-0.156190,
-0.134340,
-0.189000,
-0.155080,
-0.191840,
-0.138980,
-0.098097,
-0.138190,
-0.098812,
-0.132900,
-0.035052,
-0.127490,
-0.191740,
-0.021483,
-0.029698,
-0.035867,
-0.031464,
-0.014981,
0.065532,
0.055468,
0.064416,
0.010822,
0.021778,
-0.102340,
0.138770,
0.102860,
0.109050,
-0.103710,
-0.042704,
-0.034668,
0.034612,
0.017229,
-0.053712,
-0.000649,
-0.008911,
-0.032477,
0.029036,
0.009003,
-0.017688,
0.010628,
-0.005789,
-0.029210,
-0.023757,
0.031225,
0.015985,
-0.025694,
0.005139,
-0.020823,
-0.015411,
0.032873,
0.020131,
0.005462,
-0.008239,
0.005111,
-0.005452,
0.006670,
0.004332,
-0.025235,
0.055975,
0.066368,
-0.065903,
-0.105980,
-0.079628,
0.023400,
-0.045255,
-0.173930,
-0.115170,
-0.008603,
0.069599,
-0.117430,
-0.116740,
0.064072,
0.015104,
-0.121360,
-0.071731,
0.009765,
0.018113,
0.062632,
-0.052349,
-0.073512,
0.034519,
0.047671,
0.132320,
0.001260,
-0.051164,
-0.056098,
-0.023789,
-0.012827,
0.032251,
0.029761,
0.043522,
0.024547,
0.018402,
0.006364,
0.032562,
-0.017132,
0.027129,
0.035292,
0.000438,
-0.017249,
0.038820,
-0.042630,
-0.029712,
-0.001678,
0.005731,
0.009525,
-0.053120,
-0.061695,
-0.132900,
-0.091812,
0.062559,
0.092111,
0.092817,
-0.130140,
-0.039083,
-0.032514,
0.010602,
0.125640,
0.031510,
0.034193,
0.056433,
-0.033308,
-0.008174,
0.005456,
0.013468,
-0.099094,
-0.065350,
-0.036201,
0.139260,
0.157630,
0.053543,
-0.141400,
-0.145400,
0.082370,
-0.006556,
0.026666,
-0.019375,
-0.039991,
0.023363,
-0.081528,
-0.026179,
-0.108130,
-0.116880,
-0.143440,
-0.083758,
-0.072123,
-0.197540,
-0.176280,
-0.143400,
-0.252220,
0.022618,
-0.077597,
-0.137980,
-0.147260,
-0.190740,
0.011222,
-0.019322,
-0.147870,
0.109990,
0.038078,
0.116420,
0.107220,
0.054788,
0.039596,
0.037294,
0.057262,
-0.054887,
-0.125300,
0.079431,
-0.033313,
0.022517,
-0.084352,
-0.073062,
0.101710,
-0.032113,
0.007280,
-0.057593,
-0.019142,
0.109680,
0.078304,
0.066917,
0.022877,
-0.064593,
0.022613,
0.023005,
-0.051155,
-0.040994,
0.069520,
0.057644,
-0.086293,
-0.043330,
-0.080160,
0.018542,
0.048412,
-0.058446,
-0.099826,
-0.076750,
-0.004165,
0.057148,
0.056453,
-0.142350,
0.017841,
-0.036307,
0.034308,
0.097868,
-0.028562,
-0.232420,
-0.150690,
0.092610,
-0.002281,
0.056324,
-0.043690,
-0.054151,
0.114180,
0.154360,
0.096150,
0.060495,
0.060087,
0.117280,
0.068341,
0.039901,
0.172390,
0.118440,
-0.040918,
-0.000563,
0.022810,
0.055757,
0.071325,
-0.120400,
-0.235160,
-0.031179,
0.010551,
0.044657,
-0.075080,
0.075954,
0.140900,
0.150500,
-0.050065,
-0.115520,
0.090704,
0.272080,
0.221980,
0.002967,
-0.081317,
0.088667,
0.081231,
0.095823,
-0.010617,
0.000893,
0.144650,
0.099385,
0.086190,
0.010520,
-0.064904,
0.033772,
-0.005121,
-0.022457,
-0.119770,
0.150720,
0.011457,
-0.075917,
-0.060920,
0.006284,
0.090928,
0.143160,
0.090212,
0.018234,
0.212700,
-0.008623,
-0.055127,
-0.026381,
0.195870,
0.103210,
-0.107010,
-0.057786,
-0.126200,
0.100340,
-0.040106,
-0.121870,
-0.040074,
0.009582,
0.030602,
0.041546,
0.135950,
0.096223,
0.089012,
0.040210,
0.125670,
0.135770,
0.147610,
0.127470,
0.036207,
0.182490,
0.040449,
0.141350,
0.185530,
0.078633,
0.157840,
-0.086110,
-0.010119,
0.050995,
0.134580,
0.074661,
-0.078575,
0.039953,
0.155460,
0.059616,
0.040492,
0.130390,
0.070385,
0.024619,
0.052706,
0.095217,
0.076556,
0.029020,
0.006978,
0.033966,
0.050792,
0.044504,
0.011228,
-0.007310,
-0.055282,
0.085991,
0.094747,
-0.035832,
0.041267,
-0.071516,
0.074646,
0.015804,
-0.035214,
0.025889,
0.019521,
0.031797,
-0.042033,
0.010502,
0.111800,
0.044342,
0.004382,
0.079577,
-0.091200,
0.020675,
-0.053112,
0.039166,
0.069886,
0.045696,
-0.005409,
0.004395,
0.162170,
0.080224,
-0.002318,
-0.099230,
-0.001152,
-0.035932,
0.099365,
0.015662,
-0.075777,
-0.155670,
-0.106500,
0.046124,
0.091260,
0.039835,
0.132050,
0.102310,
0.045118,
-0.095068,
0.048483,
0.247100,
0.206280,
-0.011915,
0.056370,
0.125230,
0.105320,
0.180050,
0.056681,
0.105280,
0.042074,
-0.054076,
0.197240,
-0.021306,
0.048328,
0.016637,
-0.057820,
0.023840,
-0.033643,
0.062039,
0.010725,
0.028379,
-0.058382,
-0.060775,
0.066569,
0.126000,
0.120300,
0.026843,
-0.062801,
0.013195,
0.169660,
0.162830,
0.069290,
0.003724,
0.023098,
0.086017,
0.080785,
-0.035132,
-0.093514,
-0.119990,
-0.069891,
-0.042890,
-0.003024,
-0.008413,
-0.003676,
-0.007621,
-0.003709,
-0.017348,
-0.039482,
-0.038764,
0.000889,
0.021715,
0.017124,
-0.035298,
-0.045888,
0.005848,
-0.008253,
0.011336,
0.023505,
0.027893,
-0.010090,
0.012693,
0.048807,
-0.004465,
-0.012883,
0.017648,
0.012279,
0.010524,
-0.119080,
-0.032600,
-0.123130,
-0.241780,
-0.217450,
-0.233880,
-0.226870,
-0.171760,
-0.201690,
-0.098973,
-0.024936,
-0.180690,
-0.195190,
-0.153490,
-0.063959,
0.180900,
-0.061730,
-0.030182,
-0.174960,
-0.029978,
0.210010,
0.018605,
-0.003833,
0.039355,
0.111250,
-0.113010,
-0.049530,
-0.107590,
-0.002678,
0.081366,
-0.132670,
-0.240830,
-0.349670,
-0.124310,
-0.107920,
-0.052975,
-0.220700,
-0.206850,
-0.139050,
-0.085433,
-0.028416,
-0.095127,
-0.061176,
-0.091016,
0.100810,
0.091953,
0.110110,
0.061209,
-0.049484,
0.003737,
-0.021417,
-0.058642,
-0.121230,
-0.017948,
-0.006729,
-0.257340,
-0.090912,
-0.198840,
-0.199070,
-0.132010,
-0.083405,
-0.052304,
-0.097285,
-0.026827,
-0.075634,
0.096580,
0.126200,
-0.021108,
-0.126250,
-0.026921,
0.255070,
0.046869,
-0.037888,
-0.134480,
-0.148710,
-0.030683,
0.003566,
-0.062765,
-0.022051,
-0.005865,
-0.024554,
0.022446,
0.014651,
-0.020591,
0.025824,
0.015462,
-0.025693,
-0.002303,
0.009528,
-0.040140,
-0.001511,
0.016033,
-0.016811,
0.004139,
0.004612,
-0.041367,
0.027136,
0.041759,
0.032765,
-0.025207,
0.217480,
0.111380,
0.060371,
0.015593,
0.048398,
0.264280,
0.041547,
0.077859,
-0.092740,
0.105180,
-0.001808,
0.025238,
-0.008762,
-0.049380,
-0.016995,
-0.356550,
-0.135350,
0.010881,
-0.004346,
-0.041214,
-0.082636,
-0.081178,
0.037201,
-0.058895,
-0.257960,
-0.261160,
-0.256580,
-0.243080,
-0.288220,
-0.236350,
-0.171170,
-0.276760,
-0.214680,
-0.180050,
-0.054321,
-0.108770,
-0.145220,
-0.162070,
-0.024387,
0.017557,
-0.058584,
-0.072524,
-0.066935,
0.010194,
0.021924,
-0.138830,
-0.141730,
-0.014774,
-0.001091,
0.140050,
-0.068746,
-0.073058,
-0.119640,
-0.001169,
0.123360,
-0.154560,
-0.155470,
-0.151760,
-0.148660,
0.030712,
-0.013646,
-0.092500,
-0.206730,
-0.205170,
-0.006840,
0.013868,
-0.106310,
-0.201480,
-0.132900,
-0.093355,
0.126560,
-0.026235,
-0.173070,
-0.168320,
-0.191330,
-0.075260,
-0.149540,
-0.155710,
-0.219210,
-0.110520,
-0.118560,
-0.161240,
-0.052456,
-0.031709,
-0.013751,
-0.096760,
-0.168120,
-0.188220,
-0.073618,
0.024216,
-0.030237,
0.038899,
-0.048047,
0.061365,
-0.021895,
0.021137,
0.099281,
0.001239,
0.018375,
0.006662,
-0.180100,
-0.205010,
-0.021861,
0.054488,
-0.026501,
-0.234530,
-0.100430,
-0.171760,
-0.121550,
0.034452,
-0.230560,
-0.196390,
-0.172670,
-0.064664,
-0.106710,
-0.093565,
0.030943,
-0.149400,
0.016865,
0.147330,
0.051440,
0.039181,
-0.066328,
0.013056,
-0.095931,
-0.050331,
-0.020779,
-0.090685,
-0.059404,
0.009039,
0.089842,
-0.001042,
-0.041843,
0.024053,
0.015210,
0.103740,
0.062835,
-0.067315,
-0.067200,
0.015129,
0.076780,
-0.057965,
-0.042447,
-0.029191,
-0.039525,
-0.017926,
-0.098507,
-0.057514,
-0.067471,
-0.031028,
-0.042656,
-0.020718,
0.015692,
-0.084410,
-0.033418,
0.007049,
0.005364,
0.008511,
-0.022890,
-0.063520,
-0.030214,
-0.004606,
-0.066259,
-0.056810,
0.048970,
0.027764,
-0.056896,
-0.003918,
-0.015187,
0.005240,
0.006681,
0.004567,
-0.022965,
-0.044677,
0.026237,
-0.179210,
-0.005650,
0.023032,
-0.062773,
-0.080855,
-0.161140,
0.015016,
0.066991,
-0.084245,
0.014887,
0.047719,
-0.006414,
0.045840,
0.058883,
-0.089874,
0.046248,
0.148290,
-0.161050,
-0.020021,
-0.036656,
-0.005973,
0.041986,
-0.018755,
-0.076994,
-0.003418,
0.034074,
0.038861,
0.139280,
0.143680,
0.088715,
0.139150,
0.057956,
-0.003152,
0.035246,
0.142680,
0.055243,
-0.012407,
0.059130,
0.090079,
0.236130,
0.029770,
0.051545,
0.134610,
0.178490,
0.199430,
-0.066295,
0.014184,
0.090764,
0.080680,
0.131460,
-0.047721,
-0.045867,
-0.053381,
-0.059488,
-0.015817,
-0.033000,
0.007188,
0.000874,
-0.013511,
-0.034468,
0.026511,
0.001356,
0.004828,
-0.001610,
-0.004646,
-0.001792,
-0.006655,
-0.030392,
0.013401,
-0.026737,
-0.021535,
0.003813,
-0.034976,
-0.019018,
-0.015210,
-0.045836,
-0.096309,
-0.015972,
-0.002166,
0.045692,
-0.244100,
-0.098735,
-0.078908,
-0.077507,
-0.042845,
-0.257550,
-0.161880,
-0.191360,
-0.034103,
-0.004465,
-0.055496,
-0.052193,
-0.108800,
-0.042304,
0.085935,
0.014130,
-0.014805,
0.119690,
0.070298,
-0.012831,
0.036693,
-0.030918,
-0.000243,
-0.036089,
-0.032433,
-0.081452,
-0.049931,
-0.077570,
-0.091788,
-0.143710,
-0.150360,
0.069882,
-0.004201,
0.048657,
-0.129500,
-0.084311,
0.043901,
0.102950,
0.120240,
0.092289,
-0.095295,
0.126170,
-0.085650,
-0.024017,
-0.076370,
-0.016024,
-0.013168,
0.027308,
0.020739,
-0.017393,
0.000233,
0.005485,
0.026259,
-0.000492,
0.011270,
0.016386,
-0.018408,
0.026830,
0.025199,
-0.005795,
0.015016,
-0.020020,
-0.019977,
-0.001816,
-0.023610,
-0.021507,
-0.022116,
0.011185,
-0.027266,
0.033457,
0.202330,
0.031342,
0.066761,
0.042509,
0.005357,
0.231740,
0.122960,
0.001851,
-0.054629,
-0.045675,
0.096209,
-0.050006,
-0.028347,
-0.002194,
-0.124380,
0.021809,
-0.048107,
-0.040216,
0.007243,
0.094219,
-0.095212,
-0.126010,
-0.099996,
0.041894,
0.070623,
0.038031,
0.003674,
0.013532,
0.075753,
-0.012887,
-0.028923,
-0.011721,
-0.023072,
0.028564,
0.017804,
-0.023142,
-0.027397,
-0.015742,
0.056980,
-0.002383,
0.058349,
-0.027718,
-0.040037,
-0.064651,
-0.059441,
0.011642,
0.012417,
0.003497,
-0.024217,
0.008693,
-0.081036,
-0.108570,
-0.039548,
0.039968,
0.039505,
-0.036178,
-0.102960,
0.015421,
0.058505,
0.197570,
-0.091656,
0.035465,
-0.022843,
-0.025740,
0.143380,
0.033235,
0.013863,
0.018715,
-0.057099,
0.111100,
0.116030,
0.092011,
0.182390,
0.119010,
0.219280,
-0.005300,
0.027995,
0.006674,
0.028073,
0.039267,
-0.111040,
-0.143380,
-0.015491,
0.019877,
0.188260,
-0.083565,
-0.041183,
-0.136270,
0.130690,
0.210000,
0.147940,
0.148300,
-0.073619,
0.074668,
0.191730,
-0.024785,
0.084105,
0.044284,
0.128740,
0.002918,
-0.331740,
-0.078283,
-0.032177,
-0.022181,
-0.112070,
-0.196270,
-0.028744,
0.018376,
0.158510,
0.123400,
-0.341280,
-0.007687,
0.000184,
0.115180,
0.048519,
-0.065390,
0.022807,
-0.006436,
0.168170,
0.121920,
-0.125140,
0.076837,
0.173150,
0.052777,
0.223810,
0.017112,
0.082691,
0.203590,
0.112380,
0.054341,
-0.041056,
-0.054105,
0.116230,
0.097056,
0.092589,
-0.072512,
-0.111960,
-0.045107,
-0.004795,
0.020528,
0.049139,
0.005229,
0.037281,
0.025133,
0.070387,
0.216340,
0.093994,
0.083869,
0.098943,
-0.094176,
0.320940,
0.133500,
0.025935,
-0.050583,
-0.029439,
0.189990,
0.088322,
0.055835,
-0.115750,
-0.032567,
0.089899,
0.013309,
0.065534,
0.040102,
0.027049,
-0.020933,
-0.087168,
0.049814,
0.089100,
0.140580,
0.051026,
-0.020728,
-0.059176,
0.068697,
0.080418,
-0.146270,
-0.069697,
0.024620,
0.103760,
-0.167220,
-0.063652,
0.032969,
-0.064168,
0.093224,
-0.037557,
-0.013376,
0.175670,
0.102570,
-0.005384,
-0.064298,
-0.131350,
0.073366,
0.111210,
-0.022418,
-0.046768,
-0.336140,
-0.062094,
-0.044454,
-0.046449,
-0.139400,
0.139230,
0.123290,
0.235280,
0.200670,
0.135040,
-0.065045,
0.004546,
0.169220,
-0.041568,
-0.153870,
-0.041024,
0.149640,
0.214130,
0.011758,
-0.120940,
-0.032941,
0.092264,
0.137130,
0.083525,
-0.026112,
-0.077622,
-0.056983,
-0.032849,
0.026855,
0.000311,
-0.152750,
-0.086693,
-0.072848,
-0.016192,
-0.104600,
-0.032928,
-0.109910,
-0.035084,
0.047756,
-0.064277,
0.016585,
0.051506,
0.057382,
0.199950,
-0.060466,
-0.086287,
0.134750,
0.062891,
0.117310,
-0.011275,
-0.096376,
-0.048697,
-0.157680,
0.030816,
0.000759,
-0.068077,
-0.043787,
-0.078661,
-0.111190,
-0.139420,
-0.023540,
0.057641,
0.000515,
-0.000668,
-0.008658,
-0.105670,
-0.019282,
0.029971,
0.043321,
-0.054910,
-0.133800,
-0.138810,
-0.097021,
-0.000426,
0.034390,
-0.093101,
-0.103860,
-0.032773,
-0.000030,
-0.055645,
-0.088621,
-0.045517,
-0.007882,
0.036395,
0.063855,
-0.017082,
0.066312,
0.107900,
-0.000521,
0.149240,
-0.153800,
0.005270,
0.030236,
0.004545,
0.179810,
-0.110500,
0.001947,
0.009416,
0.105510,
0.083538,
-0.106070,
0.053946,
0.046107,
0.010061,
0.150790,
0.041436,
0.097168,
0.047128,
-0.139190,
-0.044850,
-0.075470,
-0.073186,
-0.033590,
-0.105880,
-0.066429,
-0.062191,
-0.094513,
-0.100550,
0.002951,
0.112460,
0.067409,
-0.032697,
-0.012782,
0.029710,
0.096392,
0.078642,
-0.012011,
0.119470,
0.162580,
0.286240,
0.051270,
0.147470,
0.066674,
-0.033538,
0.021663,
-0.088627,
0.094783,
0.107750,
-0.000133,
0.047621,
-0.034893,
0.083981,
0.012156,
0.008498,
-0.034690,
0.006167,
0.090949,
0.041551,
0.107990,
-0.004953,
-0.091951,
-0.143780,
-0.043777,
0.034682,
-0.030279,
0.005766,
0.033651,
0.000920,
0.006977,
0.055085,
0.005037,
0.005521,
0.004115,
0.032783,
0.030890,
0.053972,
0.002415,
0.034191,
0.025342,
0.012620,
0.048249,
0.046784,
0.049420,
0.029818,
0.019893,
0.040691,
0.053147,
0.062819,
0.033666,
-0.016607,
-0.101240,
0.049762,
-0.003182,
-0.040451,
-0.022164,
-0.124040,
-0.006659,
0.011331,
-0.017737,
-0.081600,
0.018196,
0.057987,
0.061256,
0.094798,
0.142360,
-0.000322,
0.007488,
0.007269,
0.068447,
0.081639,
0.120820,
0.061399,
0.010788,
-0.068481,
0.032284,
0.002599,
-0.097927,
0.066471,
-0.060078,
0.190680,
0.011836,
-0.005623,
-0.044787,
-0.053274,
0.042641,
-0.068051,
-0.081992,
-0.054737,
-0.144520,
-0.069579,
0.024478,
-0.076337,
-0.091308,
-0.125380,
-0.070459,
-0.068607,
-0.120800,
-0.111390,
-0.146990,
-0.136840,
-0.044537,
-0.047179,
0.025063,
0.076970,
0.125400,
-0.026647,
-0.080563,
-0.076180,
0.029989,
0.169000,
-0.067901,
-0.091950,
0.020162,
-0.069681,
0.023644,
-0.119400,
-0.134760,
-0.075638,
-0.000673,
-0.019139,
0.176330,
0.089773,
0.121630,
0.030390,
0.033187,
0.010606,
-0.003736,
0.006473,
0.010384,
-0.015367,
-0.013005,
-0.007252,
0.015267,
-0.007368,
-0.041214,
0.039667,
-0.002801,
-0.002172,
-0.011326,
-0.055941,
0.018945,
0.009212,
0.012207,
-0.020558,
-0.045616,
0.020195,
-0.011708,
-0.004865,
-0.003234,
0.044240,
-0.101200,
0.012290,
0.041413,
-0.051969,
-0.067137,
-0.167380,
-0.105070,
0.033914,
0.000725,
0.102100,
-0.071238,
-0.053989,
-0.135000,
-0.058141,
0.045907,
-0.007773,
0.035345,
0.010897,
0.036186,
0.032443,
0.053140,
0.077661,
-0.064377,
-0.019978,
-0.000175,
0.012932,
-0.091845,
-0.014511,
-0.059359,
0.163070,
0.032307,
-0.075612,
-0.040293,
0.047473,
0.133210,
0.093693,
0.057086,
0.116340,
0.140560,
0.136750,
0.147950,
0.117640,
0.025027,
0.093126,
0.088983,
0.009405,
0.075313,
0.040055,
0.047655,
0.066664,
0.137310,
0.130610,
0.131070,
0.175680,
0.139760,
-0.006617,
-0.117420,
-0.148050,
0.016701,
0.136510,
-0.039586,
-0.147230,
-0.200480,
-0.100560,
0.105700,
-0.082063,
-0.099031,
-0.105290,
-0.105430,
-0.002288,
0.086201,
-0.070859,
-0.054215,
-0.091633,
0.028591,
-0.206980,
-0.080013,
0.084564,
0.047391,
-0.122790,
-0.192680,
-0.003444,
0.063671,
0.066542,
-0.031139,
-0.068047,
-0.035483,
0.073138,
0.097176,
-0.062865,
-0.033212,
0.015988,
-0.034707,
-0.079876,
-0.061086,
-0.162040,
0.070100,
0.059951,
-0.034509,
-0.079979,
0.106420,
0.148580,
0.067786,
0.019221,
0.007716,
-0.075378,
-0.045240,
0.036840,
-0.100560,
-0.003630,
-0.053765,
-0.102210,
-0.040584,
-0.063982,
-0.036848,
-0.113970,
-0.039166,
-0.027331,
-0.006166,
-0.131470,
0.032861,
-0.107290,
-0.173980,
-0.170720,
0.025412,
0.101990,
0.092151,
0.037584,
0.012999,
-0.004708,
0.037091,
0.026353,
-0.024545,
0.009591,
0.009242,
0.066343,
0.055630,
0.103430,
0.107350,
0.009472,
0.023309,
0.115840,
0.052880,
-0.039486,
0.060975,
0.068619,
0.048663,
-0.005994,
0.005853,
0.050038,
0.031127,
-0.018982,
0.046120,
0.015683,
0.043129,
0.016322,
-0.008288,
0.020468,
0.033698,
0.016761,
-0.012346,
-0.006715,
0.025066,
0.024650,
0.002893,
0.041934,
-0.046318,
-0.002286,
0.069323,
-0.028419,
-0.013746,
-0.052844,
-0.028783,
-0.019382,
0.049747,
-0.002003,
0.041496,
-0.007472,
0.104990,
0.159490,
-0.062836,
0.116060,
0.071769,
0.227000,
0.111230,
0.008360,
0.128070,
0.103520,
0.092802,
0.135630,
0.007455,
0.088804,
0.009310,
0.018156,
0.056999,
-0.180140,
-0.118950,
-0.128900,
-0.179810,
-0.076300,
0.057501,
0.054646,
0.050749,
-0.058277,
-0.061957,
-0.021864,
-0.096836,
-0.052623,
0.060143,
0.038814,
-0.225390,
-0.146350,
-0.031041,
0.050247,
-0.060673,
-0.140390,
-0.074678,
-0.023648,
0.100850,
0.032584,
0.004702,
-0.042747,
0.100580,
0.082159,
0.055042,
0.030370,
0.051893,
0.027572,
0.057509,
0.043406,
-0.012740,
0.009770,
0.041958,
0.055788,
-0.014604,
0.041418,
0.022066,
0.042542,
0.012361,
0.035484,
0.056038,
-0.015297,
0.017070,
0.023953,
0.015501,
0.046655,
0.047461,
0.003831,
0.000581,
0.054565,
-0.087917,
-0.031094,
0.018496,
-0.047212,
-0.091902,
-0.062506,
-0.008939,
0.101580,
0.132220,
-0.060173,
0.133000,
0.261430,
0.287330,
0.179300,
-0.054641,
0.031793,
0.057207,
0.068484,
-0.006273,
-0.004787,
-0.073917,
0.066142,
-0.074502,
-0.058730,
-0.123360,
0.052042,
0.013251,
-0.028320,
0.005980,
0.030016,
0.038841,
0.051103,
-0.047178,
-0.007374,
-0.003989,
-0.000742,
-0.078410,
-0.004797,
0.024863,
-0.032496,
0.011782,
-0.101450,
-0.122860,
-0.049992,
-0.056379,
-0.071881,
-0.045479,
-0.110810,
-0.065061,
-0.091226,
-0.011925,
-0.028884,
-0.026314,
-0.035015,
-0.004410,
-0.015902,
0.031127,
0.024290,
-0.019781,
0.028750,
0.013853,
0.019613,
0.029580,
-0.002135,
0.021425,
-0.019638,
-0.017555,
0.003973,
-0.013849,
0.021849,
-0.027184,
0.027099,
-0.035273,
0.024314,
0.010838,
-0.042996,
-0.004023,
-0.051396,
-0.061598,
0.005564,
-0.077169,
-0.045848,
-0.062257,
-0.061130,
0.001251,
-0.060059,
-0.022784,
-0.010829,
0.056540,
0.020091,
-0.048287,
-0.052314,
0.013647,
-0.008650,
-0.044383,
-0.012662,
-0.006884,
-0.054956,
-0.046521,
-0.014121,
0.028103,
-0.011734,
0.013158,
-0.007763,
-0.005347,
-0.030918,
-0.014497,
0.015440,
0.011942,
0.023576,
0.016586,
0.034974,
0.012096,
-0.031145,
0.022346,
0.027859,
0.030896,
0.001890,
0.033666,
0.034503,
0.011389,
-0.009564,
0.013641,
-0.018358,
0.001903,
0.022263,
-0.000165,
0.039092,
-0.045129,
-0.034100,
-0.068672,
-0.093986,
-0.000844,
-0.069090,
-0.014325,
-0.055286,
-0.082535,
-0.060241,
-0.013594,
0.009403,
-0.019773,
-0.018096,
-0.011537,
-0.005546,
0.009042,
0.012892,
-0.074601,
-0.028778,
0.023352,
0.094560,
-0.026593,
-0.073437,
-0.028349,
-0.074071,
-0.088736,
-0.065916,
-0.025786,
-0.069572,
-0.041795,
-0.053868,
0.057669,
0.033551,
-0.059653,
0.013883,
0.053778,
0.089512,
0.015228,
-0.051888,
0.007718,
-0.004964,
0.014932,
-0.004033,
-0.031545,
0.019867,
0.048110,
-0.003520,
-0.012103,
-0.006769,
-0.084279,
-0.046087,
-0.016497,
-0.027055,
-0.052103,
-0.046787,
-0.002898,
-0.050155,
0.010512,
-0.064537,
-0.066988,
-0.052367,
-0.018556,
-0.034469,
-0.034068,
-0.060425,
-0.037584,
-0.023947,
-0.053626,
0.001875,
-0.039050,
-0.056275,
-0.089185,
-0.112490,
-0.035640,
-0.100440,
-0.042087,
-0.039130,
-0.050775,
-0.075122,
-0.011039,
-0.028452,
-0.073231,
-0.047221,
-0.060624,
0.044011,
-0.012641,
-0.072061,
-0.038163,
0.014854,
0.029977,
-0.044635,
-0.012564,
-0.007806,
0.012572,
-0.063496,
0.007986,
-0.058029,
-0.027156,
-0.062827,
-0.003883,
0.027708,
-0.052029,
-0.056681,
-0.062558,
-0.031021,
-0.010063,
-0.019414,
-0.005523,
0.046863,
-0.010266,
-0.084821,
-0.065687,
0.029844,
0.035541,
0.000776,
-0.051251,
0.036575,
0.026552,
-0.028359,
-0.052243,
-0.049829,
0.017127,
-0.009097,
-0.007634,
-0.001882,
-0.011451,
-0.004867,
0.027740,
-0.018521,
-0.021486,
-0.038189,
0.012127,
-0.040826,
-0.018116,
-0.101070,
-0.001889,
-0.061053,
-0.079971,
-0.073455,
-0.090993,
-0.029473,
-0.031673,
-0.052469,
-0.020625,
-0.049981,
-0.033318,
0.012230,
0.079464,
0.019293,
-0.000334,
-0.087352,
-0.050224,
0.019585,
-0.024001,
-0.024319,
-0.022194,
-0.023035,
-0.066005,
0.014018,
0.038640,
-0.039521,
-0.069618,
-0.048393,
0.054469,
-0.044221,
-0.061514,
0.002781,
0.005490,
0.005901,
0.022088,
-0.022314,
-0.011444,
-0.031023,
-0.024900,
-0.036456,
-0.026939,
-0.003552,
0.035582,
0.019552,
0.003513,
-0.037662,
0.041356,
0.015935,
-0.077766,
0.014293,
0.028260,
-0.077092,
-0.059443,
-0.051402,
0.053553,
0.081455,
-0.073168,
-0.014204,
-0.033448,
0.016671,
-0.029869,
-0.008598,
-0.005478,
-0.025127,
-0.034032,
-0.014388,
-0.058793,
-0.031337,
-0.020720,
-0.039010,
-0.054845,
-0.067176,
-0.022815,
-0.033642,
-0.012861,
-0.016626,
-0.054351,
-0.063817,
-0.014861,
-0.037225,
-0.040154,
-0.093308,
-0.040609,
-0.076606,
-0.056855,
-0.054942,
-0.055336,
-0.009568,
-0.016127,
-0.038651,
-0.042226,
-0.031300,
-0.018933,
0.024800,
-0.070475,
-0.020299,
-0.041754,
-0.070901,
0.016440,
-0.024273,
-0.040787,
-0.104540,
-0.108150,
-0.060756,
-0.050427,
-0.018183,
-0.043977,
-0.031515,
-0.000525,
-0.025501,
-0.061913,
-0.026312,
-0.032852,
0.013921,
-0.038005,
-0.028186,
-0.095356,
-0.075970,
-0.062372,
-0.060385,
0.005386,
-0.075326,
-0.096873,
-0.015630,
0.001944,
-0.058349,
0.006614,
-0.069605,
-0.071046,
-0.026572,
-0.013363,
0.006203,
-0.094563,
-0.002781,
0.023322,
0.005192,
-0.013665,
-0.037533,
-0.023697,
-0.035492,
-0.001775,
0.005370,
0.013710,
-0.019814,
-0.002652,
0.000511,
0.004409,
0.007921,
-0.009115,
-0.011323,
-0.008226,
0.011721,
0.045662,
-0.004974,
-0.008966,
-0.005593,
0.020477,
-0.011424,
-0.004850,
-0.003419,
0.001343,
0.002252,
-0.025191,
0.008739,
-0.015082,
0.034455,
0.011056,
-0.025452,
-0.004168,
0.024445,
-0.029643,
0.028327,
0.008704,
-0.021477,
0.027003,
-0.000028,
0.012616,
0.020390,
-0.002810,
-0.010408,
0.022212,
0.021669,
-0.015627,
0.009372,
0.030102,
-0.032947,
-0.076578,
-0.055012,
-0.018684,
-0.047663,
0.011555,
-0.021482,
-0.032939,
-0.015231,
0.003811,
-0.036208,
-0.045572,
-0.045634,
-0.070591,
-0.066475,
-0.028047,
-0.075814,
-0.091146,
-0.010675,
-0.049996,
-0.011857,
-0.084506,
-0.130310,
-0.072804,
-0.072594,
-0.056240,
-0.022447,
-0.005645,
-0.078393,
-0.050119,
-0.032285,
-0.031483,
-0.051872,
0.006125,
-0.072005,
-0.016632,
-0.038212,
-0.064461,
-0.099045,
-0.061467,
-0.043454,
-0.049452,
-0.086793,
-0.038830,
-0.112330,
-0.063399,
-0.086754,
-0.103790,
-0.076984,
-0.103370,
-0.077524,
-0.064791,
-0.064143,
-0.006395,
0.035814,
-0.063173,
-0.087895,
-0.014365,
-0.013018,
0.048142,
-0.039070,
-0.026748,
-0.013809,
-0.093553,
-0.078089,
-0.095172,
-0.100730,
-0.064820,
-0.039205,
0.015004,
-0.024356,
-0.038000,
-0.059866,
-0.075866,
-0.001525,
0.018890,
-0.021101,
0.030177,
0.033595,
0.030803,
-0.034156,
0.021664,
-0.020345,
-0.015892,
0.012312,
0.022431,
0.000995,
-0.009868,
0.030703,
0.008415,
-0.033100,
0.014579,
-0.027826,
-0.000839,
-0.019115,
0.027703,
-0.034211,
-0.008292,
-0.019560,
0.008590,
0.028919,
-0.037831,
-0.017280,
-0.027453,
0.012359,
-0.053281,
-0.059133,
-0.056611,
-0.025529,
0.006009,
-0.017352,
0.061204,
-0.026031,
-0.041387,
-0.019496,
0.048290,
0.039250,
-0.020451,
-0.024258,
0.031102,
0.032520,
0.037058,
0.074298,
-0.003570,
0.034531,
0.029915,
-0.044941,
-0.052543,
-0.023455,
-0.024288,
-0.006203,
-0.043751,
-0.083993,
-0.070967,
-0.047573,
-0.050504,
-0.056375,
-0.085038,
-0.056267,
-0.020937,
0.015446,
-0.054907,
-0.121610,
-0.079477,
0.004041,
-0.030335,
-0.014865,
-0.115340,
-0.060097,
-0.028735,
-0.077124,
-0.090374,
-0.023767,
0.021318,
-0.060240,
-0.082369,
-0.039841,
-0.065111,
-0.005880,
-0.013117,
-0.081943,
-0.074887,
-0.101150,
-0.056653,
-0.031905,
-0.040023,
-0.077484,
-0.093064,
-0.054805,
-0.076883,
-0.068209,
-0.053268,
-0.117730,
-0.119870,
-0.084613,
-0.017529,
0.073297,
-0.026263,
0.017012,
0.005139,
-0.027912,
-0.051807,
-0.025499,
-0.014718,
-0.036436,
-0.009772,
-0.064891,
-0.071726,
0.003784,
-0.015513,
-0.005063,
-0.065107,
-0.078948,
-0.092849,
-0.027493,
-0.035595,
-0.108270,
-0.036228,
0.012386,
0.010567,
-0.045346,
-0.090224,
-0.090543,
-0.025413,
0.016474,
-0.007547,
-0.021032,
-0.033050,
-0.012616,
0.020129,
-0.024095,
-0.033108,
-0.077748,
-0.042904,
-0.043857,
0.031024,
0.016917,
0.001870,
-0.010570,
0.009306,
-0.049967,
-0.008737,
0.019771,
0.025352,
0.025690,
-0.016104,
-0.068326,
-0.008028,
-0.032979,
0.009519,
-0.055338,
-0.038019,
-0.019559,
0.005659,
-0.013592,
-0.048222,
-0.019301,
-0.023215,
-0.000461,
0.029330,
0.020147,
-0.015780,
-0.042298,
0.026216,
-0.053500,
-0.037627,
-0.018675,
0.028632,
0.014731,
-0.053875,
0.002790,
0.007318,
-0.026792,
0.031393,
-0.028203,
0.000205,
-0.016107,
0.031825,
-0.006617,
-0.022517,
-0.020650,
-0.033942,
-0.021996,
-0.017185,
0.002001,
0.030655,
-0.034060,
-0.007679,
-0.026275,
0.000074,
-0.021704,
0.007299,
-0.023967,
0.029141,
-0.009718,
-0.006527,
0.002101,
-0.019737,
0.013138,
0.014097,
0.037715,
0.008096,
-0.007058,
-0.043520,
-0.008732,
-0.008641,
0.041572,
-0.006381,
-0.025169,
-0.037889,
0.023670,
0.015668,
-0.008819,
-0.010547,
0.013098,
0.045770,
0.005382,
-0.069444,
-0.023117,
0.007835,
0.033477,
-0.089229,
-0.034685,
-0.070846,
0.019933,
-0.061537,
-0.047676,
-0.023552,
-0.066667,
-0.037719,
-0.046901,
-0.057013,
-0.072749,
-0.068213,
-0.092373,
-0.063418,
-0.094139,
-0.036308,
-0.081050,
-0.086880,
-0.016672,
-0.014906,
-0.027957,
-0.069398,
-0.039217,
-0.033001,
-0.007045,
0.021436,
0.023450,
-0.010791,
0.002594,
-0.031233,
0.012526,
-0.002330,
0.008016,
-0.006452,
0.019780,
-0.020042,
0.010994,
-0.014130,
0.026163,
-0.002998,
-0.011209,
-0.025715,
-0.016554,
0.028498,
-0.012325,
0.031763,
0.022566,
-0.005821,
-0.028871,
-0.023606,
-0.034282,
0.020516,
-0.082229,
-0.085487,
0.033130,
0.000836,
0.001709,
-0.054357,
-0.059698,
-0.022392,
-0.019177,
0.000631,
-0.046042,
-0.009163,
-0.061340,
-0.039673,
-0.079798,
-0.009361,
-0.025664,
-0.024255,
-0.045832,
-0.076496,
-0.094302,
-0.057840,
0.090412,
0.152240,
0.055122,
-0.030252,
0.114740,
-0.094374,
0.002632,
0.029467,
0.037439,
0.067316,
-0.006359,
-0.053835,
-0.034700,
-0.111480,
0.083567,
0.020130,
-0.101040,
-0.308500,
-0.221610,
0.031456,
-0.193420,
-0.235980,
-0.244810,
-0.316030,
-0.188620,
-0.019281,
-0.018550,
-0.015054,
-0.009609,
-0.023501,
0.000059,
-0.025030,
-0.015728,
0.027084,
-0.016634,
-0.000926,
0.043228,
0.001238,
0.017468,
0.025951,
0.025615,
0.014909,
0.005049,
0.016483,
0.026659,
-0.010665,
0.003199,
0.009807,
0.032360,
0.036047,
-0.118440,
-0.018398,
0.132200,
-0.001183,
-0.023098,
-0.116380,
-0.047389,
0.090448,
-0.000501,
-0.105350,
-0.202790,
-0.006058,
0.005207,
-0.059487,
-0.054502,
-0.082653,
0.005397,
-0.028314,
-0.088014,
-0.048758,
0.026397,
0.073060,
0.001146,
-0.046786,
-0.007715,
-0.012361,
-0.022004,
-0.003589,
0.006551,
-0.018489,
-0.010868,
0.001108,
0.031559,
0.025355,
0.011606,
-0.044472,
-0.016118,
0.005568,
-0.003024,
0.016296,
-0.026827,
0.002785,
-0.018678,
-0.010237,
-0.022493,
-0.005509,
-0.040174,
-0.048216,
-0.042401,
0.034231,
-0.084117,
-0.076928,
-0.160690,
-0.098962,
-0.012006,
-0.251690,
-0.170120,
-0.158280,
-0.141920,
-0.158720,
-0.269330,
-0.256150,
-0.107120,
-0.096533,
-0.192240,
-0.087000,
-0.214920,
-0.063938,
-0.009619,
-0.144530,
-0.159100,
-0.248710,
-0.217670,
-0.233490,
-0.335790,
0.041070,
-0.022484,
0.013360,
0.056283,
0.171910,
-0.031654,
-0.091355,
-0.042202,
0.092290,
0.053955,
-0.130900,
-0.138790,
0.165730,
0.078412,
-0.087614,
-0.027051,
-0.007941,
0.172570,
0.071717,
0.036110,
0.069642,
0.020048,
0.048264,
-0.022428,
0.119060,
0.188410,
0.020894,
-0.013597,
0.134810,
0.196700,
0.067334,
-0.091764,
-0.103580,
-0.013461,
-0.008944,
-0.053760,
0.000550,
0.063383,
-0.070713,
-0.129680,
-0.017717,
0.057206,
0.075261,
-0.145700,
-0.176430,
-0.057457,
-0.013723,
-0.067489,
-0.122900,
-0.074928,
0.144310,
-0.045264,
-0.037084,
0.019632,
-0.085701,
0.079408,
-0.055077,
0.030777,
-0.002882,
-0.020376,
0.137340,
-0.041641,
-0.098271,
-0.117560,
-0.023494,
0.093141,
0.112380,
0.064235,
-0.098364,
-0.047232,
-0.068864,
-0.156600,
-0.085629,
-0.219970,
0.115570,
-0.068442,
-0.139080,
0.062856,
0.161100,
-0.025039,
0.090588,
-0.000719,
0.014676,
-0.006872,
0.009107,
0.082034,
0.026093,
-0.147370,
-0.055479,
-0.052491,
-0.023786,
0.021393,
-0.079297,
0.041143,
-0.067823,
0.023453,
0.071327,
0.009039,
-0.038606,
-0.013609,
0.004063,
-0.078225,
-0.046920,
0.055018,
0.227580,
-0.094820,
-0.180760,
-0.052590,
-0.085177,
0.067263,
-0.178850,
-0.151160,
0.158510,
0.009711,
-0.045620,
-0.163990,
-0.059655,
-0.016729,
-0.083674,
-0.218030,
-0.087232,
-0.023646,
0.093097,
-0.063611,
-0.046684,
-0.128610,
-0.222240,
-0.055888,
-0.117620,
-0.193260,
-0.079976,
-0.261960,
-0.262320,
-0.113690,
-0.123360,
-0.090855,
-0.220500,
-0.253790,
-0.077879,
-0.151880,
0.022796,
-0.153920,
-0.064152,
-0.059809,
-0.319470,
0.065670,
-0.084008,
-0.086658,
-0.118620,
-0.194120,
-0.027021,
-0.031359,
0.035202,
0.070894,
0.049013,
-0.143570,
-0.055627,
0.115010,
0.032596,
-0.236040,
-0.142230,
-0.085298,
-0.072922,
-0.166140,
-0.137770,
-0.111790,
-0.139020,
-0.104710,
-0.265290,
-0.151100,
-0.108410,
-0.051209,
-0.019554,
-0.134570,
-0.216220,
0.055466,
0.003490,
0.110770,
0.177440,
0.105300,
0.152030,
0.063959,
0.106230,
0.101580,
-0.027672,
0.116700,
0.027138,
0.044619,
0.076231,
-0.058038,
-0.059430,
-0.123000,
0.000816,
0.014283,
-0.058192,
0.068833,
-0.013133,
-0.021639,
0.019253,
0.036410,
0.058947,
-0.009763,
0.104600,
0.194370,
0.125380,
0.019910,
-0.098742,
0.047254,
0.016861,
-0.013419,
0.030290,
-0.011199,
0.069924,
0.039885,
-0.029704,
-0.157000,
-0.100390,
0.066100,
0.010775,
-0.051262,
-0.189620,
-0.137140,
-0.011216,
0.000213,
-0.285020,
-0.007576,
0.017764,
0.047222,
0.016042,
-0.061531,
-0.045482,
-0.040522,
0.043798,
-0.016116,
-0.021021,
-0.058063,
-0.088835,
0.084066,
0.090811,
-0.086142,
0.013991,
0.056152,
-0.040161,
-0.135020,
-0.063895,
-0.017497,
-0.049818,
-0.137590,
-0.103960,
-0.181070,
-0.115710,
-0.101110,
-0.073167,
0.027260,
0.000890,
0.001301,
-0.151170,
-0.136890,
-0.194110,
-0.124370,
0.038681,
-0.140130,
-0.098414,
-0.065946,
-0.126050,
0.112160,
0.069205,
0.032687,
0.012667,
-0.048275,
0.209270,
0.191350,
0.159030,
0.162040,
0.115390,
0.021422,
0.026372,
0.005701,
-0.057946,
-0.016324,
-0.014389,
0.015195,
0.008180,
0.000750,
-0.028256,
-0.047702,
0.001493,
-0.002684,
0.001688,
-0.042538,
0.002487,
-0.029336,
-0.048910,
0.008279,
-0.038960,
-0.008833,
-0.000995,
-0.043348,
-0.044466,
0.024893,
-0.023073,
0.065620,
0.046655,
0.174320,
-0.065141,
-0.032531,
0.082596,
-0.034333,
-0.056731,
-0.060020,
-0.080916,
0.057756,
-0.023237,
-0.074321,
0.032158,
0.066708,
0.046191,
-0.019132,
-0.040405,
0.017363,
-0.104920,
-0.053036,
-0.011029,
-0.036276,
-0.026446,
0.059067,
0.074345,
-0.045584,
0.047315,
0.020760,
0.028835,
0.003448,
-0.063720,
0.087136,
0.044964,
0.139280,
0.073140,
0.111900,
0.069133,
0.093437,
0.015808,
-0.028835,
-0.025933,
0.006178,
0.027813,
-0.087250,
-0.155680,
-0.009241,
0.048907,
0.091300,
0.072706,
0.126760,
0.012325,
-0.182730,
-0.044138,
-0.008344,
-0.006458,
0.006443,
-0.147270,
0.113140,
0.045901,
0.000284,
-0.012019,
0.005358,
0.096686,
0.129300,
0.101480,
0.096895,
0.093652,
0.009490,
0.019707,
0.101200,
-0.022290,
-0.036733,
-0.021819,
0.038008,
0.045130,
0.001897,
-0.015537,
0.020380,
0.014909,
0.021483,
0.040440,
0.046439,
0.024590,
0.012335,
-0.016762,
0.015037,
-0.030187,
0.032276,
-0.028768,
-0.026899,
-0.015986,
0.031161,
0.009507,
0.004393,
0.014099,
0.013432,
-0.014096,
-0.004514,
0.093344,
0.108930,
0.179600,
0.125920,
0.163220,
-0.053501,
0.031323,
0.059975,
0.124040,
-0.013541,
-0.208930,
-0.066246,
0.135550,
0.065060,
-0.089845,
-0.132090,
-0.056429,
0.040094,
0.014191,
-0.059327,
0.055901,
-0.099332,
-0.040650,
-0.159230,
-0.070539,
0.086202,
0.103440,
-0.055440,
0.039635,
-0.056688,
0.057745,
0.149100,
0.015416,
0.038912,
-0.010528,
0.046573,
0.027344,
-0.077325,
-0.019101,
0.025060,
0.080559,
0.010879,
-0.072387,
-0.024822,
0.085546,
0.018384,
0.010491,
-0.078024,
-0.163730,
0.016582,
0.115860,
-0.028050,
-0.060951,
-0.086658,
-0.058150,
-0.047694,
-0.031654,
-0.116300,
0.025221,
0.136110,
-0.215230,
-0.027774,
-0.071139,
-0.048503,
0.050362,
-0.093711,
0.011583,
0.055112,
-0.015491,
0.085141,
-0.172280,
-0.132770,
-0.083103,
-0.087124,
-0.083800,
0.081043,
0.058620,
0.043214,
0.012163,
0.237090,
0.097853,
0.061717,
0.070719,
-0.097960,
0.125290,
0.014146,
-0.094714,
-0.026428,
0.138890,
0.080482,
-0.212710,
-0.094197,
-0.009060,
-0.034147,
-0.122000,
-0.160700,
-0.097993,
0.031726,
-0.064658,
-0.185880,
0.144840,
0.090086,
-0.079500,
0.029099,
0.135220,
-0.033244,
-0.147510,
-0.086450,
-0.025536,
0.059531,
-0.079527,
-0.058149,
0.180370,
0.064947,
-0.049966,
-0.015179,
-0.092400,
0.168520,
-0.001903,
-0.009653,
0.035223,
-0.053745,
-0.032937,
0.006131,
-0.073986,
0.061811,
-0.012468,
0.083819,
-0.003130,
0.001014,
0.035900,
-0.000793,
-0.011918,
0.003428,
-0.039231,
0.047931,
-0.062884,
-0.077479,
-0.010069,
0.002060,
-0.064077,
-0.029664,
-0.040033,
0.040353,
0.002300,
-0.077985,
-0.044876,
-0.022539,
0.001865,
0.062397,
-0.001195,
-0.035142,
0.019487,
0.007146,
-0.066500,
0.030173,
0.010385,
-0.010438,
-0.022351,
-0.066190,
0.039071,
-0.030764,
-0.001372,
-0.013826,
-0.057436,
0.008818,
0.021017,
-0.006804,
-0.013997,
-0.035292,
-0.042773,
-0.001828,
-0.014855,
-0.010173,
-0.084010,
0.042107,
-0.070804,
-0.028012,
0.080009,
0.050093,
-0.085783,
-0.068356,
-0.053123,
0.002678,
-0.071164,
-0.033856,
-0.139060,
-0.025650,
-0.143400,
0.017620,
-0.025501,
-0.124970,
-0.041681,
0.069438,
0.067759,
0.079332,
0.185780,
0.210680,
0.199630,
0.079928,
0.098374,
-0.104340,
-0.123740,
-0.020642,
0.088508,
0.012557,
0.068563,
-0.051508,
0.092529,
0.125810,
0.047918,
-0.035868,
0.006889,
0.083692,
0.127890,
-0.035060,
-0.044718,
0.006325,
0.045398,
-0.016068,
-0.044584,
-0.044844,
-0.150770,
-0.091856,
-0.095187,
0.011726,
-0.057374,
-0.020092,
-0.027157,
-0.022376,
-0.013950,
-0.010469,
-0.079419,
-0.018903,
-0.041994,
-0.016711,
-0.042395,
-0.007506,
-0.029488,
-0.033339,
-0.023617,
-0.012376,
-0.048891,
-0.047787,
-0.016567,
0.005955,
-0.006408,
-0.038563,
-0.020083,
-0.038599,
-0.005924,
0.066909,
-0.064853,
0.005322,
0.113350,
-0.010742,
0.011708,
0.162890,
-0.024673,
0.143280,
-0.110180,
-0.037248,
-0.005691,
-0.035736,
-0.040204,
-0.093558,
-0.129450,
-0.016242,
-0.113950,
-0.197120,
-0.140340,
-0.115540,
0.070315,
-0.014610,
-0.238660,
-0.068851,
-0.065012,
-0.053657,
-0.008174,
-0.001174,
0.007528,
0.013051,
-0.051549,
-0.029179,
-0.018367,
-0.050679,
0.006865,
-0.022812,
-0.047791,
-0.017652,
-0.014319,
-0.022578,
-0.030836,
-0.031631,
-0.046088,
0.008149,
0.020749,
-0.020371,
-0.019319,
-0.003127,
0.011399,
-0.035516,
-0.019776,
-0.028620,
0.007326,
0.032267,
-0.025923,
0.034416,
0.015685,
-0.030393,
0.028667,
-0.022099,
0.023177,
0.012071,
0.024165,
0.014573,
-0.021279,
0.002941,
-0.023638,
-0.003111,
-0.030549,
-0.003346,
0.031749,
-0.010132,
-0.006400,
-0.008108,
0.041971,
-0.019977,
0.036557,
0.032286,
0.032896,
-0.010656,
-0.008369,
0.005912,
-0.034283,
-0.029035,
-0.008049,
-0.020908,
-0.025962,
-0.011856,
0.006425,
-0.010955,
-0.009332,
-0.029672,
0.010416,
-0.028614,
-0.009691,
-0.049720,
-0.000515,
-0.037942,
0.004903,
-0.007749,
0.001499,
-0.016754,
0.027185,
0.001608,
0.041680,
0.034622,
-0.024199,
0.033326,
-0.004040,
0.001855,
0.035169,
-0.029792,
0.030256,
-0.032107,
0.006625,
-0.030859,
0.004042,
-0.031172,
0.011533,
-0.005198,
-0.022923,
0.019655,
0.008320,
-0.029212,
-0.057369,
-0.072176,
-0.048455,
-0.018273,
-0.068026,
-0.059776,
-0.004050,
0.017496,
-0.038179,
0.005571,
-0.037220,
-0.014549,
-0.021513,
-0.034986,
-0.036938,
0.044189,
0.011209,
-0.005395,
0.024467,
-0.039381,
0.031108,
-0.006733,
0.030982,
-0.017952,
-0.060917,
-0.080443,
-0.022544,
-0.024392,
-0.047109,
-0.039636,
-0.025082,
-0.043836,
-0.053970,
-0.036255,
-0.028354,
-0.021713,
-0.056932,
-0.042402,
-0.009000,
-0.090988,
-0.030389,
-0.060109,
0.024876,
-0.008322,
-0.019536,
-0.001808,
-0.028105,
0.003252,
-0.007374,
-0.067841,
-0.000932,
-0.016960,
0.001269,
-0.038881,
-0.029437,
0.020182,
0.009671,
-0.001221,
-0.037132,
-0.023255,
-0.043526,
-0.055032,
-0.000246,
-0.055027,
-0.015247,
0.028403,
-0.024168,
-0.007269,
0.014398,
0.010741,
0.007367,
-0.010465,
0.009682,
0.011501,
-0.031499,
-0.018998,
-0.011341,
-0.036523,
-0.002885,
-0.019734,
-0.052928,
0.003356,
0.017272,
-0.031995,
-0.015474,
-0.004889,
-0.043069,
0.000942,
0.018647,
-0.011075,
-0.039326,
-0.056785,
-0.029000,
-0.048222,
0.005681,
0.033597,
0.014288,
0.022459,
-0.028054,
-0.075019,
0.005530,
-0.048682,
-0.029629,
-0.016505,
-0.049924,
-0.015655,
-0.062944,
-0.068633,
-0.018884,
0.016226,
-0.001310,
-0.001380,
0.006256,
-0.051231,
-0.060615,
-0.043033,
-0.043769,
0.018311,
-0.046977,
-0.022565,
-0.063601,
-0.043082,
-0.022587,
-0.051877,
-0.073537,
-0.029178,
-0.067956,
-0.006774,
0.001564,
-0.029287,
-0.047637,
-0.025270,
0.047818,
-0.003765,
-0.013981,
0.009165,
0.011769,
-0.045491,
-0.018240,
-0.004152,
0.009195,
0.036982,
-0.013880,
-0.011146,
0.012938,
0.050914,
0.004012,
0.002675,
0.016183,
-0.032336,
-0.028213,
-0.014921,
-0.000235,
-0.013955,
-0.004515,
-0.031781,
-0.003478,
-0.034281,
-0.029997,
-0.009589,
0.027725,
0.023594,
0.015775,
0.003435,
-0.022162,
-0.018552,
-0.030730,
0.010320,
0.017029,
-0.050235,
-0.006496,
0.023247,
-0.007989,
-0.028030,
-0.054501,
0.009115,
-0.029989,
0.031569,
0.001028,
-0.025268,
-0.047192,
0.006102,
0.035722,
-0.008508,
-0.013203,
0.023994,
-0.002209,
-0.035341,
0.010886,
-0.024402,
-0.011371,
-0.040739,
-0.055097,
-0.032591,
-0.010697,
-0.021221,
0.006924,
-0.020959,
-0.002981,
0.003258,
-0.055118,
-0.018665,
-0.014916,
-0.021056,
0.002485,
-0.009660,
0.007748,
0.030274,
0.012768,
0.022147,
0.036760,
0.060227,
0.021565,
0.005676,
-0.024854,
-0.004029,
0.039816,
0.017156,
-0.038776,
0.009586,
0.000030,
0.006297,
-0.011053,
0.025041,
-0.029992,
-0.029585,
0.000097,
-0.054200,
-0.030936,
-0.002789,
0.017106,
-0.011102,
0.023202,
-0.039911,
0.032723,
0.013787,
-0.033327,
-0.009150,
-0.003669,
-0.048813,
-0.039692,
-0.035258,
-0.051626,
-0.015270,
-0.068213,
-0.014848,
-0.028848,
-0.029692,
-0.027989,
-0.046953,
-0.042638,
-0.043186,
-0.007564,
0.035000,
-0.058469,
-0.034313,
-0.029761,
-0.020891,
-0.048509,
-0.078230,
-0.040065,
-0.000952,
-0.061233,
-0.043269,
-0.035623,
0.022336,
-0.003090,
-0.022847,
-0.004084,
-0.017009,
0.022923,
-0.007258,
-0.017813,
-0.069817,
-0.025296,
-0.014378,
0.009243,
-0.021364,
-0.005777,
-0.011576,
0.002134,
0.011969,
0.005875,
-0.038241,
0.006390,
0.011448,
-0.037223,
-0.005380,
-0.026717,
-0.017348,
0.009818,
-0.016359,
0.015795,
-0.005427,
0.000323,
-0.016265,
0.001607,
-0.003938,
-0.005243,
0.025084,
-0.010181,
0.015720,
0.023767,
-0.011688,
0.037494,
-0.016686,
-0.002269,
0.006077,
-0.005505,
-0.019456,
0.041087,
0.012635,
-0.001164,
0.036993,
-0.001963,
0.037991,
-0.023430,
-0.018616,
0.036029,
0.008194,
-0.019295,
-0.030745,
0.010349,
-0.004079,
0.016367,
-0.048145,
-0.011305,
0.041342,
0.018404,
-0.011408,
0.015933,
-0.037751,
-0.041569,
-0.016994,
0.000238,
-0.025963,
0.015119,
-0.001335,
0.004578,
-0.050169,
0.002788,
-0.025045,
-0.004898,
0.040378,
-0.053101,
-0.000512,
-0.045959,
-0.041987,
0.022480,
-0.016714,
-0.037971,
0.004657,
-0.036545,
-0.006249,
-0.011087,
-0.044668,
0.003626,
-0.026748,
0.019333,
-0.028470,
-0.053767,
-0.028710,
0.007641,
0.036931,
-0.027543,
-0.046757,
0.017897,
-0.011005,
-0.011255,
-0.003552,
0.004219,
-0.012027,
-0.038955,
-0.027150,
-0.019523,
-0.027741,
-0.029826,
-0.057568,
-0.043821,
-0.009239,
-0.022290,
-0.053443,
0.021261,
-0.015468,
0.024619,
-0.032231,
0.022620,
-0.007396,
-0.037250,
-0.028570,
0.034043,
-0.021736,
-0.006285,
0.034018,
-0.008315,
-0.011423,
-0.034391,
-0.036417,
0.022515,
0.011228,
-0.042315,
-0.010821,
-0.024458,
-0.021145,
0.039132,
0.028303,
0.016292,
-0.007529,
-0.034886,
0.000526,
0.000805,
-0.014288,
-0.006733,
0.005559,
-0.026130,
0.033243,
0.000792,
-0.018124,
-0.004359,
-0.019685,
-0.016499,
0.025904,
-0.028081,
-0.016869,
0.036900,
0.033471,
0.029863,
-0.013599,
0.026391,
-0.003647,
0.036006,
-0.015192,
-0.009583,
-0.027895,
-0.017891,
-0.030563,
-0.020813,
-0.004748,
0.018364,
-0.034865,
-0.034355,
-0.025350,
-0.016481,
-0.032636,
0.012532,
0.011542,
-0.023525,
-0.002612,
-0.058052,
0.033851,
0.000364,
-0.064648,
-0.067027,
0.020630,
-0.000235,
-0.034723,
0.004754,
-0.012358,
0.007399,
-0.042677,
-0.054338,
0.001013,
-0.017710,
0.020687,
-0.040787,
-0.004429,
-0.003204,
-0.035687,
-0.012156,
-0.081347,
-0.044042,
-0.067570,
0.009588,
-0.018040,
0.000070,
-0.042851,
0.001791,
-0.039372,
-0.041969,
0.008072,
-0.055151,
0.002620,
-0.020865,
-0.018812,
-0.013299,
-0.016753,
-0.016593,
0.008273,
-0.066368,
-0.009694,
-0.019911,
-0.021220,
-0.028139,
-0.004557,
-0.015682,
0.028995,
0.014864,
-0.026265,
-0.028649,
-0.000952,
-0.000394,
-0.028507,
-0.029941,
0.018307,
0.026289,
0.020195,
0.035035,
0.031770,
-0.004295,
0.021907,
0.034926,
0.011244,
-0.016727,
-0.008937,
-0.008963,
-0.043817,
0.047580,
-0.018223,
0.008349,
0.028245,
-0.026329,
-0.019224,
0.006847,
-0.020112,
0.021487,
-0.025000,
0.020183,
-0.004235,
0.013514,
-0.014675,
-0.049052,
-0.016411,
-0.035367,
-0.034204,
0.007324,
-0.019123,
-0.022435,
0.009791,
-0.027910,
0.014215,
-0.002357,
-0.031367,
-0.023356,
0.035465,
-0.016287,
-0.017167,
-0.027807,
-0.016140,
-0.017106,
-0.032290,
-0.009653,
-0.031870,
-0.047944,
-0.026488,
-0.045372,
-0.005326,
-0.002462,
-0.046268,
-0.040478,
0.007804,
0.013377,
-0.030796,
-0.047102,
-0.017285,
0.006285,
-0.027237,
0.002012,
-0.019910,
-0.016203,
-0.039810,
-0.024023,
-0.029583,
-0.054554,
-0.036657,
0.035951,
0.035025,
0.013695,
0.039490,
0.032631,
0.033589,
0.013986,
0.040826,
0.032688,
0.018180,
0.011462,
-0.003611,
-0.013001,
-0.029585,
-0.015963,
-0.024872,
0.002195,
0.017074,
0.037981,
-0.008108,
-0.003609,
-0.008344,
0.028454,
0.002153,
0.019441,
0.025690,
-0.043570,
-0.058369,
-0.012812,
0.025568,
-0.032631,
0.017386,
0.027656,
-0.033810,
0.029857,
-0.021547,
-0.009176,
0.027171,
0.052258,
0.016470,
-0.024390,
0.031881,
0.028494,
0.008095,
0.011489,
-0.034984,
0.014961,
0.053929,
0.021908,
-0.001760,
-0.034254,
0.008459,
-0.025183,
-0.016348,
0.011193,
-0.031466,
-0.012590,
-0.004253,
-0.060297,
-0.018421,
-0.063423,
-0.000709,
-0.034945,
-0.013306,
-0.010433,
-0.011556,
-0.011861,
-0.040792,
-0.057183,
-0.033925,
0.011180,
0.006302,
-0.029879,
-0.050969,
0.005502,
-0.019951,
0.002539,
-0.019179,
-0.004827,
-0.008838,
-0.001423,
0.009993,
-0.023706,
0.025660,
0.033000,
0.038553,
-0.004718,
0.037301,
0.002230,
-0.029520,
0.040879,
-0.016371,
-0.005817,
0.006149,
0.014410,
-0.030248,
-0.034316,
0.008645,
0.009382,
-0.001897,
0.000163,
-0.042871,
-0.033635,
-0.049309,
-0.011106,
-0.057660,
0.020157,
-0.023705,
-0.019070,
-0.043207,
-0.054534,
0.014518,
-0.035448,
-0.005308,
0.007851,
-0.028893,
-0.033025,
0.002798,
-0.017442,
-0.049326,
-0.035553,
0.036317,
-0.005935,
0.037776,
0.001171,
-0.372470,
-0.115170,
-0.003239,
0.001761,
-0.071334,
-0.097374,
-0.117990,
0.100890,
0.165150,
0.042288,
-0.172430,
-0.057745,
0.037849,
0.070526,
0.039352,
-0.006643,
-0.104910,
-0.064608,
-0.087307,
-0.059136,
-0.141550,
0.105190,
-0.158000,
-0.180620,
-0.214630,
0.023919,
0.023365,
-0.012567,
0.019208,
0.009307,
-0.026357,
-0.007515,
-0.007626,
-0.018134,
-0.025445,
0.020085,
-0.041480,
-0.026773,
0.002993,
0.015438,
0.026569,
0.037344,
-0.027425,
0.010188,
-0.025059,
0.025701,
-0.014569,
0.029071,
0.011498,
-0.015699,
-0.125720,
0.074021,
-0.018991,
-0.033334,
-0.150890,
-0.020831,
-0.023478,
0.024388,
0.073066,
-0.018459,
0.044729,
0.031945,
0.012742,
0.057557,
0.124770,
-0.043267,
0.235590,
0.053498,
0.017426,
0.034488,
-0.054163,
0.000925,
-0.040630,
-0.053107,
0.076489,
0.017301,
0.035959,
0.059037,
-0.008811,
0.077812,
-0.002187,
0.007432,
-0.021268,
-0.011789,
0.013422,
-0.018884,
0.036907,
-0.025501,
0.031196,
0.001766,
0.046665,
-0.036046,
-0.037657,
0.032350,
0.053589,
-0.055955,
-0.012214,
0.002555,
-0.006482,
0.003164,
-0.006830,
0.094609,
0.003430,
0.051696,
0.042089,
0.110000,
0.081945,
0.028325,
-0.126440,
-0.019802,
0.097006,
0.192520,
0.021019,
0.061954,
0.044960,
0.089863,
0.221900,
0.077731,
0.100330,
0.074004,
0.140180,
0.181670,
0.105910,
0.098223,
0.191120,
-0.219690,
-0.174130,
-0.183180,
-0.130910,
-0.121300,
-0.279690,
-0.176140,
-0.161300,
-0.201690,
-0.333790,
-0.118530,
-0.033952,
-0.149280,
-0.156480,
-0.270770,
-0.124710,
0.058315,
0.036132,
0.044837,
-0.293500,
-0.148600,
-0.013126,
0.066666,
0.122920,
-0.073704,
0.049724,
0.079910,
-0.008804,
-0.089517,
-0.123170,
0.081389,
0.078502,
0.086410,
0.098678,
-0.015654,
0.031815,
0.075029,
0.023597,
-0.043928,
-0.124160,
0.125620,
0.009299,
0.150230,
0.041203,
-0.076015,
0.057038,
0.031835,
0.017618,
0.127360,
-0.001313,
-0.018086,
0.014182,
-0.014845,
-0.138160,
-0.118520,
0.017291,
0.009316,
0.049136,
-0.084183,
-0.212980,
0.031390,
0.155410,
0.063579,
-0.116060,
-0.066201,
0.085428,
0.188440,
0.171640,
-0.094288,
-0.195980,
0.028958,
0.058305,
0.022731,
-0.093459,
-0.338240,
0.033008,
-0.023796,
-0.005838,
-0.057548,
-0.206380,
-0.022984,
-0.007080,
-0.015080,
0.040798,
-0.090789,
0.008498,
-0.028569,
-0.095005,
-0.104420,
-0.011761,
-0.041661,
-0.148360,
-0.173350,
-0.188530,
0.004029,
-0.020040,
-0.116770,
-0.107160,
-0.009618,
-0.099970,
-0.236950,
-0.037724,
-0.077663,
-0.103860,
-0.289260,
-0.166940,
-0.092335,
-0.013749,
-0.105050,
-0.330260,
-0.079834,
-0.008536,
-0.198430,
-0.109340,
-0.309560,
-0.135300,
0.042895,
-0.021514,
-0.081685,
-0.148050,
0.006118,
-0.084946,
-0.147370,
-0.090070,
-0.092702,
-0.068682,
-0.049076,
-0.012431,
-0.048089,
0.027283,
0.037258,
0.005412,
-0.057839,
-0.113620,
0.060915,
0.177580,
0.003697,
-0.031639,
-0.060929,
-0.040690,
0.084129,
0.031191,
0.003910,
0.067444,
-0.080374,
-0.038834,
-0.056832,
-0.093855,
0.079116,
-0.089273,
0.131660,
-0.009923,
0.127830,
0.006133,
-0.088672,
0.153810,
0.143290,
0.130060,
-0.025025,
-0.080372,
0.011010,
-0.010613,
0.055904,
-0.102660,
-0.181540,
-0.025931,
-0.031314,
-0.160770,
-0.227910,
-0.257590,
-0.082364,
-0.115980,
0.012437,
-0.070201,
-0.178890,
0.015831,
0.051125,
0.072419,
0.112880,
-0.048853,
0.102840,
0.073597,
-0.059688,
-0.021870,
-0.040189,
0.106480,
0.055091,
0.019197,
-0.080595,
0.031123,
0.097144,
-0.018983,
0.028083,
-0.177310,
-0.098419,
-0.073648,
-0.013930,
-0.058202,
-0.060598,
-0.077742,
0.001115,
0.025727,
0.071111,
0.031481,
-0.055761,
0.023815,
-0.039358,
0.030189,
-0.125250,
0.177030,
0.118420,
0.098153,
-0.108260,
-0.060273,
0.025665,
0.226380,
0.013522,
0.097108,
0.147800,
0.087525,
0.192960,
0.187520,
0.144200,
-0.012935,
-0.125640,
-0.013302,
-0.171050,
-0.157620,
-0.080444,
-0.087534,
-0.066983,
-0.134710,
-0.063983,
-0.038490,
0.036027,
-0.056212,
-0.045058,
-0.001993,
0.037557,
0.067191,
0.046297,
0.128130,
0.166890,
0.151040,
0.034367,
0.112250,
0.081572,
0.176020,
0.145090,
0.188480,
0.067417,
-0.026371,
-0.087672,
-0.090748,
-0.041911,
0.000372,
-0.054426,
-0.101960,
-0.022704,
0.047919,
-0.001971,
-0.011268,
-0.037762,
0.002645,
0.052111,
0.089218,
-0.024242,
-0.000527,
-0.013425,
0.081673,
0.067167,
0.036522,
0.029136,
0.062087,
0.237590,
0.006318,
0.004947,
0.052325,
0.038719,
0.034609,
-0.026398,
-0.008629,
-0.040181,
-0.012557,
0.010619,
-0.028979,
-0.024407,
-0.031324,
-0.021971,
-0.010385,
-0.049867,
-0.041167,
0.024659,
0.039951,
-0.005586,
-0.025690,
0.029886,
-0.028316,
0.040979,
0.068005,
0.062655,
-0.057764,
0.008327,
-0.047889,
-0.096330,
0.186630,
0.087617,
0.181030,
-0.117190,
-0.040380,
0.160490,
0.135570,
0.071053,
-0.012653,
0.032490,
0.035406,
0.156200,
0.079894,
-0.047419,
-0.007407,
0.035254,
-0.024385,
0.113270,
0.017059,
0.038157,
-0.055262,
-0.120660,
-0.100290,
-0.002256,
-0.025409,
0.072624,
-0.033442,
-0.124650,
-0.019168,
-0.104530,
0.054910,
0.020078,
-0.093183,
0.058695,
0.084780,
0.125930,
0.035589,
0.047607,
-0.014340,
0.015344,
0.026275,
0.083686,
0.008253,
-0.084364,
0.079982,
-0.044293,
0.067305,
-0.039432,
-0.106340,
-0.149890,
-0.045785,
0.159590,
-0.008549,
-0.085492,
0.006401,
-0.025125,
0.181170,
0.080253,
0.079331,
-0.015019,
-0.048213,
0.147000,
-0.070294,
-0.096045,
0.002783,
-0.033827,
-0.034724,
-0.075179,
-0.041444,
0.022527,
-0.028412,
0.024078,
-0.021947,
-0.008616,
0.027825,
0.029953,
0.011823,
-0.017717,
-0.013625,
0.017124,
0.030713,
-0.004227,
-0.001316,
0.008681,
0.006797,
0.021088,
0.000091,
-0.007857,
-0.024892,
-0.055004,
0.023903,
-0.021004,
-0.016610,
-0.047558,
0.020329,
0.099247,
0.096247,
0.025139,
0.060881,
0.042320,
-0.185080,
-0.114930,
-0.062422,
-0.064903,
-0.055634,
-0.226830,
-0.133770,
0.015946,
0.018482,
-0.017962,
-0.260310,
0.003908,
0.074713,
0.035406,
-0.142820,
-0.085135,
-0.125470,
0.076544,
0.028302,
-0.134040,
-0.253470,
-0.246620,
-0.026768,
-0.049500,
-0.112670,
-0.046589,
0.110880,
0.233680,
0.199280,
-0.013602,
-0.133490,
0.005606,
0.175050,
0.196550,
0.033938,
-0.181720,
-0.125750,
0.075298,
-0.014340,
-0.089322,
-0.354220,
-0.322600,
-0.113130,
-0.380390,
-0.302020,
0.000203,
0.060695,
0.044853,
0.108060,
0.083164,
0.007811,
0.108900,
0.123670,
0.059987,
-0.008037,
-0.020739,
0.100100,
0.052876,
0.016718,
-0.000569,
0.020584,
0.089178,
0.102720,
0.062421,
-0.000148,
-0.053491,
0.042715,
-0.001307,
0.062114,
0.064384,
-0.049023,
0.033584,
-0.065907,
0.028281,
0.131290,
0.087814,
-0.055748,
-0.167010,
-0.103870,
-0.088815,
0.108050,
0.017715,
-0.154710,
-0.131940,
-0.047920,
0.052977,
-0.111310,
-0.062152,
-0.107060,
-0.159190,
0.027363,
0.012333,
-0.124260,
-0.040562,
-0.094423,
0.055663,
-0.038737,
-0.114180,
-0.096493,
-0.083454,
-0.181570,
-0.025092,
-0.203560,
-0.198210,
-0.313560,
0.030031,
-0.204230,
-0.192650,
-0.034378,
-0.049112,
0.016333,
0.010035,
0.079697,
0.058255,
-0.097677,
-0.052281,
0.004433,
-0.083121,
0.133930,
-0.033646,
0.039903,
0.069352,
0.053746,
0.107340,
0.094162,
0.075770,
0.080620,
0.053964,
0.031678,
0.040658,
0.038033,
0.054240,
0.023921,
-0.012069,
0.109050,
0.114120,
0.103690,
0.015475,
0.015764,
0.045814,
0.065537,
0.044581,
0.059516,
0.082891,
0.093733,
0.050292,
0.042968,
0.066534,
0.035158,
0.021390,
-0.002276,
0.002885,
-0.024808,
-0.007863,
0.030998,
0.039001,
0.003753,
-0.025376,
0.001535,
0.058898,
0.015590,
0.057279,
-0.022895,
-0.035627,
0.004162,
-0.089095,
-0.010530,
0.004797,
-0.000808,
-0.038543,
0.094866,
-0.020214,
-0.056344,
-0.053684,
-0.139800,
0.085950,
-0.038738,
0.053676,
-0.043226,
-0.096601,
0.004432,
-0.059252,
0.094293,
0.073553,
-0.201060,
0.088947,
0.050156,
0.001495,
-0.036436,
-0.216000,
-0.014288,
-0.100270,
-0.139900,
-0.294930,
-0.194160,
0.016737,
-0.076495,
-0.103810,
-0.003983,
-0.117690,
0.003381,
-0.010311,
-0.173180,
-0.096988,
0.017667,
0.018632,
-0.085538,
-0.077596,
-0.153690,
-0.028139,
0.021049,
0.025305,
0.033936,
0.007132,
0.155360,
0.083284,
0.075668,
0.106620,
0.144920,
0.066323,
-0.053269,
0.016014,
0.040798,
0.033974,
0.055063,
-0.053254,
-0.015093,
-0.005525,
0.017990,
0.011149,
-0.000630,
0.012791,
-0.034451,
-0.035156,
0.035783,
0.044213,
0.033636,
0.027466,
0.029709,
0.010870,
0.014078,
-0.027046,
-0.028542,
-0.008552,
-0.042389,
-0.232960,
-0.110300,
-0.145420,
0.027204,
0.037690,
0.135290,
-0.138060,
-0.091093,
-0.006852,
0.100460,
0.133360,
-0.106080,
-0.129740,
-0.066284,
-0.133920,
-0.018417,
-0.084275,
-0.179520,
-0.066464,
-0.144440,
-0.049863,
-0.197010,
-0.083188,
-0.075259,
-0.298410,
0.019864,
-0.100890,
0.060251,
0.051132,
0.064013,
0.162720,
0.032594,
0.005121,
0.009382,
0.109930,
0.108550,
0.103050,
0.049306,
-0.074101,
-0.005304,
0.089057,
-0.016605,
0.059191,
0.095402,
-0.031544,
0.107780,
0.133550,
0.033347,
0.056740,
-0.027214,
-0.023161,
-0.017531,
0.016032,
0.001809,
0.038751,
-0.020864,
0.010984,
0.004547,
0.031555,
0.037876,
-0.031576,
-0.018853,
-0.013017,
0.013489,
-0.010132,
0.005346,
-0.004532,
0.032597,
-0.010036,
0.003095,
0.023999,
-0.025467,
0.008442,
-0.040100,
0.037491,
-0.099533,
-0.168910,
-0.049372,
-0.104780,
-0.270550,
-0.089705,
-0.209590,
-0.190900,
-0.124370,
-0.158560,
-0.082122,
-0.133270,
-0.237780,
-0.163980,
-0.053785,
0.027482,
0.018364,
-0.003799,
-0.144960,
0.011440,
0.075315,
0.097247,
0.070571,
-0.049084,
0.089842,
0.045772,
0.027270,
-0.002048,
0.007329,
0.046223,
0.027829,
-0.027249,
0.001852,
-0.021108,
-0.027927,
-0.003130,
-0.000980,
-0.017790,
-0.048742,
-0.032397,
-0.014097,
-0.005952,
-0.003854,
-0.025989,
0.028503,
0.001981,
-0.013276,
0.001296,
-0.069621,
-0.059942,
-0.001029,
0.078010,
0.109290,
0.019731,
-0.048205,
0.076221,
0.072475,
-0.050378,
-0.026417,
-0.050846,
0.027167,
-0.015726,
-0.017281,
-0.054155,
0.015287,
-0.143760,
-0.035863,
0.061971,
0.044196,
0.105400,
-0.011677,
0.112350,
0.175780,
0.242460,
0.165870,
-0.023822,
-0.083881,
-0.027743,
0.043672,
0.179000,
0.044856,
-0.059883,
-0.120190,
-0.079875,
0.019222,
0.137570,
0.009867,
-0.074122,
-0.036129,
0.069892,
0.035493,
-0.071507,
-0.014126,
-0.012520,
0.029361,
-0.073807,
-0.109210,
-0.102310,
-0.137250,
-0.141070,
0.065932,
0.091688,
0.144120,
0.110760,
0.173920,
-0.023397,
-0.022454,
0.077581,
-0.017386,
0.086069,
0.005123,
-0.030631,
0.049393,
-0.011898,
0.098784,
0.046454,
-0.109740,
0.013803,
-0.068941,
-0.072411,
-0.068001,
0.045659,
-0.008645,
-0.088744,
-0.161330,
-0.073594,
0.022832,
0.053063,
0.035862,
0.156620,
-0.056686,
-0.033069,
-0.133010,
-0.084642,
0.087921,
-0.067408,
-0.086215,
-0.017523,
0.081784,
0.104350,
-0.004470,
-0.058132,
-0.086958,
-0.003509,
0.100160,
-0.059315,
-0.229120,
-0.115400,
0.100450,
0.064334,
-0.105100,
-0.030968,
-0.103080,
-0.116970,
-0.170490,
-0.163440,
-0.057536,
-0.085949,
0.015879,
-0.112110,
-0.043051,
-0.090956,
-0.093773,
-0.039231,
-0.074419,
-0.025946,
-0.077693,
-0.080430,
-0.055754,
0.055873,
-0.073316,
-0.138680,
-0.027774,
0.029852,
0.030988,
0.094827,
0.081937,
0.095726,
0.023997,
0.046049,
-0.115320,
0.013383,
0.107440,
-0.058780,
-0.173940,
-0.303360,
-0.067707,
-0.081357,
-0.118730,
-0.156560,
-0.008602,
0.003940,
-0.089265,
-0.142110,
-0.116730,
-0.024985,
0.020753,
0.081566,
0.055651,
-0.042171,
-0.055119,
-0.055754,
-0.141470,
-0.089558,
-0.111680,
-0.020497,
-0.014235,
-0.116710,
-0.105790,
-0.063368,
0.126060,
-0.043823,
-0.018283,
-0.076492,
-0.071680,
0.164250,
0.172210,
-0.090103,
-0.059458,
0.011439,
0.083216,
0.114850,
0.099966,
0.094085,
0.218000,
-0.081972,
-0.110310,
-0.023160,
0.001033,
0.134260,
-0.085414,
-0.106730,
-0.195720,
-0.126000,
0.068549,
-0.151200,
-0.219060,
-0.165610,
-0.322940,
-0.080206,
0.083464,
0.022905,
-0.092025,
-0.111390,
0.074763,
0.255380,
0.123640,
0.169470,
0.205750,
0.220880,
0.009541,
-0.035956,
-0.074154,
-0.134860,
-0.038465,
-0.040253,
0.031488,
-0.102040,
-0.051539,
0.055945,
-0.022009,
-0.070454,
-0.226130,
-0.214180,
-0.023274,
0.078556,
0.058753,
-0.124420,
-0.129360,
0.096483,
-0.008029,
0.067665,
0.083248,
0.068186,
0.130770,
-0.000787,
0.040362,
-0.011128,
-0.010843,
0.067824,
0.065928,
0.049822,
-0.216160,
-0.153870,
0.028093,
-0.012663,
-0.217850,
-0.121910,
-0.125260,
0.126040,
0.128190,
-0.039387,
-0.196640,
-0.123190,
0.034592,
0.189420,
-0.022147,
-0.104050,
-0.201080,
-0.160700,
-0.067174,
-0.058008,
-0.100150,
-0.131990,
-0.057567,
-0.174260,
-0.262110,
-0.237930,
-0.238990,
-0.021368,
-0.051945,
-0.218790,
-0.163220,
-0.177280,
-0.044910,
-0.104290,
0.039754,
0.041875,
-0.043026,
0.138510,
-0.122950,
0.083406,
0.070493,
0.035793,
0.340460,
-0.118200,
0.052801,
0.084908,
-0.062996,
-0.131570,
-0.125080,
0.133800,
0.263700,
0.174520,
-0.030981,
-0.073297,
0.141350,
0.327910,
0.329570,
0.179040,
-0.038430,
0.160770,
0.153620,
0.158800,
0.037758,
-0.298540,
-0.054262,
-0.083360,
-0.076364,
-0.134080,
-0.000083,
-0.042956,
-0.019316,
-0.017044,
0.024792,
-0.035060,
-0.007093,
0.014661,
0.011894,
0.012655,
0.034432,
-0.026772,
0.016683,
0.013641,
0.063021,
-0.005554,
0.034933,
0.008425,
0.061257,
0.028725,
-0.019190,
0.054220,
0.065389,
0.043388,
-0.000896,
0.011725,
0.012176,
0.266370,
0.115480,
-0.056073,
-0.024812,
-0.043532,
0.061873,
-0.149380,
0.040252,
0.067114,
-0.051811,
-0.008847,
-0.062075,
0.035704,
0.101280,
0.026930,
0.063035,
0.074156,
0.050451,
0.081584,
0.107670,
0.050572,
0.078898,
0.097355,
0.027570,
0.026568,
0.007098,
0.052837,
0.105140,
-0.001824,
-0.017724,
-0.065630,
-0.009817,
0.047446,
0.017768,
-0.031455,
-0.057444,
-0.038184,
-0.117380,
-0.003515,
-0.132610,
-0.061613,
0.069819,
0.016715,
0.006456,
0.018394,
0.013509,
-0.038594,
-0.028763,
0.043302,
0.015068,
0.035430,
0.117090,
0.093101,
0.082367,
0.036992,
0.017338,
0.072355,
0.114810,
0.088642,
0.017683,
0.012758,
0.055933,
0.023629,
-0.038258,
-0.098250,
-0.044244,
-0.035642,
0.031550,
-0.019085,
-0.076799,
-0.049462,
-0.052907,
-0.014712,
0.023600,
-0.004935,
-0.030924,
0.053713,
-0.005136,
-0.015311,
0.020279,
-0.004833,
0.044699,
0.030326,
0.041998,
0.027663,
0.035468,
0.034321,
-0.032273,
-0.017847,
0.039104,
0.035166,
0.026045,
0.015667,
0.015166,
0.001335,
0.009196,
-0.030261,
0.034704,
0.226990,
0.036393,
-0.025649,
0.032547,
0.165150,
0.102400,
-0.111770,
0.011027,
0.039435,
0.163000,
-0.048723,
-0.024999,
0.034699,
0.018109,
0.095227,
-0.159490,
-0.126120,
0.046661,
0.055600,
0.017704,
0.064156,
0.002739,
-0.023910,
0.011095,
-0.058030,
0.049569,
0.048687,
0.083625,
0.002806,
0.136330,
0.104390,
0.103700,
0.062374,
0.006813,
0.040867,
0.097745,
0.105810,
0.036410,
-0.069860,
0.005226,
0.137390,
0.077514,
0.024511,
0.022130,
0.017448,
0.158500,
0.020458,
0.020727,
-0.030299,
-0.007100,
0.030310,
0.073069,
0.050930,
0.070329,
0.014886,
-0.042530,
0.014984,
-0.046570,
-0.030982,
-0.053668,
0.057733,
0.054755,
-0.029860,
-0.168200,
-0.091807,
0.007951,
-0.033491,
-0.063215,
-0.191880,
-0.133320,
0.091062,
0.011505,
0.035573,
-0.099124,
-0.143820,
0.120520,
0.021604,
0.015055,
0.102540,
0.045492,
0.019667,
-0.061377,
-0.110860,
-0.049263,
0.018450,
0.088343,
0.015963,
-0.116270,
-0.110500,
-0.108260,
0.041516,
0.085976,
-0.036405,
-0.026764,
-0.126100,
-0.066986,
-0.055557,
0.070303,
0.096177,
0.043390,
-0.029094,
-0.117890,
0.083775,
0.126540,
0.111280,
-0.109110,
-0.080547,
-0.142350,
-0.054612,
-0.037954,
-0.039047,
-0.056212,
-0.151690,
-0.154570,
-0.132420,
-0.172220,
-0.162540,
-0.082028,
0.006464,
0.063170,
0.016922,
-0.017664,
0.127980,
-0.041348,
0.035543,
-0.005234,
0.085687,
0.108720,
0.058668,
-0.052227,
-0.062072,
0.081033,
0.120090,
0.053389,
0.021206,
-0.060547,
0.080349,
0.032070,
0.051918,
-0.018499,
-0.049789,
0.005320,
0.083270,
0.060257,
0.098716,
-0.080870,
-0.030650,
0.111290,
0.053151,
0.043927,
-0.028085,
-0.044446,
-0.002718,
-0.017406,
-0.012039,
-0.010826,
-0.036164,
-0.030705,
-0.036887,
0.018728,
-0.024527,
0.023855,
-0.031561,
-0.033507,
0.069403,
-0.018176,
0.029893,
-0.000155,
-0.010858,
0.041228,
-0.008396,
0.068522,
0.010318,
0.027532,
0.056331,
-0.141140,
-0.123840,
-0.062810,
0.001875,
-0.151190,
-0.126480,
-0.044500,
-0.031967,
0.094072,
-0.024146,
-0.221540,
0.066648,
0.035266,
0.171610,
0.039321,
0.003826,
0.071384,
0.011925,
-0.076990,
-0.078728,
0.149610,
0.070673,
-0.011122,
0.052018,
0.086570,
0.045520,
0.035215,
0.013132,
-0.076200,
-0.203900,
-0.057649,
-0.073013,
-0.142580,
-0.208020,
-0.243680,
0.136640,
0.024385,
-0.147470,
-0.374010,
-0.190750,
0.039206,
-0.059457,
-0.161510,
-0.222220,
-0.078811,
-0.158780,
0.026370,
0.020102,
-0.071828,
0.026044,
0.000115,
0.029016,
0.039295,
-0.018070,
0.006016,
0.029921,
-0.026613,
-0.013380,
-0.027678,
-0.012940,
0.006183,
0.035879,
-0.014144,
0.031032,
-0.012382,
-0.047538,
-0.002532,
-0.008810,
-0.011443,
-0.023849,
-0.022353,
0.030026,
0.005039,
-0.004875,
-0.017643,
0.104940,
0.038553,
0.245620,
0.249880,
0.187180,
0.054324,
-0.021435,
0.060306,
0.177390,
0.090700,
0.057446,
-0.071135,
-0.177260,
-0.087557,
-0.032832,
0.126050,
-0.021979,
-0.094582,
-0.184500,
-0.077204,
-0.029758,
0.032841,
0.033173,
-0.014178,
-0.070650,
-0.041163,
0.073430,
0.101470,
0.083045,
-0.017206,
-0.138940,
-0.093431,
-0.124840,
-0.065670,
-0.096444,
-0.119140,
-0.177260,
-0.146900,
-0.062404,
-0.081431,
-0.074667,
-0.188630,
-0.207550,
-0.199290,
0.040016,
-0.073321,
-0.143330,
-0.054248,
-0.128450,
-0.088939,
-0.027693,
-0.018497,
-0.014708,
0.031900,
-0.019862,
-0.004252,
0.018972,
-0.029951,
0.031628,
0.019089,
-0.028692,
0.018146,
0.001337,
-0.002961,
0.007370,
0.042804,
-0.006019,
-0.013880,
-0.015862,
0.015902,
-0.007222,
-0.039322,
-0.001992,
0.040390,
0.020564,
-0.157640,
-0.324290,
-0.070979,
-0.024222,
-0.012986,
-0.158050,
-0.177210,
-0.027832,
0.052581,
-0.034736,
-0.126210,
-0.070219,
-0.078313,
-0.007948,
-0.043898,
-0.043152,
-0.042135,
-0.090989,
-0.041394,
0.004435,
-0.028652,
0.061146,
-0.045434,
-0.070903,
-0.064207,
0.015719,
-0.017385,
-0.028933,
-0.050340,
-0.073241,
-0.035449,
-0.003487,
-0.094073,
-0.002935,
-0.054138,
-0.021627,
-0.066411,
-0.028756,
0.032332,
-0.004436,
0.019154,
0.038959,
0.025522,
0.026401,
0.016795,
0.016207,
-0.016504,
-0.028667,
-0.013730,
-0.060000,
0.057922,
-0.001664,
0.022332,
-0.028425,
-0.005944,
-0.008657,
0.126840,
0.070707,
-0.012079,
0.028963,
-0.070889,
-0.100290,
0.065518,
0.041629,
-0.103200,
-0.030439,
-0.138800,
0.041875,
0.038371,
0.031804,
-0.053058,
-0.080144,
0.044232,
0.137470,
0.087304,
0.062711,
-0.066610,
-0.011037,
0.100290,
0.122390,
-0.137500,
-0.026176,
-0.032079,
0.104220,
-0.012515,
-0.184020,
0.062956,
0.170790,
0.074055,
-0.057814,
-0.172780,
-0.080521,
0.082044,
0.072802,
-0.153420,
-0.003997,
0.053786,
0.225510,
0.058078,
0.063854,
0.073776,
-0.086639,
-0.037522,
0.086905,
0.142300,
-0.040204,
0.035391,
0.004769,
-0.026394,
-0.039150,
-0.077264,
0.047472,
0.125050,
0.056814,
-0.075680,
-0.048246,
0.166890,
0.269540,
0.082695,
-0.011916,
-0.029670,
-0.009790,
0.060006,
0.042496,
0.058231,
0.089605,
-0.099363,
-0.010149,
-0.050918,
0.023314,
0.036437,
0.015756,
0.121680,
0.033801,
-0.025971,
0.114700,
0.062800,
-0.048685,
-0.124100,
-0.190460,
0.028902,
0.007685,
-0.027540,
-0.037322,
-0.019821,
0.043612,
-0.190680,
-0.081476,
-0.216310,
0.073751,
0.148020,
-0.018896,
0.005322,
0.074528,
0.016276,
0.010839,
-0.179860,
-0.157120,
-0.037524,
-0.040788,
0.176710,
-0.008281,
-0.138390,
-0.154330,
-0.017353,
0.138570,
-0.020504,
-0.101570,
-0.088427,
-0.028951,
0.046967,
-0.147620,
-0.060058,
-0.000934,
0.049362,
-0.102200,
-0.139210,
-0.061257,
0.013592,
0.007709,
-0.116540,
-0.089751,
0.017847,
0.009689,
0.053871,
0.061058,
0.095244,
0.134420,
0.147260,
0.092076,
0.102770,
0.011342,
0.038707,
0.061147,
0.016846,
0.075564,
0.123640,
0.140620,
0.062482,
0.096865,
0.093055,
0.164730,
-0.094797,
-0.012341,
-0.003150,
0.168110,
0.114860,
-0.127290,
-0.002112,
-0.155370,
0.130450,
-0.018268,
-0.222920,
-0.015917,
-0.307650,
0.040337,
-0.215170,
-0.138020,
-0.079798,
-0.252180,
0.115740,
-0.029625,
-0.179860,
-0.129520,
-0.198270,
-0.047445,
-0.095133,
-0.113840,
0.016853,
-0.080642,
-0.270900,
-0.147530,
0.052182,
0.176640,
-0.108430,
-0.089102,
-0.144850,
0.070619,
-0.024816,
-0.108500,
-0.010600,
-0.063138,
-0.034206,
-0.123090,
-0.092880,
0.013256,
0.001684,
0.036207,
-0.107300,
-0.015834,
0.059169,
0.045349,
0.030382,
0.046184,
0.017400,
0.163620,
-0.024254,
0.019582,
0.007315,
0.004074,
0.187230,
-0.120640,
0.037189,
0.045432,
0.076938,
-0.020937,
-0.030077,
0.011633,
0.059528,
-0.074768,
0.036262,
-0.091512,
-0.014906,
0.035436,
-0.066765,
0.067704,
-0.037618,
-0.020849,
-0.011900,
0.031631,
-0.095074,
-0.099488,
0.060926,
0.106550,
0.069006,
0.027005,
0.013711,
0.125950,
0.125290,
-0.056767,
-0.156740,
-0.073128,
-0.029920,
-0.001757,
-0.260950,
0.045534,
-0.086569,
-0.034845,
-0.061488,
-0.099584,
-0.070739,
-0.046126,
0.001592,
0.142990,
0.095180,
-0.058375,
-0.004616,
0.082239,
0.056946,
0.043429,
-0.149980,
0.049779,
0.076926,
0.091198,
-0.036990,
-0.178080,
-0.079112,
-0.142560,
-0.149020,
-0.216990,
-0.098497,
0.040005,
0.025114,
0.008994,
-0.249540,
-0.080546,
-0.209810,
-0.155660,
-0.132590,
-0.026627,
0.034314,
-0.207460,
-0.196710,
-0.144130,
-0.080212,
0.043436,
-0.057379,
0.010032,
-0.035275,
-0.091032,
0.029927,
0.112370,
0.039763,
0.126120,
0.021665,
0.120680,
0.158170,
0.097075,
0.086888,
0.063948,
-0.007305,
0.013526,
-0.039424,
0.029695,
0.004033,
-0.019624,
-0.005490,
0.006134,
-0.028313,
-0.007481,
-0.023298,
0.017630,
-0.021594,
-0.061250,
-0.035968,
-0.027838,
0.014141,
-0.039737,
0.025409,
-0.043160,
-0.006294,
-0.007510,
-0.022732,
-0.004201,
-0.050261,
-0.096060,
-0.042407,
0.108670,
-0.070276,
-0.127590,
-0.091953,
-0.006366,
0.092235,
-0.009164,
-0.073506,
-0.086264,
0.116250,
0.099720,
0.161730,
0.102140,
-0.131080,
0.086738,
0.059770,
0.049408,
0.036453,
-0.163640,
-0.066783,
0.158790,
0.096825,
0.043731,
0.042961,
0.078201,
-0.026966,
-0.090504,
-0.006333,
0.110500,
-0.015509,
-0.136190,
0.034245,
0.126580,
0.242060,
0.057877,
0.046370,
0.110640,
0.066629,
0.070375,
0.098869,
0.019508,
0.118950,
0.092604,
0.004491,
-0.063114,
-0.014747,
0.081613,
0.099100,
-0.092037,
0.033759,
-0.176450,
-0.201740,
-0.077489,
-0.173550,
-0.078213,
-0.068179,
0.015057,
0.075494,
-0.007373,
0.009228,
-0.062832,
-0.080113,
0.017577,
0.085965,
0.088102,
0.082785,
0.011960,
0.008465,
-0.034535,
0.015037,
0.005621,
0.047598,
-0.004915,
0.021951,
-0.031512,
0.031987,
-0.021609,
-0.021777,
-0.037536,
-0.036584,
-0.011924,
-0.013206,
-0.013214,
0.028245,
-0.026981,
-0.028036,
-0.026448,
-0.002814,
-0.029922,
-0.018032,
0.011148,
0.010277,
0.015444,
-0.004737,
0.004129,
0.019371,
0.036081,
0.018085,
0.096250,
0.042068,
-0.023402,
0.033261,
0.105330,
0.081725,
0.091744,
0.054423,
0.126580,
0.003118,
-0.059228,
-0.101670,
0.085000,
0.023017,
-0.178800,
-0.018981,
-0.237210,
-0.067656,
-0.099531,
0.038360,
0.042213,
-0.177320,
-0.099538,
-0.006804,
0.003623,
-0.137570,
-0.020870,
-0.012078,
0.039219,
-0.134640,
-0.064096,
0.056324,
0.018014,
0.016353,
-0.001014,
0.030380,
-0.012508,
-0.142840,
0.004763,
0.041654,
0.040742,
-0.020762,
-0.149990,
0.060517,
0.100200,
-0.058953,
-0.042457,
-0.121240,
-0.117520,
-0.076053,
0.123670,
0.048141,
-0.051949,
0.030266,
0.098618,
0.043769,
-0.088613,
-0.023751,
0.035833,
0.054232,
-0.001682,
-0.058435,
-0.043518,
-0.125320,
0.002542,
-0.149240,
-0.132910,
-0.033726,
-0.051572,
0.064511,
-0.325080,
-0.342050,
-0.100340,
-0.004396,
-0.084080,
0.077248,
-0.056928,
-0.064864,
-0.062291,
0.271300,
0.178430,
0.131080,
0.126110,
-0.072060,
0.070276,
-0.049048,
-0.032253,
0.006672,
0.126050,
-0.001763,
-0.110890,
0.022141,
0.127810,
0.021914,
-0.061241,
0.094186,
0.051061,
0.112100,
0.016889,
0.006749,
0.121420,
-0.045435,
-0.148950,
-0.052648,
0.171980,
0.062011,
0.041709,
-0.030523,
0.118120,
0.095506,
-0.079474,
0.095467,
0.264160,
0.130030,
-0.074610,
0.024964,
-0.074556,
0.097022,
0.127080,
0.083657,
0.107650,
-0.038712,
0.101790,
0.123380,
0.023472,
0.072242,
0.093153,
0.001794,
-0.026084,
0.000801,
0.081615,
-0.022502,
-0.115150,
-0.105500,
-0.115020,
-0.056583,
-0.107620,
-0.060527,
-0.122570,
-0.086832,
-0.166330,
-0.184900,
-0.079830,
-0.018935,
0.032568,
-0.060311,
-0.055267,
-0.016894,
0.073440,
0.070435,
0.039382,
0.006512,
0.055513,
0.059851,
0.008506,
0.018116,
0.011781,
-0.024100,
-0.027759,
-0.040816,
0.025058,
0.041325,
-0.048206,
0.002925,
-0.034633,
0.003146,
0.021869,
-0.018842,
-0.044404,
-0.018278,
0.025962,
-0.037366,
-0.000610,
-0.030555,
-0.051772,
0.005768,
-0.094249,
-0.171670,
0.008013,
-0.006679,
0.121800,
-0.201990,
-0.231700,
0.017702,
0.116510,
0.041072,
-0.207330,
-0.239960,
0.007190,
0.081570,
0.009866,
-0.096117,
0.077340,
0.165720,
0.111450,
0.040786,
-0.026271,
0.206130,
0.197850,
0.087127,
0.062502,
-0.106570,
-0.073080,
0.212830,
0.166480,
0.065236,
-0.068568,
-0.110380,
0.085824,
0.165800,
0.012101,
-0.072478,
-0.100630,
0.116390,
0.257180,
0.110290,
0.050342,
0.090478,
0.129160,
0.082101,
0.051830,
0.076369,
0.032967,
0.048965,
-0.102360,
0.028475,
-0.050184,
-0.027573,
-0.004145,
0.020944,
0.041782,
-0.024906,
-0.022221,
-0.063821,
-0.009759,
-0.011907,
-0.009578,
-0.043044,
0.003177,
-0.020779,
-0.033855,
0.002059,
-0.004671,
-0.038532,
-0.042421,
-0.066226,
-0.022955,
-0.026183,
-0.032609,
-0.026521,
-0.182520,
0.110290,
0.069694,
0.005493,
0.016153,
-0.046979,
0.101880,
0.206180,
0.061515,
0.033374,
0.136030,
0.026061,
0.086102,
-0.091365,
-0.044856,
-0.095451,
-0.074031,
0.028544,
-0.003539,
-0.149830,
0.030281,
-0.014954,
0.007760,
-0.043084,
0.012011,
# 76 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(fc1_weight1);
# 74 "my_net/src/my_net.cpp"

 const half fc1_weight2[48000] = {

# 1 "my_net/src/./weight/fc1_weight2.dat" 1
0.013958,
-0.012786,
-0.065662,
-0.021168,
-0.020256,
-0.042482,
-0.037513,
-0.040509,
-0.011625,
0.001162,
-0.003544,
0.001208,
0.021914,
-0.050689,
-0.055226,
-0.005258,
-0.033847,
-0.035254,
-0.003066,
0.024465,
-0.033697,
-0.038820,
-0.002939,
-0.041899,
0.021860,
0.002111,
0.002237,
0.028152,
0.022200,
0.006073,
0.015569,
0.004793,
0.030336,
-0.040490,
-0.040756,
-0.003211,
-0.016563,
0.012532,
0.009687,
-0.026049,
-0.033846,
0.026290,
-0.027455,
0.024281,
-0.011703,
-0.036248,
-0.024830,
-0.006444,
0.006741,
0.000316,
-0.006770,
0.017676,
-0.041917,
-0.018690,
-0.004899,
0.024298,
-0.015261,
-0.053549,
-0.061438,
-0.011314,
0.019327,
-0.043472,
0.023301,
0.024909,
-0.009846,
-0.001667,
-0.019734,
-0.017625,
-0.022026,
0.028058,
0.017779,
-0.039490,
-0.012599,
-0.016195,
-0.030286,
0.015585,
-0.033599,
0.022195,
-0.030204,
-0.016098,
-0.002802,
-0.013189,
0.020842,
0.006969,
-0.033359,
-0.041183,
0.021914,
0.017075,
0.014445,
-0.032117,
-0.004879,
0.021871,
0.004343,
0.011137,
0.017603,
-0.031373,
-0.005339,
-0.036943,
0.015684,
0.000632,
-0.061003,
-0.058791,
-0.020508,
0.029029,
0.010779,
-0.006727,
0.024634,
-0.039691,
-0.032959,
-0.033935,
-0.049946,
-0.008956,
-0.005206,
-0.045073,
-0.034559,
-0.001427,
-0.021115,
-0.031812,
-0.052565,
-0.019812,
-0.010823,
-0.031403,
-0.010632,
0.000010,
-0.011770,
0.020274,
-0.040288,
-0.019203,
-0.007521,
0.006377,
-0.012992,
0.010540,
0.002248,
-0.023636,
0.010815,
0.024242,
-0.002777,
-0.026630,
0.030809,
-0.024939,
-0.041256,
0.008408,
-0.050404,
0.016938,
-0.011565,
-0.027674,
-0.033346,
0.011693,
0.013500,
-0.003018,
-0.003834,
0.002481,
-0.022311,
-0.016863,
-0.047154,
-0.044648,
-0.035808,
-0.028593,
-0.017473,
0.001861,
-0.020160,
0.024441,
0.011478,
0.004724,
-0.017489,
-0.015364,
-0.037645,
0.015316,
0.024578,
-0.030690,
-0.028880,
-0.052245,
-0.010294,
0.013467,
0.002898,
0.000668,
-0.026528,
-0.035496,
0.011994,
-0.020765,
-0.032979,
-0.024854,
-0.029053,
-0.009455,
0.022998,
-0.010482,
0.003789,
0.012239,
-0.005680,
-0.002376,
-0.002101,
0.007164,
0.000503,
-0.010169,
-0.020443,
0.006193,
0.011651,
-0.003232,
-0.009039,
-0.010003,
-0.026012,
0.026340,
-0.010866,
0.039506,
-0.006307,
0.005706,
-0.016016,
0.001385,
0.029908,
0.008730,
0.007340,
-0.001801,
-0.004284,
-0.025209,
-0.021411,
-0.026060,
0.033433,
-0.042288,
-0.011841,
-0.014264,
0.002716,
0.018525,
-0.008068,
-0.009309,
-0.022390,
0.012235,
-0.041339,
-0.047444,
-0.051911,
-0.020511,
-0.019316,
0.020703,
-0.066539,
-0.003653,
-0.022923,
-0.028649,
-0.022240,
-0.027309,
-0.058495,
-0.025685,
-0.011033,
-0.048758,
-0.018345,
-0.011815,
-0.008299,
-0.009423,
-0.025493,
0.004503,
-0.004593,
-0.029078,
-0.010345,
-0.040978,
-0.026444,
-0.002795,
-0.015123,
-0.040729,
0.007542,
-0.004942,
-0.006889,
-0.005287,
0.025771,
0.015070,
0.026587,
-0.000520,
-0.018686,
0.003572,
0.001194,
0.004034,
0.013711,
-0.025829,
0.020154,
-0.021300,
-0.012201,
0.001702,
0.002863,
0.001287,
-0.032763,
-0.003083,
-0.001622,
-0.044151,
-0.043226,
0.003825,
-0.016983,
-0.024656,
-0.021125,
-0.005542,
-0.040095,
0.021400,
-0.005760,
-0.010447,
-0.007657,
-0.024744,
0.008715,
-0.010325,
0.025689,
-0.005193,
-0.016122,
0.019978,
-0.014342,
0.012561,
-0.010075,
-0.037350,
-0.056895,
-0.019165,
-0.001119,
-0.005530,
-0.008992,
-0.045042,
-0.063446,
-0.000050,
-0.039260,
-0.034919,
-0.040639,
0.003728,
-0.041965,
-0.010061,
0.009377,
-0.031103,
-0.004246,
-0.032595,
-0.009464,
-0.029103,
-0.001766,
-0.027957,
-0.024533,
-0.026779,
0.013135,
-0.011444,
-0.004843,
-0.028631,
-0.068566,
-0.054328,
-0.006577,
-0.036196,
0.018147,
-0.029784,
0.010588,
-0.017884,
-0.010473,
-0.054726,
-0.013283,
-0.027563,
0.002888,
0.008600,
-0.047481,
0.007324,
0.002204,
-0.041053,
-0.028956,
0.029911,
0.030152,
-0.008120,
0.027180,
0.013467,
0.028893,
0.020266,
0.013452,
0.009616,
-0.037291,
0.013509,
-0.005796,
-0.007042,
-0.016602,
-0.011104,
-0.062964,
0.018683,
-0.030567,
-0.044811,
-0.012556,
-0.054851,
-0.039919,
-0.000382,
0.014651,
-0.042856,
0.015562,
-0.008432,
-0.010939,
-0.009877,
-0.034325,
-0.010574,
-0.005715,
-0.064975,
-0.024201,
0.000601,
-0.006915,
-0.005182,
-0.061015,
-0.030768,
-0.050129,
-0.030563,
-0.059421,
-0.010098,
-0.043032,
-0.009192,
-0.010651,
-0.064500,
-0.055306,
-0.044955,
-0.001501,
-0.043826,
-0.009746,
0.024552,
0.028676,
0.006023,
-0.032130,
-0.007039,
0.019645,
0.025860,
0.017260,
-0.012468,
-0.004337,
-0.012513,
0.010694,
-0.040584,
-0.017222,
-0.031367,
-0.013671,
-0.008881,
0.002457,
-0.009456,
0.039539,
-0.011083,
0.028757,
-0.039226,
-0.026955,
-0.051151,
-0.000789,
0.005639,
-0.017594,
-0.039663,
0.000533,
0.001023,
0.003461,
-0.034597,
-0.018289,
-0.014298,
-0.003526,
-0.020471,
-0.008694,
-0.012080,
0.010276,
-0.021365,
0.012284,
-0.035882,
-0.041622,
-0.018057,
-0.009696,
-0.043101,
-0.033440,
-0.046605,
-0.009996,
-0.058138,
-0.037284,
-0.032826,
0.003944,
-0.036223,
-0.019534,
-0.014643,
-0.059180,
0.027003,
-0.026607,
-0.043999,
-0.013010,
-0.016621,
-0.049422,
-0.035496,
-0.000482,
-0.038458,
0.015744,
0.014694,
0.022092,
-0.038727,
0.004772,
0.008317,
-0.038768,
-0.036426,
0.016682,
-0.007342,
0.000237,
0.025749,
-0.047694,
-0.019535,
0.004867,
-0.008441,
-0.018355,
-0.008313,
0.003033,
0.020126,
-0.042394,
-0.005066,
-0.042174,
-0.011400,
-0.000431,
-0.046531,
0.011329,
-0.022678,
-0.034243,
0.002484,
-0.004681,
-0.011269,
-0.016376,
0.018715,
-0.005181,
0.021218,
-0.001450,
-0.008597,
-0.024528,
-0.027930,
0.001398,
0.015423,
-0.024406,
0.000297,
-0.031834,
0.011262,
-0.024224,
0.002237,
-0.001649,
0.020524,
-0.000055,
-0.004068,
0.035095,
0.011165,
0.012953,
-0.011451,
-0.017208,
-0.066015,
-0.054222,
-0.023138,
-0.011217,
-0.012661,
-0.035812,
-0.030366,
-0.031120,
-0.006162,
-0.042397,
-0.033202,
-0.030826,
-0.035556,
0.013488,
0.020663,
-0.027380,
0.011951,
0.023875,
0.012928,
0.011644,
0.004936,
-0.041868,
0.012000,
0.017204,
-0.000996,
0.026578,
-0.026846,
0.009943,
-0.012725,
0.012005,
-0.007566,
-0.042531,
0.006995,
0.023073,
-0.028327,
0.003507,
0.013438,
0.023774,
0.008941,
-0.021685,
0.000918,
-0.042435,
0.026141,
-0.034519,
0.025343,
-0.018258,
-0.056271,
0.008163,
0.003384,
-0.017701,
-0.006182,
-0.014238,
-0.035196,
-0.015116,
0.004514,
0.017579,
0.001633,
-0.002509,
-0.015041,
0.027707,
-0.017968,
-0.023186,
-0.043845,
-0.012502,
-0.025575,
-0.067933,
-0.007202,
-0.053478,
-0.009941,
-0.033078,
-0.044137,
-0.022165,
-0.025268,
-0.046375,
-0.046283,
-0.044992,
-0.034753,
-0.067282,
-0.058152,
-0.021292,
-0.005168,
-0.041742,
-0.002141,
-0.024378,
-0.013205,
-0.018658,
0.003833,
-0.013727,
-0.006581,
-0.046436,
-0.009646,
0.002345,
0.010125,
0.008019,
0.009234,
-0.044570,
-0.016926,
-0.016288,
-0.067999,
0.003610,
0.013754,
-0.052375,
-0.009478,
-0.050642,
-0.018906,
-0.029881,
0.014418,
-0.012323,
-0.025358,
0.004310,
0.002228,
0.018895,
0.008991,
-0.037722,
-0.027825,
0.005089,
-0.000787,
-0.038609,
0.002136,
-0.020753,
-0.032774,
0.018363,
0.006216,
-0.034215,
-0.014788,
-0.039790,
-0.037714,
-0.008581,
-0.038727,
-0.052201,
-0.042179,
-0.037420,
-0.033033,
-0.017565,
-0.013352,
-0.004198,
-0.029524,
-0.006885,
-0.047630,
-0.007294,
-0.011019,
-0.048727,
-0.007393,
-0.018538,
-0.033386,
0.028255,
0.018969,
-0.022634,
-0.022593,
0.023898,
-0.003501,
0.024072,
0.000946,
0.033246,
0.004750,
0.000390,
0.027431,
0.022843,
0.007222,
0.026891,
0.008980,
0.032519,
-0.015847,
0.029389,
0.036834,
-0.011393,
-0.017696,
0.026948,
0.026820,
-0.016173,
-0.025306,
-0.031462,
0.024568,
0.025579,
0.025064,
0.022292,
-0.066006,
-0.028492,
-0.006126,
-0.002300,
-0.008572,
-0.024781,
-0.056809,
-0.045608,
-0.000074,
0.023805,
-0.008476,
-0.055320,
-0.067659,
-0.010753,
-0.041451,
-0.046075,
-0.030538,
-0.033461,
-0.028431,
-0.050221,
-0.040624,
-0.030068,
-0.030579,
-0.040670,
-0.014188,
-0.027049,
-0.024565,
-0.030284,
-0.040240,
-0.026269,
-0.048695,
-0.047694,
-0.064829,
-0.028568,
0.012584,
0.019364,
-0.008720,
-0.024534,
0.016318,
-0.014025,
-0.021235,
-0.023447,
-0.020281,
-0.030991,
0.007071,
0.025862,
-0.035110,
-0.015178,
-0.027755,
0.011616,
-0.038919,
0.031197,
0.018533,
0.023743,
-0.027438,
0.022413,
-0.019990,
-0.034215,
0.023584,
0.028558,
0.014406,
0.025487,
-0.020967,
0.002232,
0.040807,
-0.029569,
0.003783,
0.000071,
-0.019499,
0.026082,
0.011208,
-0.002924,
-0.005662,
-0.032841,
-0.004004,
0.018736,
-0.041813,
-0.029756,
-0.017387,
-0.026206,
-0.001234,
0.007502,
0.016981,
-0.035490,
-0.022990,
-0.011705,
-0.011764,
-0.028337,
-0.010735,
-0.037849,
-0.008909,
0.007345,
-0.006860,
0.000092,
-0.009430,
-0.010679,
0.022605,
0.001704,
-0.019190,
-0.063659,
0.008439,
0.033014,
0.045179,
0.100670,
-0.192200,
-0.085988,
-0.203590,
-0.076261,
0.030328,
-0.174350,
-0.176160,
0.009602,
-0.025131,
-0.033852,
-0.005697,
0.060778,
0.047377,
0.059225,
0.118750,
0.048489,
0.195830,
0.147290,
0.142370,
0.193250,
0.014861,
-0.006847,
0.002856,
0.019538,
-0.007313,
-0.024975,
-0.013595,
0.043629,
0.014251,
-0.018735,
-0.011046,
0.041406,
0.032985,
-0.006278,
-0.007407,
-0.020489,
-0.019340,
0.027961,
0.037525,
0.033084,
0.017912,
0.026319,
0.021329,
-0.004133,
-0.051931,
-0.201210,
-0.115950,
-0.048811,
-0.214290,
-0.178960,
-0.083009,
0.081857,
-0.054319,
-0.057524,
-0.160000,
0.009219,
0.049209,
0.155940,
0.047048,
0.007665,
0.110210,
0.080021,
0.169450,
0.039441,
0.194290,
0.197900,
0.193320,
0.085593,
0.002998,
0.139110,
0.055651,
0.039102,
0.028197,
0.041825,
-0.074324,
-0.000941,
-0.013834,
0.018654,
0.003789,
0.028343,
0.072082,
0.065459,
0.002451,
-0.001026,
-0.016994,
0.057101,
0.035659,
0.065832,
0.050201,
0.003364,
-0.063135,
-0.002199,
0.042737,
0.029945,
0.030734,
0.106540,
-0.026893,
-0.059920,
-0.087260,
-0.002645,
-0.060155,
-0.062329,
-0.038402,
-0.090602,
0.017793,
0.056677,
-0.019348,
-0.087240,
-0.138960,
0.050998,
0.037789,
-0.113290,
-0.037516,
-0.036880,
0.091939,
-0.009639,
0.024100,
-0.008567,
-0.029208,
0.013727,
0.157150,
-0.040926,
0.011343,
0.095792,
0.091410,
-0.009846,
0.051342,
0.038461,
0.026780,
0.093521,
0.001867,
0.005703,
0.088575,
0.049206,
0.019188,
0.010466,
0.108080,
0.117470,
0.135220,
0.127580,
-0.065238,
0.084468,
0.249010,
0.189990,
0.155510,
0.146860,
0.015763,
-0.018012,
-0.005690,
0.168340,
0.050108,
-0.032772,
-0.081539,
-0.073620,
-0.008310,
0.084943,
0.002781,
-0.067289,
-0.071683,
-0.034824,
-0.039194,
-0.021380,
-0.033870,
-0.071256,
-0.036531,
-0.195230,
-0.077045,
-0.029296,
-0.141880,
-0.074454,
-0.016416,
-0.027993,
-0.031426,
-0.066980,
0.042108,
-0.015058,
0.117480,
0.017042,
-0.030342,
0.031354,
0.037799,
0.019131,
-0.003558,
-0.030478,
0.021038,
0.011861,
-0.026535,
-0.113570,
-0.025361,
0.024055,
-0.012278,
-0.010183,
0.070113,
0.082301,
0.093914,
0.174280,
0.037089,
0.107740,
0.079109,
-0.145370,
0.031787,
0.052626,
0.078435,
-0.024214,
-0.051565,
0.053091,
0.061643,
-0.036037,
0.001198,
-0.054863,
0.020906,
0.073844,
-0.115780,
-0.024656,
-0.135980,
0.034354,
-0.040742,
-0.099196,
-0.031020,
-0.092378,
-0.096288,
-0.107160,
-0.061695,
0.042385,
0.047785,
-0.020825,
-0.025073,
0.035500,
0.036599,
0.012844,
0.092810,
0.058130,
0.126240,
0.154540,
0.058233,
0.067757,
0.119110,
0.172760,
0.131950,
0.014607,
0.027171,
0.065052,
0.087517,
0.064414,
0.029802,
-0.005063,
-0.047193,
-0.056592,
-0.088455,
0.014135,
-0.071783,
-0.020229,
-0.118460,
-0.049993,
-0.050793,
0.011520,
0.032624,
-0.024636,
0.056381,
0.035772,
0.067511,
-0.031864,
0.076575,
0.129450,
0.102990,
0.084346,
0.026108,
0.099697,
0.024255,
0.148310,
0.047797,
-0.101230,
-0.138080,
-0.181790,
-0.071294,
-0.038921,
-0.079818,
-0.220070,
-0.171820,
-0.179610,
0.082428,
-0.074543,
-0.069606,
-0.209670,
-0.129840,
0.015131,
0.059200,
0.019720,
0.015213,
-0.129380,
0.039261,
0.191680,
0.176310,
0.049446,
-0.095520,
-0.036281,
0.087334,
0.027873,
-0.002788,
-0.085776,
0.139780,
0.114150,
0.048085,
-0.042558,
-0.010264,
0.103400,
0.093419,
-0.016605,
0.015765,
-0.016706,
0.067114,
0.041314,
0.054013,
0.018304,
-0.068866,
0.088211,
-0.047508,
-0.085531,
-0.101210,
-0.147180,
0.164850,
0.036393,
0.087486,
0.119710,
0.099608,
-0.072624,
-0.069672,
-0.025304,
-0.008837,
-0.156510,
-0.046500,
-0.047059,
-0.047030,
-0.131340,
-0.026868,
-0.093738,
-0.194250,
-0.163970,
0.011264,
-0.069670,
0.078142,
0.056711,
-0.075580,
-0.091651,
-0.099252,
0.066365,
-0.016002,
-0.096800,
0.014480,
-0.046938,
0.006975,
-0.012869,
0.017208,
0.084274,
0.030422,
-0.006469,
-0.161230,
-0.004719,
-0.076547,
0.020037,
-0.014971,
-0.285330,
-0.072555,
-0.099868,
-0.001925,
-0.106420,
-0.118250,
-0.076627,
-0.128870,
0.148860,
-0.071931,
-0.086866,
-0.125960,
-0.188310,
-0.171490,
-0.114070,
-0.056073,
-0.115360,
-0.061978,
-0.112690,
-0.036883,
0.041046,
-0.008434,
-0.067031,
-0.147230,
-0.115230,
-0.074314,
-0.054551,
-0.050875,
-0.132640,
-0.156070,
-0.119430,
-0.073092,
-0.027576,
-0.080085,
0.001822,
-0.033476,
0.020096,
0.022257,
-0.024282,
-0.009892,
0.014216,
0.034502,
-0.012436,
-0.003276,
0.021226,
0.015046,
-0.029020,
-0.013457,
-0.030609,
0.000386,
0.011838,
-0.039915,
0.001637,
-0.038811,
-0.018933,
-0.043566,
-0.028621,
-0.041581,
0.005665,
-0.050834,
-0.120280,
-0.054064,
0.060791,
-0.046126,
0.097852,
0.000967,
-0.087976,
0.055227,
-0.123980,
-0.041619,
0.115990,
0.005413,
0.017758,
0.005596,
0.049732,
0.074164,
0.118710,
0.078598,
0.027491,
0.073762,
-0.015544,
0.073280,
0.016185,
0.032422,
-0.019508,
0.109270,
0.135140,
0.081252,
0.070931,
-0.020313,
0.105910,
0.095799,
0.086830,
0.065910,
0.072555,
0.134510,
0.043119,
-0.013941,
-0.062836,
0.009564,
0.026163,
0.001455,
-0.012433,
-0.098381,
-0.057931,
-0.122290,
0.011497,
-0.018180,
-0.130480,
0.206120,
0.104450,
0.045607,
-0.027436,
0.171990,
0.054345,
0.058804,
0.072367,
0.117020,
0.102930,
0.024858,
0.007564,
-0.012409,
-0.055865,
0.006064,
0.049738,
-0.035117,
-0.020578,
0.010645,
-0.101380,
0.025271,
0.022160,
-0.026430,
0.023223,
-0.085082,
0.014563,
0.020516,
0.014635,
0.030773,
0.016761,
0.007516,
-0.025545,
-0.004319,
0.009670,
0.010454,
0.027827,
-0.002453,
0.033865,
-0.036557,
-0.034482,
-0.044584,
-0.019939,
0.031757,
-0.014232,
0.033772,
-0.000855,
-0.001784,
0.024214,
-0.011823,
0.005065,
0.162310,
0.065387,
0.074968,
-0.037298,
0.052210,
0.100780,
-0.016895,
-0.076692,
-0.017942,
-0.025021,
0.018490,
-0.017504,
-0.149700,
-0.124830,
-0.067950,
0.002856,
-0.103480,
-0.110420,
-0.113090,
-0.074725,
-0.126690,
-0.050056,
0.068764,
-0.099232,
-0.101220,
0.049386,
0.114150,
0.082319,
0.020095,
-0.078098,
0.017737,
0.118490,
0.167820,
0.036523,
0.073848,
-0.013184,
0.052348,
0.083904,
0.041053,
0.131600,
-0.038230,
0.066446,
0.046006,
0.038501,
0.051050,
-0.054989,
-0.008021,
-0.000410,
-0.014627,
-0.006660,
-0.020096,
0.007264,
0.007127,
0.004543,
0.061119,
0.039967,
0.010872,
-0.021280,
0.022220,
0.054561,
-0.018612,
-0.049939,
-0.052957,
-0.090288,
0.065710,
-0.069617,
0.004586,
-0.005724,
-0.009195,
0.088267,
-0.015046,
-0.051242,
-0.056688,
0.052033,
0.081591,
-0.073435,
-0.004179,
0.027379,
0.069187,
0.109430,
-0.035819,
0.043189,
-0.082281,
-0.044375,
0.062353,
0.048915,
-0.015795,
-0.052095,
0.040633,
0.068425,
0.090369,
0.013347,
0.006374,
-0.043130,
0.009408,
0.003579,
0.015676,
0.016775,
-0.054425,
-0.009556,
0.006587,
-0.118650,
-0.098129,
-0.083940,
0.030740,
0.108140,
-0.027161,
0.073528,
0.034434,
-0.046484,
0.144160,
0.135520,
0.059662,
-0.042018,
0.101090,
0.123110,
-0.033487,
-0.065205,
-0.107920,
0.029270,
0.083969,
0.039173,
0.035505,
-0.012622,
0.063519,
-0.123450,
-0.009748,
-0.047145,
-0.139160,
-0.143250,
-0.080603,
-0.091379,
-0.205330,
-0.157200,
-0.188070,
-0.089498,
-0.110570,
-0.003250,
-0.034673,
-0.108240,
0.049780,
-0.066427,
-0.104600,
-0.002944,
-0.075570,
0.029288,
0.012787,
0.036626,
-0.002113,
-0.030582,
-0.010554,
-0.003055,
-0.026131,
0.067674,
-0.000409,
-0.071152,
-0.038745,
-0.030075,
0.104270,
0.021706,
-0.035822,
-0.008341,
0.075454,
0.041707,
-0.018489,
-0.023613,
0.023099,
0.006296,
-0.018152,
-0.024885,
-0.012437,
0.066103,
0.016755,
0.006688,
-0.052936,
0.053955,
0.084938,
0.080625,
0.130230,
0.044263,
0.012553,
-0.005536,
-0.129780,
0.045554,
-0.037071,
0.014211,
0.044944,
-0.003290,
-0.079023,
0.043311,
0.184980,
0.122560,
0.132890,
0.015321,
0.057769,
0.176410,
0.144940,
0.095382,
0.021310,
-0.077289,
0.188720,
0.201450,
0.027926,
0.083668,
0.100760,
0.126160,
0.129270,
0.096883,
0.090027,
0.144000,
-0.043409,
-0.000142,
0.010981,
0.004318,
0.052730,
0.041975,
-0.037451,
-0.008713,
-0.083273,
0.065839,
0.018724,
0.065891,
-0.038996,
0.007839,
0.118630,
-0.012352,
-0.051799,
-0.059266,
-0.019436,
-0.045910,
0.019057,
0.024061,
0.001864,
-0.025335,
-0.011083,
0.007372,
-0.003446,
0.032072,
-0.003439,
-0.026726,
-0.046398,
-0.029339,
0.010156,
-0.013284,
0.003053,
-0.043102,
0.005315,
0.029813,
0.012320,
0.008006,
0.045834,
-0.007620,
0.071812,
0.090160,
0.125920,
0.027619,
-0.010582,
0.045347,
0.052005,
-0.062401,
-0.031323,
-0.048850,
-0.085190,
-0.018134,
0.002884,
-0.105730,
0.030531,
0.028930,
0.003873,
0.000879,
-0.021891,
-0.010352,
0.068739,
0.039601,
0.022310,
0.020838,
-0.001867,
-0.054002,
-0.048751,
0.003712,
-0.014047,
-0.011958,
-0.030692,
-0.039834,
-0.020284,
0.026295,
-0.002156,
-0.037345,
-0.027531,
-0.018129,
-0.011907,
0.008460,
-0.068911,
-0.063976,
-0.024778,
-0.015470,
-0.035657,
-0.005142,
-0.016754,
-0.039898,
-0.003228,
-0.031008,
0.026540,
-0.039180,
-0.022540,
0.005767,
-0.018683,
-0.012455,
0.026489,
-0.038981,
0.005507,
-0.010860,
-0.003268,
-0.024586,
-0.016791,
0.018184,
-0.019700,
-0.029792,
0.022071,
-0.026916,
0.021714,
-0.028546,
-0.011733,
-0.020550,
-0.023788,
0.026420,
-0.033335,
-0.000231,
-0.011523,
0.023349,
0.041258,
-0.001586,
-0.005993,
-0.000116,
0.010361,
0.028739,
-0.032510,
0.019299,
-0.007100,
-0.004139,
0.012415,
-0.037744,
0.000329,
-0.024642,
-0.059441,
-0.043391,
-0.030455,
-0.025418,
-0.053191,
-0.035457,
0.019383,
-0.002475,
0.024812,
0.026833,
0.015126,
0.024926,
0.016402,
-0.024872,
-0.038204,
-0.035108,
-0.036192,
0.000832,
0.017918,
-0.013834,
-0.012203,
0.014055,
-0.018193,
-0.010912,
0.022264,
-0.025413,
0.007834,
-0.031114,
-0.012186,
0.010865,
0.025497,
0.019351,
0.053450,
-0.008894,
0.010440,
-0.029816,
0.054963,
0.035946,
0.039524,
0.040688,
0.044639,
0.076306,
-0.021076,
0.004974,
0.023107,
0.021091,
-0.003225,
-0.014243,
-0.048805,
0.023841,
-0.003244,
0.035905,
0.000533,
0.026607,
0.019870,
0.015739,
0.050583,
0.054285,
0.013778,
-0.043382,
-0.032241,
0.048691,
-0.003458,
0.013160,
-0.039328,
-0.062152,
0.045892,
0.028815,
-0.062846,
-0.068835,
0.056619,
-0.006224,
0.044514,
0.002889,
-0.025419,
0.055711,
0.009076,
0.029059,
-0.025449,
-0.022488,
-0.039603,
0.028488,
-0.068694,
-0.016386,
-0.008104,
-0.033949,
-0.007169,
-0.008357,
-0.003289,
-0.065184,
-0.041890,
-0.019530,
-0.022278,
-0.029278,
-0.058374,
-0.025965,
0.014548,
-0.001683,
-0.033227,
-0.049958,
-0.021332,
-0.012060,
-0.043080,
-0.053183,
-0.023688,
-0.047463,
-0.020024,
-0.061726,
0.045476,
-0.035200,
-0.012405,
-0.025666,
-0.041117,
-0.018890,
-0.003364,
0.049210,
-0.040434,
-0.012157,
-0.023927,
0.006544,
-0.015224,
-0.045730,
-0.066752,
-0.026149,
-0.026175,
-0.011096,
0.000749,
-0.056086,
-0.005044,
-0.056137,
0.009976,
-0.005737,
0.001471,
-0.032245,
-0.064673,
-0.017042,
-0.015747,
-0.006404,
-0.015617,
-0.022461,
0.024290,
-0.008846,
-0.015871,
0.008059,
-0.011573,
-0.027499,
-0.043559,
-0.008038,
-0.038869,
-0.031989,
-0.022820,
-0.037537,
-0.056828,
-0.054054,
0.015932,
0.025313,
0.034004,
-0.037781,
-0.004850,
-0.005100,
-0.058485,
-0.010606,
-0.064712,
-0.015073,
-0.054333,
-0.032184,
0.004012,
0.037991,
0.040481,
0.058595,
0.012114,
0.060189,
0.074496,
0.031102,
0.005177,
-0.005818,
-0.009993,
-0.040856,
-0.017226,
-0.058368,
-0.028586,
-0.028660,
0.003069,
-0.019197,
-0.012038,
-0.035529,
-0.004143,
-0.046928,
-0.014582,
-0.050127,
0.013489,
-0.028740,
-0.059642,
0.011883,
-0.035539,
-0.001030,
-0.006651,
-0.058474,
0.028977,
0.049712,
0.036858,
-0.040795,
0.001620,
0.002270,
-0.021463,
-0.040763,
-0.022518,
-0.001787,
-0.050767,
-0.041806,
-0.004580,
-0.036505,
0.003870,
-0.047864,
-0.037862,
0.020403,
0.016822,
-0.023363,
-0.003340,
0.011803,
-0.030924,
-0.061936,
0.031737,
-0.031784,
-0.063415,
-0.010015,
-0.007525,
-0.014797,
-0.012766,
-0.059895,
-0.036049,
-0.041905,
-0.012172,
-0.026929,
-0.021449,
-0.059675,
0.000023,
-0.003557,
-0.057123,
0.011737,
-0.014702,
-0.058687,
-0.006870,
0.033044,
0.054087,
-0.050725,
-0.048755,
-0.044158,
-0.042445,
-0.026847,
-0.034442,
-0.023394,
-0.040343,
-0.046053,
-0.033787,
-0.020632,
-0.039303,
-0.006235,
-0.049490,
-0.022063,
-0.063190,
-0.047753,
-0.056628,
-0.010278,
-0.050533,
-0.018397,
-0.019517,
0.003645,
0.003261,
-0.063345,
-0.018292,
-0.003420,
-0.040715,
-0.031879,
-0.040928,
-0.052117,
-0.066910,
-0.038029,
-0.021944,
-0.009246,
-0.046857,
0.005699,
-0.021424,
-0.010391,
-0.025403,
-0.038838,
-0.002825,
-0.044139,
0.008025,
-0.029901,
-0.024844,
-0.056159,
-0.056708,
-0.005975,
-0.022704,
-0.043234,
0.024613,
-0.034834,
0.019932,
-0.042816,
-0.060539,
0.039852,
0.007166,
-0.006162,
-0.056104,
-0.023344,
-0.001195,
0.027389,
0.018055,
-0.044997,
-0.063991,
-0.003431,
-0.014435,
-0.029404,
-0.060420,
-0.007171,
-0.030501,
-0.000540,
-0.024791,
-0.031272,
-0.010676,
-0.039711,
-0.061073,
-0.040491,
0.001952,
-0.009929,
-0.019122,
-0.072668,
-0.006441,
-0.025717,
-0.064032,
-0.040429,
-0.015912,
0.003385,
0.016049,
-0.012059,
-0.036372,
-0.040611,
0.023454,
-0.032349,
0.009345,
0.027005,
-0.002482,
-0.027596,
-0.006236,
0.010066,
-0.034924,
0.009552,
-0.001058,
-0.018979,
0.014500,
-0.035070,
0.011896,
-0.028742,
-0.039855,
-0.018175,
-0.065801,
-0.012309,
-0.017189,
-0.016140,
-0.045379,
-0.023802,
-0.000714,
-0.026738,
0.008897,
-0.055751,
-0.068576,
-0.002898,
-0.043950,
-0.018073,
-0.045469,
-0.038341,
-0.033068,
-0.054009,
-0.009696,
-0.048081,
0.026899,
-0.022773,
-0.057795,
-0.018215,
-0.020118,
-0.057655,
-0.008773,
-0.002558,
0.012871,
-0.026842,
-0.016264,
-0.017069,
-0.000482,
0.002527,
-0.013381,
-0.019957,
-0.018618,
-0.044536,
0.007306,
0.057909,
-0.024012,
-0.014730,
-0.007803,
0.055972,
-0.001907,
-0.016898,
-0.037898,
-0.048332,
-0.064104,
0.057086,
-0.041990,
0.005687,
-0.023485,
-0.005597,
-0.005695,
-0.037647,
-0.042355,
-0.040975,
0.000223,
-0.068078,
-0.009933,
-0.042187,
-0.015181,
0.012194,
-0.045456,
-0.048079,
-0.008126,
-0.003067,
-0.049772,
-0.054995,
-0.045832,
-0.053008,
0.002396,
-0.020687,
-0.023620,
0.023117,
0.008837,
0.011420,
-0.033745,
-0.005451,
0.012184,
-0.031993,
-0.029347,
0.027118,
0.021693,
0.029914,
0.016702,
0.019830,
-0.006852,
0.025129,
-0.008524,
0.027558,
0.018528,
-0.009990,
-0.018019,
0.015096,
-0.029543,
-0.004302,
-0.028966,
-0.001088,
-0.005046,
-0.020571,
-0.037055,
-0.059305,
-0.071055,
-0.058443,
-0.015871,
-0.004200,
-0.059608,
-0.023915,
-0.028895,
-0.070885,
-0.069132,
-0.045379,
-0.062945,
-0.026742,
0.004861,
0.018697,
0.009583,
-0.027764,
0.044918,
0.014567,
-0.024706,
-0.016202,
-0.035744,
-0.041984,
-0.017882,
-0.005197,
-0.006807,
-0.049568,
-0.071745,
-0.054850,
-0.000160,
-0.007319,
-0.056088,
-0.045435,
-0.061944,
-0.070405,
-0.002133,
0.022447,
-0.024371,
-0.040403,
-0.057326,
-0.002325,
-0.012769,
0.001957,
-0.041157,
-0.031683,
-0.042902,
-0.070141,
-0.025630,
0.003286,
0.004616,
-0.043674,
-0.062014,
-0.053801,
-0.040408,
-0.014624,
-0.014200,
-0.066220,
-0.070792,
-0.052931,
-0.051434,
-0.047584,
-0.044784,
0.034144,
0.010436,
-0.033981,
-0.039205,
-0.049162,
-0.059008,
-0.033131,
-0.008998,
-0.046759,
0.002880,
0.046759,
-0.007068,
-0.041983,
-0.062874,
-0.052453,
-0.057588,
0.007166,
-0.003097,
-0.071264,
-0.032556,
0.031493,
0.003764,
0.003073,
-0.019683,
-0.003950,
0.015639,
0.073347,
0.002723,
-0.043065,
-0.003143,
0.010408,
-0.035735,
-0.049750,
-0.053200,
-0.039955,
0.023699,
-0.009654,
-0.014721,
0.008144,
-0.036107,
-0.031955,
-0.039344,
0.037069,
0.027730,
-0.072537,
-0.017088,
-0.019231,
0.001613,
-0.000250,
0.018685,
0.042456,
-0.055771,
-0.036201,
-0.018100,
-0.017549,
-0.007852,
0.040319,
0.008515,
-0.034884,
-0.072077,
-0.052381,
-0.024615,
-0.030655,
-0.068749,
-0.007941,
-0.011386,
-0.030220,
-0.009730,
-0.027881,
-0.049351,
-0.061834,
-0.005690,
0.000882,
-0.036263,
-0.012613,
-0.065730,
-0.059159,
-0.004778,
-0.014829,
0.011850,
-0.039866,
-0.046928,
-0.065655,
-0.054069,
-0.024996,
-0.013218,
0.011524,
-0.018557,
-0.009035,
-0.009400,
0.014253,
0.029067,
0.023443,
0.006508,
-0.027841,
0.020667,
0.011458,
0.011454,
0.028365,
0.019806,
0.025998,
-0.004181,
-0.006712,
-0.031367,
0.016586,
-0.034259,
-0.014743,
-0.025454,
-0.029540,
-0.014617,
-0.040167,
-0.056600,
-0.011564,
-0.007191,
-0.012676,
0.038037,
-0.031862,
-0.027055,
-0.029810,
-0.036244,
0.004813,
0.006821,
0.039881,
0.034707,
-0.022876,
-0.029767,
-0.048990,
0.011691,
0.030579,
-0.002696,
-0.064561,
-0.071731,
0.016438,
-0.033730,
-0.036355,
-0.019430,
-0.012537,
-0.033254,
-0.052286,
-0.009806,
0.052062,
-0.010359,
-0.024781,
-0.042525,
-0.071638,
-0.012709,
0.036070,
-0.060562,
0.021666,
-0.070939,
0.023754,
-0.042069,
-0.039333,
0.001536,
-0.030489,
-0.002983,
-0.030786,
-0.049216,
-0.052492,
-0.002957,
-0.032794,
-0.009222,
-0.013756,
-0.030059,
0.001917,
-0.013217,
0.003600,
-0.025457,
0.010144,
-0.011217,
0.017417,
-0.041272,
0.014428,
-0.004519,
-0.028863,
0.029023,
-0.034173,
0.010289,
-0.002254,
-0.028099,
-0.027515,
0.020532,
-0.003963,
-0.037921,
0.005922,
-0.012521,
-0.031516,
0.008784,
0.001554,
0.016055,
-0.037862,
-0.023430,
0.021279,
-0.037509,
-0.029625,
-0.059694,
-0.030261,
0.043211,
-0.051945,
-0.057019,
-0.028816,
-0.022418,
-0.005513,
-0.028661,
-0.037981,
-0.007362,
-0.011562,
-0.022691,
-0.035637,
-0.071982,
0.047496,
-0.079517,
-0.059844,
-0.081522,
-0.054319,
-0.078448,
0.020660,
-0.042409,
-0.064492,
-0.017161,
0.025238,
-0.079937,
-0.161890,
-0.070885,
0.007523,
0.094656,
-0.001775,
-0.073425,
0.016973,
0.061332,
0.206330,
0.122570,
-0.139490,
-0.113170,
0.038952,
-0.021272,
0.018334,
0.030268,
0.003508,
0.041508,
0.000494,
-0.029766,
-0.004778,
0.040480,
-0.018747,
-0.034381,
-0.028155,
0.040422,
0.006455,
-0.008337,
0.016474,
0.033968,
0.023374,
-0.029313,
0.005401,
-0.021214,
0.030162,
0.037439,
-0.019646,
0.018337,
-0.097594,
-0.071514,
-0.087580,
-0.136510,
-0.133680,
-0.042831,
-0.020646,
0.056663,
0.033046,
-0.032642,
-0.126240,
-0.044818,
-0.014271,
0.045422,
-0.040270,
0.017961,
0.030414,
0.024887,
-0.021289,
-0.003991,
-0.018616,
-0.038818,
0.008514,
-0.018799,
-0.085070,
0.017599,
-0.031034,
0.054628,
-0.007231,
-0.045607,
-0.001468,
-0.014643,
0.025523,
0.025465,
-0.047966,
-0.021939,
0.002477,
-0.012911,
-0.040066,
-0.040196,
-0.037133,
0.029959,
0.023991,
-0.022541,
0.018136,
-0.047210,
0.001648,
-0.006492,
-0.009154,
0.032362,
0.119170,
0.035608,
0.027442,
-0.009496,
0.032222,
0.055082,
0.074946,
0.061683,
-0.007730,
-0.010908,
-0.016723,
0.036281,
0.072422,
0.036688,
0.003107,
-0.006254,
0.027871,
0.084451,
0.096869,
0.099255,
0.149170,
0.073302,
0.112010,
0.138130,
0.080789,
0.156000,
0.079424,
0.097069,
0.124240,
0.109970,
0.088851,
-0.031389,
-0.105280,
-0.040065,
0.058866,
0.146200,
0.057202,
0.025175,
0.064239,
0.197820,
0.141500,
0.021736,
-0.061648,
-0.003111,
0.122740,
0.017983,
-0.138680,
-0.132120,
-0.095909,
-0.051827,
0.128720,
0.016503,
0.001381,
0.032260,
0.133660,
0.129120,
0.057893,
0.014865,
0.015692,
0.078418,
0.088030,
-0.016918,
-0.019262,
0.008965,
0.046145,
-0.008367,
-0.045880,
-0.010307,
0.037166,
0.070392,
0.040223,
0.004971,
-0.047715,
0.008998,
-0.067878,
0.010313,
0.071079,
0.170610,
0.079961,
0.121410,
-0.060595,
0.023316,
-0.090704,
-0.235700,
0.003646,
-0.033758,
0.078746,
0.014240,
0.035518,
0.147180,
0.008656,
0.127220,
0.067274,
0.105940,
0.193380,
-0.125920,
-0.043738,
0.039867,
0.055304,
0.124890,
-0.193080,
0.068419,
0.202020,
0.183130,
0.120610,
-0.148280,
0.114160,
0.011985,
0.051150,
0.139660,
0.037142,
0.056076,
0.003953,
-0.059828,
0.138800,
-0.054183,
-0.037451,
0.062763,
-0.005284,
0.071951,
0.029203,
-0.023420,
0.016079,
0.048984,
0.169290,
0.188730,
-0.008626,
-0.113240,
-0.009673,
0.182260,
0.115770,
-0.054636,
0.006838,
0.005204,
0.041798,
-0.026660,
0.000646,
0.021068,
0.015667,
0.060461,
0.038542,
0.037410,
-0.029729,
-0.002789,
0.079188,
0.116470,
0.173470,
0.072435,
0.107220,
0.160160,
-0.006846,
-0.023194,
0.016432,
0.102950,
0.110930,
-0.012624,
0.019302,
-0.061297,
0.041932,
0.119840,
0.028383,
0.005032,
-0.052294,
0.122540,
0.174700,
-0.084503,
-0.068375,
-0.002682,
0.054392,
0.153570,
-0.033354,
0.039728,
0.070132,
0.120700,
0.255550,
-0.070080,
-0.130100,
0.034667,
-0.008708,
0.130860,
-0.118510,
-0.100660,
0.071310,
-0.019082,
0.100720,
0.039770,
0.071974,
0.107450,
0.029489,
0.079580,
0.097366,
0.015826,
0.095357,
0.022056,
0.175520,
0.176380,
0.121650,
0.020228,
0.141010,
0.100750,
-0.256220,
-0.110010,
-0.037771,
-0.054946,
-0.101620,
-0.029221,
0.146580,
0.077338,
0.127960,
0.096919,
-0.056689,
0.136040,
0.089737,
0.101950,
0.176810,
0.102820,
0.088948,
-0.009099,
-0.010550,
0.015109,
-0.175520,
-0.123690,
-0.250020,
-0.117280,
-0.235590,
-0.095530,
-0.148550,
-0.008162,
0.045063,
-0.085897,
-0.099974,
-0.063231,
0.028097,
-0.009756,
-0.074318,
-0.077506,
-0.136060,
-0.042487,
-0.092103,
-0.030549,
0.030815,
-0.066414,
-0.037319,
-0.056253,
-0.007338,
0.136220,
0.011489,
-0.022373,
-0.100540,
-0.107570,
-0.070252,
0.050474,
0.118340,
0.064152,
-0.006896,
-0.071250,
-0.034748,
0.001954,
0.015794,
-0.025689,
-0.035987,
-0.056538,
-0.019409,
-0.050672,
-0.045656,
-0.040527,
0.028684,
0.108710,
0.013391,
0.102720,
-0.164810,
-0.154590,
-0.089857,
-0.067085,
0.035074,
-0.019850,
0.038428,
-0.034364,
-0.027727,
-0.112180,
0.008097,
0.012781,
-0.044999,
-0.095836,
-0.152950,
0.031529,
0.077807,
0.009035,
-0.094660,
-0.128170,
-0.007455,
0.091579,
0.070117,
0.025806,
-0.164430,
-0.098977,
-0.036471,
0.001305,
-0.051142,
-0.242900,
0.021317,
-0.001337,
-0.030903,
0.050416,
-0.021925,
-0.037120,
-0.019618,
0.017068,
0.005261,
-0.061755,
-0.008940,
-0.043814,
0.000011,
-0.034799,
-0.041027,
-0.021039,
-0.044103,
-0.025656,
-0.037829,
-0.047133,
-0.022563,
-0.023283,
-0.003369,
-0.011712,
-0.062782,
-0.089416,
-0.100240,
-0.102110,
-0.012958,
0.002007,
-0.139750,
0.021352,
-0.001363,
0.041834,
0.004697,
-0.110550,
-0.107840,
-0.195010,
-0.215630,
-0.143890,
-0.029570,
-0.120460,
-0.116530,
-0.137700,
-0.039866,
-0.332260,
-0.226980,
-0.210830,
-0.156470,
-0.129060,
-0.199440,
-0.093153,
-0.065869,
0.103790,
-0.045796,
-0.127150,
0.060494,
0.059363,
0.146590,
-0.009380,
-0.039745,
-0.061988,
0.052733,
0.084386,
-0.026682,
-0.141080,
-0.165180,
-0.163050,
-0.113840,
-0.099875,
-0.132640,
-0.088082,
-0.090531,
-0.132890,
-0.195470,
0.040920,
0.103770,
-0.030482,
0.061067,
-0.025781,
0.061050,
0.024994,
-0.053600,
0.018503,
-0.085014,
0.052257,
-0.094724,
-0.123340,
-0.078840,
-0.113780,
-0.010799,
-0.061735,
-0.076071,
-0.064899,
-0.012618,
-0.030207,
-0.010132,
-0.009978,
-0.101400,
0.000894,
-0.019298,
-0.022945,
0.000741,
-0.011249,
-0.009064,
0.007070,
0.025981,
-0.030451,
-0.017172,
0.028785,
-0.015587,
0.019166,
-0.006394,
0.020849,
0.038904,
0.005810,
0.007534,
-0.025346,
0.006131,
0.024653,
-0.010182,
0.032717,
0.007546,
-0.011979,
-0.019279,
0.095416,
0.017215,
-0.072461,
-0.076129,
-0.058527,
0.220650,
0.104670,
0.041732,
0.027296,
-0.019346,
0.267880,
0.028463,
-0.043920,
-0.039730,
0.118110,
0.308580,
-0.053808,
-0.007079,
-0.024670,
-0.012990,
0.024745,
-0.000679,
-0.063559,
-0.084303,
-0.069784,
-0.000642,
0.041683,
0.150030,
0.124900,
-0.085369,
-0.006629,
0.031750,
0.148230,
0.031319,
-0.096236,
0.019635,
0.047775,
0.004044,
-0.032224,
-0.037678,
-0.029357,
-0.067767,
0.030604,
0.014830,
-0.071888,
-0.018606,
-0.109230,
-0.102170,
-0.071247,
-0.070651,
-0.158950,
-0.167570,
-0.103620,
-0.084481,
-0.034066,
-0.136460,
-0.129120,
-0.187570,
-0.048279,
-0.006988,
-0.181900,
-0.090969,
-0.046003,
-0.089989,
-0.095994,
-0.201030,
-0.092511,
-0.038826,
-0.007933,
-0.086539,
-0.062026,
-0.031666,
0.048379,
0.024400,
0.005688,
0.070598,
0.056055,
-0.038461,
-0.028980,
0.076144,
-0.050933,
0.015894,
0.008182,
-0.072088,
0.022648,
-0.079238,
-0.016140,
0.036268,
-0.015594,
0.026364,
-0.067773,
-0.013469,
-0.120300,
-0.059152,
-0.021164,
0.136910,
0.008009,
-0.036101,
-0.005393,
0.019137,
-0.115300,
-0.042968,
-0.041417,
-0.085251,
-0.025035,
0.058067,
0.060753,
0.041232,
0.132470,
0.029092,
0.002038,
-0.010793,
0.083617,
-0.099641,
-0.074068,
0.008570,
0.001004,
0.016289,
-0.142490,
0.021179,
0.007505,
-0.053602,
-0.017830,
0.045973,
0.151900,
-0.256460,
-0.138300,
-0.000154,
0.038657,
-0.095532,
-0.062738,
-0.044950,
0.026306,
0.060698,
-0.014204,
-0.067160,
0.090968,
0.081281,
0.010268,
0.032349,
-0.071673,
0.035095,
0.072566,
0.048226,
0.081567,
-0.009946,
0.017096,
0.023588,
0.003905,
-0.050476,
0.007287,
0.031552,
-0.050878,
-0.040349,
0.019441,
-0.037441,
-0.038679,
-0.002054,
-0.004017,
-0.026462,
-0.038123,
0.031761,
-0.003854,
-0.005440,
0.041015,
0.008443,
-0.015578,
-0.072890,
-0.049414,
0.038519,
0.014439,
-0.039338,
-0.019624,
-0.028065,
0.013886,
-0.188330,
-0.095978,
-0.073106,
-0.104500,
-0.037501,
-0.126990,
-0.180310,
-0.097421,
-0.004635,
0.017414,
-0.080276,
-0.058362,
0.063166,
-0.033555,
-0.031053,
0.053815,
0.116710,
0.145090,
0.046631,
0.113800,
0.124720,
0.062423,
0.032473,
0.087890,
0.063551,
-0.041534,
-0.018392,
0.041557,
0.112420,
0.015785,
-0.110520,
-0.017612,
0.092279,
0.071165,
-0.045387,
-0.073745,
-0.000157,
0.006624,
0.038655,
-0.007370,
-0.068247,
0.055890,
-0.000222,
0.064604,
0.021000,
-0.079512,
-0.012448,
0.013127,
0.085495,
0.163420,
0.030606,
-0.020244,
0.002440,
-0.047157,
-0.003312,
0.003884,
0.036824,
0.046327,
0.031901,
0.023346,
-0.016654,
0.020628,
-0.002674,
-0.021123,
-0.004411,
0.006316,
0.054057,
-0.011465,
-0.002092,
0.023951,
-0.039986,
0.022015,
0.005025,
0.005085,
-0.035590,
0.040574,
-0.092440,
-0.027165,
0.005485,
0.042931,
0.001700,
-0.081342,
-0.072970,
0.016478,
0.013923,
-0.075260,
-0.018928,
-0.023065,
-0.097138,
-0.008126,
-0.007245,
-0.034983,
-0.016425,
-0.124550,
0.064748,
-0.049339,
-0.084461,
-0.042873,
-0.065330,
0.029353,
0.023489,
-0.041528,
-0.004045,
0.006268,
-0.032760,
-0.020010,
0.006081,
0.001302,
0.004613,
-0.020299,
-0.013702,
0.017935,
-0.016874,
-0.002079,
0.013530,
0.006321,
0.012642,
-0.037246,
-0.017224,
-0.027812,
-0.027338,
-0.000511,
-0.025027,
-0.018210,
0.012788,
-0.022060,
0.010000,
-0.009837,
0.021785,
-0.024633,
0.012490,
0.007451,
-0.019132,
-0.032952,
0.000161,
-0.008653,
0.009676,
0.034885,
0.005881,
0.031028,
0.018036,
0.023540,
0.024919,
-0.006739,
-0.025752,
-0.007436,
-0.006003,
-0.029723,
0.012410,
0.024227,
0.026191,
-0.026438,
-0.019534,
-0.027695,
0.026715,
0.011374,
-0.023460,
-0.013721,
-0.041767,
-0.007647,
0.026964,
-0.025885,
0.025826,
-0.011825,
-0.000448,
-0.015238,
0.020190,
-0.011012,
-0.030631,
-0.002092,
0.033499,
-0.011893,
-0.030678,
-0.019576,
0.000051,
-0.027984,
0.024866,
-0.022983,
-0.006992,
-0.016501,
0.030663,
0.024960,
-0.006727,
-0.026786,
-0.016082,
-0.013359,
-0.028988,
-0.009380,
-0.004785,
-0.015322,
-0.029329,
0.019431,
-0.003679,
-0.027989,
-0.021353,
-0.008800,
-0.016892,
-0.001306,
0.016185,
0.007716,
-0.025602,
0.007221,
-0.015820,
0.009730,
-0.027816,
-0.034628,
-0.017911,
0.014682,
-0.016573,
0.020560,
0.002065,
-0.021317,
-0.005914,
0.001934,
-0.037288,
-0.026298,
0.008586,
0.024369,
-0.004356,
-0.009387,
-0.016534,
-0.040485,
-0.011448,
0.015499,
-0.011507,
-0.010821,
0.025099,
0.018090,
-0.032144,
-0.034359,
0.010069,
-0.002949,
-0.018123,
-0.021652,
-0.018786,
0.008256,
0.011497,
-0.030574,
0.027745,
0.009575,
0.021529,
-0.006327,
0.011033,
-0.001041,
-0.033821,
-0.014126,
-0.041456,
0.016914,
0.009379,
0.025796,
-0.013174,
-0.023945,
0.012576,
0.006582,
-0.012852,
-0.014696,
-0.026205,
-0.031810,
-0.027186,
0.025396,
-0.006088,
-0.010563,
-0.000683,
0.025356,
-0.004044,
0.022210,
0.015322,
0.019807,
0.005919,
-0.020647,
-0.038237,
0.009764,
-0.002156,
0.017202,
-0.034181,
0.013996,
0.001296,
-0.020206,
-0.036453,
0.013838,
-0.022612,
0.002170,
-0.039206,
-0.034643,
0.016066,
-0.002536,
-0.039669,
0.001830,
-0.041095,
-0.038831,
-0.038350,
0.015381,
0.008997,
-0.025663,
-0.005581,
-0.007341,
-0.031900,
0.004610,
-0.028439,
-0.038947,
-0.039400,
0.011940,
-0.028207,
0.001566,
0.005608,
0.008986,
-0.014322,
-0.008860,
-0.041418,
-0.021267,
-0.026021,
-0.018103,
-0.010487,
0.007243,
0.011091,
-0.009507,
-0.014216,
0.005568,
0.016349,
0.000374,
-0.024005,
-0.003837,
0.022111,
-0.031311,
-0.039492,
-0.040516,
-0.020294,
-0.001363,
-0.025647,
0.001327,
-0.030992,
-0.039535,
-0.023944,
0.012679,
-0.030146,
-0.018248,
-0.039168,
-0.018348,
-0.030304,
-0.004337,
-0.030754,
0.008823,
0.019151,
0.020898,
-0.013702,
-0.006884,
-0.002074,
0.025904,
0.001427,
-0.024826,
-0.016581,
-0.041434,
-0.029695,
-0.011769,
-0.012625,
-0.004347,
-0.025578,
-0.007577,
0.010569,
0.002781,
0.006527,
-0.037464,
0.012492,
-0.037223,
-0.018909,
-0.012828,
0.015885,
0.001783,
-0.034148,
0.025297,
-0.009403,
-0.036390,
0.002300,
0.009276,
0.000728,
-0.001007,
0.020188,
-0.018577,
-0.011424,
-0.016773,
-0.031499,
-0.016638,
-0.013007,
-0.009500,
-0.031225,
-0.003900,
0.018355,
0.025431,
0.025723,
0.016333,
-0.003844,
-0.029150,
0.001327,
0.012557,
0.011741,
0.021591,
-0.009809,
-0.027133,
0.021746,
0.019941,
-0.013713,
0.015460,
0.002162,
-0.001615,
0.013531,
-0.032488,
-0.027085,
-0.017066,
-0.022062,
-0.007046,
-0.002539,
-0.041487,
0.016291,
-0.004706,
-0.005756,
0.026134,
-0.005202,
-0.036492,
0.024835,
-0.001909,
-0.003254,
0.011366,
0.012862,
-0.009801,
0.002168,
-0.037984,
-0.019357,
0.027306,
-0.006710,
0.000144,
0.023997,
0.011240,
-0.002263,
-0.009457,
-0.041765,
0.025124,
-0.024684,
-0.031643,
0.010944,
-0.007195,
-0.030680,
0.009821,
-0.032093,
0.010007,
0.019688,
-0.006954,
-0.027615,
-0.038632,
-0.020583,
-0.019327,
-0.026914,
-0.039565,
0.025316,
0.012623,
-0.018488,
0.013188,
-0.013344,
-0.000323,
0.010974,
-0.004975,
0.002267,
-0.002870,
-0.037839,
-0.018403,
-0.041833,
0.017636,
0.009349,
0.022565,
0.016448,
0.005154,
-0.028389,
-0.027039,
-0.035598,
-0.036941,
-0.041295,
-0.015177,
-0.008764,
0.005866,
-0.006269,
0.004206,
-0.005005,
-0.028289,
-0.026566,
0.014087,
0.027142,
0.014249,
0.006240,
-0.016135,
-0.016236,
-0.037551,
0.022473,
-0.028687,
0.026082,
-0.037513,
0.011592,
-0.008252,
0.020214,
-0.024726,
-0.029128,
-0.026911,
0.025731,
-0.033263,
-0.007295,
-0.009611,
-0.016285,
-0.028689,
0.014914,
-0.012086,
0.030657,
0.029545,
0.029942,
-0.011463,
-0.011112,
-0.010305,
-0.033821,
-0.003951,
-0.015808,
-0.004260,
-0.000389,
0.005671,
0.018478,
0.012180,
0.034286,
0.026383,
-0.004497,
0.027552,
0.011474,
-0.025896,
-0.033334,
-0.032703,
-0.020004,
-0.024587,
0.003957,
0.005671,
-0.029595,
0.017326,
-0.030471,
0.028192,
-0.026734,
-0.023722,
-0.028921,
0.011028,
-0.006656,
0.009456,
0.024859,
-0.018508,
-0.022179,
-0.040113,
-0.010706,
-0.027686,
0.009572,
-0.003177,
0.001960,
0.016701,
-0.020483,
0.024660,
0.010363,
0.026605,
0.025605,
-0.028842,
-0.028098,
0.008391,
0.007667,
0.008952,
-0.014884,
0.014455,
0.029785,
-0.013653,
-0.006769,
0.001299,
-0.010250,
-0.015264,
0.014637,
0.019061,
0.020067,
0.007456,
-0.011107,
-0.035660,
0.014085,
-0.039104,
-0.004548,
-0.013423,
-0.020363,
-0.001850,
0.000787,
-0.028938,
0.008468,
-0.006970,
-0.036790,
-0.034272,
-0.021836,
-0.034164,
0.020197,
-0.010733,
-0.036130,
-0.032511,
0.008478,
0.024416,
-0.032943,
0.024517,
-0.024286,
-0.009382,
0.000757,
-0.002819,
-0.000425,
-0.020091,
-0.004230,
0.017438,
0.011155,
-0.020765,
0.027638,
0.005039,
-0.002362,
0.000890,
-0.020253,
0.028853,
0.008948,
0.031029,
0.029812,
-0.000506,
-0.023837,
-0.017349,
0.012418,
-0.003805,
-0.018049,
-0.003050,
0.014483,
-0.016486,
-0.020514,
0.016976,
0.000294,
-0.020234,
0.012064,
0.003667,
0.007635,
-0.014574,
0.022821,
-0.033826,
0.027904,
-0.020199,
-0.036821,
0.019253,
-0.026421,
0.009209,
-0.016894,
-0.009126,
-0.030854,
-0.009235,
-0.018671,
0.026970,
0.009613,
-0.019282,
-0.037624,
-0.002895,
0.007210,
-0.004185,
-0.021955,
-0.037000,
0.003929,
-0.021391,
-0.035260,
0.003087,
-0.035805,
0.014168,
-0.026997,
-0.019708,
-0.020639,
-0.024853,
-0.033901,
0.022516,
-0.036010,
-0.006226,
-0.020323,
0.017599,
0.001508,
-0.028657,
-0.034816,
-0.030803,
0.008804,
-0.017188,
0.002005,
0.002183,
-0.015248,
-0.010423,
-0.031640,
0.024762,
0.026568,
0.009952,
0.004366,
-0.004399,
-0.007147,
-0.039495,
-0.006283,
0.027226,
-0.004513,
-0.029274,
0.027862,
-0.010798,
-0.009347,
-0.004153,
-0.032708,
-0.023506,
-0.002861,
0.002906,
0.027544,
0.017518,
0.025126,
0.000213,
-0.016919,
0.010740,
0.023567,
-0.040537,
0.025871,
-0.011179,
-0.019564,
0.019050,
-0.011754,
0.000959,
-0.001682,
-0.019159,
0.015281,
0.009063,
0.000975,
-0.003641,
0.021666,
0.023434,
0.015408,
0.025959,
0.014734,
0.025017,
-0.039401,
-0.020383,
-0.002204,
-0.014808,
-0.041501,
0.020987,
0.028345,
-0.002696,
-0.001057,
-0.039401,
-0.005504,
-0.031883,
-0.002635,
-0.033295,
-0.013166,
0.015474,
-0.005495,
0.016259,
-0.041080,
0.019987,
-0.021313,
-0.021918,
-0.010362,
-0.027949,
-0.009145,
-0.002303,
0.007755,
-0.023240,
-0.007431,
0.027474,
-0.037525,
-0.024890,
-0.028569,
-0.029627,
-0.019053,
0.026677,
-0.036929,
-0.029187,
-0.034114,
0.010919,
-0.002712,
-0.006395,
-0.003819,
-0.004317,
-0.028911,
0.017884,
-0.019236,
0.027192,
-0.018744,
0.013087,
-0.032162,
0.033694,
0.008693,
-0.020563,
0.007465,
-0.034805,
-0.001606,
-0.006252,
0.022419,
-0.004658,
0.023638,
-0.014593,
0.015896,
-0.033968,
0.026663,
0.023020,
-0.026274,
-0.025857,
-0.001002,
-0.033375,
-0.000277,
-0.035265,
-0.006182,
-0.033577,
0.001880,
0.025514,
-0.017741,
0.009640,
-0.015692,
-0.000061,
-0.037785,
-0.038279,
-0.035241,
-0.028384,
-0.008438,
0.014666,
0.014603,
0.016434,
-0.006187,
0.027237,
-0.008291,
-0.010319,
-0.010085,
0.006375,
-0.005999,
-0.025398,
-0.011269,
-0.003792,
0.018183,
-0.034426,
0.005608,
-0.038084,
0.024043,
-0.023990,
0.006796,
-0.029169,
-0.018069,
-0.025511,
-0.026836,
0.007982,
0.015207,
0.003828,
0.005957,
0.010116,
0.014435,
-0.041828,
-0.042104,
-0.016573,
-0.029162,
0.003946,
-0.031520,
0.005365,
-0.017806,
-0.030506,
-0.013706,
-0.001877,
-0.006110,
0.012740,
0.020840,
0.006688,
-0.008648,
0.002541,
0.009767,
-0.009404,
0.005027,
0.034069,
0.013690,
-0.033676,
0.031870,
-0.024150,
0.021993,
0.035319,
0.015714,
-0.026987,
-0.011524,
-0.000356,
0.014476,
0.025000,
0.010008,
-0.002147,
-0.006144,
0.020472,
0.015539,
-0.006903,
0.017394,
-0.029940,
-0.006175,
-0.033381,
-0.033051,
-0.003547,
0.027724,
-0.021782,
-0.033507,
0.019339,
-0.016028,
-0.011894,
0.014577,
-0.008263,
-0.035655,
-0.019521,
-0.016809,
0.037604,
-0.029756,
0.037427,
0.020377,
-0.114730,
-0.081266,
-0.033585,
0.046657,
0.054771,
0.116380,
-0.033822,
0.007516,
-0.080850,
-0.067385,
0.074954,
0.036382,
-0.024761,
-0.072478,
-0.006851,
-0.082491,
0.057213,
0.036172,
0.034022,
0.039516,
-0.003056,
-0.016558,
0.007351,
0.019383,
-0.021761,
0.015561,
0.018781,
-0.025681,
0.022575,
0.010525,
-0.016085,
0.011514,
0.014454,
0.026009,
0.000665,
-0.012921,
0.031131,
0.010293,
0.027135,
0.006346,
-0.012984,
0.036870,
0.012712,
-0.008512,
0.039835,
-0.167270,
-0.082848,
-0.089263,
-0.054534,
-0.052373,
-0.099203,
-0.031794,
-0.063852,
-0.031976,
-0.143580,
-0.112540,
-0.080532,
-0.008724,
0.034292,
0.112740,
0.026384,
-0.006389,
0.056616,
0.135300,
0.187500,
0.091064,
0.084764,
-0.003932,
0.094779,
0.083143,
0.039864,
0.074189,
0.058629,
0.025112,
0.015497,
-0.004845,
0.006709,
0.026422,
0.055338,
0.011599,
0.011644,
0.020873,
0.039163,
0.018957,
0.015361,
-0.059109,
-0.075158,
-0.009991,
-0.019973,
0.022540,
0.018157,
-0.005042,
-0.033693,
-0.010367,
-0.048800,
-0.116490,
-0.057590,
-0.048254,
0.030904,
-0.102760,
0.096271,
0.072672,
-0.000202,
-0.012683,
-0.072888,
0.161210,
0.071650,
0.014294,
-0.069459,
0.128810,
0.122920,
0.051254,
0.015535,
0.045717,
0.183400,
0.112270,
0.069459,
0.088276,
0.086518,
0.101340,
0.114580,
0.030969,
0.055028,
0.071354,
0.031714,
0.034819,
0.077449,
-0.006445,
-0.063932,
0.036836,
0.032805,
0.061977,
-0.107830,
-0.068589,
0.157810,
0.140150,
0.034881,
-0.122270,
-0.011830,
0.200520,
-0.067683,
-0.096101,
-0.157750,
0.048888,
0.084036,
0.119220,
0.102870,
-0.029979,
0.085785,
0.289080,
0.070418,
-0.016427,
-0.014915,
0.010570,
0.200680,
0.013619,
-0.033371,
0.020649,
0.007909,
0.160110,
0.140380,
0.077420,
0.084984,
0.150470,
0.132840,
0.099174,
0.147600,
0.129360,
0.085708,
0.107720,
0.155050,
0.068248,
0.046738,
0.024313,
0.109210,
0.082700,
0.068220,
0.008982,
-0.190050,
-0.026519,
-0.131790,
-0.011373,
-0.035678,
-0.069607,
0.017709,
0.089051,
0.064211,
-0.197690,
-0.235040,
-0.072751,
0.003317,
-0.051246,
-0.082899,
-0.244360,
-0.078916,
0.002424,
0.008218,
-0.033994,
0.052003,
0.127160,
-0.027943,
0.035707,
0.090058,
0.013768,
-0.081626,
-0.085573,
-0.069549,
0.002921,
-0.083210,
-0.048166,
-0.178780,
0.043304,
-0.035332,
-0.135360,
-0.049280,
0.002534,
0.062761,
-0.045379,
-0.001857,
-0.029277,
0.020018,
-0.167370,
-0.163530,
-0.064829,
0.078617,
0.102490,
0.028364,
-0.018991,
0.011584,
0.122940,
0.177990,
0.037311,
-0.100830,
-0.015692,
0.147550,
0.169010,
0.020924,
-0.110100,
0.038646,
0.161040,
0.051545,
0.097385,
-0.014694,
0.075970,
0.131400,
-0.133110,
0.012331,
0.025891,
0.046167,
-0.061089,
-0.104530,
0.168150,
0.092808,
0.026043,
-0.110460,
-0.067589,
0.127530,
-0.032860,
-0.046080,
0.040592,
-0.033729,
0.010608,
-0.016062,
0.046592,
0.050993,
-0.079166,
0.000747,
-0.015634,
0.001604,
-0.019095,
-0.088578,
-0.192480,
-0.149700,
-0.057224,
0.027103,
-0.068093,
-0.139140,
-0.154100,
-0.056373,
-0.018677,
-0.147010,
-0.081190,
-0.035722,
-0.064509,
-0.080398,
-0.107500,
-0.073537,
0.075894,
0.024801,
0.066749,
-0.046560,
0.003922,
-0.023070,
0.059290,
-0.057638,
-0.098086,
-0.060069,
-0.064430,
-0.062759,
-0.050389,
0.005024,
0.026933,
0.015189,
0.146570,
0.149910,
0.008987,
0.047775,
-0.019372,
0.060124,
0.058010,
0.171110,
0.042242,
0.073005,
0.086147,
0.074655,
0.128120,
0.032984,
0.061461,
0.094499,
0.092305,
-0.075446,
-0.043058,
-0.063975,
0.019322,
-0.007158,
-0.032887,
-0.014705,
0.021053,
0.094773,
0.066714,
-0.107830,
0.043913,
0.084842,
0.079794,
-0.008640,
-0.051240,
0.002469,
-0.037203,
0.032834,
0.050169,
0.040308,
0.027073,
0.012367,
-0.015583,
0.012766,
-0.139220,
-0.058257,
-0.043084,
-0.012375,
-0.019699,
-0.091840,
-0.001579,
-0.029017,
0.017238,
-0.056473,
0.030578,
0.066434,
0.004082,
-0.005959,
0.051852,
0.026505,
-0.076434,
-0.093264,
-0.013379,
-0.054902,
0.017504,
-0.074182,
-0.064121,
-0.034676,
-0.037765,
-0.061112,
-0.007903,
0.021684,
-0.024840,
0.048483,
-0.112510,
-0.063548,
-0.024920,
-0.037949,
-0.055194,
0.003865,
0.061566,
0.009898,
-0.057344,
-0.108330,
-0.070201,
0.019886,
0.050318,
-0.013891,
-0.075187,
-0.055691,
-0.039245,
-0.047241,
-0.041774,
-0.134580,
-0.030951,
-0.013651,
-0.042804,
-0.045690,
0.006842,
-0.018258,
-0.003868,
-0.008943,
-0.042130,
-0.017362,
-0.044917,
-0.012536,
-0.007976,
-0.023659,
-0.048197,
-0.039987,
0.005562,
-0.002171,
-0.033132,
-0.028484,
-0.015147,
-0.038112,
-0.063331,
-0.000557,
-0.024013,
0.009355,
0.029082,
-0.061654,
0.015273,
-0.044827,
0.015972,
-0.084151,
-0.041040,
0.009011,
-0.115250,
0.007029,
0.055224,
-0.042242,
0.026644,
0.016408,
-0.007560,
-0.022488,
-0.113090,
0.074333,
0.032437,
-0.028861,
-0.057857,
-0.058360,
-0.038343,
0.048831,
-0.021425,
-0.025714,
-0.068102,
-0.080128,
-0.114940,
0.006307,
0.026323,
-0.043310,
-0.099105,
-0.207940,
-0.084330,
-0.078941,
-0.116110,
0.024670,
-0.076971,
0.013162,
-0.094627,
-0.092708,
-0.014265,
-0.126570,
-0.052189,
-0.087228,
-0.008111,
-0.060246,
-0.015235,
0.143020,
0.053179,
0.084460,
0.118950,
0.006567,
0.105110,
0.115380,
0.083118,
0.098417,
-0.111350,
0.076305,
0.036870,
0.049525,
0.151000,
0.012025,
0.025052,
0.045991,
0.089203,
0.079286,
-0.018870,
0.096560,
0.108580,
0.109600,
0.084539,
0.131380,
0.012061,
-0.028759,
-0.028537,
0.013683,
-0.018803,
0.010838,
-0.038604,
0.006081,
-0.010853,
-0.020312,
-0.013692,
-0.037295,
-0.005121,
0.012278,
0.005462,
-0.038532,
-0.008930,
-0.020304,
-0.017185,
0.061986,
-0.016695,
-0.001934,
0.006041,
0.004008,
-0.014154,
0.013634,
0.044301,
0.011651,
0.028538,
0.081762,
0.076363,
0.040811,
-0.069479,
-0.054130,
0.046075,
0.019993,
-0.061489,
-0.137270,
-0.063490,
0.108960,
0.132230,
0.041603,
0.053227,
-0.009715,
0.004586,
-0.043088,
-0.020180,
-0.065820,
-0.129520,
-0.088876,
0.145360,
0.049743,
0.127670,
0.083352,
0.010555,
0.010829,
0.018386,
0.133450,
0.093802,
0.033467,
-0.049637,
-0.003205,
0.064024,
0.058105,
0.064950,
-0.119710,
-0.085687,
-0.068605,
-0.128460,
-0.142670,
-0.217470,
-0.097694,
-0.110340,
-0.091332,
-0.142110,
-0.029128,
-0.026281,
-0.042529,
-0.126140,
-0.135580,
-0.067602,
-0.004477,
-0.024972,
-0.023292,
-0.007905,
-0.046524,
-0.024443,
-0.005562,
0.005822,
0.035906,
-0.069377,
0.003705,
0.038120,
0.039311,
0.022387,
0.032826,
-0.004934,
0.016187,
0.052918,
0.065308,
0.016767,
0.017749,
0.030836,
-0.038909,
-0.021561,
0.112540,
0.125430,
0.058647,
0.061879,
0.098080,
0.135060,
0.114440,
0.119960,
0.091497,
0.057500,
0.113980,
0.077181,
0.009782,
0.031435,
0.022826,
-0.030172,
-0.053949,
0.009301,
0.043492,
0.033794,
0.042017,
0.069443,
0.067908,
-0.026934,
0.154630,
0.135110,
-0.036253,
0.075731,
0.088643,
0.181280,
0.132430,
-0.049165,
0.009503,
0.053638,
0.132280,
0.013218,
0.059462,
0.079088,
-0.075169,
-0.014348,
0.096214,
0.100330,
0.087244,
0.033099,
0.221730,
-0.116780,
-0.133380,
-0.083308,
-0.133380,
-0.110430,
-0.094314,
-0.162010,
-0.174900,
-0.043925,
-0.123510,
-0.104690,
-0.123170,
-0.083419,
-0.080430,
-0.039325,
0.000783,
-0.068295,
-0.013023,
0.001270,
0.030006,
0.027869,
0.049037,
0.013307,
0.088579,
0.025360,
-0.049984,
-0.029784,
-0.041635,
-0.069784,
0.023970,
0.008182,
-0.065401,
-0.019533,
-0.017117,
0.018993,
-0.018998,
0.013650,
0.002431,
-0.003592,
0.046302,
-0.050594,
-0.058383,
-0.007175,
0.017466,
-0.005172,
-0.065082,
-0.088000,
-0.087378,
-0.016793,
-0.000312,
0.031936,
0.112260,
-0.117360,
-0.030538,
-0.018041,
0.039138,
0.126270,
0.008130,
0.159560,
0.127010,
0.102090,
0.102830,
0.168930,
0.146660,
0.128340,
-0.179270,
0.058442,
0.165270,
0.047975,
0.082752,
-0.026238,
0.139230,
0.147590,
0.072591,
0.202770,
-0.094321,
0.026929,
0.021016,
-0.078810,
0.071011,
-0.193970,
-0.048917,
-0.020420,
-0.016918,
-0.000315,
-0.132560,
-0.000812,
0.027542,
-0.042781,
-0.048433,
-0.066039,
-0.083836,
0.009029,
-0.034218,
-0.027933,
0.060046,
0.023673,
0.034127,
0.013642,
0.118980,
-0.021828,
-0.072987,
-0.024093,
-0.072287,
-0.025851,
0.024321,
-0.012168,
0.003653,
-0.015091,
-0.024022,
-0.001323,
0.024313,
0.008956,
-0.033861,
-0.053558,
-0.028456,
0.065964,
0.034384,
0.016718,
0.001426,
-0.023022,
-0.042122,
0.016334,
0.002957,
-0.019492,
0.090931,
0.025332,
-0.044662,
-0.059689,
-0.055225,
-0.036095,
-0.066510,
-0.053266,
-0.113150,
-0.197450,
-0.013425,
-0.116270,
-0.051803,
-0.062540,
-0.202160,
-0.005361,
0.112610,
-0.000040,
-0.077207,
-0.017108,
-0.090569,
0.055076,
-0.004936,
0.013752,
-0.053407,
-0.326790,
0.075447,
0.209900,
0.286010,
0.354710,
-0.143790,
-0.220840,
-0.227920,
-0.058002,
-0.091253,
0.073834,
-0.053142,
-0.184930,
-0.030697,
-0.037548,
-0.051094,
-0.092107,
-0.011530,
0.006587,
-0.055766,
-0.009117,
0.054378,
0.018844,
-0.047735,
0.060614,
-0.021842,
-0.026434,
-0.008331,
0.006322,
-0.012492,
0.009360,
0.032127,
0.022782,
-0.027670,
-0.001782,
-0.047177,
0.038697,
0.021822,
0.019417,
-0.017082,
0.011966,
0.033025,
0.041204,
0.025388,
0.003330,
-0.025750,
0.023903,
0.023185,
-0.032697,
0.012873,
-0.042115,
-0.077760,
-0.147240,
-0.084777,
0.007396,
0.105900,
0.006235,
0.039738,
0.018450,
0.084823,
0.167370,
0.126460,
0.191080,
0.141090,
-0.019173,
0.052600,
-0.037303,
0.100540,
0.036284,
-0.133430,
0.056744,
0.036295,
0.078419,
0.076464,
-0.108790,
0.010238,
-0.023060,
0.026453,
0.046835,
0.003020,
-0.000783,
0.037443,
-0.001447,
0.014917,
0.029390,
-0.001612,
-0.002931,
0.021571,
-0.005991,
0.038091,
-0.009741,
0.017266,
0.010821,
-0.049690,
0.014537,
0.005349,
0.053958,
-0.010607,
0.025520,
-0.006154,
-0.140390,
-0.085495,
-0.117020,
-0.101630,
-0.106640,
-0.076807,
-0.050957,
-0.022758,
-0.006999,
-0.250500,
-0.219960,
-0.159750,
0.003025,
-0.060388,
-0.217100,
-0.196490,
-0.193790,
-0.035938,
-0.142130,
-0.083814,
-0.063491,
-0.058909,
-0.077922,
0.012790,
0.013601,
-0.000621,
0.137070,
0.161970,
0.106540,
-0.042596,
0.009503,
0.129150,
0.207140,
0.244220,
0.092009,
-0.020360,
0.007427,
0.268200,
0.183210,
0.025371,
-0.118370,
0.121570,
0.139590,
0.085057,
0.015476,
-0.158880,
0.108380,
0.239940,
0.125350,
-0.017007,
-0.090629,
0.034517,
-0.122400,
-0.144290,
-0.233420,
0.079070,
0.044956,
-0.039107,
-0.221820,
-0.251540,
0.041458,
0.158900,
-0.044387,
-0.022802,
-0.099424,
-0.169500,
-0.006218,
-0.132230,
-0.263200,
-0.226480,
-0.160390,
-0.159480,
-0.091184,
-0.227690,
-0.182970,
-0.052996,
0.021310,
0.058925,
-0.254630,
-0.186970,
-0.039974,
0.081840,
0.090839,
-0.017465,
-0.093801,
0.062939,
0.051028,
0.215790,
0.105190,
0.028631,
0.066613,
0.116850,
-0.108100,
-0.132730,
-0.185950,
-0.024762,
0.092084,
-0.055995,
-0.084622,
0.028837,
0.184270,
0.176780,
-0.028279,
-0.094539,
-0.141720,
0.029128,
0.116920,
-0.095471,
-0.134960,
0.038676,
0.059454,
0.084041,
-0.118790,
-0.116700,
0.034906,
-0.055383,
0.108640,
-0.069157,
-0.043617,
0.088394,
-0.072266,
0.020395,
-0.031581,
-0.073901,
0.039333,
-0.335020,
-0.172610,
-0.007639,
0.007180,
-0.033093,
-0.304090,
-0.302630,
-0.238510,
-0.000964,
-0.073016,
-0.281880,
-0.135430,
0.200380,
0.088329,
-0.319390,
-0.386990,
-0.228530,
-0.081557,
-0.229030,
-0.358580,
-0.124530,
-0.223960,
0.046149,
-0.032968,
-0.077371,
0.049930,
-0.021274,
-0.064855,
-0.099365,
0.105090,
-0.066147,
-0.122190,
-0.109940,
-0.037843,
0.153650,
-0.049314,
-0.003486,
-0.039090,
0.158580,
0.175520,
-0.068688,
-0.055304,
0.023042,
-0.017894,
0.104440,
0.168520,
-0.078031,
-0.268340,
0.201090,
0.146500,
0.056360,
-0.044983,
-0.111490,
-0.248730,
-0.077647,
-0.187100,
-0.085136,
-0.105620,
0.038262,
0.016217,
0.048814,
0.095228,
-0.009985,
-0.052429,
-0.063170,
0.129610,
-0.033600,
-0.317730,
0.023285,
-0.007815,
0.138890,
-0.013400,
-0.021643,
0.064444,
0.069021,
0.098450,
0.021796,
-0.164720,
-0.132650,
-0.082744,
0.053869,
-0.049736,
-0.089291,
-0.004873,
-0.035063,
-0.045094,
0.064199,
0.155340,
0.091768,
0.065647,
-0.065513,
0.053469,
0.035503,
0.119530,
0.096346,
0.042623,
0.035659,
0.160830,
0.095132,
0.024119,
0.244760,
0.115030,
0.049794,
-0.001482,
-0.008671,
0.006011,
-0.008039,
-0.068029,
-0.297690,
-0.171870,
-0.003058,
-0.014486,
-0.063785,
-0.189540,
0.000572,
0.021433,
0.092944,
0.182100,
0.157340,
0.056917,
-0.026768,
0.063950,
0.035590,
0.043317,
-0.090818,
0.015657,
0.144630,
0.140300,
-0.029213,
-0.113670,
-0.041132,
0.118180,
0.026189,
0.060226,
0.021672,
-0.095192,
-0.066661,
0.031786,
-0.055377,
-0.069941,
-0.118600,
-0.015597,
0.050560,
-0.030343,
-0.035287,
-0.087229,
0.032983,
0.013347,
0.030381,
-0.099279,
0.183270,
0.098035,
-0.006552,
-0.040415,
-0.012278,
0.088645,
0.060045,
-0.067377,
-0.177210,
-0.041048,
0.027407,
-0.032418,
-0.064728,
-0.162030,
-0.136930,
0.012960,
-0.119350,
-0.073432,
-0.101040,
-0.052909,
0.093764,
-0.032406,
-0.042470,
-0.005037,
0.074326,
-0.005562,
-0.045432,
-0.041137,
0.015200,
-0.012104,
0.005450,
0.018988,
0.014145,
0.063338,
0.009124,
0.021492,
0.045097,
0.018235,
0.054652,
-0.027497,
0.011114,
0.034906,
-0.003894,
0.021830,
-0.044265,
0.003733,
-0.023413,
-0.024677,
0.021855,
-0.014390,
-0.086353,
-0.145070,
-0.047014,
-0.001726,
0.033890,
0.196300,
0.065237,
0.056306,
0.271660,
0.036387,
0.022475,
0.014294,
0.121240,
0.170030,
-0.041584,
-0.052303,
0.074741,
0.118690,
0.021656,
0.054443,
-0.025595,
0.044138,
0.150340,
0.024400,
0.025829,
0.043019,
0.095155,
0.103630,
-0.043656,
-0.035106,
0.076871,
-0.014581,
0.081671,
0.053750,
0.063247,
-0.029912,
-0.008335,
0.037853,
-0.047411,
0.013284,
-0.080885,
-0.002046,
0.049013,
0.025319,
0.047762,
-0.050352,
-0.061361,
-0.051012,
0.033375,
-0.003275,
-0.127390,
0.063108,
0.126340,
0.173990,
0.093204,
-0.042681,
-0.141040,
-0.070483,
0.053881,
-0.003183,
-0.050296,
-0.090776,
-0.263340,
-0.130920,
0.016107,
-0.122130,
0.032604,
0.071797,
0.149370,
-0.011982,
-0.035837,
0.027936,
0.010741,
0.056574,
-0.022907,
-0.029012,
-0.005122,
0.033712,
-0.013180,
-0.009640,
0.013018,
-0.013134,
0.003745,
-0.046480,
0.016256,
0.029831,
0.035594,
-0.053614,
-0.018982,
0.006970,
0.008920,
0.005122,
-0.004740,
0.007993,
0.020026,
0.016460,
-0.002647,
-0.026011,
-0.003422,
0.009740,
-0.183060,
-0.128700,
0.040892,
-0.101360,
-0.181100,
-0.058023,
-0.027648,
-0.130900,
-0.015965,
-0.041571,
-0.164840,
0.063147,
0.010495,
0.123650,
0.109550,
0.037581,
-0.044995,
-0.089589,
0.004570,
0.091037,
0.066814,
0.113920,
0.128320,
-0.022733,
-0.026328,
-0.137270,
-0.141960,
-0.031858,
-0.059158,
0.061654,
-0.108940,
-0.125640,
-0.000683,
-0.029695,
0.083671,
0.030836,
-0.037752,
0.034923,
0.022792,
0.060338,
0.012659,
0.049759,
-0.017193,
0.020767,
0.052455,
-0.107310,
-0.019152,
-0.003116,
0.024706,
0.055279,
0.010061,
0.099249,
-0.038033,
0.095807,
0.018947,
0.081497,
0.137910,
0.137830,
0.026085,
0.015953,
0.017528,
-0.055369,
0.061910,
-0.048932,
-0.104880,
-0.035452,
-0.061212,
0.039011,
0.023918,
-0.109870,
0.013541,
0.003251,
0.076219,
0.023381,
-0.028584,
-0.262470,
0.134810,
0.181940,
0.086656,
0.009993,
-0.273570,
-0.126550,
-0.016935,
0.050485,
-0.345220,
0.063028,
0.114460,
0.124600,
0.051824,
0.031094,
-0.077273,
0.054589,
0.042321,
-0.032483,
0.021580,
-0.020315,
-0.071550,
0.042050,
-0.015589,
-0.119230,
-0.228290,
0.047779,
0.101660,
0.014494,
-0.104730,
0.094396,
0.009424,
0.264270,
0.099648,
-0.017553,
0.024610,
0.086076,
0.087792,
-0.017467,
-0.017801,
-0.130680,
-0.102680,
-0.054314,
-0.091084,
-0.066562,
-0.001773,
-0.117810,
0.092967,
-0.053702,
-0.138270,
0.176490,
0.127480,
0.029614,
-0.116800,
-0.037491,
-0.002650,
0.029227,
0.046434,
-0.037893,
-0.073103,
0.041238,
0.047118,
0.059340,
0.059977,
0.042975,
0.070645,
-0.076354,
-0.029233,
0.097005,
0.032981,
-0.031348,
-0.066833,
-0.084684,
0.063672,
-0.004511,
0.069836,
-0.007448,
0.013627,
0.023410,
0.006599,
-0.013066,
0.003600,
0.048462,
-0.002414,
-0.008123,
0.036188,
-0.004025,
0.045371,
0.023052,
-0.010189,
-0.023831,
-0.047442,
0.019922,
-0.025002,
-0.024182,
-0.041398,
0.039110,
0.001283,
-0.080796,
-0.065116,
0.129700,
0.026967,
0.001487,
0.041149,
-0.037842,
-0.081534,
-0.053525,
0.025638,
0.063299,
-0.022540,
-0.199450,
-0.018491,
0.054652,
-0.065692,
-0.063912,
0.084732,
0.015214,
0.082283,
0.011231,
-0.018593,
0.031402,
-0.099487,
-0.043913,
0.019583,
0.050407,
-0.021353,
-0.016563,
0.070057,
-0.019129,
0.010990,
-0.133200,
0.024370,
0.117350,
0.101820,
-0.024221,
-0.225770,
0.060822,
0.176380,
0.082525,
-0.096934,
-0.228020,
-0.232900,
0.105730,
0.017227,
-0.064273,
-0.112600,
-0.009357,
0.026757,
-0.076290,
-0.060187,
0.049047,
-0.040098,
0.002203,
0.005034,
0.050160,
-0.009647,
0.005556,
-0.022301,
0.007957,
0.032398,
-0.039211,
-0.014923,
-0.003137,
-0.009579,
-0.052098,
-0.010254,
-0.050198,
-0.029285,
0.012814,
-0.030378,
0.023190,
-0.032636,
-0.007204,
0.023053,
0.034135,
-0.095967,
-0.004609,
-0.019094,
0.111480,
0.269250,
-0.005741,
0.054956,
-0.144040,
-0.236670,
-0.325660,
-0.269610,
0.022422,
0.173030,
0.070287,
-0.027086,
-0.094681,
0.025508,
0.007872,
0.023735,
-0.121920,
-0.092381,
0.044333,
-0.070236,
-0.149410,
-0.075766,
-0.013552,
-0.034227,
0.021378,
-0.020849,
-0.028685,
-0.032803,
-0.020770,
-0.034947,
-0.029360,
-0.026191,
-0.029795,
-0.029800,
-0.036510,
-0.020343,
-0.021623,
-0.020704,
-0.005112,
-0.023931,
-0.031920,
0.020706,
-0.005860,
0.028507,
-0.037437,
-0.014040,
-0.024251,
0.001663,
-0.026488,
-0.010725,
0.004612,
-0.036802,
-0.018781,
-0.008026,
0.004743,
0.024546,
0.007470,
-0.018498,
0.014714,
-0.033667,
-0.026884,
-0.018268,
-0.034945,
-0.033758,
-0.010153,
0.018482,
0.028260,
-0.031132,
0.025231,
0.005695,
0.016191,
-0.024783,
0.007271,
-0.004906,
0.029212,
0.001055,
0.014360,
-0.033627,
-0.020307,
0.000803,
0.020607,
0.000840,
-0.034607,
-0.027507,
-0.014803,
0.008018,
-0.001337,
-0.022736,
-0.019436,
-0.031551,
-0.014858,
0.013625,
-0.029570,
-0.017155,
-0.031589,
0.010259,
-0.020756,
-0.037793,
-0.005618,
0.015161,
-0.008100,
0.019803,
0.019940,
0.016873,
-0.020041,
-0.018941,
-0.012701,
-0.007287,
0.027727,
0.022800,
-0.015524,
-0.016315,
-0.012239,
-0.000310,
0.008809,
-0.004425,
-0.035421,
-0.016678,
-0.032384,
0.000256,
0.002758,
0.024457,
-0.008232,
0.023774,
0.029380,
0.013972,
0.008271,
-0.014606,
-0.012611,
-0.014414,
0.004963,
-0.012560,
-0.027568,
-0.023276,
-0.016822,
-0.002230,
-0.004762,
-0.018865,
-0.034293,
-0.027213,
-0.041385,
0.005627,
-0.027456,
-0.007836,
0.009984,
-0.041583,
-0.046773,
-0.039615,
-0.001967,
-0.001142,
-0.001604,
-0.035245,
0.005412,
-0.001001,
-0.002042,
-0.022246,
-0.031868,
0.008179,
0.015569,
0.027805,
-0.012667,
-0.000828,
-0.032023,
-0.003969,
-0.016805,
-0.031247,
-0.038003,
-0.008733,
-0.008237,
-0.000897,
0.023175,
-0.011433,
-0.038447,
-0.010642,
-0.040032,
0.013901,
0.004405,
-0.010812,
-0.013921,
-0.028992,
-0.006250,
0.015777,
0.009298,
0.004045,
-0.036176,
0.011412,
-0.049866,
-0.018140,
-0.039318,
-0.018292,
-0.013968,
0.017779,
-0.000609,
0.019213,
-0.039524,
-0.045958,
-0.021181,
0.023301,
0.025832,
0.010950,
-0.011079,
-0.011910,
-0.030892,
-0.017541,
0.021557,
-0.012545,
-0.018629,
0.000236,
-0.014357,
-0.042424,
-0.013273,
-0.041054,
-0.006636,
-0.010742,
0.007885,
-0.006311,
-0.037209,
-0.030896,
0.020773,
-0.008304,
0.011652,
-0.018244,
0.011014,
-0.028979,
-0.019997,
-0.005696,
0.000982,
-0.018626,
0.025921,
0.003008,
-0.007143,
0.019288,
-0.003102,
-0.001532,
0.019702,
-0.009916,
0.015013,
0.001028,
0.025231,
-0.009394,
0.006291,
-0.014336,
-0.015142,
0.010402,
-0.021222,
-0.024970,
-0.021822,
0.001250,
0.026472,
-0.040862,
0.002903,
0.002054,
-0.007312,
0.018599,
-0.008934,
-0.018803,
0.012359,
-0.027442,
-0.010280,
-0.002523,
0.000637,
-0.027356,
-0.027038,
-0.011215,
-0.037375,
-0.021770,
-0.028860,
-0.046402,
-0.005110,
-0.002644,
-0.024155,
-0.026245,
-0.026856,
-0.033306,
-0.021012,
0.017040,
0.022600,
-0.017293,
-0.007567,
0.015945,
-0.024657,
0.008371,
-0.012178,
0.012208,
-0.036024,
-0.019460,
0.019926,
-0.011886,
-0.032355,
-0.024416,
0.020586,
-0.014174,
-0.032855,
-0.024816,
-0.034045,
-0.000314,
0.008782,
-0.006876,
-0.033623,
0.018215,
-0.006808,
0.022301,
-0.011221,
0.009299,
-0.004739,
-0.010803,
-0.036060,
0.025783,
-0.023135,
-0.026854,
-0.028253,
-0.024028,
-0.000947,
-0.009734,
-0.037647,
-0.028394,
-0.013032,
-0.029021,
0.023845,
0.001146,
-0.024203,
-0.017104,
-0.048486,
-0.018873,
0.008796,
-0.012443,
-0.001378,
0.018465,
0.000923,
-0.027006,
-0.022954,
0.001972,
0.004601,
0.018192,
0.020355,
0.016267,
-0.030527,
-0.035444,
-0.015860,
-0.028324,
-0.031729,
-0.032499,
-0.042873,
0.014955,
-0.016398,
-0.000213,
-0.017536,
0.002791,
-0.011754,
-0.010278,
-0.017180,
-0.016003,
-0.006024,
-0.033259,
-0.041695,
0.007040,
0.011117,
0.015867,
-0.025402,
0.028094,
0.013408,
0.005021,
-0.012932,
-0.011836,
-0.007357,
-0.008356,
-0.042004,
0.009781,
-0.018950,
-0.000781,
-0.001239,
-0.025687,
0.015266,
0.017640,
-0.006923,
0.012008,
-0.009680,
-0.022676,
-0.014438,
0.020548,
-0.036231,
0.009305,
0.017909,
-0.034129,
-0.003147,
-0.031185,
-0.035529,
-0.022073,
-0.011597,
-0.056327,
-0.006630,
0.005127,
-0.005841,
-0.029670,
-0.031254,
-0.033830,
0.003005,
0.030079,
0.002338,
-0.009825,
-0.032385,
-0.037240,
-0.040813,
0.021975,
0.026423,
-0.026419,
-0.032926,
0.007620,
0.001968,
-0.001545,
-0.029190,
0.001219,
-0.039616,
-0.026446,
0.024478,
-0.022522,
0.014254,
0.023532,
-0.001160,
-0.005390,
-0.007771,
0.010428,
0.007075,
0.016873,
0.009789,
0.006661,
-0.029352,
-0.001187,
-0.027719,
0.029156,
-0.029798,
-0.016173,
-0.010053,
-0.003580,
-0.009378,
-0.032819,
0.013749,
-0.013293,
0.017391,
-0.015576,
-0.006839,
0.000972,
-0.023970,
-0.000996,
0.002460,
0.023883,
0.018122,
-0.003612,
-0.012869,
0.004560,
0.005747,
0.022119,
0.021905,
-0.040466,
-0.019030,
-0.039628,
0.028357,
-0.020345,
-0.035677,
-0.007066,
-0.030432,
-0.038312,
0.013891,
0.018560,
-0.013812,
-0.052136,
-0.020094,
-0.039720,
-0.022011,
-0.013780,
-0.005551,
0.021709,
0.001989,
0.009172,
0.003413,
-0.001962,
-0.006796,
-0.018623,
-0.020607,
-0.019674,
-0.020972,
0.023902,
0.017516,
-0.012607,
-0.003215,
0.010533,
-0.018618,
-0.005141,
-0.036572,
-0.004519,
0.000266,
-0.039970,
-0.004045,
0.016473,
0.006562,
-0.025181,
0.002513,
0.019742,
-0.021709,
0.027786,
-0.009563,
-0.001109,
-0.016752,
-0.035423,
0.011580,
0.017070,
0.019623,
0.013070,
0.014038,
-0.027027,
0.013238,
-0.019997,
-0.012561,
-0.041607,
0.000642,
-0.014191,
0.027724,
-0.013661,
-0.021717,
-0.008617,
-0.040998,
-0.038432,
0.004565,
0.041426,
0.037408,
0.040638,
-0.010648,
-0.001383,
0.011238,
0.028146,
0.022791,
0.021200,
0.002996,
-0.012407,
0.005728,
-0.016475,
-0.028390,
-0.028550,
0.025576,
0.003534,
-0.011636,
0.020526,
-0.022399,
0.030951,
0.031571,
-0.028713,
-0.010408,
-0.035764,
-0.000281,
-0.018479,
-0.033399,
0.018672,
-0.047035,
-0.036860,
-0.004725,
-0.024892,
-0.017478,
0.013950,
-0.027186,
0.020983,
-0.022923,
0.025520,
0.013268,
0.014789,
0.012579,
-0.000349,
0.022931,
0.018466,
0.008978,
-0.008280,
0.012498,
0.022156,
0.014642,
-0.036208,
-0.031249,
-0.006573,
0.017571,
-0.016345,
0.005460,
0.024043,
0.013110,
-0.013221,
-0.006849,
-0.008130,
0.012488,
-0.011025,
-0.004492,
-0.000312,
-0.016500,
-0.008704,
0.008415,
0.017114,
-0.020746,
-0.010892,
-0.025862,
-0.004686,
0.005328,
0.014736,
0.005188,
-0.008662,
0.010572,
-0.019124,
0.000048,
-0.013622,
-0.016366,
0.004554,
-0.034028,
-0.030616,
-0.030692,
0.018356,
-0.000379,
-0.024424,
-0.010958,
-0.019281,
0.002712,
-0.033811,
0.026335,
-0.029356,
0.024924,
-0.003987,
-0.034669,
-0.005980,
0.001079,
-0.012267,
-0.030684,
0.016413,
-0.036517,
0.006278,
-0.035450,
0.000278,
0.003142,
-0.038943,
-0.016558,
0.015504,
0.026088,
-0.034018,
0.025130,
0.000487,
-0.030549,
-0.006594,
0.025554,
-0.043312,
-0.007304,
0.005191,
0.014409,
0.015044,
0.007231,
-0.011268,
-0.012914,
-0.034830,
-0.024830,
0.008103,
-0.022718,
-0.028918,
-0.000536,
-0.039432,
0.020819,
-0.032852,
0.015874,
0.003917,
-0.014740,
-0.013736,
0.002670,
-0.013372,
0.023327,
-0.010172,
-0.028590,
-0.040399,
0.016360,
0.013375,
0.000604,
-0.009024,
0.022458,
0.023359,
-0.023121,
-0.040410,
-0.011302,
-0.000078,
0.009984,
-0.030190,
-0.023479,
-0.017695,
0.019448,
-0.017243,
-0.015195,
0.019359,
-0.014557,
0.007748,
0.023694,
0.021677,
-0.004164,
-0.002124,
-0.024609,
0.021338,
0.002608,
0.001832,
0.000105,
-0.017392,
0.009102,
-0.008214,
-0.017629,
0.001535,
0.006543,
0.018190,
-0.023476,
0.022827,
-0.024420,
-0.008855,
-0.026022,
-0.013489,
-0.030547,
0.029207,
0.004351,
-0.006014,
-0.022510,
0.022016,
0.015561,
-0.008977,
-0.023573,
-0.021136,
0.011262,
-0.019040,
-0.018954,
0.014303,
0.009856,
0.017240,
0.002672,
-0.012373,
0.021340,
-0.033225,
0.010292,
0.020377,
-0.012259,
-0.010360,
-0.015588,
0.005351,
-0.029538,
0.003247,
-0.033856,
-0.040477,
0.023237,
0.001269,
0.026490,
-0.006123,
0.012704,
0.013443,
0.022701,
-0.022134,
0.007039,
0.023231,
-0.023196,
0.013325,
0.007597,
-0.040778,
-0.004895,
0.025331,
-0.028090,
-0.039443,
0.025439,
0.018711,
-0.037370,
-0.039350,
-0.029750,
-0.021409,
-0.022684,
-0.024551,
0.005072,
-0.017827,
-0.022468,
-0.023993,
0.003337,
0.006071,
-0.001670,
0.024415,
0.014288,
0.014166,
-0.005540,
-0.005012,
-0.008896,
-0.013604,
0.018157,
-0.008714,
0.004565,
-0.013839,
0.026138,
-0.011974,
0.026559,
0.015766,
-0.006175,
-0.031274,
-0.028451,
0.012125,
0.006299,
-0.003828,
-0.013595,
0.026844,
-0.022155,
-0.006812,
0.004382,
-0.025544,
-0.008813,
-0.003168,
-0.034126,
-0.036532,
-0.014415,
-0.025757,
0.021777,
-0.006481,
-0.032981,
0.001727,
-0.011831,
-0.031433,
0.003019,
-0.013589,
0.017145,
-0.003242,
-0.007989,
0.001888,
-0.002676,
-0.026424,
0.017499,
-0.042121,
-0.079009,
-0.136800,
-0.080530,
-0.111090,
-0.057178,
0.143620,
-0.008433,
-0.004749,
-0.127050,
-0.102820,
0.108250,
0.131730,
-0.081732,
-0.043960,
0.038289,
0.152140,
0.060614,
-0.255370,
-0.088477,
-0.025967,
-0.006260,
-0.111290,
-0.181250,
-0.217020,
-0.003863,
0.030620,
0.011058,
-0.031355,
-0.026250,
0.010239,
0.002821,
0.021985,
0.023934,
0.030366,
-0.037501,
-0.021767,
0.026337,
0.012539,
-0.027026,
0.013585,
-0.007651,
-0.011909,
-0.009689,
-0.028816,
-0.005651,
0.020239,
-0.039060,
-0.035831,
0.053831,
0.035813,
-0.131130,
0.026241,
-0.018655,
0.012679,
-0.084277,
-0.036757,
0.040457,
0.068347,
-0.043650,
-0.072433,
-0.012669,
0.034261,
0.030507,
-0.065869,
-0.088522,
-0.094056,
0.026575,
0.047570,
-0.097640,
-0.251480,
-0.156010,
-0.024730,
0.074869,
0.017426,
-0.084780,
0.020316,
-0.038491,
0.001105,
-0.007194,
0.002136,
0.002645,
-0.020990,
-0.025931,
0.029744,
0.044243,
-0.036465,
-0.050624,
-0.018659,
-0.045342,
-0.021637,
-0.046801,
-0.031687,
-0.039355,
0.007219,
-0.021897,
0.063080,
0.027394,
0.022218,
0.030578,
0.040116,
0.040318,
0.036327,
0.073379,
0.095328,
0.064608,
0.076226,
-0.009347,
0.013533,
0.063943,
-0.101850,
0.011954,
0.015799,
-0.035848,
0.029413,
-0.002560,
-0.031317,
-0.026998,
0.076821,
0.075127,
0.062553,
0.094069,
0.005919,
-0.107480,
-0.045344,
-0.004866,
0.006483,
0.051553,
0.090098,
0.091219,
-0.044615,
0.049348,
-0.001243,
-0.019787,
-0.020667,
-0.149990,
0.044829,
-0.089013,
-0.063383,
0.001202,
0.015380,
0.016942,
0.006359,
-0.021087,
-0.019142,
0.050682,
0.172140,
0.071941,
0.015528,
0.073546,
0.053445,
0.073489,
0.058227,
0.105280,
0.038586,
-0.039194,
0.022812,
0.030699,
0.068414,
0.102390,
0.001677,
0.032665,
-0.002464,
0.000320,
0.060662,
0.065428,
0.001428,
-0.078495,
-0.131560,
-0.003300,
0.135690,
0.180810,
-0.056609,
-0.032140,
0.097431,
0.234550,
-0.031585,
-0.005688,
0.091177,
-0.035837,
-0.038147,
0.001066,
-0.095735,
0.036212,
-0.047212,
-0.012583,
-0.053417,
-0.058937,
0.004976,
0.105010,
0.097498,
0.003398,
0.112940,
-0.116810,
-0.044990,
-0.107420,
-0.051838,
-0.019074,
-0.233190,
0.015171,
-0.019645,
-0.318650,
-0.268380,
-0.048252,
-0.021885,
0.175560,
-0.197470,
-0.020699,
-0.065514,
0.021124,
0.171360,
-0.127900,
-0.003802,
0.121470,
0.137970,
0.074143,
0.035272,
0.037237,
0.070664,
0.110330,
-0.117560,
0.199880,
0.025443,
0.191560,
0.106160,
-0.147790,
0.139580,
0.060462,
0.067178,
0.059631,
0.137300,
0.109350,
0.063635,
0.100720,
0.039570,
0.130670,
0.115450,
0.000347,
-0.095921,
-0.019820,
0.200830,
0.118640,
-0.195260,
-0.293100,
-0.076698,
0.284600,
0.098318,
-0.059162,
-0.133100,
-0.089033,
0.081578,
0.071175,
-0.109700,
-0.091589,
-0.005851,
0.024216,
-0.063818,
-0.108220,
-0.009061,
-0.041181,
0.084297,
0.036841,
-0.078618,
-0.010619,
-0.147360,
-0.027789,
0.021008,
-0.209830,
-0.177300,
-0.113620,
-0.049255,
0.006765,
-0.196610,
-0.156150,
-0.081064,
-0.139570,
-0.125320,
-0.003537,
-0.021378,
0.027696,
0.056028,
-0.097170,
-0.054626,
0.003487,
-0.053961,
0.189130,
-0.028230,
-0.033507,
0.037695,
0.041034,
0.257980,
-0.075264,
0.016104,
-0.052061,
-0.028228,
0.149660,
-0.039974,
-0.025640,
-0.158630,
0.010910,
-0.051065,
0.172770,
0.028737,
-0.007000,
-0.028517,
0.176380,
-0.084455,
-0.022696,
-0.015239,
-0.030510,
0.094849,
-0.167590,
0.034764,
-0.000687,
-0.002715,
0.003011,
-0.022825,
0.003222,
0.080097,
0.030169,
-0.114870,
0.083114,
0.052994,
0.035519,
0.042779,
-0.025197,
0.013856,
-0.032468,
-0.059862,
0.006924,
0.084640,
-0.043736,
0.011400,
0.031650,
0.023712,
-0.037076,
-0.058037,
-0.002195,
-0.019259,
0.005474,
0.061448,
-0.140350,
0.013661,
-0.068517,
-0.047588,
0.165500,
-0.098260,
-0.204220,
-0.247600,
-0.058941,
-0.082041,
-0.039611,
-0.053994,
-0.110070,
0.100350,
0.210030,
-0.091634,
-0.031216,
-0.001525,
-0.033976,
0.023455,
-0.008562,
-0.001705,
0.020365,
0.015712,
-0.069553,
-0.034508,
-0.007718,
0.078013,
0.088273,
-0.031464,
-0.033417,
-0.106620,
-0.205690,
-0.190820,
-0.283460,
-0.089098,
-0.089914,
-0.004176,
0.060344,
0.081674,
-0.037562,
-0.047498,
-0.014064,
0.033902,
0.073478,
-0.008147,
-0.087721,
-0.025174,
0.054632,
0.106690,
0.004805,
-0.059991,
-0.030652,
-0.059807,
0.005467,
0.132590,
0.116050,
0.036500,
0.030954,
0.079471,
-0.011906,
0.025804,
-0.037427,
0.003467,
-0.038971,
-0.010890,
-0.007361,
-0.013035,
-0.009333,
0.000641,
-0.024299,
-0.041596,
-0.045416,
-0.028518,
-0.039396,
0.012976,
-0.005432,
-0.031159,
0.019767,
0.005395,
-0.011478,
0.006812,
-0.045014,
-0.001478,
-0.007412,
0.032859,
-0.092662,
-0.022519,
0.094348,
0.198300,
0.120740,
0.087906,
-0.063516,
0.076414,
0.224500,
-0.043221,
-0.091873,
-0.097563,
-0.057924,
-0.048932,
-0.324290,
-0.143740,
-0.077967,
-0.095628,
-0.110120,
-0.310210,
-0.162620,
-0.192940,
-0.229710,
-0.112380,
-0.073726,
-0.049930,
-0.037474,
-0.002414,
-0.223770,
0.017187,
-0.026450,
-0.050841,
-0.019940,
-0.071851,
0.069586,
0.060079,
-0.003205,
0.017051,
-0.061204,
-0.045402,
-0.018797,
0.017331,
-0.013760,
-0.145370,
-0.101120,
0.005197,
-0.020414,
-0.023550,
0.052836,
0.083089,
0.025081,
0.073899,
0.192440,
-0.051583,
0.025592,
-0.075781,
0.013795,
0.006559,
-0.066309,
0.043600,
0.066438,
0.093854,
0.007740,
0.002379,
-0.049202,
-0.028461,
0.108130,
0.098372,
0.018778,
-0.037142,
0.029649,
-0.023300,
-0.068055,
0.038871,
-0.027048,
-0.013436,
0.054875,
-0.007019,
-0.022606,
-0.028536,
-0.004564,
0.031033,
-0.006167,
0.034093,
-0.005834,
0.006768,
-0.013041,
-0.008278,
0.051461,
-0.000300,
-0.054706,
-0.017852,
-0.052069,
-0.029990,
0.019273,
-0.036476,
0.004658,
-0.006275,
-0.010780,
-0.068773,
-0.069287,
-0.045189,
0.148330,
0.058114,
-0.092331,
0.056828,
0.073547,
0.028036,
-0.057815,
0.013603,
-0.064297,
0.099306,
0.129320,
0.073614,
0.106110,
0.058837,
0.079272,
0.052986,
0.011562,
0.124260,
-0.013960,
0.006069,
0.101660,
0.156840,
-0.101480,
-0.087531,
-0.039756,
0.001895,
-0.014984,
-0.072970,
-0.086497,
-0.132780,
-0.142710,
-0.123060,
-0.056139,
-0.100250,
-0.096027,
-0.142200,
-0.195240,
-0.079130,
-0.007555,
0.000144,
-0.012548,
-0.089240,
-0.230500,
0.010305,
-0.029703,
0.105320,
-0.018108,
-0.111780,
-0.102090,
-0.038345,
-0.153410,
-0.252570,
-0.019457,
0.023879,
0.035246,
0.018170,
-0.109550,
0.025230,
0.040598,
0.126520,
0.044248,
-0.071155,
0.029053,
0.085038,
0.112600,
0.010775,
-0.000465,
-0.127540,
0.062510,
0.100860,
-0.143340,
0.076522,
0.035042,
0.057289,
-0.026378,
0.019002,
0.032163,
0.187710,
0.158850,
0.082598,
0.026483,
0.086697,
0.165200,
0.127510,
0.091861,
-0.003007,
0.100800,
0.122880,
-0.004923,
-0.187830,
-0.060127,
0.128160,
-0.081339,
-0.088580,
-0.179770,
-0.106490,
0.031420,
0.047361,
0.009395,
0.031682,
0.181320,
0.048501,
0.098319,
0.106140,
0.110540,
0.174330,
0.006292,
0.000351,
0.122230,
-0.039665,
-0.012697,
0.175000,
-0.028430,
0.053590,
0.109020,
0.068120,
0.178640,
-0.078003,
-0.065394,
-0.094417,
-0.033574,
0.160130,
0.087162,
0.103630,
0.127730,
0.076032,
0.079449,
0.063993,
0.095115,
0.143590,
0.094903,
0.082188,
0.079738,
0.097778,
0.111990,
0.121640,
0.086192,
-0.030274,
0.048547,
0.050787,
-0.032399,
0.013634,
-0.113200,
-0.028604,
0.004457,
-0.050237,
-0.022930,
0.014729,
-0.022946,
-0.014435,
-0.029155,
0.036645,
0.017454,
-0.014679,
-0.022405,
-0.078037,
0.062524,
0.009227,
-0.028066,
-0.018450,
0.003983,
0.020588,
0.028598,
0.023842,
0.009775,
-0.011676,
-0.000029,
0.041914,
-0.004006,
-0.012875,
-0.020392,
-0.002822,
0.015063,
0.101220,
0.053982,
0.020524,
0.036690,
-0.118240,
-0.040111,
-0.031856,
-0.064003,
0.059317,
-0.053773,
-0.039765,
0.106080,
0.056777,
0.110440,
-0.092574,
0.005821,
0.201900,
0.040329,
0.104290,
-0.011400,
0.075010,
0.019225,
0.062887,
0.081919,
-0.104140,
-0.028760,
-0.009254,
-0.065972,
0.008152,
-0.078453,
-0.088697,
-0.037562,
-0.067818,
-0.008078,
0.043703,
0.003915,
0.037037,
0.024702,
-0.102980,
0.038187,
-0.000067,
0.008071,
0.019765,
-0.099705,
0.032645,
0.032011,
0.004685,
0.049689,
-0.123820,
0.003112,
-0.049691,
-0.011655,
0.024241,
0.016173,
0.030658,
0.038737,
-0.009987,
0.002274,
-0.000249,
0.030522,
-0.019989,
0.043361,
-0.006007,
0.005447,
0.053908,
0.009766,
0.031738,
0.003412,
0.011030,
0.013997,
0.029957,
-0.000500,
0.033491,
-0.018071,
0.152300,
0.048956,
0.176480,
0.114550,
0.067620,
0.111670,
0.000704,
0.017723,
-0.018960,
0.069468,
0.076985,
0.055050,
-0.025148,
0.033276,
0.063457,
0.043993,
-0.084813,
-0.118480,
-0.036615,
-0.001795,
0.138090,
-0.123880,
-0.218180,
-0.082801,
-0.123640,
-0.025972,
-0.067616,
0.003777,
-0.040932,
-0.081840,
-0.034274,
-0.026125,
-0.056299,
0.002851,
-0.085066,
-0.024263,
-0.035382,
0.025085,
0.025168,
-0.019806,
-0.049209,
-0.040327,
0.020516,
-0.011971,
-0.018679,
-0.058584,
-0.060302,
-0.037876,
-0.035313,
-0.009274,
-0.023877,
-0.002853,
-0.013235,
-0.005630,
0.006102,
0.010799,
0.018894,
-0.011423,
-0.010242,
-0.003777,
-0.004665,
-0.002671,
-0.021930,
-0.024268,
-0.021606,
0.020193,
0.024849,
-0.031027,
0.020738,
-0.009495,
-0.024441,
0.013342,
-0.004302,
-0.006866,
0.022514,
-0.070906,
-0.042716,
-0.028376,
-0.033389,
-0.005869,
-0.041047,
-0.046913,
-0.064479,
-0.034260,
-0.040777,
-0.041484,
-0.058167,
-0.040874,
-0.049399,
-0.040911,
-0.022651,
-0.071387,
-0.066749,
-0.015060,
0.001618,
-0.074534,
-0.033802,
-0.081602,
-0.054601,
-0.042359,
-0.027171,
-0.001536,
-0.028040,
0.010816,
-0.033453,
-0.027569,
0.023460,
0.023127,
-0.011205,
0.008961,
0.029898,
-0.000872,
0.030158,
-0.017899,
0.000726,
-0.023684,
0.001964,
-0.017720,
-0.026038,
0.025878,
0.038915,
-0.006164,
-0.038112,
-0.020605,
0.010448,
-0.017080,
-0.064950,
-0.074118,
-0.046841,
-0.070837,
-0.050981,
-0.026164,
-0.008920,
-0.054207,
-0.056255,
-0.047634,
-0.037091,
-0.022753,
-0.011209,
-0.022237,
0.000288,
-0.050700,
-0.042097,
-0.017351,
0.005829,
-0.059923,
-0.023465,
-0.017834,
-0.014757,
-0.049926,
-0.055752,
-0.059350,
-0.058724,
-0.073696,
-0.079047,
-0.090646,
-0.061287,
0.016234,
-0.026293,
-0.026044,
-0.099537,
-0.027405,
0.010611,
0.018097,
-0.013047,
-0.057061,
-0.018567,
-0.030609,
-0.012005,
-0.065246,
-0.077492,
-0.082457,
0.000146,
-0.044845,
-0.054850,
-0.061101,
-0.028015,
-0.008194,
0.009852,
-0.020717,
-0.090738,
-0.074074,
-0.028526,
-0.050132,
-0.023049,
-0.071742,
-0.073884,
-0.042916,
-0.011114,
-0.034144,
-0.020819,
-0.050609,
-0.053028,
-0.034908,
-0.025540,
-0.081294,
-0.030289,
-0.065051,
-0.009002,
-0.015005,
-0.030996,
-0.050556,
-0.060534,
-0.045731,
-0.029246,
-0.024701,
-0.048278,
-0.047278,
-0.054938,
-0.015659,
-0.026050,
-0.041591,
-0.041249,
-0.053059,
-0.024339,
-0.005266,
0.010059,
-0.032237,
-0.060229,
-0.085316,
0.011046,
-0.016406,
-0.040961,
-0.080971,
-0.041821,
-0.005202,
-0.069761,
-0.042659,
-0.079706,
-0.084817,
-0.083274,
-0.102680,
-0.075605,
-0.027648,
-0.014667,
-0.076175,
-0.088587,
-0.028754,
-0.070774,
-0.050842,
-0.095582,
-0.042972,
-0.052227,
-0.021821,
-0.016013,
-0.115250,
-0.061119,
-0.041654,
-0.034573,
-0.044408,
-0.050868,
-0.057554,
-0.041921,
0.030706,
0.009728,
-0.047751,
-0.015702,
-0.033985,
0.000408,
-0.049692,
-0.069875,
-0.092494,
-0.072570,
-0.010006,
-0.007189,
-0.065848,
-0.047903,
-0.066472,
-0.030927,
0.004165,
-0.075361,
-0.007827,
-0.063316,
-0.019730,
-0.056876,
-0.032870,
-0.051005,
-0.056323,
-0.070285,
0.027409,
-0.070530,
-0.084541,
-0.032129,
0.000481,
-0.001089,
-0.058627,
-0.071950,
-0.032420,
-0.027670,
-0.055362,
-0.060565,
-0.074409,
-0.054315,
-0.033835,
-0.029990,
-0.036754,
-0.055123,
-0.040383,
-0.062254,
-0.012940,
-0.000864,
0.017685,
0.019827,
-0.014766,
-0.061579,
-0.044904,
-0.067010,
-0.033893,
-0.012604,
-0.060577,
-0.050691,
-0.065385,
-0.032816,
-0.011550,
-0.002923,
0.004288,
0.017625,
-0.024520,
0.035437,
0.024652,
0.038499,
-0.018242,
0.024186,
-0.035264,
-0.002831,
-0.017498,
-0.010685,
-0.030626,
0.031036,
-0.062320,
0.027661,
-0.082005,
-0.059079,
-0.083990,
0.002547,
-0.078273,
-0.059373,
-0.032640,
-0.014334,
0.012123,
-0.091122,
-0.079180,
-0.062487,
-0.059314,
-0.054938,
-0.043212,
-0.018625,
-0.010763,
-0.000520,
0.004174,
-0.036094,
-0.045108,
-0.024798,
-0.015312,
-0.004093,
-0.029790,
-0.027272,
-0.032130,
-0.032619,
-0.024389,
-0.058091,
-0.116040,
-0.058664,
-0.006248,
0.002608,
-0.035484,
-0.032317,
-0.015008,
-0.013109,
-0.074374,
-0.054430,
-0.030833,
-0.019059,
-0.037430,
0.023603,
-0.027043,
-0.079687,
-0.052275,
-0.009984,
0.024839,
-0.040769,
-0.026551,
-0.045954,
-0.009802,
0.012152,
-0.048498,
-0.008125,
-0.029352,
-0.030661,
0.023573,
0.023292,
-0.041825,
-0.036946,
-0.008078,
0.019791,
-0.047157,
-0.076931,
-0.018151,
-0.013291,
0.041844,
-0.061643,
-0.060691,
-0.012002,
-0.053386,
-0.066237,
-0.089212,
-0.064683,
-0.016368,
0.009957,
0.000286,
-0.030682,
-0.005325,
-0.040130,
-0.028948,
-0.037395,
-0.049497,
-0.081081,
-0.019290,
-0.055037,
-0.061095,
-0.080436,
-0.010055,
-0.060701,
-0.038678,
-0.068071,
0.039219,
-0.013673,
0.021678,
0.012927,
-0.003299,
-0.038082,
-0.039896,
-0.017850,
0.006228,
0.026498,
0.012788,
-0.000656,
-0.019301,
-0.003780,
0.017919,
0.034728,
0.022281,
0.023211,
-0.004175,
-0.003982,
0.030359,
-0.019489,
-0.029426,
0.007018,
-0.016547,
-0.047693,
-0.021556,
-0.026606,
-0.010135,
-0.033843,
-0.065857,
0.018707,
-0.049179,
-0.005001,
-0.012683,
-0.014131,
-0.038537,
-0.001816,
-0.030311,
-0.048910,
-0.003570,
0.002429,
-0.035134,
-0.073985,
-0.002248,
-0.064393,
-0.012602,
-0.051260,
0.001744,
-0.031969,
-0.036910,
-0.033768,
0.002524,
0.005945,
-0.051623,
-0.031175,
-0.018345,
-0.044435,
0.000590,
-0.038639,
-0.028923,
-0.015711,
-0.010845,
-0.008016,
-0.039224,
-0.001491,
-0.022033,
-0.001105,
-0.074873,
-0.016102,
-0.040028,
-0.055365,
0.010990,
0.002122,
-0.038641,
-0.024284,
0.012271,
-0.007467,
-0.031077,
-0.008151,
0.034765,
-0.047572,
-0.011106,
-0.028979,
-0.007935,
-0.019252,
-0.046036,
-0.008122,
-0.008994,
-0.048312,
-0.009336,
-0.046284,
-0.013065,
0.005559,
-0.033133,
-0.044457,
-0.085045,
-0.003713,
-0.051302,
-0.032841,
-0.009307,
0.010049,
0.030866,
0.029851,
-0.009550,
0.014486,
-0.035314,
0.018944,
0.031426,
-0.009914,
0.001142,
0.000997,
0.025885,
0.031458,
-0.013224,
0.017690,
0.019326,
-0.009252,
-0.001315,
0.001419,
-0.032743,
-0.032821,
-0.029276,
0.007957,
-0.011621,
-0.054040,
-0.025694,
-0.012321,
-0.026303,
-0.030178,
-0.031396,
0.054067,
-0.004107,
-0.006667,
0.022894,
-0.010931,
0.033783,
0.006236,
-0.014028,
-0.037621,
0.032920,
0.049120,
-0.007487,
-0.036337,
-0.035977,
-0.062446,
-0.037544,
-0.037094,
-0.050399,
-0.064869,
-0.063193,
-0.036828,
0.016223,
-0.045042,
-0.060963,
-0.031733,
-0.024728,
-0.000667,
-0.061252,
-0.091296,
-0.014932,
-0.059871,
-0.024760,
-0.044604,
-0.019207,
-0.039226,
0.000035,
0.010198,
-0.041466,
-0.044426,
-0.033257,
0.010236,
0.040499,
0.013751,
-0.006531,
-0.056969,
-0.101110,
-0.086459,
-0.029767,
-0.065630,
0.001694,
-0.077392,
-0.056086,
-0.084599,
-0.070019,
-0.059324,
-0.018468,
-0.038005,
-0.023944,
-0.001963,
0.007526,
-0.052900,
0.013343,
-0.000865,
-0.050633,
-0.054104,
-0.008557,
-0.027578,
-0.010210,
-0.075576,
-0.029678,
-0.013392,
-0.006034,
-0.019905,
-0.034781,
-0.015857,
-0.003552,
-0.000989,
0.001265,
0.020610,
-0.047093,
-0.002599,
-0.039336,
0.028298,
-0.036555,
-0.006410,
-0.008054,
-0.013637,
0.003545,
0.012958,
-0.001593,
-0.002292,
-0.003125,
-0.013678,
-0.036329,
-0.011040,
-0.068970,
-0.031500,
-0.030433,
-0.026227,
-0.021183,
-0.052598,
-0.027279,
0.010958,
-0.020204,
-0.018442,
-0.033219,
-0.042741,
0.022169,
0.002838,
0.025612,
0.018464,
0.003845,
-0.034852,
-0.046536,
-0.078622,
-0.077099,
0.010168,
-0.017923,
-0.013012,
0.004344,
-0.044248,
-0.105600,
-0.042413,
-0.056963,
-0.053113,
-0.042845,
-0.040700,
-0.078186,
-0.047286,
-0.083671,
-0.055225,
-0.022560,
-0.054429,
-0.095087,
-0.044477,
-0.028482,
-0.065484,
-0.090461,
-0.091924,
-0.089935,
-0.061287,
-0.049888,
-0.030389,
-0.070218,
-0.021762,
-0.023273,
-0.001077,
-0.017523,
-0.032759,
0.001175,
-0.001396,
-0.006367,
-0.013629,
-0.033875,
-0.012460,
-0.010791,
-0.018015,
-0.022542,
-0.031524,
0.031526,
0.000099,
-0.004755,
-0.007621,
0.006810,
0.006548,
0.015274,
-0.017489,
-0.029018,
-0.030235,
-0.024823,
-0.053619,
0.017611,
0.060562,
-0.048111,
0.013024,
0.056736,
-0.036760,
-0.026314,
0.012536,
0.025261,
-0.092306,
-0.037889,
-0.021779,
-0.085970,
-0.025675,
-0.032699,
-0.040363,
-0.062046,
-0.065829,
-0.064152,
-0.009456,
-0.013834,
0.008238,
-0.024623,
-0.061389,
-0.041559,
-0.003057,
0.001061,
0.000992,
-0.051402,
-0.085955,
-0.028005,
-0.013831,
-0.034874,
-0.068749,
-0.034330,
-0.019320,
-0.044628,
-0.019768,
-0.066955,
-0.024417,
-0.033320,
-0.057656,
-0.006868,
-0.090668,
-0.038708,
-0.071762,
-0.000712,
-0.029079,
-0.022350,
0.010287,
-0.007356,
-0.012076,
-0.035537,
0.034676,
0.028842,
0.026846,
0.030676,
-0.027457,
-0.012091,
-0.003281,
-0.004347,
-0.020628,
0.012722,
0.025761,
0.006523,
-0.004588,
0.016186,
-0.001615,
0.032485,
0.029924,
-0.008675,
-0.012988,
-0.022518,
-0.063494,
-0.056298,
-0.016937,
-0.005352,
-0.007102,
-0.084683,
-0.026620,
-0.075462,
-0.074347,
-0.068360,
-0.086484,
-0.017982,
-0.022817,
-0.031183,
-0.045820,
-0.045186,
0.022103,
-0.042299,
-0.041282,
-0.057663,
-0.037921,
-0.033814,
-0.007455,
-0.052264,
-0.021733,
0.001128,
-0.027061,
-0.010882,
0.016348,
-0.006023,
0.009603,
0.009778,
-0.030709,
-0.035142,
-0.011513,
0.011635,
0.030290,
0.020500,
-0.006424,
0.006561,
-0.019650,
-0.026907,
-0.041323,
0.003259,
-0.005938,
-0.006810,
0.017577,
-0.035707,
-0.032615,
-0.020682,
-0.014510,
-0.003370,
0.010146,
-0.013731,
-0.016606,
0.018464,
0.008878,
0.010851,
-0.034019,
0.005424,
-0.000310,
0.012919,
-0.002923,
-0.033820,
-0.002249,
0.001713,
0.024292,
-0.003789,
0.024933,
0.002994,
-0.010070,
0.016126,
-0.021747,
0.031841,
-0.020388,
-0.008244,
0.018058,
0.016998,
-0.030474,
-0.011983,
-0.013072,
-0.012027,
-0.006094,
-0.011057,
-0.012659,
-0.028444,
-0.033822,
0.005919,
0.017469,
0.001342,
-0.013543,
0.002323,
-0.000775,
-0.038883,
-0.030296,
0.025467,
-0.033135,
-0.027135,
-0.015736,
-0.027341,
0.013415,
0.043328,
0.026618,
0.000881,
0.008834,
-0.029776,
0.013237,
-0.021585,
0.004644,
0.008807,
0.018039,
-0.001682,
-0.033422,
-0.022669,
0.021686,
0.032597,
-0.003216,
-0.014605,
0.018069,
0.009110,
-0.004779,
-0.011462,
-0.027861,
0.023144,
-0.019742,
0.007957,
0.004647,
-0.038870,
0.010025,
0.002798,
-0.002790,
-0.032790,
-0.034045,
0.018530,
-0.013124,
-0.035057,
0.007160,
0.006777,
0.014799,
-0.031612,
-0.015345,
-0.027339,
0.005995,
-0.037602,
-0.034560,
-0.013679,
0.016872,
-0.012814,
-0.042251,
-0.032389,
0.024441,
-0.034579,
-0.029590,
0.022609,
-0.008413,
0.004574,
0.008696,
-0.050066,
-0.009475,
-0.023203,
-0.001468,
-0.010750,
-0.034696,
-0.022499,
-0.017803,
-0.020846,
0.028220,
-0.016413,
-0.016932,
0.018143,
0.026174,
0.027661,
0.003074,
0.015119,
0.022682,
-0.024905,
0.005596,
0.006845,
-0.015253,
-0.015242,
-0.005074,
-0.001453,
-0.018636,
0.007694,
-0.042492,
0.009596,
-0.013290,
0.029853,
0.001924,
-0.003115,
0.017531,
-0.015240,
0.013868,
0.020805,
-0.007808,
-0.020387,
-0.022607,
-0.011535,
-0.027445,
-0.016135,
-0.030231,
0.002446,
-0.013746,
-0.036022,
0.025182,
-0.017320,
-0.002065,
-0.018170,
-0.031819,
-0.015454,
-0.004049,
-0.006024,
-0.049091,
-0.056029,
-0.023471,
-0.010468,
-0.014063,
-0.024300,
-0.049541,
-0.026028,
-0.023308,
0.000146,
-0.015743,
-0.006651,
0.024685,
-0.048066,
-0.007197,
0.014140,
-0.001927,
0.013962,
-0.022529,
-0.035344,
-0.008271,
0.006164,
-0.023667,
-0.013797,
-0.055217,
-0.017819,
-0.005198,
-0.044111,
0.004461,
-0.018830,
-0.007706,
-0.026803,
0.003411,
0.034208,
-0.023094,
-0.032202,
-0.011038,
-0.041164,
-0.009887,
0.008821,
-0.000980,
-0.002239,
0.004512,
-0.007247,
-0.005208,
0.022136,
-0.028230,
-0.027396,
-0.021637,
-0.018303,
-0.002355,
-0.034359,
-0.043732,
-0.015318,
-0.040672,
-0.021075,
0.004485,
-0.005311,
-0.013985,
0.036627,
0.001677,
-0.026481,
0.006687,
-0.005702,
-0.029663,
-0.010271,
-0.028349,
0.014413,
0.006814,
-0.000166,
0.026736,
0.015800,
-0.028498,
-0.043580,
0.000683,
-0.038188,
0.010016,
0.028268,
-0.024732,
0.016894,
-0.037497,
0.003843,
0.024971,
-0.029868,
0.018404,
-0.013449,
0.023634,
0.000867,
-0.002933,
-0.017518,
-0.010453,
-0.018570,
0.000474,
0.024447,
-0.029799,
0.029581,
0.029485,
-0.009760,
0.005767,
-0.009220,
-0.005974,
-0.002953,
-0.042542,
0.009416,
0.005799,
-0.040569,
-0.003970,
0.004363,
0.005139,
-0.034055,
-0.006548,
0.005857,
-0.018622,
-0.028638,
-0.004035,
0.007731,
-0.051367,
0.007862,
-0.010047,
-0.010195,
-0.012743,
0.002484,
0.009222,
-0.027720,
-0.008330,
-0.017837,
0.020384,
-0.000664,
-0.010657,
0.016106,
0.011299,
-0.000433,
-0.047199,
-0.015524,
-0.018908,
-0.010753,
-0.007590,
-0.014491,
-0.033925,
-0.016960,
0.002301,
0.025502,
-0.032602,
-0.019109,
-0.026424,
-0.008950,
0.018163,
-0.011434,
-0.032267,
-0.039456,
-0.032377,
-0.027480,
-0.001138,
-0.021314,
0.003983,
-0.022779,
-0.040682,
-0.011334,
-0.022100,
-0.009095,
0.006225,
0.010290,
-0.007501,
0.010326,
0.012315,
-0.029306,
-0.013453,
0.006785,
0.001144,
-0.015492,
-0.001480,
0.005335,
0.005188,
0.007214,
-0.033840,
-0.012636,
0.021995,
-0.008466,
-0.037590,
0.019246,
0.009024,
-0.003958,
-0.007794,
0.008895,
-0.025512,
0.021540,
-0.020941,
0.006932,
0.005093,
-0.028057,
-0.038492,
-0.032740,
-0.017614,
-0.017029,
-0.014126,
0.006965,
-0.001527,
0.000918,
-0.023473,
-0.039021,
-0.014824,
-0.043524,
-0.038119,
-0.020688,
-0.007287,
-0.041152,
-0.000929,
-0.035503,
0.001050,
-0.037141,
0.015470,
-0.026323,
-0.015334,
-0.029363,
0.014253,
-0.027548,
-0.032202,
-0.020594,
-0.002359,
0.016196,
-0.001650,
0.006146,
0.018863,
-0.024133,
-0.018530,
-0.028958,
-0.024974,
-0.020905,
0.012282,
-0.010897,
-0.027747,
-0.014985,
0.001599,
0.022678,
0.007302,
-0.014511,
0.035933,
-0.027419,
0.009951,
0.012884,
0.007755,
-0.028282,
0.001574,
0.030761,
0.019341,
-0.012565,
0.026889,
-0.000398,
0.020252,
0.019859,
0.000107,
-0.014137,
0.011363,
0.019816,
0.010793,
-0.028216,
-0.033389,
0.011803,
-0.024439,
-0.007546,
0.011815,
-0.002577,
-0.026645,
0.009709,
0.010637,
-0.017568,
-0.006933,
-0.027570,
0.023793,
-0.029386,
0.001105,
0.015651,
-0.025922,
-0.004590,
-0.000578,
0.018987,
-0.005587,
-0.007251,
-0.051073,
-0.021210,
0.000520,
-0.000425,
-0.004868,
0.001748,
-0.045301,
-0.029277,
-0.017460,
0.004656,
-0.012945,
-0.034511,
0.019309,
-0.012087,
0.031234,
0.013570,
0.006736,
0.028431,
-0.041528,
0.013965,
0.002389,
0.003218,
-0.011758,
0.030180,
0.009650,
-0.022209,
-0.054183,
-0.007900,
-0.033723,
0.004055,
-0.029559,
-0.024735,
0.022341,
-0.007917,
-0.020246,
-0.027841,
0.037126,
0.012777,
-0.001810,
0.014728,
-0.027244,
-0.034472,
-0.042151,
-0.015465,
0.045672,
-0.009654,
0.026825,
0.000886,
0.030121,
0.033330,
0.005664,
-0.003662,
-0.035240,
-0.041008,
-0.028580,
0.038158,
-0.002313,
0.002726,
-0.036735,
-0.005621,
-0.040194,
-0.002786,
-0.037181,
-0.011536,
0.026539,
0.002692,
-0.028534,
0.024931,
0.019074,
0.023933,
-0.002972,
-0.026767,
-0.008894,
-0.018976,
-0.034326,
0.005035,
-0.007363,
-0.017041,
0.013286,
-0.019775,
-0.038991,
0.000224,
-0.012262,
-0.029890,
-0.019970,
-0.030578,
-0.029063,
-0.022900,
-0.005189,
-0.018102,
-0.031811,
-0.042680,
0.002573,
-0.036878,
-0.044187,
0.020808,
-0.031255,
0.022874,
-0.034838,
-0.025178,
-0.032940,
-0.002519,
0.004940,
0.005993,
0.012771,
0.005236,
-0.001490,
-0.043370,
-0.039777,
0.004319,
-0.033302,
0.001785,
0.005245,
0.004041,
-0.013623,
-0.000105,
-0.026416,
0.028829,
-0.011616,
-0.030948,
-0.003696,
-0.008647,
0.008582,
-0.019383,
-0.023235,
0.024611,
-0.009966,
-0.029971,
-0.023504,
-0.023640,
-0.013198,
0.006260,
-0.032658,
0.012818,
-0.008326,
0.023785,
0.024872,
0.012659,
-0.020948,
-0.012317,
-0.020950,
0.001168,
-0.033374,
-0.018703,
-0.031931,
0.004895,
-0.023046,
-0.036757,
-0.001942,
-0.014599,
0.005251,
0.016456,
-0.036119,
-0.029269,
0.001528,
0.001193,
0.013232,
0.028029,
0.009080,
-0.024354,
0.018201,
-0.011387,
-0.027714,
-0.024724,
0.019121,
0.024217,
-0.023399,
-0.029325,
-0.022119,
0.025626,
0.010804,
0.018529,
-0.019588,
-0.003141,
-0.031175,
0.004048,
-0.025530,
-0.024267,
-0.011179,
-0.026700,
0.010552,
-0.041501,
-0.036485,
0.006204,
-0.023880,
-0.020167,
0.027762,
-0.036787,
-0.027837,
0.000375,
0.020727,
-0.029391,
0.023434,
0.020412,
0.011179,
-0.019537,
-0.010824,
-0.031969,
0.014586,
0.020919,
-0.040609,
-0.022117,
0.026656,
0.030214,
0.009447,
0.026047,
-0.040260,
-0.000637,
-0.021486,
0.016053,
-0.023696,
0.000185,
-0.022903,
0.019514,
0.031689,
0.024949,
0.021478,
-0.020393,
-0.011944,
-0.022047,
-0.036417,
0.011808,
-0.011513,
-0.018746,
-0.036806,
-0.012519,
-0.041513,
0.001705,
-0.033132,
0.015671,
-0.030922,
0.021570,
-0.027787,
-0.029001,
0.001246,
-0.049751,
-0.043642,
-0.051490,
-0.030080,
0.026428,
-0.001700,
0.003016,
-0.006957,
-0.025999,
-0.005413,
-0.021792,
-0.008576,
-0.017542,
0.011869,
-0.008017,
0.017763,
-0.051037,
-0.018221,
-0.022649,
-0.036314,
-0.002047,
-0.005643,
0.016033,
-0.038408,
0.000231,
-0.010075,
-0.027531,
-0.020778,
-0.006212,
0.012694,
-0.027210,
-0.006404,
-0.010552,
-0.012935,
0.009769,
-0.023944,
-0.014606,
-0.028080,
-0.013855,
-0.007022,
-0.008586,
-0.003312,
-0.037564,
0.027316,
0.004901,
0.017954,
-0.023276,
0.025989,
0.006601,
0.017158,
0.024314,
0.002028,
0.013526,
0.020876,
-0.020706,
0.022766,
-0.012238,
-0.000939,
0.031012,
0.009375,
0.037123,
-0.016152,
0.026433,
-0.009429,
-0.029727,
0.006137,
0.017889,
0.003922,
0.008816,
-0.027231,
-0.020609,
-0.016255,
0.031997,
-0.008635,
0.019785,
-0.031221,
-0.023456,
0.031050,
-0.022839,
0.015554,
0.002122,
-0.006233,
0.003927,
0.004472,
-0.010591,
-0.045010,
0.011873,
0.023256,
-0.032137,
0.020426,
-0.024114,
-0.005550,
0.011017,
-0.041689,
-0.006168,
0.004012,
0.013183,
-0.032348,
-0.016451,
0.014822,
-0.011028,
0.009768,
-0.012879,
0.009906,
-0.002417,
-0.035330,
-0.040086,
-0.024215,
0.007073,
-0.052499,
-0.037330,
-0.040011,
-0.017186,
-0.029819,
-0.004930,
-0.058998,
-0.050005,
-0.034918,
-0.005697,
-0.038853,
-0.041333,
-0.032323,
-0.024506,
-0.035247,
-0.045322,
-0.008379,
-0.009503,
0.021980,
-0.012606,
0.003092,
-0.024062,
0.010244,
-0.001393,
-0.036087,
0.013548,
-0.006244,
0.017473,
-0.006511,
-0.003632,
0.005884,
-0.004044,
-0.013789,
-0.019571,
-0.033947,
0.028795,
-0.035872,
-0.001450,
0.024913,
0.013976,
-0.029816,
0.007048,
-0.045861,
-0.003073,
0.023141,
-0.003849,
-0.000945,
-0.013885,
0.013526,
-0.020348,
-0.003952,
0.003510,
0.019210,
0.021437,
0.002116,
-0.013220,
-0.032815,
0.004837,
-0.019381,
-0.039612,
-0.037211,
-0.015525,
-0.007307,
0.033150,
0.000050,
0.009496,
-0.014291,
-0.012088,
0.008153,
0.031822,
0.036906,
0.022922,
0.033540,
0.010882,
0.011977,
0.007441,
-0.002462,
-0.022102,
-0.003938,
-0.001207,
0.003765,
0.023017,
-0.014485,
0.034495,
0.023843,
0.037528,
-0.020205,
-0.025855,
0.002638,
-0.025163,
-0.005261,
0.018246,
0.019167,
-0.031167,
-0.014153,
0.023880,
0.050040,
0.001551,
-0.041075,
-0.005580,
-0.018031,
-0.004644,
-0.018657,
-0.013899,
-0.006254,
-0.015539,
0.038424,
-0.033872,
-0.012729,
-0.051640,
-0.010607,
0.033984,
0.037477,
-0.002333,
0.029122,
0.005032,
0.004956,
-0.017982,
-0.027329,
-0.033827,
0.003458,
-0.021645,
0.010065,
0.014249,
-0.003265,
-0.068185,
0.015061,
-0.000074,
-0.029350,
-0.024740,
-0.075112,
-0.027620,
-0.039775,
0.004756,
-0.011588,
-0.045908,
-0.011500,
0.012996,
-0.014123,
-0.042962,
-0.028641,
-0.037094,
-0.009404,
-0.015326,
0.008504,
0.026916,
-0.035116,
-0.031952,
-0.047595,
-0.003755,
-0.002552,
-0.033890,
-0.021822,
0.011417,
-0.046989,
-0.053727,
0.019856,
-0.016763,
-0.008052,
-0.027721,
-0.036789,
-0.005661,
0.031525,
-0.021502,
0.007615,
-0.028640,
-0.019125,
0.003826,
-0.030647,
-0.028486,
-0.012760,
0.013753,
-0.017140,
-0.040243,
-0.025943,
-0.000125,
0.021310,
0.026351,
0.012461,
0.002132,
-0.012741,
-0.004727,
-0.000404,
0.014732,
-0.032637,
-0.024042,
-0.047813,
-0.040143,
0.010696,
-0.005331,
-0.017794,
-0.041464,
0.016786,
-0.009360,
0.003479,
-0.005289,
-0.026385,
-0.036004,
-0.029467,
-0.003577,
-0.005503,
-0.019911,
-0.038504,
0.032594,
-0.017608,
-0.022990,
-0.016407,
-0.009985,
-0.044376,
0.011576,
0.023831,
-0.028961,
-0.018926,
-0.010297,
-0.051314,
-0.010801,
0.017115,
0.006335,
-0.016603,
0.010224,
-0.013145,
0.002132,
-0.047347,
0.003877,
-0.041399,
-0.046682,
-0.026414,
-0.038085,
-0.027227,
-0.020418,
-0.027048,
-0.012620,
-0.041658,
-0.051122,
-0.055556,
-0.049568,
-0.016127,
-0.019137,
-0.021825,
-0.057221,
-0.060564,
0.015103,
-0.028158,
-0.032289,
-0.013566,
-0.040427,
-0.042111,
-0.034041,
-0.040384,
0.009740,
-0.014216,
0.001493,
-0.004035,
-0.059357,
-0.023428,
-0.015295,
0.012963,
-0.028277,
-0.036088,
-0.014724,
-0.036929,
-0.018773,
0.011250,
-0.026755,
-0.016357,
-0.060418,
-0.008445,
-0.021270,
-0.007869,
-0.028645,
-0.048994,
0.003880,
-0.038508,
-0.027503,
0.001592,
-0.027168,
-0.039553,
-0.003275,
-0.052712,
0.035222,
-0.002955,
-0.071897,
-0.064980,
-0.044917,
-0.002015,
0.002668,
0.014395,
-0.071887,
-0.038516,
0.033918,
-0.015543,
-0.054265,
0.000054,
-0.050485,
-0.012810,
-0.055945,
-0.053017,
-0.016880,
-0.036359,
-0.011525,
0.016703,
-0.026700,
-0.047687,
-0.045153,
0.015230,
0.012934,
-0.010403,
0.037062,
-0.019598,
-0.031332,
-0.007928,
-0.005873,
-0.007321,
0.036537,
-0.015635,
-0.025198,
-0.001318,
-0.034686,
-0.008378,
-0.002982,
0.007149,
-0.030985,
-0.050241,
-0.046571,
-0.063123,
-0.016035,
-0.004514,
-0.030459,
-0.053492,
0.003437,
-0.007458,
-0.045599,
-0.051992,
-0.067567,
-0.050871,
-0.046343,
-0.025595,
0.001106,
-0.050312,
-0.047547,
-0.041381,
-0.037040,
-0.004118,
0.022399,
0.000665,
-0.003099,
0.019380,
0.023840,
-0.006988,
-0.051138,
-0.053146,
-0.004570,
-0.047496,
0.007614,
-0.048943,
-0.007347,
-0.027845,
-0.010564,
-0.021780,
-0.043770,
-0.005004,
-0.013343,
-0.045393,
-0.015304,
-0.053557,
-0.020865,
0.018292,
0.017606,
0.011966,
-0.018526,
0.017955,
-0.032119,
-0.001964,
0.030383,
-0.031432,
0.000598,
0.010168,
0.010152,
-0.022734,
-0.038655,
0.025912,
-0.012148,
0.007064,
-0.002598,
0.003941,
-0.011026,
-0.044336,
-0.041239,
-0.024755,
-0.010801,
-0.006039,
0.005647,
0.006937,
0.013763,
0.028557,
-0.001395,
0.025640,
0.016515,
-0.011877,
0.021857,
0.009924,
0.025362,
-0.000069,
0.016680,
0.027163,
-0.028691,
0.004571,
-0.015457,
-0.008762,
-0.025386,
-0.027250,
-0.012282,
0.015615,
0.045638,
-0.022781,
-0.031828,
-0.004674,
-0.042030,
0.001851,
-0.027270,
0.006133,
0.009684,
-0.017042,
-0.026337,
-0.012145,
0.011336,
0.011772,
0.009103,
-0.024307,
-0.028935,
-0.000412,
0.008537,
-0.020249,
0.044468,
0.026177,
0.023252,
-0.009743,
0.049102,
0.008108,
0.038243,
-0.027595,
-0.052196,
-0.012796,
0.012114,
-0.018689,
-0.050146,
-0.032794,
-0.022199,
-0.031850,
-0.026050,
-0.045728,
-0.027912,
-0.052481,
-0.040539,
-0.034738,
-0.038052,
0.022821,
0.038694,
0.016126,
-0.002395,
-0.019306,
-0.002255,
-0.005878,
-0.021526,
0.002648,
-0.034661,
-0.008076,
0.004730,
-0.031513,
0.019133,
-0.001371,
-0.042658,
-0.016063,
0.012907,
-0.041712,
-0.028101,
-0.016975,
0.023292,
-0.045180,
-0.007563,
-0.015931,
-0.007048,
-0.010647,
-0.001709,
-0.051810,
-0.053175,
-0.025515,
0.019785,
-0.029765,
-0.017769,
-0.018278,
0.020613,
0.008076,
0.033731,
-0.033492,
0.007380,
-0.013250,
-0.005147,
0.033772,
0.014330,
-0.035307,
-0.039841,
-0.013720,
0.006430,
0.015229,
-0.009791,
0.002706,
-0.009799,
-0.025255,
-0.012071,
0.018879,
-0.013004,
-0.009393,
-0.023037,
-0.032909,
0.023550,
-0.048320,
-0.052602,
-0.034179,
-0.014015,
-0.034300,
-0.005602,
-0.018334,
-0.039807,
-0.039410,
-0.055704,
-0.002149,
-0.037632,
-0.068346,
-0.073965,
-0.056020,
0.010711,
-0.016959,
-0.058221,
-0.013938,
0.006042,
0.036004,
-0.005978,
-0.026210,
-0.028060,
0.024314,
-0.043031,
0.030489,
0.015191,
-0.066955,
-0.049216,
0.012668,
0.008884,
-0.009196,
-0.025519,
-0.025124,
-0.050749,
0.032523,
-0.029900,
-0.002647,
-0.056970,
-0.003955,
0.015992,
-0.048588,
-0.017523,
0.007903,
-0.010618,
0.009955,
-0.020452,
-0.032805,
0.022260,
-0.002699,
0.009284,
-0.035939,
-0.040952,
0.005171,
0.002917,
-0.021383,
-0.011968,
0.017456,
-0.032918,
0.010543,
0.028438,
-0.011708,
-0.022589,
-0.023538,
0.008852,
0.022120,
-0.024442,
-0.006818,
-0.024945,
0.024941,
0.012509,
0.003469,
-0.060263,
-0.033989,
-0.029107,
-0.003207,
-0.017759,
-0.045037,
-0.029761,
-0.002863,
-0.029267,
-0.037357,
-0.009541,
0.009563,
-0.003839,
-0.037727,
-0.041657,
-0.001216,
-0.003599,
-0.062070,
-0.016870,
-0.076029,
-0.013711,
-0.038187,
-0.038362,
-0.032132,
0.010639,
0.025629,
-0.021163,
-0.059527,
-0.021228,
-0.000730,
-0.024436,
-0.020148,
-0.010157,
0.024538,
-0.010078,
-0.012720,
0.018572,
0.012474,
0.015013,
-0.006797,
-0.009087,
-0.055263,
-0.037458,
-0.033204,
-0.003418,
-0.014428,
-0.053933,
0.028961,
0.039853,
-0.008583,
0.033756,
-0.009084,
-0.022305,
-0.038734,
-0.049859,
-0.010565,
-0.017733,
-0.016525,
-0.004123,
-0.037231,
-0.002233,
-0.000468,
-0.028692,
-0.016495,
0.002022,
-0.016891,
0.020252,
-0.030712,
0.017376,
0.010311,
-0.036132,
0.017648,
-0.003091,
-0.039334,
0.023141,
-0.007875,
0.002126,
-0.029734,
0.015547,
0.009642,
0.032488,
-0.028563,
0.000416,
0.006858,
0.019460,
-0.017335,
-0.031435,
-0.037834,
-0.008801,
0.004759,
-0.020155,
-0.024886,
0.001120,
-0.033076,
0.011833,
-0.014999,
0.016140,
-0.035769,
0.007688,
0.019354,
0.014660,
0.019837,
-0.004839,
-0.033870,
0.010045,
-0.008646,
-0.018624,
0.024743,
-0.008693,
0.024034,
-0.031964,
0.003022,
0.030858,
0.035497,
0.010871,
0.055222,
-0.024624,
0.037873,
-0.021731,
-0.034241,
-0.023488,
0.009796,
-0.016616,
-0.046350,
0.011867,
0.004534,
0.031032,
0.004731,
-0.031860,
0.008916,
0.016682,
-0.011972,
-0.020450,
-0.040795,
-0.010204,
-0.045424,
0.007923,
-0.001947,
-0.035113,
0.000620,
-0.012262,
-0.013628,
0.007593,
0.024852,
-0.040465,
0.000177,
-0.034759,
-0.039623,
0.028727,
-0.014274,
-0.043025,
-0.029569,
0.012587,
0.024100,
-0.038519,
0.015902,
0.021914,
-0.029030,
-0.036393,
0.027749,
-0.014199,
-0.006777,
0.017509,
-0.024986,
-0.003544,
0.022142,
0.030153,
0.011336,
0.014034,
-0.029287,
-0.014210,
0.022131,
-0.019655,
-0.019336,
0.026154,
-0.023884,
0.021950,
-0.038349,
0.000183,
-0.030212,
-0.000786,
0.008184,
-0.006448,
-0.033524,
-0.042260,
-0.020920,
-0.044567,
-0.041057,
-0.014049,
0.004776,
0.009366,
-0.062639,
-0.012797,
-0.041315,
-0.038709,
-0.063942,
-0.047898,
-0.007319,
-0.031853,
-0.049412,
-0.034675,
-0.034649,
0.021147,
-0.020167,
0.018140,
-0.008416,
-0.015561,
0.006152,
-0.007290,
-0.038852,
0.001208,
-0.026020,
-0.034863,
-0.013556,
-0.002383,
0.018720,
0.027041,
-0.021901,
0.026538,
-0.020450,
-0.007871,
0.000690,
0.002449,
0.017157,
-0.041053,
-0.009640,
-0.005565,
-0.022794,
-0.019548,
-0.013653,
-0.035319,
0.022806,
0.028319,
-0.024844,
0.020435,
-0.014188,
0.000356,
0.015337,
-0.020634,
0.019948,
-0.031116,
-0.006899,
-0.037641,
-0.013005,
0.016226,
-0.000386,
-0.016556,
-0.032209,
0.017208,
-0.004430,
0.009281,
0.006672,
-0.018635,
0.014789,
-0.031449,
0.009335,
0.012325,
0.003786,
-0.000782,
0.025456,
-0.023785,
-0.005688,
-0.030068,
-0.001879,
-0.028714,
0.010943,
0.021614,
-0.025019,
0.005172,
-0.027199,
-0.012818,
0.028400,
0.000466,
0.027035,
0.018510,
0.016644,
-0.039786,
-0.036736,
0.000003,
-0.008983,
-0.010151,
0.004194,
-0.028970,
-0.019923,
-0.026661,
0.005978,
0.026231,
0.003114,
0.006234,
0.007901,
-0.008163,
-0.022388,
0.008574,
0.015100,
0.023768,
0.019387,
0.016674,
-0.039242,
-0.038375,
-0.041263,
0.009394,
-0.004704,
-0.031180,
0.029030,
0.000037,
0.006431,
0.000452,
0.025555,
-0.026673,
-0.010438,
-0.030120,
0.018575,
-0.014098,
0.022355,
0.017889,
0.008119,
-0.027171,
-0.017899,
0.003423,
-0.037190,
0.006316,
0.007199,
-0.014591,
0.016274,
-0.000968,
-0.024250,
-0.030112,
-0.019207,
-0.032617,
-0.032094,
-0.026702,
0.028192,
-0.021518,
0.023396,
-0.023140,
-0.026885,
-0.007038,
-0.030158,
-0.040470,
-0.013510,
0.005974,
0.021358,
-0.019626,
-0.030498,
-0.015974,
0.027650,
0.007133,
-0.025507,
0.008312,
0.023072,
-0.018264,
0.020965,
0.010915,
0.012569,
-0.024273,
-0.017607,
0.005530,
0.017538,
-0.031893,
0.002909,
0.021545,
-0.023307,
-0.006878,
-0.026381,
-0.001816,
-0.037449,
-0.027280,
0.004332,
-0.003821,
-0.035395,
-0.021950,
0.009475,
0.012397,
-0.033747,
-0.013565,
0.027485,
0.027617,
0.020128,
0.018288,
-0.037635,
0.014294,
0.015833,
0.021598,
-0.000979,
-0.015996,
-0.005160,
-0.021829,
0.007419,
0.003691,
-0.016014,
0.002136,
0.004324,
-0.009384,
-0.001325,
-0.020305,
0.012336,
-0.021488,
-0.009338,
0.023402,
0.006779,
-0.036913,
0.000894,
-0.019977,
-0.025009,
0.013369,
0.017721,
-0.038708,
-0.012193,
0.023804,
-0.014235,
0.027310,
0.024276,
0.026856,
0.001312,
0.001024,
-0.008159,
-0.037659,
-0.037900,
-0.019574,
-0.007350,
-0.032701,
0.010217,
-0.024024,
-0.009125,
-0.026763,
-0.024632,
-0.002478,
0.025365,
-0.036665,
0.025186,
-0.019999,
-0.011042,
-0.006305,
0.009883,
-0.015906,
-0.005464,
-0.040414,
0.000980,
0.006792,
-0.020715,
-0.030089,
-0.000259,
-0.030828,
-0.010758,
-0.025425,
0.021641,
-0.018925,
-0.018161,
-0.027333,
-0.011715,
0.002972,
0.008575,
-0.011792,
-0.034756,
-0.027500,
-0.009751,
-0.029137,
-0.005213,
-0.031705,
-0.026382,
-0.009255,
0.013460,
0.021981,
0.025233,
0.016600,
0.025324,
-0.034640,
-0.027762,
-0.000431,
-0.038637,
-0.003679,
-0.036619,
-0.007619,
-0.018019,
-0.023041,
-0.036451,
-0.012580,
-0.013805,
0.004693,
0.014616,
0.027976,
0.016761,
0.016352,
-0.039800,
-0.002309,
0.010427,
-0.038417,
-0.011374,
-0.002291,
0.002680,
-0.040817,
0.024352,
0.027299,
0.006301,
-0.029212,
0.008793,
0.006512,
-0.016530,
0.013642,
0.008390,
0.020277,
0.004777,
-0.013085,
0.015205,
0.006896,
0.002010,
-0.003653,
-0.038105,
-0.005431,
0.009533,
-0.034048,
-0.011418,
-0.006003,
-0.039410,
-0.019230,
-0.001060,
0.002285,
0.028988,
0.027237,
0.021009,
-0.019164,
-0.027277,
0.012820,
-0.037819,
-0.027593,
-0.007126,
0.012871,
0.028909,
-0.040282,
-0.040052,
0.012609,
-0.018513,
-0.000889,
-0.009424,
-0.028157,
0.022766,
-0.028994,
-0.025053,
-0.029655,
0.022486,
-0.035233,
-0.017107,
-0.027084,
0.011869,
-0.013837,
-0.029841,
0.025977,
-0.003387,
-0.007778,
-0.008408,
-0.039937,
0.018053,
-0.025443,
0.003393,
-0.012085,
-0.007236,
0.018015,
-0.008326,
-0.027091,
-0.014950,
0.013973,
0.014324,
-0.024713,
-0.032309,
-0.016120,
0.023094,
-0.028261,
-0.015350,
-0.009359,
-0.037359,
0.017518,
-0.015660,
-0.041033,
-0.033407,
-0.022672,
0.007077,
0.015570,
0.011483,
-0.037933,
-0.025089,
0.002963,
0.022745,
0.026647,
-0.007804,
-0.026410,
-0.040387,
-0.000495,
0.017315,
-0.002810,
-0.000492,
0.022129,
-0.040826,
-0.009417,
0.018782,
0.020345,
-0.008703,
-0.006281,
0.005103,
0.025414,
0.014684,
-0.028997,
-0.020395,
0.012419,
0.023181,
0.012815,
0.018761,
-0.001482,
0.026675,
0.028898,
0.006858,
-0.032233,
-0.030413,
0.026231,
0.018161,
0.018186,
0.022091,
0.016330,
0.006638,
-0.031805,
0.006733,
0.015996,
0.022634,
-0.002865,
-0.033055,
0.018943,
-0.018596,
0.028416,
0.013796,
0.015214,
-0.008789,
-0.015720,
-0.038704,
-0.001319,
0.017117,
-0.019078,
-0.034603,
-0.014168,
-0.027009,
-0.023076,
-0.010370,
-0.011049,
-0.009581,
-0.020283,
-0.027501,
-0.024662,
-0.038452,
0.029321,
-0.025211,
-0.031250,
0.008111,
-0.012984,
0.012409,
0.029293,
-0.031906,
-0.023430,
0.007487,
-0.010325,
0.028484,
-0.026530,
-0.011296,
0.017056,
-0.033670,
-0.000951,
-0.021582,
0.017752,
-0.021643,
-0.014614,
-0.006434,
0.014165,
-0.039310,
-0.000313,
-0.024281,
-0.033847,
0.018799,
-0.039058,
-0.009924,
0.019947,
-0.039027,
0.017539,
-0.034487,
0.000699,
-0.003455,
-0.026689,
-0.016145,
-0.030863,
-0.011634,
-0.014810,
-0.037485,
0.013924,
-0.027451,
0.021712,
-0.009724,
0.024728,
-0.020134,
-0.006297,
-0.005942,
0.011892,
-0.002451,
-0.030448,
0.010991,
0.013620,
0.003594,
0.009284,
0.027455,
-0.025877,
0.023472,
-0.035902,
0.000040,
-0.035105,
-0.032405,
-0.017112,
0.010625,
-0.001704,
0.006468,
0.009612,
-0.010174,
-0.034488,
0.001142,
0.029649,
0.034396,
0.000062,
0.027615,
-0.039084,
-0.024369,
0.022044,
-0.005836,
-0.019807,
0.001990,
-0.035016,
0.025399,
-0.020756,
-0.035046,
-0.038067,
0.011332,
0.005847,
-0.025751,
-0.036997,
-0.024214,
0.026917,
-0.023664,
0.001096,
-0.038100,
-0.018578,
-0.018577,
-0.020333,
-0.039073,
-0.023040,
-0.002594,
0.019991,
0.001435,
-0.019388,
0.024142,
0.025947,
-0.021224,
0.001999,
-0.025869,
0.001106,
-0.019192,
-0.025040,
0.009266,
0.025432,
0.009048,
0.007620,
-0.006622,
0.026117,
-0.002259,
0.012086,
-0.020463,
-0.031877,
-0.001704,
-0.020302,
0.026861,
-0.002474,
-0.028278,
-0.003070,
0.021145,
-0.017515,
0.005071,
0.013377,
0.000451,
-0.028047,
0.001705,
-0.005131,
-0.021000,
0.012192,
-0.010707,
-0.022361,
-0.040736,
-0.024595,
-0.036782,
-0.027432,
-0.036818,
-0.017926,
0.026732,
-0.023010,
0.000401,
0.023217,
-0.012026,
-0.016314,
-0.019781,
-0.019515,
-0.024712,
-0.037190,
-0.008346,
0.013929,
-0.034808,
0.000675,
0.006807,
0.019102,
0.026560,
-0.003275,
-0.006379,
0.004881,
-0.001830,
0.002761,
-0.006175,
0.024257,
-0.038770,
0.024675,
0.028106,
0.010305,
-0.002267,
0.000206,
0.018316,
-0.011681,
-0.030126,
-0.005912,
0.024766,
-0.027013,
0.021647,
-0.014363,
0.015751,
-0.016273,
-0.023455,
-0.017462,
0.025151,
0.018384,
-0.020645,
-0.001037,
-0.001869,
-0.037493,
-0.024239,
-0.011784,
0.014458,
0.009842,
-0.025960,
0.028703,
0.022919,
-0.031947,
0.006541,
-0.018825,
0.022223,
0.013535,
-0.033648,
0.016116,
-0.023503,
-0.033934,
-0.035506,
-0.018416,
-0.034901,
0.024660,
0.022738,
-0.034645,
-0.038128,
0.021397,
0.022679,
-0.013766,
-0.017757,
0.010342,
0.008725,
-0.022705,
-0.025584,
0.009213,
0.003312,
-0.016504,
0.016197,
-0.008605,
-0.010138,
-0.001541,
0.027940,
0.002570,
0.019195,
-0.013837,
-0.020684,
-0.034450,
-0.037735,
-0.020140,
0.014914,
0.013741,
0.000844,
-0.000217,
-0.018412,
-0.037706,
0.018123,
-0.006765,
-0.016679,
-0.028562,
-0.005244,
0.024375,
-0.017301,
0.025544,
0.018281,
0.013544,
-0.032276,
0.020137,
0.014905,
0.022977,
-0.036075,
0.000643,
0.009715,
-0.019327,
0.007762,
-0.040309,
-0.037964,
-0.039829,
-0.021309,
0.012512,
-0.000334,
-0.021557,
-0.033444,
0.015895,
0.008567,
-0.007811,
-0.016548,
0.019965,
0.028151,
-0.006594,
0.005412,
-0.038973,
-0.000115,
-0.007762,
0.017626,
-0.026603,
-0.028820,
0.000043,
-0.009692,
0.025935,
-0.003289,
0.005585,
0.015825,
0.000055,
-0.014547,
-0.038856,
-0.016505,
0.011532,
-0.034218,
-0.017175,
-0.028401,
0.013562,
0.002479,
0.009091,
0.001657,
0.012768,
0.018501,
-0.018949,
0.015207,
-0.018873,
-0.018219,
0.013763,
0.013962,
-0.037306,
0.008316,
0.018853,
0.021073,
0.019007,
0.003924,
0.009665,
-0.001726,
0.008314,
-0.000174,
0.026142,
0.023688,
0.022328,
0.000678,
0.025340,
0.014599,
0.015627,
-0.016128,
0.017023,
-0.004179,
-0.026064,
0.015807,
-0.037627,
0.008382,
-0.038095,
0.026503,
-0.021079,
0.022695,
-0.028013,
0.009437,
0.022362,
0.005394,
-0.014687,
0.027927,
0.022075,
-0.006900,
-0.039700,
0.022976,
-0.001621,
-0.003405,
0.021891,
0.027685,
-0.085776,
-0.014098,
0.156420,
0.071608,
0.085890,
-0.000719,
-0.046422,
-0.122220,
-0.009813,
0.138020,
0.001326,
-0.002632,
-0.052915,
-0.012767,
0.030569,
0.007550,
0.106990,
-0.024542,
0.041926,
-0.089729,
0.042676,
0.116050,
0.030727,
-0.069472,
-0.186340,
-0.030072,
-0.029070,
0.021665,
-0.020919,
-0.013714,
-0.004072,
-0.010648,
-0.024070,
-0.032128,
-0.018208,
-0.008922,
-0.014697,
0.015717,
0.027692,
0.002343,
-0.019099,
0.008709,
0.015104,
-0.033559,
0.004107,
-0.021664,
-0.036922,
0.008458,
-0.038077,
0.030068,
0.048747,
-0.162890,
-0.168520,
-0.010967,
-0.058349,
0.026795,
-0.107190,
-0.119680,
0.002994,
-0.123370,
-0.028576,
-0.031201,
-0.007186,
0.015668,
0.050110,
0.067128,
-0.045819,
0.084565,
0.092001,
0.180250,
0.008626,
0.014152,
0.055516,
0.015021,
0.098218,
-0.031528,
0.013895,
0.022197,
0.045487,
0.079960,
0.007548,
-0.005873,
0.010155,
0.014072,
0.002008,
0.015294,
-0.022572,
-0.024971,
-0.018052,
0.024619,
0.024973,
-0.021371,
-0.000997,
0.021759,
-0.008824,
-0.053360,
-0.024779,
-0.080197,
-0.003493,
-0.082974,
0.018808,
0.042890,
0.073723,
0.036217,
-0.068881,
-0.001444,
0.048381,
0.082224,
0.068831,
0.011748,
0.031211,
0.093685,
0.178600,
0.127800,
0.072585,
-0.059524,
0.038768,
0.019995,
0.015703,
0.028260,
0.080891,
0.102250,
0.082358,
0.073609,
0.107080,
0.115850,
0.042442,
0.093185,
-0.042245,
0.038062,
-0.044557,
-0.028063,
0.022342,
-0.107290,
-0.065038,
-0.080037,
-0.127640,
0.077124,
0.020101,
-0.068451,
-0.101620,
-0.055480,
0.049303,
0.035003,
-0.024765,
-0.186720,
0.050844,
0.122130,
0.050068,
-0.102640,
0.062166,
0.074000,
0.063875,
0.013532,
-0.019684,
0.025951,
0.035328,
0.067881,
0.028637,
0.027663,
-0.074763,
-0.018252,
-0.042058,
-0.058413,
-0.130810,
-0.033937,
-0.070379,
0.031642,
0.034250,
-0.086014,
-0.212680,
-0.074763,
-0.002373,
0.003891,
0.037182,
-0.107100,
-0.146190,
0.031943,
0.113140,
0.202520,
0.032240,
0.063899,
0.035482,
0.115250,
0.157910,
-0.156840,
-0.132700,
-0.080503,
0.021959,
0.045131,
-0.138520,
-0.090741,
-0.108520,
-0.011265,
-0.028681,
-0.112480,
-0.140720,
-0.063991,
0.006227,
-0.039646,
0.156950,
0.040731,
-0.088438,
-0.113880,
0.052537,
-0.017924,
0.023675,
-0.006671,
0.058429,
0.078673,
0.030876,
0.060210,
-0.037885,
0.033532,
0.060964,
-0.064630,
-0.009955,
-0.085867,
-0.013333,
0.023189,
-0.156610,
-0.225240,
-0.051830,
-0.023059,
-0.056742,
-0.325400,
-0.079683,
0.016146,
-0.011991,
-0.242110,
-0.134880,
-0.023884,
-0.006014,
0.084556,
-0.133250,
-0.230670,
-0.061151,
-0.043250,
0.062874,
-0.133030,
-0.208110,
-0.017596,
0.040122,
0.051991,
-0.220360,
-0.086540,
-0.079908,
-0.031764,
0.069636,
-0.099270,
-0.004420,
0.091480,
0.081735,
0.101630,
0.092834,
-0.006652,
-0.037380,
-0.117690,
-0.032757,
0.062229,
-0.024485,
-0.031404,
-0.041611,
0.030003,
-0.066057,
-0.054414,
-0.014379,
0.074096,
0.082054,
0.008009,
-0.005309,
-0.123450,
-0.004017,
0.010942,
-0.012731,
-0.086538,
-0.166050,
-0.214460,
-0.150760,
-0.072288,
0.011548,
-0.073663,
-0.234800,
-0.078801,
-0.013061,
-0.154290,
-0.143720,
-0.120420,
-0.094888,
-0.059696,
-0.216940,
-0.072875,
0.007510,
-0.004069,
-0.055491,
-0.046288,
0.039193,
0.088818,
0.167160,
0.121070,
-0.002469,
-0.005942,
-0.072871,
-0.044417,
-0.068987,
0.024952,
-0.059880,
-0.063326,
-0.056765,
-0.036693,
0.010466,
-0.100250,
-0.050937,
-0.028347,
-0.042201,
0.108160,
0.019840,
-0.061173,
0.044557,
0.168090,
0.084989,
0.073578,
0.114390,
0.057650,
0.120970,
0.195220,
0.161350,
0.156880,
-0.043410,
-0.077326,
0.035546,
0.030233,
0.016132,
-0.031410,
0.018972,
0.056290,
0.028487,
0.001948,
0.017355,
0.079655,
-0.021221,
-0.024280,
0.033841,
0.087567,
-0.033251,
0.115250,
0.103540,
-0.000992,
-0.001359,
-0.074866,
0.023039,
0.015495,
0.098095,
-0.026091,
-0.112280,
-0.050250,
-0.055737,
0.038899,
-0.004424,
0.057393,
0.018130,
0.048318,
0.103800,
0.006538,
0.125500,
-0.036817,
0.082573,
0.143250,
0.021341,
0.080539,
-0.124140,
0.043569,
0.027458,
0.028214,
0.152460,
0.026598,
0.009779,
0.040884,
-0.044141,
-0.052913,
-0.020622,
0.077655,
0.153800,
0.146160,
-0.016877,
-0.037975,
0.206110,
0.184220,
0.114410,
-0.007545,
-0.006127,
0.106110,
0.091411,
0.052890,
-0.076808,
-0.113900,
-0.084483,
-0.082786,
-0.118240,
-0.102200,
0.025677,
-0.006292,
-0.001421,
-0.007326,
0.071766,
-0.000063,
0.006947,
0.009486,
0.013869,
0.014367,
0.017086,
-0.013466,
0.013355,
-0.006055,
0.020849,
-0.019337,
0.008553,
0.063066,
0.033186,
-0.014224,
0.044937,
0.027846,
0.061387,
0.029994,
0.034813,
-0.072581,
-0.145370,
-0.176580,
-0.215250,
-0.130110,
0.016263,
-0.115450,
-0.105570,
-0.169940,
-0.095504,
-0.036224,
-0.097183,
-0.017549,
-0.044977,
-0.002223,
0.129910,
0.090434,
0.090461,
0.032527,
0.088197,
0.184340,
0.048166,
0.062026,
0.076350,
0.117000,
-0.151110,
-0.072674,
-0.010160,
0.074801,
0.099751,
-0.032044,
-0.088320,
-0.069578,
-0.074566,
-0.056034,
-0.040515,
-0.116640,
-0.102280,
-0.018109,
-0.121750,
0.122430,
-0.005823,
0.039776,
0.025684,
-0.039304,
0.047190,
0.047556,
-0.013004,
-0.088971,
-0.088172,
-0.061394,
0.058260,
0.095077,
0.117460,
-0.066205,
0.044149,
0.124440,
0.032052,
-0.010137,
-0.025932,
-0.040880,
-0.067503,
0.062068,
0.042042,
-0.021143,
-0.065642,
-0.046589,
-0.041443,
-0.016645,
-0.110120,
0.155180,
-0.021877,
-0.039418,
-0.007454,
-0.059525,
-0.005634,
0.016993,
-0.039772,
-0.023624,
-0.038549,
0.000372,
-0.012778,
-0.008439,
-0.025610,
-0.048490,
0.011942,
-0.017969,
0.010808,
0.002134,
-0.002967,
-0.021530,
0.000646,
0.034156,
-0.013346,
-0.003559,
0.012535,
-0.022080,
-0.012947,
-0.026019,
0.025871,
0.120860,
-0.014752,
-0.040914,
-0.076625,
-0.022290,
-0.229270,
-0.313710,
-0.220070,
-0.331020,
-0.173170,
-0.298890,
-0.173850,
-0.099864,
-0.194080,
-0.158740,
-0.379310,
-0.251890,
-0.115530,
-0.105450,
-0.145190,
-0.224010,
-0.133430,
-0.052097,
-0.071334,
-0.202230,
0.132300,
-0.213930,
-0.145260,
-0.055613,
0.024860,
0.082730,
-0.098935,
0.037442,
-0.015847,
0.086722,
-0.008987,
-0.082177,
0.024654,
0.009796,
0.056540,
-0.025030,
-0.029055,
-0.101330,
-0.093338,
0.009032,
-0.084697,
-0.089476,
-0.100540,
-0.052527,
-0.000602,
-0.010437,
0.128750,
0.108130,
0.132260,
0.012732,
-0.025117,
0.022724,
0.045459,
-0.043351,
-0.005418,
-0.041419,
0.025390,
-0.062593,
-0.008490,
0.091127,
-0.064557,
0.019876,
-0.017508,
-0.029499,
0.014151,
0.003884,
0.051004,
-0.028109,
0.001279,
-0.066834,
-0.122160,
-0.053173,
0.026700,
0.037648,
-0.074425,
-0.084810,
-0.011206,
-0.064011,
-0.044050,
-0.040278,
0.031031,
-0.160260,
-0.112990,
-0.157550,
-0.067565,
-0.030587,
-0.048294,
-0.067075,
0.064961,
-0.063933,
-0.039546,
-0.002536,
-0.045175,
-0.010419,
-0.031242,
-0.104610,
0.003559,
0.005447,
0.038609,
-0.077231,
-0.023986,
-0.013767,
0.022018,
-0.011738,
-0.068250,
-0.125060,
-0.165050,
-0.064107,
0.032865,
0.014717,
-0.214460,
-0.110130,
-0.210130,
-0.100430,
-0.030033,
-0.112440,
-0.119760,
-0.191890,
-0.111380,
-0.169810,
-0.026895,
-0.060533,
-0.091153,
-0.034840,
-0.029782,
-0.003416,
-0.010446,
-0.031708,
-0.003827,
0.026420,
0.032861,
0.003799,
-0.056182,
0.015822,
0.033650,
0.088480,
0.048612,
-0.053582,
0.035656,
0.116910,
0.069413,
0.083679,
0.059981,
0.129430,
0.027645,
0.044084,
0.061598,
0.081140,
0.031829,
0.008123,
0.025242,
0.019764,
0.065633,
0.021173,
-0.011803,
0.029033,
0.083261,
0.056256,
0.079126,
0.005639,
0.018555,
0.039726,
0.041407,
0.027889,
0.037679,
0.030503,
0.022409,
0.059257,
0.064375,
0.032173,
-0.161330,
-0.135670,
-0.093632,
-0.177420,
-0.124460,
0.036748,
0.043263,
0.104810,
0.071674,
-0.038875,
-0.088422,
0.072909,
0.225270,
0.131810,
-0.031109,
-0.054603,
-0.020561,
-0.118940,
-0.117680,
-0.111500,
-0.087882,
-0.223260,
-0.140020,
-0.204540,
-0.128450,
0.026123,
0.062694,
0.044203,
0.046025,
-0.042694,
0.029393,
-0.008330,
-0.024419,
0.009317,
-0.030785,
-0.011338,
-0.003332,
-0.065829,
-0.019806,
0.019513,
0.067144,
0.008231,
0.070013,
0.093848,
0.083919,
-0.034807,
0.028716,
0.157310,
0.046755,
0.023601,
0.024231,
0.042936,
0.028500,
0.012026,
0.000771,
-0.011453,
-0.041623,
0.006733,
0.031437,
-0.007601,
-0.012566,
-0.002804,
-0.032520,
-0.006125,
0.001211,
-0.012825,
0.011609,
-0.033886,
0.012995,
-0.018330,
-0.028471,
-0.032400,
0.022577,
0.026729,
-0.011680,
-0.136340,
-0.097536,
-0.063974,
0.023719,
0.184820,
-0.130380,
-0.117850,
-0.086029,
-0.043391,
-0.105330,
-0.131290,
-0.156940,
-0.065081,
-0.002065,
-0.000758,
-0.025149,
0.002210,
-0.027296,
0.081448,
0.063436,
0.033315,
0.091690,
0.150850,
0.094837,
-0.067374,
0.013035,
0.018027,
0.001751,
0.021856,
0.006809,
-0.003267,
-0.040386,
0.007446,
-0.001946,
-0.033152,
-0.040974,
0.003582,
-0.022930,
-0.039293,
0.003503,
0.011538,
-0.008310,
0.020306,
-0.023059,
0.007407,
0.012402,
0.017029,
-0.016627,
-0.001956,
-0.007496,
0.019375,
0.024625,
0.024179,
-0.026273,
-0.023497,
-0.043055,
0.025017,
0.021396,
-0.031473,
-0.035958,
0.030960,
-0.000273,
-0.013898,
-0.019347,
0.006455,
-0.040227,
0.027810,
-0.012325,
-0.034764,
0.012709,
-0.025010,
-0.013783,
-0.016439,
0.025226,
0.015998,
0.012800,
0.025924,
-0.041326,
0.017366,
-0.007806,
0.033281,
-0.034123,
0.025865,
-0.039228,
0.019680,
-0.002230,
0.013575,
0.023441,
-0.026757,
-0.021998,
-0.021534,
-0.000350,
-0.037300,
-0.038981,
0.000248,
-0.006151,
0.000763,
0.019400,
0.025713,
-0.016044,
-0.004377,
-0.019859,
0.000050,
0.013795,
-0.013608,
-0.038382,
0.020892,
0.018746,
0.008287,
0.006833,
0.019857,
0.016925,
-0.023567,
0.026366,
-0.016049,
-0.032401,
0.008241,
-0.010364,
-0.018567,
-0.033684,
0.021205,
-0.001110,
0.017909,
-0.032653,
-0.005136,
0.005229,
0.016831,
-0.037859,
0.004956,
-0.006608,
0.016423,
-0.021392,
0.004463,
-0.026970,
-0.017310,
-0.040788,
-0.009383,
0.023996,
-0.020857,
0.000346,
-0.035490,
-0.037779,
-0.010883,
0.005060,
0.019914,
0.025017,
0.031590,
-0.030264,
-0.002043,
-0.013263,
0.026958,
0.018157,
-0.003429,
0.021062,
-0.005169,
-0.011404,
-0.002121,
-0.028874,
-0.031712,
-0.036977,
-0.038555,
0.031065,
-0.020017,
-0.014950,
-0.041776,
-0.027946,
0.031751,
0.009708,
-0.007044,
-0.003893,
0.004128,
-0.022193,
0.036091,
-0.039208,
0.009875,
-0.020441,
0.008541,
-0.013881,
0.025042,
0.022799,
-0.013027,
0.003176,
-0.034725,
0.008746,
-0.013465,
-0.024756,
-0.012106,
-0.015429,
-0.016503,
-0.038029,
0.003281,
-0.025137,
0.004668,
-0.018240,
0.006165,
-0.000084,
-0.037516,
-0.018930,
-0.012612,
0.000029,
-0.008139,
-0.031859,
-0.002413,
-0.022368,
0.010600,
-0.019365,
-0.041782,
0.015630,
0.022347,
-0.013352,
-0.021495,
0.011855,
0.024311,
-0.031803,
-0.033789,
-0.003948,
0.021385,
0.012549,
-0.015941,
-0.003529,
0.006723,
-0.031625,
-0.013755,
-0.011199,
-0.027696,
-0.006384,
-0.017234,
0.011664,
0.005840,
-0.004810,
0.024242,
-0.012435,
0.004164,
0.010037,
-0.026892,
-0.042931,
-0.034920,
-0.004824,
0.012177,
0.012505,
-0.016708,
0.015552,
-0.009180,
-0.005401,
-0.036612,
-0.001173,
-0.030517,
-0.039514,
-0.042307,
-0.011684,
0.006953,
0.024423,
0.013682,
-0.011594,
-0.034331,
0.021138,
0.011619,
0.025357,
-0.026224,
-0.032918,
-0.031295,
-0.020050,
-0.003763,
-0.015034,
0.008356,
0.021507,
-0.032170,
-0.016597,
0.026553,
-0.012384,
0.003472,
0.007099,
0.001471,
-0.004976,
-0.010514,
-0.025313,
-0.007130,
0.014442,
-0.036056,
-0.033195,
0.012997,
0.020642,
-0.029141,
0.018720,
-0.007125,
0.003450,
0.002162,
-0.018394,
-0.005000,
-0.031280,
-0.042517,
-0.023654,
-0.012758,
-0.037274,
-0.019414,
0.015037,
-0.023801,
-0.005499,
0.004503,
0.017889,
-0.005280,
-0.037842,
0.006009,
-0.038539,
0.003223,
0.014235,
-0.006475,
-0.014078,
-0.030881,
-0.002385,
-0.025262,
-0.007788,
-0.018151,
0.007935,
-0.027723,
0.018876,
0.005033,
-0.029048,
0.007545,
-0.040921,
-0.032493,
-0.030663,
-0.025750,
0.017251,
-0.015056,
0.011954,
0.018479,
-0.012485,
0.007249,
-0.040704,
0.022745,
-0.026133,
0.016398,
-0.027829,
0.034152,
0.006474,
0.016674,
-0.036870,
0.004356,
-0.012384,
-0.015214,
-0.007850,
-0.058256,
-0.002550,
-0.041862,
0.001586,
-0.045014,
-0.059935,
-0.004120,
-0.045245,
0.026312,
0.019993,
0.002522,
0.016774,
0.009386,
0.004122,
-0.016949,
0.026395,
0.024905,
0.021220,
0.025272,
-0.035724,
0.012894,
-0.001679,
-0.033927,
0.004526,
0.012384,
-0.037458,
-0.030275,
-0.016902,
-0.030031,
0.007897,
-0.036636,
-0.012432,
-0.027508,
-0.048041,
-0.014810,
-0.000880,
-0.045525,
-0.003277,
0.020382,
-0.012564,
-0.055955,
-0.010824,
-0.002221,
-0.046198,
0.018510,
-0.000560,
0.008180,
-0.006003,
-0.041210,
0.013232,
0.024675,
0.002957,
-0.025058,
0.007108,
-0.021793,
-0.028304,
-0.006003,
0.029872,
-0.013468,
0.005413,
0.017611,
-0.009851,
0.022241,
0.003639,
0.010451,
-0.023007,
-0.032513,
-0.002981,
-0.009015,
0.009478,
0.017967,
-0.000711,
-0.021712,
0.003526,
-0.019452,
-0.007828,
-0.010936,
-0.032758,
0.010348,
0.018163,
-0.036583,
-0.025346,
-0.010961,
-0.028871,
-0.025984,
-0.005052,
-0.011609,
-0.015586,
0.026965,
0.004032,
-0.003681,
0.013252,
-0.004031,
-0.036818,
-0.004158,
0.018553,
0.013782,
-0.003379,
0.002275,
0.016477,
-0.011165,
-0.034456,
0.006514,
-0.016942,
0.025938,
-0.018316,
-0.039730,
0.008396,
-0.000788,
-0.015246,
-0.021141,
-0.006835,
0.015452,
-0.043041,
0.021378,
-0.023570,
-0.003844,
-0.009322,
0.002949,
-0.022169,
-0.019768,
0.002295,
-0.041355,
-0.032139,
-0.004245,
-0.038916,
0.001845,
0.006317,
-0.036434,
0.012343,
-0.012399,
0.008106,
-0.022531,
-0.006851,
-0.023147,
-0.020463,
-0.013570,
0.019106,
0.015139,
0.019538,
-0.018996,
0.017244,
-0.016980,
-0.030081,
-0.007362,
-0.016377,
0.023954,
-0.017802,
-0.042839,
0.023316,
0.026340,
0.019701,
-0.005412,
-0.003141,
-0.034867,
-0.012259,
0.005373,
0.000842,
0.012184,
0.013804,
-0.028579,
0.008661,
-0.025242,
-0.024668,
0.021797,
-0.012887,
-0.039670,
-0.006470,
0.016938,
-0.000133,
0.007173,
-0.004169,
-0.019212,
0.013037,
-0.025985,
-0.038879,
-0.032603,
0.021663,
0.022016,
-0.009390,
-0.029533,
0.021222,
-0.013366,
0.032051,
-0.036283,
0.017386,
-0.002459,
0.035309,
0.011376,
-0.012873,
0.008523,
-0.019666,
0.002511,
-0.007287,
-0.020017,
0.009645,
0.019386,
0.017916,
0.034068,
0.039971,
0.000944,
-0.029826,
-0.029971,
-0.012921,
0.022096,
-0.013481,
-0.024612,
0.020418,
-0.002528,
0.005618,
0.021766,
-0.038819,
-0.032735,
0.010501,
0.018729,
-0.030090,
-0.020532,
0.001667,
-0.041272,
-0.005582,
-0.045363,
0.001207,
-0.018636,
-0.036499,
0.010329,
-0.029637,
-0.037720,
0.018852,
0.020404,
-0.007873,
0.001857,
-0.021097,
-0.020448,
-0.004415,
-0.038171,
0.005307,
-0.007362,
-0.016464,
-0.002271,
-0.008045,
0.025255,
-0.042630,
-0.008912,
-0.024978,
0.005105,
0.002017,
0.009430,
0.020996,
-0.019483,
0.010862,
-0.032797,
-0.002802,
-0.028090,
-0.034840,
-0.019698,
0.012582,
0.015612,
-0.011360,
-0.025217,
-0.011147,
-0.004112,
0.012017,
-0.036643,
-0.020168,
-0.022475,
-0.039289,
-0.042740,
-0.002630,
0.015086,
-0.040053,
-0.008982,
-0.026201,
0.006634,
-0.012821,
-0.007169,
-0.008788,
-0.022651,
-0.028667,
-0.011082,
0.017344,
0.009337,
-0.024146,
-0.038034,
0.001450,
-0.012213,
0.016006,
-0.031150,
-0.001060,
-0.035138,
-0.027092,
-0.002458,
-0.037499,
-0.025092,
-0.001165,
-0.029449,
-0.035498,
0.002287,
-0.003676,
-0.027412,
-0.033315,
0.000049,
-0.002414,
-0.030273,
0.012100,
-0.010897,
-0.027573,
-0.007281,
0.008772,
-0.033177,
-0.005440,
0.019234,
0.009141,
-0.012299,
0.021635,
-0.037343,
0.012997,
-0.004066,
-0.013552,
0.011193,
-0.014674,
0.000975,
-0.011913,
-0.026982,
0.012271,
-0.009339,
-0.032383,
0.009611,
-0.014651,
-0.009957,
0.009729,
0.017412,
0.005789,
-0.017677,
0.010758,
0.001813,
-0.029694,
-0.036989,
-0.038602,
-0.020009,
-0.040900,
-0.015154,
-0.029149,
0.022249,
-0.006736,
-0.025122,
-0.009639,
-0.039629,
0.021599,
-0.018469,
0.005999,
0.020569,
0.023775,
-0.011705,
-0.042367,
0.005446,
-0.010872,
-0.030813,
-0.026614,
-0.006887,
-0.021873,
-0.003514,
-0.036524,
0.011185,
-0.000752,
-0.026395,
-0.007608,
-0.024098,
-0.041133,
-0.002236,
0.022593,
-0.009053,
0.018965,
-0.027080,
0.015852,
-0.013088,
0.001586,
-0.032593,
0.020861,
-0.013213,
0.035405,
-0.035893,
0.029898,
-0.037869,
-0.019421,
-0.034570,
-0.029720,
0.019075,
0.009812,
0.023883,
0.004505,
0.018176,
-0.022004,
-0.014145,
0.014254,
-0.018945,
-0.004607,
-0.040115,
-0.022952,
0.021243,
0.006177,
-0.044759,
-0.030430,
0.021946,
-0.015156,
-0.004497,
-0.014729,
-0.013363,
-0.025901,
0.006609,
0.007419,
-0.011804,
-0.010923,
0.021788,
-0.036298,
-0.022019,
-0.027930,
0.021948,
-0.045597,
0.017109,
-0.013888,
-0.006173,
0.000740,
0.018716,
-0.005201,
-0.026119,
-0.028341,
0.020935,
0.006395,
-0.043366,
0.014291,
-0.020907,
-0.036672,
-0.040488,
0.018376,
0.013430,
0.012920,
0.024079,
0.022569,
0.001552,
0.014234,
-0.011963,
-0.041071,
-0.023050,
-0.011673,
-0.011903,
-0.034633,
0.010107,
0.023528,
-0.021034,
-0.031242,
0.014016,
0.006920,
0.014901,
0.007619,
-0.039955,
-0.000394,
0.003025,
-0.006947,
-0.004541,
-0.019417,
-0.038688,
-0.039505,
0.021721,
0.026134,
-0.007061,
-0.003191,
0.027690,
0.020957,
0.010528,
0.021676,
-0.034246,
-0.022155,
-0.019396,
-0.034521,
0.007564,
0.005047,
-0.031396,
0.015928,
0.017671,
0.004564,
0.008821,
-0.014893,
0.026236,
-0.038755,
-0.009681,
0.003479,
-0.017004,
-0.006967,
0.021979,
-0.034433,
-0.038867,
-0.039704,
-0.037949,
0.017624,
0.016463,
-0.025260,
-0.028258,
-0.028076,
-0.031377,
-0.009834,
-0.010602,
-0.054112,
-0.023749,
-0.040273,
0.010981,
-0.052892,
0.009358,
0.005395,
-0.004015,
-0.029699,
-0.024714,
-0.032228,
-0.008480,
-0.014241,
-0.017983,
0.019881,
0.001625,
-0.033126,
-0.025587,
-0.032277,
0.023629,
-0.032699,
-0.030243,
0.026473,
-0.012494,
-0.025219,
0.021286,
-0.026182,
-0.023116,
0.022675,
0.003161,
0.013048,
-0.016279,
-0.039852,
-0.022740,
-0.037754,
-0.012169,
0.016060,
-0.023840,
0.009522,
0.002115,
-0.025366,
0.019165,
-0.023679,
-0.021019,
-0.016582,
0.003056,
0.001008,
-0.042423,
-0.009053,
-0.018396,
-0.006950,
0.003992,
-0.044331,
-0.037174,
0.000917,
-0.009111,
-0.016766,
0.035189,
0.023139,
0.024312,
0.015051,
0.014383,
-0.007327,
-0.014651,
0.024367,
0.026240,
-0.013295,
0.014023,
0.012881,
-0.026187,
-0.000850,
-0.028480,
0.024171,
0.010820,
0.019667,
0.029041,
-0.039323,
-0.026750,
0.005242,
0.002878,
0.016333,
-0.001638,
-0.008137,
-0.029490,
0.013481,
0.015758,
-0.040020,
-0.007446,
-0.015611,
-0.040239,
-0.017786,
0.001202,
0.012431,
-0.039384,
0.004246,
-0.036871,
0.018882,
0.016974,
-0.038538,
-0.023369,
0.018394,
-0.038023,
0.024492,
-0.001198,
-0.014204,
-0.027654,
0.017801,
0.016967,
0.011075,
-0.006564,
0.001396,
-0.007991,
-0.009984,
-0.030559,
0.001501,
-0.011147,
-0.000747,
0.002886,
-0.024974,
0.000377,
-0.004602,
-0.045317,
0.021542,
-0.021279,
-0.064880,
-0.007470,
-0.042317,
-0.002406,
-0.045604,
-0.016297,
-0.041005,
0.001877,
-0.034642,
0.014911,
-0.010744,
0.030187,
-0.006244,
-0.013582,
-0.026645,
-0.019511,
-0.029325,
0.014776,
-0.036368,
-0.017288,
0.004910,
-0.013304,
-0.019517,
-0.037758,
0.021108,
-0.038715,
0.028119,
0.019077,
-0.030715,
-0.009927,
-0.034974,
-0.005749,
0.028635,
0.009390,
-0.038426,
-0.039582,
0.006298,
-0.006444,
-0.012092,
-0.020357,
0.014870,
-0.016642,
-0.009843,
-0.030584,
-0.012354,
-0.001379,
0.023000,
-0.037897,
-0.010919,
-0.034366,
0.011701,
-0.020371,
-0.025891,
0.015570,
-0.011204,
0.006129,
-0.011531,
-0.030657,
-0.030276,
0.003408,
0.019553,
-0.027734,
-0.024903,
-0.037864,
0.014514,
-0.036492,
-0.013306,
0.005272,
-0.008487,
-0.005431,
-0.010432,
0.016448,
-0.039744,
-0.009449,
0.003081,
0.006342,
0.012518,
-0.032675,
0.003400,
-0.040728,
0.020626,
-0.026701,
0.000506,
0.019641,
0.018925,
-0.055132,
0.001142,
-0.017785,
-0.010260,
0.020939,
0.019862,
-0.021971,
0.021633,
-0.034613,
-0.032589,
0.009094,
-0.013225,
-0.024252,
0.017020,
-0.029847,
-0.026476,
-0.015031,
0.004532,
-0.006281,
-0.006607,
0.020277,
0.014445,
0.015356,
0.011271,
0.001314,
-0.035198,
-0.022148,
-0.015277,
-0.050573,
-0.005074,
0.014337,
-0.038569,
-0.036912,
0.019876,
-0.008396,
-0.017152,
0.028580,
-0.002647,
-0.015191,
-0.031155,
-0.023034,
-0.000078,
-0.000997,
0.019749,
0.020477,
-0.037012,
-0.017690,
0.012141,
-0.032325,
-0.035476,
-0.003899,
-0.033336,
-0.006780,
-0.031395,
0.002418,
-0.012388,
0.012841,
-0.022479,
-0.011950,
-0.016819,
-0.024515,
-0.020679,
-0.019514,
-0.021159,
-0.041352,
-0.025317,
0.027467,
-0.001859,
0.010891,
-0.027223,
-0.009259,
0.001213,
0.020402,
-0.044995,
-0.054059,
-0.027494,
-0.018254,
-0.038040,
-0.028341,
-0.030183,
0.006259,
0.028426,
-0.033917,
-0.014297,
0.018103,
-0.025330,
-0.028507,
-0.036332,
-0.000890,
-0.045702,
-0.032707,
0.010979,
-0.007088,
-0.020602,
-0.052059,
0.014726,
-0.004885,
-0.048823,
0.008684,
-0.025501,
-0.022081,
-0.012863,
-0.017916,
-0.005852,
-0.033133,
0.012674,
-0.016000,
0.000620,
0.026640,
0.014696,
-0.038284,
-0.027953,
-0.021346,
0.006248,
0.028635,
-0.030090,
-0.017294,
-0.014020,
-0.010288,
0.012490,
0.000302,
-0.031885,
0.013554,
-0.032381,
-0.009047,
-0.032821,
0.018140,
-0.061976,
-0.023870,
-0.012417,
-0.031183,
-0.023895,
-0.009815,
-0.024361,
-0.001622,
-0.008232,
-0.034136,
-0.006837,
-0.036319,
0.017436,
0.019009,
-0.016665,
-0.032535,
-0.012430,
-0.009026,
-0.025951,
0.013916,
-0.015855,
0.009963,
0.027850,
-0.024702,
-0.024533,
0.025234,
-0.033011,
-0.029064,
-0.016535,
0.024135,
-0.019391,
0.021481,
-0.036101,
-0.017401,
0.005418,
-0.015521,
0.021824,
0.022139,
-0.032642,
-0.038863,
0.003484,
-0.014440,
-0.032075,
-0.000777,
0.014194,
-0.035567,
0.020362,
0.028705,
0.002183,
0.012093,
-0.024386,
0.003458,
0.008164,
0.022634,
-0.031890,
-0.026416,
0.009727,
0.001417,
-0.026836,
0.007922,
0.005674,
0.025058,
-0.030816,
0.008990,
0.011865,
-0.032778,
-0.031450,
0.005937,
-0.026039,
-0.010716,
-0.009541,
-0.026725,
0.009474,
0.025371,
-0.010294,
-0.024664,
0.026265,
-0.017104,
0.006452,
-0.013414,
-0.021313,
-0.014450,
-0.041746,
0.020479,
-0.021809,
-0.017057,
-0.005312,
0.006920,
-0.017533,
0.017124,
-0.007252,
0.017220,
-0.042893,
-0.000658,
0.018029,
-0.012358,
-0.035902,
-0.033166,
-0.039360,
0.011287,
-0.039266,
0.013235,
0.000207,
-0.046874,
-0.035375,
-0.017646,
-0.043647,
-0.041305,
0.016080,
-0.027314,
-0.011955,
0.000394,
-0.059788,
-0.042877,
-0.047731,
-0.011516,
-0.034312,
-0.023289,
0.004848,
0.007684,
-0.038619,
-0.013055,
-0.034078,
0.018600,
0.000600,
0.018167,
-0.041571,
0.012910,
0.025863,
0.029676,
-0.021463,
-0.010001,
0.020254,
0.028772,
-0.037323,
0.028918,
-0.006806,
-0.010726,
-0.011381,
0.026357,
0.007235,
-0.038028,
0.020093,
-0.037336,
-0.012921,
-0.016623,
0.001462,
0.012769,
-0.010649,
0.025935,
0.029113,
0.005589,
-0.014177,
0.019445,
-0.007231,
-0.016157,
0.028096,
-0.000351,
-0.021638,
-0.031441,
-0.031197,
-0.002800,
0.011442,
0.020432,
-0.034604,
-0.006396,
-0.030519,
0.024529,
0.005743,
0.030335,
0.013474,
0.002263,
-0.004590,
0.001673,
-0.043269,
0.017024,
-0.031834,
-0.019694,
-0.022415,
-0.048582,
-0.029820,
-0.033127,
-0.024010,
-0.020691,
-0.032338,
0.000205,
-0.018445,
0.019089,
-0.043657,
0.026679,
-0.038414,
-0.006330,
-0.007914,
-0.045204,
0.029029,
-0.034576,
0.001025,
0.006336,
0.009294,
0.017567,
-0.032880,
-0.022141,
0.007982,
-0.014366,
-0.007361,
-0.004439,
-0.017267,
-0.042108,
-0.027867,
-0.008845,
-0.014203,
-0.025731,
-0.014403,
0.012056,
-0.036296,
0.004649,
-0.045378,
-0.010788,
-0.002980,
-0.020452,
0.005576,
-0.037912,
0.003845,
-0.034369,
-0.028136,
-0.020953,
0.005521,
-0.003552,
-0.006749,
0.017740,
-0.018947,
-0.042619,
0.006707,
-0.028280,
-0.023458,
0.022925,
0.018585,
-0.039912,
0.008616,
-0.014177,
0.011042,
0.003785,
0.027775,
-0.031625,
-0.029718,
0.026199,
-0.026293,
-0.020056,
-0.010038,
-0.003535,
0.007917,
-0.002555,
0.010393,
0.028108,
-0.023112,
-0.023993,
-0.038321,
-0.013541,
0.010076,
-0.030602,
0.027218,
-0.035682,
0.007415,
-0.024524,
0.023238,
-0.003191,
-0.051146,
-0.025048,
-0.001524,
-0.030785,
0.022833,
-0.039558,
0.012904,
0.005226,
-0.035822,
0.013510,
-0.011822,
-0.038891,
0.004250,
0.005852,
0.018858,
-0.028736,
-0.033977,
-0.018755,
-0.020735,
-0.041227,
-0.022938,
-0.011916,
-0.038704,
0.016755,
-0.025248,
0.023578,
-0.016788,
0.003327,
0.023371,
0.010265,
0.018206,
-0.038664,
-0.015167,
-0.006295,
-0.035298,
-0.009547,
-0.034474,
-0.014392,
-0.020946,
0.018454,
-0.039380,
-0.004143,
-0.009670,
-0.026119,
-0.021129,
-0.043296,
-0.027903,
0.011653,
0.029164,
-0.030181,
-0.016276,
0.022517,
0.008030,
0.007235,
-0.021135,
-0.025599,
0.009237,
-0.027320,
-0.030069,
0.007250,
0.024263,
0.018779,
-0.021723,
0.028491,
-0.031525,
-0.008499,
-0.007341,
0.013756,
-0.007037,
-0.019112,
-0.026995,
0.021493,
-0.033125,
0.026320,
0.028304,
0.015276,
-0.020130,
-0.023263,
0.014267,
0.018180,
-0.001971,
-0.047835,
-0.040870,
0.002850,
-0.005281,
-0.004419,
-0.001307,
-0.001745,
0.008253,
-0.020261,
0.033971,
-0.010914,
-0.058186,
-0.049217,
-0.004573,
-0.018115,
-0.002467,
-0.015988,
0.001107,
0.008430,
-0.010398,
0.013503,
-0.009290,
0.015509,
0.024268,
-0.002099,
-0.034939,
-0.015017,
-0.013339,
-0.003752,
0.008587,
-0.002765,
-0.007308,
-0.026720,
-0.047443,
0.020560,
0.003220,
-0.025470,
0.014117,
0.005837,
-0.017337,
-0.037179,
0.024159,
0.009950,
-0.020071,
0.010101,
-0.030976,
-0.026113,
-0.044159,
-0.033579,
0.012616,
-0.016735,
-0.040622,
0.027120,
-0.002779,
0.004394,
-0.002980,
0.003279,
-0.026874,
-0.023971,
-0.035763,
0.012951,
-0.024299,
-0.038798,
-0.009214,
-0.016542,
-0.028410,
0.026077,
0.010370,
-0.029687,
-0.039976,
0.018622,
0.029382,
0.020439,
0.027347,
0.004273,
0.010584,
0.007411,
-0.001821,
-0.030872,
-0.019358,
-0.025475,
-0.001293,
0.018504,
-0.003173,
0.024923,
0.014001,
-0.015671,
-0.039941,
0.008093,
0.018437,
0.022263,
0.000210,
0.012816,
-0.030670,
-0.038881,
-0.006442,
-0.022718,
-0.001916,
-0.040008,
0.109320,
0.104970,
0.148150,
0.012573,
0.034226,
-0.020040,
-0.005526,
0.054133,
0.067053,
-0.105040,
0.051142,
0.143610,
0.078202,
-0.031156,
-0.076277,
-0.010129,
0.131110,
-0.082708,
-0.042150,
-0.059324,
-0.117010,
-0.041200,
0.084941,
-0.131280,
-0.246780,
0.009719,
-0.007382,
-0.026507,
-0.027964,
0.010898,
-0.002476,
0.010728,
-0.032732,
0.002561,
0.007912,
-0.000308,
-0.011822,
0.029964,
0.026775,
-0.024010,
0.009697,
0.025721,
-0.009751,
-0.022238,
-0.002792,
0.007712,
-0.001082,
-0.015537,
0.002796,
0.011445,
-0.098408,
-0.012734,
0.063574,
0.050791,
-0.079066,
-0.043528,
-0.022205,
-0.055763,
-0.005427,
-0.095752,
-0.086590,
-0.055071,
-0.139730,
-0.079643,
0.040310,
-0.050162,
-0.010351,
-0.136270,
-0.076597,
-0.007834,
-0.001795,
0.065838,
-0.100820,
0.006683,
0.059634,
0.031924,
0.033038,
0.052612,
0.025729,
-0.069286,
0.010850,
-0.012347,
-0.044036,
0.039838,
0.027674,
0.028051,
0.041087,
0.040955,
0.067711,
0.036776,
0.051981,
-0.004503,
0.011421,
0.023008,
0.007907,
0.007938,
0.014281,
-0.025225,
-0.010515,
0.017001,
-0.038605,
-0.017246,
-0.104620,
-0.074997,
-0.059243,
0.026077,
-0.042157,
-0.096855,
-0.017803,
-0.024325,
0.212590,
0.022965,
0.040686,
0.056877,
0.096477,
0.105910,
0.143260,
0.054336,
0.010020,
0.072236,
0.080419,
0.067967,
0.029805,
0.097689,
0.094605,
0.095333,
0.035573,
0.053404,
0.016860,
-0.005538,
0.054016,
0.078159,
0.006837,
0.005479,
-0.075333,
0.033509,
0.154840,
0.074269,
0.008469,
0.018808,
0.098884,
0.166910,
0.148960,
0.121640,
0.134250,
-0.008930,
0.150880,
0.117990,
0.070326,
0.057619,
0.018806,
0.085106,
0.018020,
-0.012615,
-0.024419,
-0.015408,
-0.035627,
0.025277,
0.013615,
-0.000057,
-0.008215,
0.011049,
-0.021421,
0.022112,
0.084406,
0.045143,
0.135990,
0.141710,
0.207040,
0.242030,
-0.027964,
0.124560,
0.112820,
0.097694,
0.261660,
0.056473,
0.039419,
0.000653,
0.071047,
0.247990,
0.082984,
0.019239,
0.062711,
0.064114,
0.018780,
0.028479,
-0.070018,
-0.048560,
-0.139230,
-0.113670,
-0.016604,
-0.080596,
-0.104550,
-0.143580,
-0.201540,
0.159940,
0.202230,
0.046703,
-0.184060,
-0.258970,
0.148430,
0.148580,
0.045308,
0.051152,
0.222400,
0.048618,
0.095730,
0.106550,
0.024593,
-0.006532,
-0.021730,
0.045992,
-0.083715,
-0.049928,
-0.146560,
0.042573,
-0.137650,
-0.223160,
-0.161150,
-0.202000,
0.030775,
-0.025116,
-0.061403,
-0.007518,
-0.219900,
-0.110880,
0.021299,
-0.007077,
-0.026380,
-0.240370,
0.021000,
0.143360,
0.120120,
0.053272,
-0.047215,
0.140300,
-0.009304,
-0.009423,
-0.056384,
0.029023,
0.138770,
-0.063487,
-0.116190,
-0.168980,
0.033018,
0.122210,
-0.044914,
-0.122190,
-0.092869,
-0.051501,
-0.090010,
0.106550,
0.070071,
0.205560,
0.086865,
-0.054178,
0.004538,
-0.066349,
0.042766,
0.076585,
0.017237,
-0.087641,
-0.069500,
0.063080,
-0.089109,
0.040393,
-0.106720,
-0.076300,
0.078121,
-0.119770,
-0.060921,
-0.199540,
-0.180990,
-0.182360,
-0.318680,
-0.021625,
-0.022257,
-0.017964,
-0.026313,
-0.103800,
0.028260,
0.068349,
-0.036815,
0.043803,
-0.000205,
-0.040769,
0.025740,
0.113490,
0.042818,
-0.033494,
-0.080613,
0.085081,
-0.064983,
-0.120390,
-0.165540,
-0.170100,
-0.111510,
-0.115570,
-0.237530,
-0.290520,
-0.091582,
-0.001768,
0.098970,
-0.087729,
0.023312,
-0.049841,
-0.047791,
0.109220,
0.027793,
-0.029219,
-0.076272,
-0.021815,
-0.025396,
-0.094989,
-0.081747,
-0.004630,
-0.129150,
-0.190700,
-0.215380,
-0.209020,
0.262720,
0.122840,
0.069581,
0.059480,
0.059344,
0.055409,
0.090097,
0.090721,
-0.002157,
0.077446,
-0.061168,
0.044994,
0.073767,
0.059370,
0.107990,
0.010294,
0.023605,
0.061805,
0.036518,
0.091481,
-0.062850,
-0.055596,
-0.056568,
0.058803,
0.154250,
-0.148200,
-0.142670,
-0.088367,
0.004186,
0.043003,
-0.037916,
-0.051626,
0.052291,
0.037457,
0.043513,
0.052345,
-0.106040,
-0.033297,
-0.006946,
0.047433,
0.075168,
-0.004162,
0.039542,
-0.027589,
-0.052861,
0.059962,
0.107460,
0.037520,
0.075523,
-0.050781,
0.230380,
0.223670,
0.098122,
0.072284,
-0.127810,
-0.106170,
-0.050009,
0.059790,
0.018258,
0.020267,
-0.056355,
-0.104490,
-0.024989,
0.019429,
-0.000941,
0.007582,
0.040412,
0.055192,
-0.018497,
-0.114720,
0.001946,
0.095280,
0.068026,
0.080706,
-0.086718,
0.106560,
0.067375,
-0.008391,
0.119580,
0.092399,
0.011521,
-0.019174,
-0.008685,
-0.045547,
-0.042375,
-0.002185,
0.013682,
0.011211,
-0.033399,
-0.005560,
0.029270,
-0.002926,
-0.032029,
-0.003148,
-0.055673,
-0.032213,
0.017890,
-0.016529,
-0.009219,
-0.056356,
-0.064959,
0.015017,
-0.027173,
0.018659,
0.008472,
0.082738,
0.018541,
-0.014300,
0.041701,
0.019137,
0.010003,
-0.095934,
-0.067475,
-0.100730,
0.028041,
0.004717,
-0.041256,
-0.027038,
-0.008399,
0.054655,
-0.077645,
0.042397,
-0.053125,
-0.040944,
0.032451,
0.028010,
0.087273,
-0.028707,
0.082094,
0.133810,
0.096449,
0.074734,
0.046178,
0.049531,
0.048641,
0.006155,
-0.024435,
-0.063561,
0.009346,
-0.003853,
-0.061900,
0.068279,
-0.046281,
-0.038161,
-0.062934,
0.009929,
0.023749,
-0.006581,
-0.057993,
-0.086962,
-0.037794,
-0.149170,
-0.145330,
-0.089858,
-0.047047,
0.012431,
0.001304,
0.071097,
0.033467,
0.035652,
0.127060,
-0.033863,
0.012387,
0.086211,
0.071479,
0.116820,
0.081557,
0.044601,
0.051508,
-0.015825,
-0.034460,
-0.028329,
-0.036292,
0.064966,
-0.006998,
0.016188,
0.003190,
-0.012910,
0.013957,
-0.019773,
-0.007563,
0.027268,
0.032215,
-0.002523,
0.034260,
-0.003144,
0.035615,
0.039418,
0.001673,
-0.019638,
0.006490,
-0.016925,
0.020062,
0.032597,
0.000815,
-0.047230,
-0.006507,
0.010990,
-0.009046,
0.005861,
0.011046,
-0.028702,
-0.052278,
-0.005807,
0.035153,
0.060086,
0.061225,
0.030717,
0.068544,
0.049524,
-0.082938,
-0.045334,
0.000928,
0.095863,
0.086155,
-0.005631,
0.013749,
0.080177,
0.054998,
-0.051826,
0.014592,
0.060132,
0.227030,
0.121080,
-0.056110,
-0.085051,
-0.149110,
-0.144590,
-0.055582,
-0.125160,
0.103000,
0.007888,
-0.034591,
-0.069439,
0.104390,
0.110280,
0.189810,
0.139040,
0.100250,
0.164000,
-0.051153,
0.054709,
0.062247,
0.099946,
0.095841,
-0.256800,
-0.171800,
-0.148660,
-0.237760,
-0.153790,
-0.346670,
-0.176150,
-0.199880,
-0.141870,
-0.275910,
0.014531,
0.134890,
0.177810,
0.131890,
0.033075,
-0.188060,
-0.051296,
-0.055636,
-0.088055,
-0.037691,
-0.057558,
-0.018804,
-0.020542,
0.033941,
0.051925,
-0.069801,
0.055518,
0.085526,
0.005279,
0.103130,
-0.156520,
-0.022931,
0.021178,
0.126540,
0.158380,
0.013302,
0.022988,
0.142820,
0.024095,
-0.056824,
0.036435,
0.056986,
-0.025120,
0.045997,
-0.010636,
0.121130,
-0.014529,
0.007416,
0.063129,
0.079858,
0.111480,
-0.057852,
-0.045255,
0.009031,
-0.032895,
0.026962,
0.001609,
-0.057077,
-0.018941,
-0.040968,
0.106170,
0.043138,
0.011838,
-0.048048,
-0.071785,
0.094983,
0.036144,
0.022159,
0.037059,
0.063569,
0.164040,
0.059926,
0.096126,
0.079228,
0.017284,
0.058757,
0.025946,
0.068245,
-0.044965,
-0.153090,
0.007758,
-0.065653,
-0.087055,
-0.052298,
-0.095518,
-0.085124,
-0.035212,
0.014522,
0.043742,
-0.074738,
-0.201810,
-0.075886,
-0.146000,
-0.058471,
-0.021871,
-0.239450,
-0.152340,
-0.097223,
-0.073783,
-0.012000,
-0.073814,
-0.067566,
0.002243,
-0.019937,
-0.031683,
0.121960,
0.133800,
0.082696,
0.061821,
0.141660,
-0.019639,
-0.039706,
0.016816,
0.018608,
0.015637,
-0.016011,
0.013827,
-0.045833,
-0.036911,
0.029604,
-0.020550,
-0.043975,
-0.071968,
-0.021254,
-0.033721,
-0.028485,
-0.051804,
-0.010206,
-0.045994,
-0.044514,
-0.001765,
-0.077823,
-0.019597,
0.026231,
-0.034014,
0.160840,
0.029886,
0.018428,
0.116240,
-0.112050,
0.163130,
0.113300,
0.087720,
0.078852,
0.131010,
0.142360,
0.184870,
0.137700,
0.110450,
0.104220,
-0.062569,
-0.059946,
-0.083652,
-0.155660,
-0.184470,
-0.233410,
-0.063855,
-0.047782,
-0.032678,
-0.075173,
0.065564,
0.021305,
0.004988,
0.028551,
0.046329,
-0.084974,
-0.027980,
-0.088387,
0.032722,
0.115600,
-0.052475,
-0.041136,
-0.080240,
-0.009403,
-0.029503,
0.063541,
-0.001545,
0.060344,
0.028943,
-0.005463,
0.164140,
0.142600,
0.090092,
0.058400,
0.037853,
0.012906,
0.002902,
0.010354,
0.039998,
-0.016414,
0.054259,
0.017386,
-0.054986,
-0.015809,
-0.009996,
0.032956,
0.059414,
0.045905,
-0.004301,
0.031142,
0.021493,
0.037351,
0.028235,
0.058256,
0.034336,
-0.027910,
0.010573,
0.026423,
0.048181,
-0.006187,
0.070520,
0.109410,
0.123460,
0.189280,
0.161240,
-0.080704,
-0.043329,
0.162070,
0.140900,
-0.087233,
-0.087592,
-0.168480,
0.141330,
0.198990,
-0.075164,
-0.056264,
-0.093370,
-0.022730,
0.172050,
-0.006350,
0.053761,
-0.026017,
0.014659,
0.003970,
-0.162900,
-0.059458,
0.012374,
-0.024280,
-0.000546,
-0.034639,
-0.015809,
0.011111,
0.016470,
0.014355,
-0.005676,
0.002036,
-0.011224,
-0.045905,
-0.016470,
-0.005600,
-0.005999,
-0.001298,
-0.044935,
-0.010334,
-0.015760,
-0.016321,
-0.018922,
-0.019488,
-0.004459,
-0.006165,
0.033804,
-0.012120,
0.011080,
0.039080,
0.026472,
0.021906,
-0.027066,
-0.014741,
-0.023917,
-0.001764,
-0.028865,
-0.017137,
-0.035899,
0.011975,
-0.014294,
0.017708,
0.012021,
0.009811,
-0.000828,
-0.018489,
0.023868,
0.004934,
-0.033716,
0.028336,
0.001949,
0.026517,
0.022559,
0.021266,
-0.061066,
-0.005972,
-0.000423,
0.010435,
-0.020692,
-0.013000,
-0.027222,
0.018194,
-0.013200,
-0.012028,
-0.026771,
-0.014170,
0.018077,
-0.032671,
-0.034262,
0.004546,
0.022975,
0.000624,
-0.040736,
0.008633,
-0.023613,
0.012300,
0.013617,
0.030267,
-0.026828,
0.000295,
-0.004948,
-0.037168,
-0.005553,
0.027881,
0.008691,
0.014761,
-0.031789,
-0.012790,
-0.002487,
0.018856,
0.000816,
0.028613,
-0.040089,
-0.021707,
-0.013590,
-0.013632,
0.010358,
-0.040322,
0.028222,
0.008684,
-0.040145,
0.015378,
-0.038286,
-0.066556,
-0.026774,
-0.002933,
-0.025816,
-0.028870,
-0.009294,
0.013341,
-0.001991,
-0.028260,
0.020626,
0.001541,
-0.021938,
-0.030683,
-0.013025,
0.040744,
0.002268,
-0.037095,
0.006358,
-0.024243,
-0.001527,
0.001960,
-0.007984,
-0.018088,
-0.024014,
-0.008718,
-0.036019,
-0.028720,
-0.061409,
-0.014608,
-0.024402,
-0.033609,
-0.001410,
0.010099,
-0.022492,
0.021985,
0.008580,
0.021427,
0.017181,
0.009737,
0.003993,
-0.032196,
-0.034066,
-0.031147,
0.011887,
0.002264,
0.005027,
-0.029875,
0.007813,
-0.018196,
0.009108,
-0.030390,
-0.037884,
-0.012641,
0.014522,
0.017071,
0.011613,
0.014419,
0.003052,
-0.032933,
0.025340,
-0.029121,
0.012989,
0.023223,
-0.015120,
0.026754,
-0.039918,
-0.009397,
0.004253,
-0.036267,
-0.039880,
-0.026824,
0.010657,
0.036651,
-0.024821,
-0.031949,
0.004409,
0.023368,
-0.004966,
-0.003986,
-0.013184,
0.020141,
0.023010,
0.006265,
-0.028893,
0.012938,
0.012030,
0.017551,
0.010923,
0.010132,
0.008823,
0.023311,
0.027920,
-0.028039,
0.001583,
-0.004065,
0.006074,
0.025842,
-0.030442,
-0.007493,
0.005427,
-0.045693,
0.000079,
-0.005380,
-0.007868,
-0.002157,
-0.022154,
-0.016905,
0.015878,
-0.035295,
-0.003117,
-0.057624,
-0.020599,
-0.011540,
0.002992,
-0.032877,
0.015659,
-0.013180,
0.006079,
-0.017673,
-0.012064,
0.013582,
-0.030491,
0.017839,
-0.013581,
-0.038933,
-0.052669,
-0.035340,
-0.030491,
-0.055533,
-0.029127,
-0.007120,
-0.012460,
0.008977,
-0.039930,
-0.037847,
-0.037815,
-0.009956,
-0.000692,
-0.042911,
-0.019247,
-0.044517,
0.007808,
-0.040560,
-0.055094,
-0.024879,
0.005841,
-0.031711,
-0.017037,
-0.035933,
-0.031405,
-0.022764,
0.003475,
-0.004456,
0.004274,
0.006883,
0.005206,
0.010918,
-0.032320,
-0.030493,
-0.027139,
0.023899,
-0.007548,
-0.019978,
0.004163,
0.022840,
0.005670,
-0.005931,
0.012032,
0.028192,
0.021689,
-0.040339,
0.000202,
0.019242,
0.005452,
-0.021779,
-0.034401,
-0.022844,
-0.005631,
-0.016417,
0.010132,
-0.023259,
0.007866,
-0.030243,
-0.027719,
0.014401,
-0.034591,
-0.001268,
-0.060350,
0.002291,
-0.003760,
-0.004928,
-0.027109,
-0.031123,
-0.017636,
0.008645,
0.011916,
-0.006579,
-0.019338,
0.029784,
-0.011866,
-0.009783,
0.012155,
0.030717,
0.033304,
-0.030705,
-0.006302,
-0.031048,
0.033436,
-0.010301,
0.006170,
-0.051572,
-0.038918,
-0.021854,
-0.037486,
-0.030017,
0.002400,
-0.017254,
-0.013267,
-0.001610,
-0.052712,
-0.005347,
-0.009239,
-0.007392,
-0.013713,
-0.035784,
-0.020454,
0.016443,
-0.017534,
-0.003307,
-0.033691,
0.007868,
0.023529,
-0.021266,
-0.019572,
-0.029945,
-0.022907,
-0.035163,
-0.039881,
-0.011317,
-0.023548,
-0.020276,
-0.007438,
0.004768,
-0.017146,
0.007384,
-0.024539,
-0.043607,
0.015348,
-0.026597,
-0.039251,
-0.017314,
0.008837,
-0.014265,
-0.059888,
-0.036957,
-0.045258,
-0.053730,
-0.026816,
-0.058012,
-0.000655,
-0.015624,
0.011888,
-0.021040,
0.020517,
-0.036975,
0.007885,
-0.022079,
-0.017077,
0.000342,
-0.020219,
0.028512,
-0.015716,
-0.011019,
-0.024141,
-0.000056,
-0.021658,
-0.021202,
0.000586,
0.002861,
-0.040732,
-0.016068,
-0.053320,
0.005740,
-0.043958,
-0.003339,
0.012136,
-0.025966,
-0.039264,
-0.006065,
-0.028538,
-0.042793,
-0.050847,
-0.039048,
-0.018355,
-0.020507,
0.011534,
-0.056883,
-0.013879,
-0.026029,
-0.024616,
-0.036187,
0.016964,
-0.004746,
0.003115,
-0.033524,
0.003883,
0.018181,
-0.006783,
-0.020998,
-0.022863,
-0.035703,
0.028967,
-0.027352,
0.007795,
-0.028195,
0.006821,
0.024536,
0.017884,
0.026137,
-0.010712,
0.007386,
-0.029799,
0.008361,
-0.034895,
0.020665,
-0.010336,
-0.041779,
-0.000920,
0.028928,
-0.003672,
-0.007586,
-0.001529,
0.018696,
-0.019585,
-0.017550,
-0.003767,
-0.003422,
-0.023739,
0.000151,
-0.016623,
0.009479,
-0.002181,
-0.045542,
-0.017852,
-0.021171,
0.024711,
-0.021364,
0.004900,
-0.064043,
-0.002682,
-0.007362,
-0.021153,
-0.006615,
0.015542,
0.001092,
-0.018045,
-0.001341,
0.015365,
-0.016509,
0.004072,
-0.007049,
-0.024368,
0.011893,
-0.036459,
0.009811,
-0.031868,
0.026381,
-0.002916,
0.015396,
-0.031722,
0.021287,
-0.030025,
-0.025471,
-0.009950,
-0.008617,
-0.053242,
0.025677,
-0.035842,
-0.006272,
-0.027050,
0.009401,
0.012108,
-0.024472,
-0.037215,
-0.023077,
-0.041109,
-0.015822,
0.001039,
-0.003700,
-0.010187,
0.003016,
0.027210,
-0.013781,
-0.032326,
-0.025199,
0.024704,
-0.026138,
-0.001195,
0.019778,
-0.022730,
-0.003969,
0.025638,
0.006755,
0.016107,
0.004994,
0.009803,
0.010829,
-0.030975,
-0.031440,
0.026058,
-0.018508,
-0.023710,
-0.007998,
-0.008694,
0.000242,
0.026772,
0.019837,
-0.033017,
0.027719,
-0.002422,
-0.019359,
-0.011576,
0.024779,
-0.014858,
-0.023127,
-0.018577,
0.013278,
0.001054,
-0.033550,
0.002846,
0.027686,
-0.007141,
0.014887,
-0.021005,
-0.055300,
-0.015107,
-0.013168,
-0.008094,
-0.019719,
0.009229,
-0.010072,
-0.049627,
-0.043583,
-0.030294,
-0.037652,
-0.016768,
-0.021802,
-0.056113,
-0.035959,
0.017373,
0.005571,
0.013697,
-0.039035,
-0.045812,
-0.019253,
-0.019566,
0.016488,
-0.015408,
-0.020813,
-0.043072,
-0.035146,
-0.028295,
-0.012253,
-0.003656,
-0.045471,
-0.028788,
0.027581,
-0.034154,
-0.049399,
-0.025000,
-0.004412,
-0.004112,
0.020982,
-0.024303,
-0.000738,
-0.013502,
-0.009777,
-0.039576,
-0.023614,
-0.035800,
0.012604,
-0.007572,
-0.055662,
-0.019324,
0.012050,
-0.035338,
0.008039,
-0.030770,
-0.034228,
0.022678,
-0.040673,
-0.031099,
0.009376,
-0.002932,
0.010687,
-0.017745,
-0.021124,
-0.018468,
0.004502,
-0.001603,
-0.014240,
0.021634,
0.006112,
-0.032462,
0.013873,
-0.010187,
-0.015995,
0.010509,
0.000977,
0.012523,
-0.032642,
-0.025712,
0.011938,
0.009473,
-0.034504,
0.003891,
-0.050755,
-0.022183,
-0.004027,
-0.057491,
0.008088,
0.006121,
-0.043470,
-0.037905,
0.007249,
0.004084,
-0.013842,
0.024712,
-0.026982,
0.004794,
-0.008919,
0.009430,
-0.000197,
-0.028459,
-0.009917,
-0.039073,
0.000678,
-0.025524,
-0.017650,
0.022563,
-0.014736,
0.015772,
0.024537,
-0.031362,
0.036250,
0.016988,
-0.037533,
0.009749,
-0.033821,
-0.039636,
-0.032489,
-0.030890,
-0.042034,
-0.000959,
-0.003496,
-0.042704,
-0.039553,
-0.007315,
-0.032958,
-0.039513,
-0.008208,
-0.015977,
-0.028992,
0.014122,
-0.019926,
0.022378,
-0.037084,
0.005983,
-0.032068,
0.022275,
-0.014720,
-0.037926,
-0.021873,
-0.012462,
0.016212,
-0.013387,
0.007822,
-0.012951,
-0.034658,
0.028267,
-0.002996,
-0.002822,
0.003211,
0.024571,
-0.024345,
-0.028901,
0.015122,
0.028534,
0.002734,
-0.029390,
0.012178,
0.027808,
-0.002990,
-0.016895,
-0.003096,
0.028254,
-0.022122,
-0.008031,
0.008243,
-0.012937,
0.000464,
0.002767,
-0.038587,
0.026688,
-0.027017,
0.011363,
-0.000549,
0.002391,
-0.002108,
-0.001779,
-0.020989,
0.004312,
0.000445,
0.027568,
0.029835,
-0.026793,
0.021948,
0.013664,
-0.043816,
-0.016060,
0.020508,
-0.011928,
0.009411,
-0.031419,
0.006012,
-0.012516,
-0.006646,
-0.011595,
-0.050411,
-0.045648,
-0.016165,
0.018781,
-0.058295,
0.012810,
-0.037300,
-0.018054,
-0.008119,
-0.015156,
-0.031655,
0.016963,
-0.019419,
0.019432,
-0.039967,
0.013953,
-0.014101,
0.026481,
-0.007809,
-0.027266,
0.012715,
-0.014945,
0.022673,
0.024842,
-0.035726,
-0.035351,
-0.026582,
0.016440,
0.014806,
0.011604,
0.028209,
0.009317,
0.009456,
-0.015647,
-0.018386,
0.022398,
-0.003746,
-0.007281,
-0.016312,
0.008900,
-0.009918,
-0.015251,
0.012008,
-0.023945,
-0.029226,
0.004839,
-0.009259,
0.011623,
0.015800,
-0.027303,
0.022236,
0.002582,
-0.028286,
-0.022567,
0.006976,
0.021964,
0.007700,
-0.005197,
0.027443,
-0.030120,
-0.000108,
-0.019735,
0.022917,
0.026233,
0.017040,
0.018316,
-0.007391,
-0.010162,
-0.028391,
-0.015693,
0.049316,
0.005840,
-0.078613,
-0.034042,
-0.098263,
-0.016935,
0.023571,
0.009715,
-0.110990,
-0.022318,
-0.118560,
-0.187070,
-0.120840,
-0.180950,
0.015466,
-0.096545,
-0.077242,
0.006397,
0.011672,
-0.058621,
0.056353,
0.063080,
0.059637,
-0.073423,
-0.202480,
-0.010936,
0.006973,
-0.028305,
0.018079,
-0.014586,
-0.017675,
-0.011581,
0.002616,
0.020453,
0.029221,
-0.002282,
-0.015471,
0.020646,
0.033287,
-0.004068,
0.007214,
0.028938,
0.002238,
-0.000972,
-0.014457,
0.017005,
0.063278,
0.023687,
-0.004538,
-0.010384,
0.195710,
0.144780,
0.167750,
0.024256,
0.216400,
-0.025934,
0.065503,
0.189890,
-0.053714,
-0.025243,
0.071312,
-0.071038,
-0.050995,
-0.189270,
-0.283830,
-0.129820,
-0.264940,
-0.074770,
-0.205310,
-0.151330,
0.007680,
0.073685,
0.079559,
-0.060222,
0.097008,
-0.026337,
-0.049562,
-0.017539,
-0.017219,
-0.001543,
0.037549,
0.016955,
0.033914,
0.057461,
-0.065426,
0.001343,
0.000091,
-0.041104,
-0.049456,
-0.047570,
-0.062102,
-0.000801,
0.010939,
-0.051702,
-0.016377,
-0.015622,
0.014922,
0.057870,
-0.022893,
-0.016101,
-0.040295,
-0.014143,
0.029649,
-0.058862,
-0.000590,
0.051557,
-0.052269,
-0.112380,
-0.022135,
-0.010898,
0.047864,
-0.011325,
0.037460,
0.036078,
0.059057,
0.014350,
-0.023261,
0.028846,
0.014535,
0.069812,
-0.019116,
0.101000,
0.101020,
0.016726,
0.057989,
0.141560,
0.122850,
0.090753,
0.140860,
0.248700,
0.084061,
0.003956,
0.040606,
0.068178,
0.168410,
-0.017511,
-0.154650,
-0.001215,
0.065013,
0.084633,
-0.156480,
-0.144670,
-0.036689,
-0.074773,
-0.141390,
-0.044649,
-0.075868,
-0.039098,
-0.039040,
-0.158820,
0.099865,
0.031549,
0.060943,
0.073997,
0.230700,
-0.057334,
-0.057092,
0.004471,
0.004933,
-0.012582,
0.057724,
0.051643,
0.110770,
0.068794,
-0.032326,
0.075761,
0.072829,
0.141910,
0.010326,
-0.037487,
0.032045,
0.041723,
0.132690,
0.127320,
-0.061749,
0.017859,
0.042235,
0.036991,
-0.049172,
0.066939,
-0.031534,
-0.104290,
0.094623,
0.014756,
0.043260,
-0.013021,
-0.141500,
0.005259,
-0.008773,
0.121930,
0.021648,
-0.000651,
-0.021022,
0.062606,
0.129740,
-0.003149,
-0.091029,
0.026764,
0.102960,
0.089517,
-0.060197,
-0.060412,
-0.063969,
-0.024624,
-0.029808,
-0.110780,
-0.241350,
-0.165070,
-0.169010,
-0.078853,
-0.195550,
-0.175040,
-0.384850,
-0.375400,
-0.152370,
-0.233430,
-0.092880,
-0.133430,
0.074733,
-0.010683,
-0.082208,
-0.082933,
-0.001477,
0.091569,
0.049944,
0.013738,
-0.124780,
-0.006546,
-0.044675,
0.154780,
-0.016364,
-0.023404,
0.114810,
0.000820,
0.002463,
-0.043709,
0.102240,
0.150060,
0.094253,
0.055802,
-0.074740,
0.195500,
0.197760,
0.174830,
-0.004158,
-0.097364,
0.072791,
0.164970,
0.106880,
-0.056947,
0.099569,
-0.072244,
-0.023958,
-0.032521,
-0.117370,
0.023746,
-0.030668,
0.092132,
0.033413,
-0.200180,
-0.000931,
0.030049,
0.117980,
0.146030,
-0.076797,
-0.087135,
-0.044045,
-0.008926,
0.029490,
-0.051687,
-0.109200,
0.082320,
0.115980,
0.143690,
0.159530,
-0.100470,
-0.047170,
0.001404,
-0.132440,
0.153110,
-0.030519,
0.103250,
-0.007005,
-0.096256,
0.017727,
0.005380,
0.079025,
-0.069017,
-0.033949,
-0.039692,
0.136290,
-0.010653,
0.030274,
-0.047000,
-0.139760,
0.018103,
-0.041425,
-0.053200,
-0.049490,
0.031680,
-0.002336,
-0.066524,
-0.026564,
-0.031067,
0.096152,
0.037917,
0.115990,
0.113710,
0.157210,
0.170650,
0.054375,
0.069934,
0.088819,
0.008675,
0.036497,
-0.120170,
0.016664,
0.021012,
0.003423,
0.033620,
-0.025253,
-0.134350,
-0.103920,
-0.138240,
-0.112810,
-0.189190,
-0.190180,
-0.051242,
0.030709,
0.004307,
-0.028313,
-0.180780,
-0.113960,
-0.011959,
0.037786,
-0.113230,
-0.068617,
0.023867,
0.058747,
-0.092275,
0.008844,
0.027888,
0.024437,
0.006968,
-0.058857,
0.139390,
0.057008,
0.052734,
0.015809,
0.008550,
-0.029847,
0.087876,
-0.074975,
-0.096816,
-0.207470,
-0.023306,
0.061566,
-0.080726,
-0.031098,
-0.037809,
-0.000871,
-0.016389,
-0.033656,
0.013631,
0.114770,
-0.147290,
-0.042057,
0.006158,
-0.040698,
0.056811,
-0.230650,
-0.135020,
-0.046162,
-0.003445,
0.258110,
0.044790,
0.027371,
-0.027374,
-0.036718,
-0.005227,
-0.003693,
0.083846,
-0.020642,
-0.032291,
-0.002477,
-0.105240,
0.003219,
0.117050,
0.033552,
0.031501,
-0.071829,
-0.000819,
0.073263,
0.099674,
-0.004278,
-0.181500,
-0.097216,
-0.114290,
-0.096975,
-0.086007,
0.015735,
-0.008055,
0.015601,
-0.010554,
-0.030615,
0.016949,
-0.017276,
0.012471,
-0.045382,
-0.035048,
-0.040712,
-0.005753,
-0.020888,
0.014875,
-0.045204,
0.017890,
-0.045455,
-0.033719,
0.023069,
-0.002704,
-0.008068,
-0.053531,
-0.044441,
-0.034979,
-0.032460,
-0.015525,
-0.036206,
-0.034270,
0.012525,
0.157570,
-0.096777,
0.106520,
0.039167,
0.063342,
-0.021826,
0.004750,
0.075227,
0.013586,
-0.078042,
-0.021005,
0.151970,
-0.068645,
0.022025,
-0.064684,
-0.086381,
-0.067002,
0.025105,
0.060109,
0.092836,
0.010173,
-0.014085,
0.005411,
0.049437,
0.110500,
0.038045,
-0.187360,
0.009449,
-0.087531,
-0.046217,
-0.064664,
-0.174070,
-0.179170,
-0.177420,
-0.125500,
-0.122530,
-0.208520,
-0.202420,
-0.179790,
-0.102390,
-0.111340,
-0.064186,
-0.010655,
-0.068910,
0.026603,
-0.072402,
0.048515,
0.063169,
-0.133430,
-0.038597,
-0.162810,
-0.174410,
-0.030903,
-0.170690,
-0.060772,
-0.173980,
0.028748,
-0.039179,
-0.077668,
-0.046747,
-0.106760,
0.151840,
0.123340,
0.086152,
-0.006035,
0.044950,
0.168290,
0.112540,
0.122070,
0.036372,
0.095024,
-0.002891,
0.013236,
0.028957,
0.033091,
0.013560,
0.005271,
0.034465,
0.043972,
0.022479,
0.014681,
-0.023586,
-0.016584,
-0.016075,
-0.047354,
-0.001819,
-0.004046,
0.028776,
-0.020804,
-0.014976,
0.023876,
0.027131,
-0.002811,
0.004785,
0.018172,
-0.036233,
0.155350,
0.018409,
-0.046119,
-0.060403,
0.037998,
0.277960,
0.066306,
0.036881,
0.018954,
0.058011,
0.218370,
0.068049,
0.024122,
0.039729,
0.124730,
-0.012256,
-0.010123,
-0.092517,
0.026655,
0.013365,
-0.260490,
-0.047276,
0.013770,
-0.015662,
-0.115510,
-0.017455,
0.049748,
-0.048071,
0.076401,
0.003295,
-0.175610,
-0.283230,
-0.259090,
-0.045406,
-0.103450,
-0.156380,
-0.341360,
-0.432220,
-0.393450,
-0.298390,
-0.055362,
-0.220880,
-0.284730,
-0.126600,
-0.194080,
0.129460,
-0.079759,
-0.077223,
-0.058390,
-0.042170,
-0.073337,
-0.086124,
-0.015094,
-0.011102,
-0.064142,
-0.053245,
-0.086868,
0.042000,
0.066573,
0.056681,
0.090213,
0.075635,
-0.000910,
-0.046281,
0.038888,
0.106610,
-0.027179,
-0.034078,
0.063453,
0.056458,
0.097867,
0.004052,
0.007751,
-0.072239,
-0.073653,
0.033634,
0.023056,
0.016113,
0.038643,
0.010293,
0.076417,
0.059722,
0.114040,
0.007674,
0.030069,
-0.057273,
0.024837,
0.117590,
0.064547,
0.014787,
0.038090,
0.095285,
0.142020,
0.105620,
0.046231,
-0.042469,
0.094654,
0.067113,
0.070170,
-0.098598,
0.095460,
0.051472,
0.102720,
0.094534,
0.102070,
0.006522,
-0.011420,
-0.046662,
-0.015308,
-0.009459,
0.041643,
0.021703,
-0.078566,
-0.035593,
-0.052987,
0.075651,
0.123990,
0.026485,
-0.018440,
0.032839,
0.062779,
0.121530,
0.105160,
0.171900,
0.082906,
0.208850,
0.060165,
0.031007,
0.109830,
0.144970,
0.240100,
0.090531,
-0.023363,
0.118860,
0.159130,
0.062234,
0.032647,
-0.076442,
-0.124840,
0.076373,
0.003473,
-0.150320,
-0.070966,
-0.068308,
-0.037877,
-0.011359,
-0.082610,
-0.019939,
-0.084808,
-0.086091,
-0.065994,
-0.048495,
-0.011518,
-0.049783,
-0.030796,
-0.086131,
-0.066863,
-0.063223,
-0.072623,
-0.021068,
-0.079082,
0.047680,
-0.066565,
0.008014,
0.023767,
-0.010974,
0.014838,
-0.066318,
0.021892,
0.086981,
-0.001995,
-0.002633,
0.036011,
-0.031482,
-0.008368,
-0.196800,
-0.042178,
-0.016229,
-0.134330,
-0.199590,
-0.148180,
0.012771,
-0.002897,
0.062636,
-0.153450,
-0.051837,
-0.086335,
-0.185560,
-0.067320,
-0.222640,
-0.031870,
0.079717,
-0.091540,
0.007138,
-0.080482,
0.119920,
-0.014788,
-0.018738,
-0.029819,
-0.099431,
0.079165,
0.095316,
0.058803,
0.003219,
-0.043257,
0.044231,
0.018163,
0.085686,
-0.229860,
-0.195540,
0.034616,
-0.021159,
-0.180690,
-0.142030,
0.030839,
-0.099273,
-0.095519,
-0.014848,
0.000390,
0.026866,
-0.091433,
-0.041500,
-0.015072,
-0.013798,
0.094715,
0.031412,
-0.028136,
-0.032157,
-0.006173,
-0.034956,
-0.033922,
-0.016608,
0.000237,
-0.004294,
-0.005426,
0.000412,
0.001386,
-0.016030,
-0.031310,
-0.035113,
-0.000395,
0.035792,
0.026079,
-0.041672,
0.009243,
-0.013960,
0.003761,
0.037173,
0.013880,
0.015152,
-0.062804,
-0.000482,
-0.061340,
-0.069565,
-0.051143,
0.043569,
0.018940,
-0.012519,
-0.023287,
0.064251,
0.077723,
0.114250,
0.008714,
-0.123500,
0.001148,
0.211520,
0.115070,
0.060057,
0.021388,
0.048439,
0.019474,
0.065965,
-0.018735,
0.059587,
-0.023086,
-0.005881,
0.027122,
0.024886,
0.000891,
-0.003417,
-0.032906,
0.007746,
0.018324,
-0.032920,
-0.018753,
-0.007850,
-0.026481,
0.000691,
0.006011,
0.024134,
-0.026853,
-0.010097,
-0.010731,
0.013051,
-0.014517,
0.000593,
0.005911,
-0.012849,
-0.005831,
0.019302,
-0.038030,
-0.015737,
0.014344,
0.027718,
-0.004485,
0.033102,
-0.015750,
0.021270,
-0.009594,
0.001909,
0.004807,
-0.012840,
-0.004217,
-0.021797,
-0.007490,
-0.022209,
0.016001,
-0.019934,
0.017440,
0.029358,
0.018733,
0.008750,
-0.008652,
0.016531,
0.008999,
0.024887,
-0.012579,
0.012215,
-0.036541,
-0.018656,
0.016767,
0.019056,
-0.010359,
-0.041257,
0.021902,
-0.015721,
-0.023859,
0.008637,
0.022316,
0.002094,
0.008184,
0.008451,
0.016043,
0.022019,
0.014700,
-0.026687,
-0.027627,
-0.008405,
-0.021671,
-0.022977,
-0.028416,
0.001804,
0.013359,
-0.002680,
-0.034832,
-0.015658,
-0.033986,
-0.014815,
-0.008351,
-0.010882,
-0.018815,
0.000517,
-0.022281,
-0.033065,
0.017197,
-0.035476,
-0.031938,
-0.002135,
0.000553,
0.011007,
-0.012697,
-0.010003,
0.007481,
0.016900,
-0.026452,
0.015179,
-0.027144,
-0.008971,
-0.007372,
-0.003784,
-0.023639,
0.001407,
-0.007144,
0.009653,
-0.001238,
-0.018097,
-0.027616,
0.030910,
0.010659,
0.026807,
-0.008481,
-0.035335,
-0.015729,
-0.039964,
-0.006093,
-0.001918,
-0.008907,
-0.025166,
0.011769,
-0.027294,
-0.027398,
-0.017766,
-0.026381,
-0.038739,
0.021047,
0.021929,
-0.033105,
0.014225,
0.008632,
0.004684,
-0.004017,
-0.007666,
0.016063,
-0.039891,
0.032687,
0.016661,
-0.039878,
-0.036381,
-0.025911,
-0.025413,
-0.019026,
-0.031498,
-0.013330,
-0.002641,
-0.037477,
0.009215,
-0.001559,
0.001449,
-0.005964,
-0.020747,
-0.013988,
0.009123,
-0.016305,
0.022551,
0.010474,
0.019119,
-0.012846,
0.008183,
-0.026203,
-0.009419,
-0.011261,
0.003986,
0.036836,
0.026700,
-0.027719,
-0.026393,
0.000213,
0.012268,
0.013132,
-0.032084,
0.024875,
0.008324,
0.002141,
0.004662,
-0.011274,
-0.041720,
0.024221,
0.003202,
0.011831,
0.023159,
0.032352,
-0.036484,
0.013061,
0.008610,
-0.021978,
0.000768,
-0.028748,
-0.013435,
0.007571,
0.014039,
0.026913,
-0.007385,
-0.010812,
0.017563,
0.026311,
-0.016497,
-0.014370,
-0.005226,
0.017563,
-0.009505,
0.013541,
-0.022742,
0.022184,
0.015000,
-0.007198,
0.022540,
-0.014551,
0.004050,
-0.024663,
-0.002649,
-0.034114,
-0.038328,
-0.044401,
0.021605,
0.022718,
0.035167,
0.014643,
-0.035949,
0.000416,
0.022879,
-0.005750,
0.006967,
-0.001540,
0.002653,
-0.004504,
0.021295,
-0.002012,
0.017559,
-0.032603,
0.002419,
-0.011427,
-0.010462,
-0.005284,
-0.040018,
0.016672,
-0.026471,
-0.010945,
0.013918,
-0.006039,
0.009917,
0.020427,
-0.037505,
-0.039630,
-0.034719,
0.004652,
-0.038872,
0.019504,
0.017134,
-0.049728,
-0.032868,
-0.024363,
-0.016442,
0.004025,
-0.011463,
-0.021551,
-0.018444,
0.007694,
-0.034040,
0.007422,
0.015777,
-0.040458,
-0.035639,
0.002070,
-0.008537,
-0.024916,
-0.015016,
-0.006672,
-0.032953,
-0.021854,
-0.035634,
0.000551,
-0.018902,
0.015876,
0.000591,
0.016290,
-0.025535,
0.024001,
0.002681,
-0.036250,
0.016794,
0.025834,
-0.031979,
0.018378,
-0.018614,
-0.020164,
-0.002800,
0.026699,
-0.002224,
-0.020478,
0.000994,
-0.032696,
0.027683,
-0.031650,
-0.020904,
-0.024941,
-0.029480,
0.020847,
0.011884,
-0.006248,
-0.006286,
-0.008610,
0.016534,
0.026200,
-0.005616,
-0.021066,
0.013748,
-0.038935,
0.002678,
0.014078,
-0.020732,
-0.019128,
0.001134,
-0.009816,
-0.004945,
0.010910,
-0.037179,
0.010147,
-0.030645,
-0.009545,
0.020764,
0.015735,
-0.045399,
0.007009,
-0.043864,
-0.039057,
-0.001136,
-0.015255,
-0.028941,
0.031104,
-0.004286,
0.003890,
0.014541,
0.020938,
-0.006350,
0.011185,
0.031461,
-0.036174,
-0.016397,
-0.033046,
-0.028012,
-0.018003,
0.010157,
0.023897,
0.003347,
0.008325,
0.017239,
0.008234,
0.031985,
0.004462,
-0.012418,
0.010875,
-0.048621,
-0.028492,
-0.017340,
0.007863,
-0.027357,
-0.011854,
-0.008881,
0.005668,
-0.037197,
-0.001672,
0.038376,
0.018743,
0.032469,
0.004828,
-0.036188,
-0.031863,
0.008619,
-0.024720,
-0.030130,
0.025613,
-0.033392,
-0.022092,
-0.020560,
-0.023048,
0.003994,
0.017027,
0.021627,
-0.022571,
0.010824,
-0.015667,
0.006922,
-0.039958,
0.004139,
-0.032737,
-0.017614,
0.010162,
-0.008043,
-0.004799,
-0.006255,
-0.024834,
-0.039846,
0.006211,
-0.001923,
-0.013512,
-0.026316,
-0.020794,
0.001675,
-0.040860,
0.021259,
-0.004076,
-0.006635,
0.013056,
0.008139,
-0.034059,
0.024416,
-0.036281,
0.005359,
-0.002688,
0.009061,
-0.015033,
-0.041731,
-0.022059,
-0.005422,
0.024481,
0.004377,
0.022157,
0.024618,
0.025539,
-0.000465,
0.019771,
-0.007932,
-0.031269,
-0.037315,
0.009950,
0.009466,
-0.033843,
-0.023604,
0.012090,
-0.017866,
-0.033219,
0.017440,
-0.005958,
-0.001922,
0.009451,
0.015766,
-0.040774,
-0.003274,
0.014304,
-0.030091,
0.018039,
0.024624,
-0.023354,
-0.031774,
0.024590,
-0.027636,
-0.027330,
-0.011187,
0.003901,
-0.035283,
-0.020777,
0.025713,
0.014475,
-0.014492,
-0.012999,
-0.017991,
-0.002299,
0.010672,
-0.037637,
0.001315,
-0.031181,
-0.023815,
-0.041143,
-0.030048,
-0.007768,
-0.008802,
-0.038789,
-0.033337,
0.009509,
-0.030237,
0.014624,
0.002373,
-0.016481,
-0.021630,
-0.033145,
0.035892,
0.007900,
-0.035513,
-0.034408,
-0.007317,
-0.004910,
-0.033038,
-0.037410,
-0.028593,
-0.001801,
-0.025523,
-0.026256,
0.029265,
0.028217,
0.016338,
0.025573,
-0.014066,
0.029813,
-0.032921,
-0.009612,
0.016085,
0.011713,
0.024926,
-0.004266,
-0.002006,
0.011422,
0.016293,
-0.010849,
-0.021967,
-0.013916,
-0.012684,
0.019885,
0.010186,
0.001660,
0.011409,
-0.004568,
-0.007912,
-0.020686,
-0.010845,
0.029764,
0.001316,
-0.019504,
0.023687,
-0.017903,
-0.016986,
0.019900,
-0.001302,
0.026911,
0.004627,
0.016925,
-0.009783,
-0.028930,
0.009144,
-0.016054,
0.021988,
-0.033198,
-0.027173,
-0.042439,
0.002347,
0.025776,
-0.025528,
-0.020343,
-0.014539,
-0.030010,
-0.015575,
-0.005983,
0.020242,
0.003283,
-0.010187,
0.021082,
0.010812,
-0.012867,
0.022338,
0.014467,
-0.039061,
-0.012924,
-0.032365,
0.009252,
-0.017145,
0.016448,
-0.039453,
-0.001953,
-0.045058,
0.020985,
-0.024465,
-0.027237,
-0.043203,
-0.010163,
0.018448,
-0.025825,
-0.043426,
-0.014456,
0.004999,
-0.013414,
-0.036853,
0.022825,
0.024795,
-0.038107,
-0.022100,
-0.008315,
-0.022368,
-0.041330,
-0.007553,
0.016975,
0.015790,
0.018290,
-0.039307,
-0.002915,
-0.028623,
-0.023752,
-0.046372,
0.005991,
-0.045710,
-0.027975,
0.000751,
-0.027712,
-0.046401,
-0.044445,
-0.019569,
-0.022310,
-0.012884,
-0.036616,
0.015280,
-0.002534,
0.006745,
0.020972,
-0.017999,
-0.041106,
0.005829,
-0.003935,
-0.022975,
0.027740,
-0.003828,
0.005671,
-0.014018,
-0.009415,
0.020422,
0.016600,
0.028758,
-0.031526,
-0.020108,
0.019368,
0.015730,
0.019652,
0.001789,
-0.022911,
0.010068,
0.007367,
0.015846,
-0.019893,
-0.000918,
0.004872,
-0.024147,
-0.015998,
-0.030159,
0.010915,
0.015738,
-0.033379,
-0.008254,
0.008333,
-0.035830,
-0.008558,
-0.001971,
-0.008501,
-0.004908,
-0.037840,
-0.018562,
-0.020678,
0.014057,
-0.037985,
0.014301,
-0.010838,
-0.026224,
-0.034698,
-0.008900,
-0.023839,
0.007569,
0.024535,
0.004837,
-0.023003,
0.018314,
-0.027823,
-0.027241,
0.014589,
0.011698,
-0.010099,
-0.002241,
0.013823,
-0.028104,
-0.011664,
-0.035390,
0.021416,
-0.018441,
-0.000155,
-0.001865,
0.039341,
0.002090,
0.032411,
0.001928,
-0.000052,
0.025295,
0.013524,
-0.008120,
0.002384,
0.007414,
0.019883,
0.003842,
0.007912,
0.006610,
-0.022340,
-0.014297,
0.006100,
-0.038017,
-0.027151,
0.003229,
-0.039389,
-0.014604,
0.009827,
-0.012990,
0.011591,
-0.028617,
-0.029620,
0.000500,
-0.038525,
0.021021,
-0.005167,
0.024756,
-0.030819,
-0.003095,
0.014434,
-0.003608,
0.005867,
-0.008399,
-0.000202,
-0.035699,
-0.024500,
0.010808,
-0.025627,
-0.033974,
-0.023163,
-0.035898,
0.026812,
-0.015862,
-0.005746,
0.020925,
-0.023686,
-0.027874,
0.019815,
-0.045198,
-0.020664,
0.019670,
-0.042144,
-0.050083,
-0.036630,
0.015253,
0.014468,
-0.017518,
-0.011373,
0.000923,
-0.014800,
-0.020507,
-0.034958,
-0.006961,
-0.032431,
0.020164,
-0.014147,
0.015623,
-0.027745,
-0.031934,
0.022837,
0.019295,
-0.026145,
0.005006,
-0.010204,
-0.012842,
-0.014550,
0.002761,
0.017874,
0.019012,
0.034689,
-0.005277,
0.001482,
0.020538,
0.022822,
-0.023589,
0.011669,
-0.036034,
0.009263,
0.027179,
-0.007482,
-0.020233,
0.025951,
-0.019894,
-0.007815,
-0.004810,
-0.028057,
-0.021544,
0.020882,
-0.014982,
-0.030431,
-0.016792,
-0.004170,
-0.014294,
-0.027969,
0.017220,
0.007424,
0.003016,
-0.036801,
-0.038749,
0.009191,
0.011259,
-0.002855,
0.008445,
-0.005213,
0.021644,
-0.013777,
-0.004310,
-0.034846,
-0.043364,
-0.017405,
-0.059454,
-0.126740,
0.006544,
-0.042238,
0.027603,
0.036742,
0.074307,
0.040995,
0.058478,
0.046845,
-0.017614,
0.107730,
-0.031560,
-0.029527,
-0.056647,
0.086323,
0.053325,
0.002944,
-0.079885,
-0.108880,
-0.064813,
-0.184710,
-0.174540,
-0.108310,
-0.143200,
-0.032459,
0.031748,
0.010259,
-0.009326,
-0.031770,
0.008917,
-0.021357,
-0.003265,
-0.021534,
0.031188,
-0.015565,
-0.004980,
0.004817,
-0.006072,
-0.000425,
0.024443,
0.035285,
-0.016807,
-0.013757,
0.000368,
-0.001719,
0.027342,
0.002188,
0.032527,
-0.047314,
-0.109330,
0.129810,
-0.061117,
0.049933,
-0.007855,
-0.086404,
0.029887,
0.026502,
-0.001706,
0.002616,
-0.118820,
0.027233,
0.080810,
0.021674,
-0.049766,
-0.106040,
-0.041789,
0.010642,
-0.000635,
-0.121540,
-0.157900,
-0.182250,
-0.140670,
-0.001977,
-0.169570,
-0.020682,
-0.073112,
0.034381,
0.017643,
-0.011192,
0.025363,
-0.009582,
-0.013907,
-0.011843,
0.021527,
-0.018380,
-0.026719,
0.010311,
0.037842,
0.017732,
-0.022230,
-0.012955,
-0.014962,
-0.074166,
-0.030543,
0.019868,
0.018840,
-0.006773,
-0.047274,
-0.034424,
-0.090585,
-0.097951,
-0.036021,
-0.069447,
-0.163260,
-0.061538,
-0.046566,
-0.035756,
0.008287,
-0.044825,
0.110730,
0.048828,
0.060838,
0.107440,
0.134510,
0.142290,
0.083848,
0.077524,
0.083072,
0.111390,
0.103310,
0.018015,
0.030156,
0.057341,
0.102340,
0.040433,
0.209550,
0.078330,
0.056039,
0.020035,
-0.008970,
0.043394,
-0.066231,
-0.064847,
0.092380,
-0.018956,
0.025640,
-0.201670,
-0.048930,
0.196060,
0.066876,
0.103610,
-0.044161,
-0.077346,
0.041979,
0.161340,
0.060796,
-0.208250,
0.030014,
0.037426,
-0.147490,
-0.054892,
-0.051509,
-0.043276,
-0.119130,
0.021847,
-0.088911,
-0.056261,
0.057746,
0.003087,
-0.029579,
-0.011077,
0.027667,
0.011255,
0.116890,
0.076585,
0.069870,
0.050168,
0.233980,
0.084618,
0.192400,
0.130840,
0.065642,
0.023313,
0.097634,
-0.033155,
0.046056,
0.050732,
0.112730,
0.036796,
0.005857,
-0.080723,
-0.077131,
-0.000780,
0.000868,
-0.163720,
-0.102790,
-0.041355,
-0.023876,
0.039655,
-0.111590,
0.002516,
-0.042671,
0.072929,
-0.092978,
-0.209920,
-0.012141,
-0.129100,
-0.090628,
-0.265540,
0.182850,
0.042648,
0.085098,
0.013647,
0.035421,
0.125280,
0.134540,
0.083385,
0.012272,
0.022043,
0.089917,
-0.062734,
0.111190,
-0.063020,
-0.050013,
0.034423,
0.059383,
0.044813,
-0.056141,
-0.082941,
0.161420,
0.139020,
0.068869,
-0.042489,
-0.174890,
-0.111650,
-0.064363,
-0.193890,
-0.129900,
-0.076981,
0.016567,
-0.016095,
-0.074416,
0.095696,
0.087608,
0.007857,
-0.072205,
-0.000377,
0.095774,
-0.064309,
0.036831,
-0.022609,
-0.018013,
0.055308,
0.106660,
0.094248,
-0.046045,
-0.109850,
-0.080004,
0.023182,
0.116050,
-0.072916,
-0.024008,
0.068566,
-0.087494,
0.086317,
-0.130120,
0.080756,
-0.040594,
-0.006339,
-0.153660,
-0.074667,
-0.033020,
-0.010467,
0.134370,
-0.133210,
-0.178070,
-0.172620,
-0.038907,
-0.022775,
-0.114640,
-0.288670,
-0.170200,
-0.153030,
-0.226950,
-0.064022,
0.002372,
-0.002974,
0.114410,
0.045116,
-0.114000,
-0.033358,
0.093428,
0.084805,
0.177970,
-0.200260,
-0.074944,
0.145530,
0.168180,
0.057973,
-0.095158,
0.082164,
0.050961,
0.069161,
0.107130,
0.054819,
-0.067481,
-0.086405,
-0.093973,
-0.313780,
-0.172910,
-0.127840,
-0.110900,
-0.247960,
-0.031930,
-0.175290,
-0.078541,
-0.065458,
0.104440,
0.039422,
-0.218470,
-0.067916,
0.004619,
0.122080,
-0.053979,
0.024906,
0.042505,
0.004654,
0.103420,
-0.022274,
0.072862,
0.007074,
-0.061700,
0.000656,
-0.104530,
0.020209,
0.139840,
0.078964,
0.019374,
-0.038759,
-0.065729,
0.170990,
0.128740,
0.013664,
-0.055411,
-0.157230,
0.011256,
0.024352,
-0.114060,
-0.135500,
-0.220570,
-0.043104,
0.092257,
0.057887,
-0.004009,
-0.182020,
-0.075634,
0.074858,
0.094393,
-0.051146,
0.099946,
0.048090,
-0.005487,
-0.028570,
-0.175650,
-0.009868,
-0.023013,
-0.043922,
-0.163220,
-0.215220,
0.014798,
0.084377,
-0.030517,
-0.113400,
-0.108440,
0.106460,
0.050779,
0.051617,
-0.011042,
-0.081174,
0.023910,
0.150260,
-0.075236,
-0.175880,
-0.397410,
0.114880,
-0.022708,
-0.043608,
-0.004176,
0.078997,
0.022215,
-0.018016,
-0.007938,
-0.027104,
0.084299,
0.142030,
0.010477,
-0.029027,
0.031398,
0.053521,
0.162620,
0.124750,
0.011318,
0.070697,
0.140750,
0.143490,
0.009881,
-0.011062,
0.051227,
0.143210,
-0.007180,
0.042786,
0.051264,
0.051376,
-0.005735,
0.012858,
0.033561,
0.005729,
0.018399,
-0.024911,
0.015826,
-0.020752,
0.015175,
0.045031,
-0.032627,
0.047636,
-0.015242,
0.056114,
0.008862,
-0.039585,
0.054143,
0.020027,
0.000092,
0.060051,
0.005834,
-0.073734,
-0.059177,
-0.044056,
-0.027806,
-0.120670,
-0.059758,
0.070061,
0.108560,
0.101190,
-0.023081,
0.047907,
0.068382,
-0.022893,
0.073137,
0.088526,
-0.036650,
0.021423,
-0.087730,
-0.071082,
0.083100,
-0.165280,
-0.042273,
-0.271350,
-0.203140,
-0.041603,
-0.217840,
-0.030053,
-0.066467,
-0.117320,
-0.103240,
-0.027602,
0.097588,
0.086204,
-0.035777,
-0.152720,
-0.118580,
-0.062648,
0.006889,
0.047201,
-0.082933,
-0.109900,
-0.062183,
-0.103940,
-0.037810,
-0.153950,
-0.130230,
0.024754,
-0.099317,
-0.123300,
-0.086920,
-0.214970,
-0.040379,
-0.001303,
-0.161850,
-0.205960,
-0.015314,
0.031389,
-0.102440,
-0.075578,
-0.146030,
-0.074471,
-0.059934,
-0.122180,
-0.078056,
0.017274,
0.061184,
0.033747,
-0.118700,
-0.156250,
-0.036262,
-0.007597,
-0.006266,
-0.097156,
-0.212720,
-0.160660,
-0.001703,
0.017141,
0.027964,
0.043088,
-0.002915,
-0.017069,
0.030803,
0.043217,
-0.008479,
0.044046,
-0.011216,
0.032643,
-0.005365,
0.038891,
-0.014049,
-0.016812,
-0.006876,
-0.004300,
0.014783,
0.036245,
0.032311,
-0.007586,
-0.000112,
-0.027452,
0.046037,
-0.018557,
0.073117,
-0.041461,
0.039694,
0.012475,
0.072386,
-0.023019,
-0.269320,
-0.154920,
0.146290,
0.105110,
0.017509,
-0.178030,
0.007069,
0.116460,
0.157390,
-0.008414,
-0.046009,
-0.053700,
-0.050685,
0.154370,
0.035391,
-0.131370,
-0.040808,
0.013050,
-0.057959,
0.019557,
0.020968,
-0.063288,
0.083549,
0.063073,
0.136300,
0.066498,
0.011542,
0.165750,
0.027140,
0.106460,
0.081781,
-0.068911,
0.044009,
-0.081205,
0.101690,
0.094403,
-0.017375,
-0.160580,
-0.065530,
0.043596,
0.136030,
0.101450,
-0.180440,
-0.090514,
0.022683,
0.176590,
0.076042,
-0.073670,
-0.080675,
0.000431,
0.041924,
0.073087,
-0.051837,
-0.186390,
-0.007925,
0.097096,
0.081240,
-0.139070,
-0.241510,
-0.028191,
0.031583,
0.054461,
-0.129280,
-0.167450,
0.019041,
0.027549,
-0.110510,
-0.128430,
0.050855,
0.123530,
0.031719,
0.031347,
-0.127530,
-0.063866,
0.043284,
0.111210,
0.001300,
-0.030849,
0.030953,
0.086603,
0.095744,
-0.026785,
-0.217100,
0.074094,
0.121720,
0.054851,
0.049290,
0.004290,
0.009546,
0.005081,
0.032615,
0.062378,
0.273940,
-0.074073,
-0.050990,
-0.087696,
-0.005398,
0.041948,
-0.039384,
-0.141260,
-0.075243,
-0.157010,
-0.071251,
0.060432,
0.006198,
-0.069439,
-0.088432,
0.126720,
0.016016,
0.106610,
0.093402,
0.007261,
-0.032560,
0.006010,
0.065960,
-0.037079,
-0.125340,
0.076954,
-0.012180,
0.029822,
0.052809,
0.092006,
0.027942,
-0.006768,
-0.008426,
0.113060,
0.065444,
-0.009465,
-0.003991,
0.133790,
0.075880,
0.128620,
0.118330,
0.013025,
0.080036,
0.055954,
0.012643,
0.054180,
0.114100,
0.073706,
0.010846,
0.102190,
0.185270,
-0.063936,
-0.029455,
-0.064623,
-0.061636,
-0.007373,
-0.002253,
-0.040607,
-0.061026,
-0.032010,
0.008141,
-0.049391,
-0.038172,
0.001323,
-0.060351,
-0.007079,
-0.011196,
-0.092760,
-0.048673,
-0.036500,
-0.058134,
-0.097088,
-0.039970,
-0.069106,
-0.090060,
0.042156,
0.018397,
0.090288,
0.008157,
0.018716,
0.139500,
-0.035308,
-0.039495,
0.075563,
0.136620,
0.278510,
-0.000712,
-0.002780,
0.000300,
0.097523,
0.096656,
-0.163260,
0.006853,
0.066492,
0.129160,
-0.004770,
-0.058097,
-0.095480,
0.000201,
0.045692,
0.038213,
-0.153180,
0.111970,
0.177530,
-0.016674,
-0.091971,
-0.093449,
-0.016369,
0.014769,
-0.051336,
-0.196040,
-0.211100,
0.005637,
0.000744,
-0.178320,
-0.175410,
-0.104210,
0.034309,
-0.042209,
-0.109660,
-0.121710,
0.107180,
0.027959,
0.001167,
-0.075166,
-0.168640,
-0.007545,
-0.014711,
0.015782,
0.020554,
0.023920,
0.002755,
-0.001763,
0.011340,
0.060769,
0.045871,
0.044180,
0.035578,
0.007101,
0.007499,
0.002838,
0.000415,
0.020590,
0.043055,
-0.008945,
0.000300,
-0.008318,
-0.030832,
-0.047588,
-0.020892,
0.005795,
0.114500,
0.046820,
0.146330,
0.047201,
-0.072572,
0.043801,
0.093683,
0.093131,
0.204660,
-0.069957,
0.180020,
0.178920,
0.041908,
0.120080,
-0.024143,
0.030843,
-0.052900,
0.005065,
-0.007954,
-0.065863,
0.027131,
-0.009436,
-0.175520,
-0.059780,
-0.114560,
0.043603,
0.011083,
-0.025774,
-0.001524,
-0.027682,
-0.107070,
-0.031482,
-0.034813,
-0.053741,
0.017726,
0.054619,
0.041561,
0.021347,
-0.111270,
0.038405,
-0.016038,
-0.050858,
-0.029951,
-0.050462,
-0.050301,
-0.185070,
-0.194390,
-0.025909,
-0.079571,
-0.093392,
0.003228,
-0.017551,
0.018000,
0.007363,
0.019615,
0.009655,
0.012928,
0.022197,
0.030161,
-0.012790,
0.034451,
0.044540,
0.011473,
-0.000636,
0.036446,
0.027925,
0.010653,
-0.023098,
-0.025429,
0.004074,
0.007751,
-0.008542,
0.037211,
-0.023660,
0.006021,
-0.055600,
-0.041603,
0.100010,
-0.015281,
-0.023171,
-0.048753,
-0.013584,
0.074185,
0.017345,
0.013044,
-0.006244,
0.049104,
0.099418,
0.103270,
0.144150,
0.118090,
0.042225,
-0.070136,
0.011884,
0.016463,
0.099114,
0.107400,
-0.005737,
-0.025643,
0.073271,
-0.038896,
-0.040808,
-0.052430,
-0.075870,
-0.084402,
0.027134,
0.016410,
-0.020611,
0.015897,
-0.007051,
-0.091215,
-0.031131,
-0.014749,
0.025702,
-0.058592,
0.009915,
-0.006326,
-0.041918,
-0.014640,
-0.004670,
0.038080,
0.030017,
0.049205,
0.065184,
0.081194,
0.053490,
-0.015225,
-0.026638,
-0.045122,
0.096297,
0.066693,
-0.008171,
-0.090597,
-0.017159,
-0.033686,
-0.029688,
-0.173420,
-0.145690,
-0.157290,
-0.067815,
0.027438,
-0.032824,
-0.054786,
-0.031915,
0.073279,
0.031322,
-0.033441,
-0.057463,
0.041637,
0.031387,
-0.045342,
-0.080650,
-0.095558,
-0.040131,
-0.044250,
0.043624,
0.050434,
-0.016272,
0.098570,
0.033170,
-0.070595,
0.084068,
0.181000,
0.108910,
-0.035410,
-0.150660,
-0.061988,
-0.053436,
0.068170,
0.079861,
0.047298,
0.039119,
-0.036317,
-0.031250,
0.158510,
-0.058772,
-0.127630,
-0.123310,
-0.037035,
0.032834,
-0.144350,
-0.073795,
-0.126510,
-0.063400,
0.030418,
-0.093003,
-0.053801,
-0.050002,
-0.043819,
-0.001599,
-0.067936,
0.040706,
-0.022371,
-0.005971,
0.069284,
-0.073342,
0.029738,
0.009547,
-0.032900,
0.132050,
0.107690,
-0.065069,
-0.002371,
-0.035385,
-0.049590,
0.029531,
-0.033964,
-0.014612,
0.021876,
-0.069541,
0.188390,
0.043259,
-0.090988,
-0.112430,
-0.121370,
0.053754,
-0.052959,
0.057272,
0.023396,
0.012281,
0.055524,
-0.005857,
0.086049,
0.046644,
0.022322,
-0.084880,
0.050622,
0.045237,
-0.036787,
0.039157,
-0.001194,
-0.005654,
-0.026969,
-0.090673,
-0.110110,
-0.049531,
-0.008391,
0.004826,
0.041827,
-0.046176,
0.106390,
0.106390,
0.081539,
0.145390,
-0.034343,
0.101730,
0.216360,
0.135670,
0.126610,
-0.055864,
-0.009298,
-0.091330,
-0.032160,
0.005433,
0.074154,
0.053764,
-0.003094,
-0.059681,
-0.057820,
0.105430,
0.140370,
0.068710,
-0.005092,
-0.023347,
0.054090,
0.157540,
-0.004008,
-0.054669,
-0.066608,
0.039797,
0.143480,
0.124450,
0.022130,
0.010751,
0.143140,
-0.003865,
0.035482,
0.057084,
0.044062,
-0.036405,
0.039353,
-0.004787,
-0.131150,
0.070574,
-0.006610,
-0.038592,
-0.094015,
-0.107570,
0.008310,
-0.072410,
-0.044245,
-0.164280,
-0.144430,
-0.036875,
-0.107620,
-0.073352,
-0.060206,
-0.028470,
-0.126640,
-0.287940,
0.057686,
0.080778,
-0.005208,
0.036962,
-0.106940,
-0.010976,
0.079770,
0.026680,
0.055672,
-0.172120,
0.023762,
0.001837,
-0.001299,
-0.050264,
-0.054580,
0.029088,
-0.045403,
-0.194530,
-0.139730,
-0.030717,
-0.111880,
-0.080760,
-0.053534,
-0.023384,
0.043533,
-0.037919,
0.026409,
0.086794,
0.099701,
0.105620,
0.103880,
0.002058,
0.071712,
-0.052664,
-0.108560,
0.174060,
0.101720,
0.035574,
-0.003994,
-0.063429,
0.114470,
0.050966,
0.041479,
0.009303,
-0.068347,
0.123370,
0.042174,
-0.005733,
0.048945,
0.051608,
-0.033331,
0.015437,
0.031698,
0.045607,
0.174200,
-0.019436,
0.040905,
0.091410,
0.023661,
0.038909,
0.072446,
0.092064,
0.046792,
0.124470,
0.084190,
-0.089214,
0.001636,
0.017244,
-0.017342,
0.045917,
-0.122510,
-0.073046,
-0.016816,
-0.031849,
0.109090,
0.004659,
-0.025912,
0.004219,
0.037053,
0.045637,
0.135140,
0.094462,
0.017352,
0.037314,
0.059647,
0.055869,
0.015003,
-0.014227,
-0.001971,
0.043641,
0.053060,
0.023745,
-0.106360,
0.015940,
-0.069909,
0.200690,
0.219460,
0.093819,
0.064578,
0.032412,
-0.055680,
-0.058465,
-0.024453,
-0.009864,
-0.026573,
-0.021036,
-0.021178,
-0.034545,
-0.046994,
-0.042328,
0.019708,
0.003120,
0.001790,
0.003013,
-0.016566,
-0.087019,
-0.006260,
0.119570,
0.086294,
0.011302,
0.058903,
0.069182,
0.060374,
0.115030,
0.003536,
0.011482,
-0.001161,
0.007298,
-0.059785,
-0.058544,
-0.031437,
-0.023200,
0.000327,
-0.015510,
0.009400,
-0.003144,
0.020648,
-0.012944,
0.017531,
-0.046357,
-0.062004,
-0.025278,
-0.008638,
-0.053061,
-0.007341,
-0.039570,
-0.009360,
-0.055750,
0.000262,
-0.049185,
0.000124,
0.042974,
0.114860,
0.174090,
0.072744,
-0.062370,
0.024121,
0.031264,
0.063776,
0.013030,
-0.038196,
0.058183,
-0.026037,
0.108230,
0.034205,
-0.141460,
0.002536,
0.029537,
-0.035437,
0.027358,
0.052213,
-0.074869,
0.059268,
0.178060,
0.144480,
0.062494,
0.042607,
0.012271,
0.069197,
0.006081,
0.020602,
-0.025315,
0.003570,
-0.008103,
-0.002872,
0.114610,
0.082568,
0.085952,
0.026064,
0.040072,
0.141730,
0.125630,
0.096185,
0.101490,
0.039037,
0.040272,
-0.067389,
0.053739,
0.014162,
0.148290,
0.023410,
0.024100,
0.002636,
0.005156,
0.074664,
0.025157,
-0.035055,
-0.035210,
0.058855,
0.072618,
0.084929,
0.054537,
-0.046563,
0.021357,
0.088991,
0.025268,
0.090779,
0.037610,
0.083274,
0.079553,
0.201140,
0.254430,
0.212270,
0.233410,
0.118600,
0.002671,
0.027569,
-0.016358,
0.024867,
-0.008870,
0.028989,
0.014908,
0.030797,
0.018285,
0.026128,
-0.020997,
0.002369,
-0.008083,
0.002153,
0.033695,
-0.045392,
-0.001246,
0.022666,
-0.038260,
0.017605,
-0.043483,
-0.033028,
-0.046431,
-0.042429,
-0.030954,
-0.029118,
-0.043463,
-0.117540,
-0.092250,
-0.067360,
-0.061008,
0.003314,
-0.012858,
0.083115,
-0.029437,
-0.051460,
0.063462,
0.069974,
0.121910,
-0.092907,
-0.010708,
0.053362,
0.016429,
0.065222,
0.045340,
-0.079826,
-0.094849,
-0.153810,
-0.086960,
-0.046443,
-0.015038,
0.044578,
-0.024382,
0.065209,
-0.013179,
-0.115630,
0.013064,
0.023002,
-0.027151,
-0.061648,
-0.096789,
-0.032496,
-0.031852,
-0.049801,
-0.081532,
-0.069400,
-0.078118,
-0.046043,
-0.058704,
-0.057946,
0.065868,
0.037611,
0.021962,
0.015176,
-0.071880,
-0.011787,
0.006694,
-0.019746,
-0.021990,
0.090504,
-0.018336,
-0.041644,
-0.034728,
0.046692,
0.102700,
0.009606,
-0.020618,
-0.060295,
0.021671,
0.105250,
0.016765,
0.052840,
0.025206,
0.028661,
0.168130,
-0.103960,
0.003937,
0.013319,
0.052136,
0.119060,
0.102380,
-0.018205,
-0.027694,
-0.031230,
0.042971,
0.129110,
0.086777,
0.036592,
0.041050,
0.164360,
0.127090,
0.126590,
0.122850,
0.116620,
0.105460,
0.060619,
-0.052864,
0.127260,
0.085632,
0.023286,
-0.005348,
-0.001077,
-0.037855,
-0.030825,
0.054970,
0.115830,
0.038693,
-0.008377,
-0.011488,
0.032001,
0.178050,
0.053878,
0.070406,
0.248950,
0.112760,
0.085946,
0.144150,
0.206180,
0.201450,
0.033785,
0.054925,
0.070222,
0.134320,
0.127540,
0.027210,
0.016357,
0.110440,
0.045737,
0.144340,
0.087721,
-0.036417,
-0.023063,
0.028177,
-0.001477,
-0.057077,
-0.056087,
-0.067318,
-0.084944,
-0.064739,
-0.090748,
-0.065993,
-0.104110,
-0.048549,
-0.066510,
-0.048762,
0.002362,
-0.031894,
-0.003746,
0.075595,
-0.134320,
-0.038166,
-0.085966,
-0.029082,
-0.106630,
-0.030765,
0.064173,
0.021386,
0.012158,
0.010663,
0.035023,
0.044141,
0.007294,
-0.009086,
-0.018565,
-0.018925,
-0.024111,
-0.008995,
0.016612,
-0.042482,
0.052441,
0.007221,
0.017682,
-0.011978,
-0.060036,
0.024676,
0.012865,
0.013360,
0.017309,
0.048552,
-0.075336,
-0.056891,
-0.016418,
-0.007053,
0.070687,
-0.079302,
-0.052685,
0.034787,
-0.125870,
-0.053627,
-0.093078,
0.084203,
-0.017515,
-0.222750,
-0.091830,
0.124470,
0.104460,
0.079499,
0.059891,
0.053054,
0.037567,
0.081869,
0.223480,
0.228080,
0.213840,
0.151170,
0.026516,
0.014254,
0.015173,
0.095251,
0.019932,
0.027741,
0.043118,
0.065149,
0.028611,
-0.007035,
0.138320,
0.028609,
-0.012431,
0.059565,
0.052401,
0.064316,
0.030203,
-0.044300,
0.021369,
-0.047542,
0.114400,
0.047356,
-0.050787,
-0.059665,
-0.134590,
0.048960,
0.001036,
0.010159,
0.010603,
0.050895,
0.029066,
-0.023502,
-0.013421,
0.000443,
0.034308,
-0.021268,
0.029241,
-0.021355,
-0.002934,
-0.022952,
0.024786,
0.053152,
0.009295,
-0.007871,
0.032589,
0.023810,
0.024697,
-0.003563,
-0.008961,
0.026707,
0.122720,
0.121690,
0.074184,
0.043686,
0.069695,
-0.041732,
-0.009981,
0.091292,
0.023493,
0.025528,
-0.042082,
-0.065267,
0.004173,
0.001512,
0.009629,
-0.019065,
-0.039686,
-0.012618,
-0.058761,
-0.035441,
0.100370,
-0.106040,
-0.028266,
-0.017446,
-0.013037,
0.020805,
-0.026983,
0.035722,
0.071478,
0.006016,
-0.034200,
0.110810,
-0.015671,
-0.043340,
0.018672,
0.006032,
0.125880,
0.114730,
-0.019662,
-0.064078,
-0.264310,
-0.008486,
0.037709,
0.036059,
-0.121790,
-0.124320,
0.026705,
0.117490,
0.111220,
0.041194,
-0.024970,
0.016947,
-0.014486,
0.028113,
0.003518,
-0.012366,
0.028516,
-0.019187,
0.009203,
0.016482,
0.007331,
-0.001162,
-0.000257,
0.031028,
0.015522,
0.003294,
0.034839,
-0.010365,
0.011602,
0.008858,
-0.011894,
-0.017112,
-0.013587,
-0.064765,
0.014519,
-0.011017,
-0.031252,
-0.005831,
-0.110080,
-0.167160,
-0.032117,
-0.104810,
-0.070474,
-0.099144,
-0.199310,
0.001718,
-0.071861,
0.043575,
0.016826,
0.017721,
0.126500,
0.017875,
0.121660,
0.029792,
0.086116,
0.092634,
0.103170,
0.181620,
0.090448,
0.205180,
0.009671,
-0.003569,
-0.007103,
-0.040334,
-0.078662,
-0.018773,
-0.002263,
-0.022186,
-0.016563,
-0.010244,
-0.012208,
-0.000600,
0.004038,
0.055561,
-0.010171,
-0.013013,
-0.049773,
-0.024569,
-0.000622,
0.013858,
-0.038331,
-0.005373,
-0.023097,
-0.051371,
-0.027222,
-0.032980,
-0.034877,
-0.097053,
-0.061981,
-0.057129,
0.014290,
0.023177,
-0.033254,
-0.011430,
0.004705,
-0.008667,
0.018248,
0.001645,
0.056834,
0.085380,
-0.086833,
-0.001146,
-0.102390,
-0.017038,
0.066157,
-0.317870,
-0.261930,
-0.286940,
-0.191290,
-0.119000,
0.047278,
0.013757,
0.100560,
0.045084,
-0.034172,
-0.007235,
-0.065288,
-0.029743,
-0.066504,
-0.065802,
-0.169710,
-0.079419,
-0.032300,
-0.099420,
-0.078009,
-0.140540,
0.051702,
0.074765,
0.242020,
0.196580,
-0.126390,
-0.051097,
-0.104520,
0.027787,
0.259190,
-0.077020,
-0.061156,
-0.021269,
-0.037989,
0.010206,
-0.085787,
0.021368,
-0.050748,
-0.078366,
-0.131370,
0.023217,
0.024530,
0.010393,
0.011840,
-0.046091,
0.064437,
-0.072208,
-0.033527,
0.038236,
0.069886,
-0.158560,
-0.158430,
-0.084119,
0.008494,
0.014832,
0.020152,
0.060008,
0.084973,
0.074634,
0.152670,
0.064688,
0.066343,
-0.116300,
-0.087554,
-0.098766,
-0.149300,
-0.056248,
-0.189060,
-0.121240,
-0.100720,
-0.120120,
-0.006776,
-0.015610,
0.049600,
-0.171760,
-0.173820,
-0.170930,
-0.204790,
-0.065768,
-0.309080,
0.023169,
0.077432,
0.005082,
-0.088705,
-0.045158,
-0.052614,
-0.059641,
0.070932,
0.011013,
-0.055887,
-0.097677,
-0.000087,
-0.094686,
-0.082676,
-0.053080,
0.018099,
0.088215,
0.094217,
0.028454,
-0.066211,
-0.129280,
0.040414,
0.033687,
-0.038297,
-0.123910,
-0.084132,
-0.045035,
0.014335,
0.030580,
0.013355,
0.041214,
0.035606,
-0.027116,
0.043628,
-0.016834,
0.044345,
0.039941,
-0.004854,
0.015526,
0.033104,
0.098807,
-0.005030,
-0.011032,
0.013362,
0.040884,
0.258730,
0.272420,
0.162420,
0.209670,
0.205680,
0.045794,
0.102840,
0.049917,
-0.026477,
-0.077586,
0.012865,
0.002655,
-0.053089,
-0.000584,
0.093255,
-0.115880,
-0.023276,
-0.051509,
0.052590,
0.061611,
-0.030829,
-0.038777,
-0.107990,
0.001873,
-0.071315,
0.094040,
0.053529,
0.033713,
0.057450,
0.011889,
-0.051708,
0.016593,
-0.122790,
-0.190980,
-0.135400,
-0.105070,
0.125770,
0.000212,
0.118980,
-0.191990,
-0.239820,
-0.001798,
0.088823,
-0.115970,
-0.168520,
-0.110320,
-0.027409,
-0.026254,
-0.098606,
-0.069412,
0.062076,
0.018367,
0.138120,
0.097801,
0.190010,
-0.062941,
0.048216,
-0.099432,
-0.085572,
0.025455,
-0.193790,
-0.089975,
-0.086475,
-0.043411,
0.031267,
-0.079019,
-0.145220,
-0.062063,
-0.264160,
-0.115180,
0.138050,
0.046611,
-0.045235,
0.003515,
0.048684,
0.224270,
0.164220,
0.123730,
0.072624,
0.255040,
0.096822,
-0.001335,
-0.017283,
-0.010092,
0.105030,
0.041135,
0.068099,
0.034567,
0.099033,
0.122420,
0.059049,
0.127180,
0.086448,
0.116620,
0.001674,
-0.088333,
0.020088,
-0.034016,
-0.019884,
-0.100370,
-0.289180,
-0.365160,
-0.331370,
-0.290920,
-0.235540,
0.051381,
-0.047891,
0.000194,
-0.030756,
0.090279,
-0.042303,
-0.085394,
-0.069118,
0.005164,
0.076104,
0.065352,
0.115720,
-0.003709,
0.008436,
0.121910,
0.072331,
0.145580,
0.042821,
0.107140,
0.176660,
-0.171180,
-0.048021,
-0.064766,
-0.104720,
0.012350,
-0.050528,
0.030464,
0.004580,
0.026248,
-0.025156,
-0.022493,
0.025688,
-0.017298,
0.098293,
-0.024551,
-0.015280,
0.085738,
0.109700,
0.115200,
0.036466,
-0.041495,
0.074962,
0.156990,
0.139030,
0.095360,
0.061352,
0.046779,
0.138480,
0.086316,
0.061404,
0.019093,
0.000066,
-0.026267,
-0.044735,
0.000142,
-0.025969,
-0.036295,
-0.041901,
-0.035138,
0.023054,
-0.050410,
0.016272,
-0.049012,
0.005771,
0.015406,
-0.026292,
-0.039994,
-0.056112,
-0.047041,
-0.024199,
-0.009823,
0.000524,
-0.024999,
-0.043328,
-0.029595,
-0.047556,
-0.027728,
-0.120070,
-0.004928,
0.050226,
-0.068479,
0.049813,
-0.030602,
-0.019494,
-0.081531,
0.055050,
-0.084433,
0.067581,
0.006931,
-0.090049,
0.133390,
0.112040,
0.046801,
0.087345,
0.057632,
-0.013104,
0.185260,
0.224210,
0.242520,
0.190590,
0.013623,
0.069280,
0.086351,
0.043143,
0.041367,
-0.032369,
0.084863,
0.096660,
-0.030052,
-0.070519,
0.085664,
-0.011646,
-0.036174,
-0.073214,
-0.083445,
0.101300,
0.039556,
0.013387,
-0.065066,
-0.048703,
0.012145,
0.013925,
0.012647,
-0.047502,
-0.120780,
-0.093136,
0.043769,
-0.084295,
-0.035200,
-0.035691,
-0.000733,
0.037602,
0.070091,
-0.080049,
-0.007335,
0.129460,
0.038614,
0.047570,
0.007539,
0.096842,
0.133290,
0.108230,
0.061980,
0.115460,
0.096461,
-0.053706,
-0.116870,
-0.055186,
-0.029563,
-0.170450,
0.034488,
-0.018443,
-0.047194,
-0.028052,
0.016731,
0.027680,
0.001223,
-0.032671,
-0.006615,
-0.021805,
0.008269,
-0.058096,
0.009309,
0.000670,
-0.033323,
-0.007757,
-0.001154,
-0.010201,
-0.029834,
0.004669,
0.007148,
0.004914,
0.025636,
0.033990,
0.043937,
0.050606,
-0.076476,
-0.023226,
-0.075778,
-0.052341,
-0.103180,
-0.043413,
-0.088502,
-0.128460,
-0.033421,
-0.299980,
-0.045981,
-0.192990,
-0.133720,
-0.261120,
-0.285560,
-0.054437,
-0.179440,
-0.079382,
0.028201,
-0.156710,
-0.091660,
-0.097957,
-0.037946,
-0.022679,
0.029801,
-0.011293,
0.094086,
0.020302,
0.037926,
-0.145770,
-0.183810,
0.011933,
-0.071636,
-0.110050,
-0.212930,
-0.166990,
-0.168960,
-0.206210,
-0.236750,
-0.246120,
-0.126360,
-0.212070,
-0.244190,
-0.165320,
-0.005271,
0.144250,
0.053743,
-0.070467,
0.034869,
-0.014869,
-0.021738,
-0.061240,
-0.034503,
-0.013166,
0.006708,
-0.008062,
-0.073285,
-0.079206,
-0.011379,
0.093600,
0.135820,
0.003862,
0.062035,
0.136490,
0.125420,
0.101420,
0.087497,
0.011325,
0.146470,
-0.049013,
-0.056546,
-0.071738,
-0.009588,
-0.097297,
0.076010,
0.020228,
-0.053056,
0.132180,
0.036254,
0.161830,
0.106780,
0.054700,
0.099971,
0.087016,
0.006808,
0.032816,
-0.023418,
0.006964,
0.078952,
0.062448,
-0.146820,
-0.135920,
-0.045961,
-0.123290,
-0.004700,
-0.053891,
-0.120780,
-0.038468,
0.085376,
-0.022640,
0.097271,
0.052191,
-0.046801,
0.039106,
0.117120,
0.105390,
-0.098329,
0.050204,
0.106710,
0.010134,
0.047564,
-0.068853,
0.040219,
0.005123,
-0.069389,
0.092081,
-0.108970,
0.133600,
0.032775,
0.035884,
0.141050,
-0.062318,
0.035830,
0.090577,
0.002723,
-0.092009,
-0.188160,
-0.128120,
-0.035401,
-0.041359,
-0.069507,
-0.180310,
-0.206350,
-0.061350,
0.011565,
-0.056587,
0.020186,
-0.093033,
-0.060641,
0.025926,
-0.043238,
0.116890,
-0.041891,
-0.041539,
0.098161,
-0.059290,
-0.042742,
-0.066263,
0.029774,
0.008557,
0.007263,
0.053031,
0.006616,
-0.004648,
0.042345,
0.062516,
0.070880,
0.005084,
0.011271,
0.030093,
0.035057,
-0.015599,
0.015183,
0.024706,
-0.006559,
0.056793,
0.012592,
0.051409,
-0.034027,
0.069399,
0.050376,
0.044742,
0.071256,
0.017432,
0.009198,
0.099055,
0.009044,
0.012795,
-0.116880,
-0.004002,
0.079767,
-0.098452,
-0.164600,
-0.168700,
-0.028933,
0.138380,
0.104040,
0.062461,
-0.045046,
0.032686,
0.174300,
0.123090,
0.021728,
-0.116960,
0.024659,
0.114170,
0.128790,
0.158190,
0.082436,
0.021989,
0.147320,
0.083325,
0.056842,
-0.024436,
0.011054,
-0.082181,
-0.026259,
-0.109910,
0.050338,
0.010944,
-0.084883,
-0.079715,
-0.065334,
0.055878,
-0.010552,
-0.056308,
0.026067,
-0.053050,
0.046265,
-0.070993,
-0.083632,
-0.137320,
-0.168800,
-0.133410,
0.057589,
-0.014547,
0.012683,
0.001893,
-0.015020,
0.037340,
0.025861,
0.039516,
0.029245,
-0.033566,
0.020037,
0.030574,
-0.004148,
-0.003352,
0.002289,
0.005845,
0.047527,
-0.005611,
-0.016731,
0.063597,
0.022372,
0.000717,
-0.042820,
-0.024184,
-0.014020,
-0.069569,
-0.026968,
-0.056741,
-0.011484,
0.053081,
0.109380,
0.011638,
-0.085579,
0.106940,
0.006824,
-0.001751,
0.020472,
0.041382,
0.068751,
0.086336,
0.137790,
0.102010,
0.062006,
0.098872,
0.035470,
0.201180,
0.085609,
0.044252,
0.154610,
0.170150,
0.098799,
-0.019420,
-0.013674,
-0.127200,
-0.131760,
-0.028396,
-0.116990,
-0.039286,
0.033158,
0.025195,
-0.151210,
-0.268140,
-0.164840,
-0.100530,
-0.096703,
-0.208450,
-0.242430,
-0.063928,
0.095843,
0.000174,
-0.121440,
-0.146530,
0.157350,
0.106790,
0.074455,
-0.028031,
0.024787,
-0.001493,
-0.002381,
0.013193,
-0.006419,
-0.015389,
0.006214,
0.009588,
-0.008904,
0.021535,
0.026702,
-0.029952,
-0.023249,
-0.029025,
-0.011371,
-0.028257,
0.028307,
-0.010603,
0.015678,
0.012241,
-0.024019,
0.036077,
0.015711,
0.062339,
-0.050689,
0.031070,
-0.003002,
0.091623,
-0.040477,
-0.025505,
0.006296,
-0.022992,
-0.025055,
-0.151790,
-0.103910,
-0.087036,
-0.079506,
-0.048075,
0.099815,
0.077125,
-0.075391,
-0.060390,
0.046525,
0.162490,
0.092095,
0.007079,
-0.067810,
0.061024,
0.053169,
-0.074181,
-0.025864,
-0.031834,
0.004063,
0.009226,
-0.005304,
-0.023080,
0.018020,
-0.066616,
-0.041101,
0.022120,
-0.034297,
0.004073,
0.027431,
0.003309,
0.042695,
-0.008745,
-0.053035,
-0.080473,
-0.019965,
-0.054111,
-0.056596,
-0.029714,
-0.057511,
-0.042022,
0.086879,
0.027590,
-0.060414,
-0.105450,
0.020201,
0.069032,
-0.118280,
-0.249520,
-0.111990,
-0.019412,
0.141530,
0.061171,
0.076458,
0.052512,
0.138680,
0.160100,
0.131370,
0.117670,
0.041012,
0.110670,
0.221500,
0.095650,
0.086051,
0.112850,
0.109810,
0.079444,
-0.096432,
-0.084160,
-0.012587,
-0.014704,
0.020137,
-0.101270,
-0.198000,
-0.076733,
0.161330,
0.018385,
-0.029508,
-0.038603,
0.079576,
0.181800,
0.066957,
0.013257,
-0.003969,
-0.000142,
0.263390,
-0.063188,
-0.185090,
-0.238470,
-0.069879,
0.024081,
0.198090,
0.075338,
-0.037037,
0.051926,
0.286480,
0.126910,
-0.082765,
-0.148880,
-0.017890,
0.285040,
-0.029750,
-0.150800,
-0.191430,
-0.061459,
0.186770,
-0.027599,
-0.073819,
-0.029596,
-0.026860,
0.008700,
0.054404,
0.117600,
0.073129,
-0.036704,
0.016174,
0.092053,
0.010725,
0.023783,
0.139850,
0.151270,
-0.031464,
0.017308,
-0.105890,
-0.014121,
0.016387,
-0.168770,
-0.035858,
-0.125530,
-0.089195,
-0.043689,
-0.163180,
-0.113770,
-0.215780,
-0.245650,
-0.160370,
-0.025688,
-0.147920,
0.005326,
-0.121350,
0.029606,
-0.104560,
0.108870,
0.000872,
0.093148,
0.032163,
0.062552,
0.087776,
0.110330,
-0.000562,
-0.215800,
0.138290,
0.000798,
0.035328,
-0.103080,
-0.080429,
-0.012569,
-0.078912,
-0.094121,
-0.122160,
-0.131320,
-0.077094,
-0.031369,
0.018762,
-0.061404,
-0.049729,
-0.003098,
-0.090244,
-0.270880,
-0.142710,
0.114180,
0.118070,
-0.183220,
-0.333430,
-0.188820,
0.129400,
0.000017,
-0.260060,
-0.262140,
-0.158650,
0.023666,
0.110270,
-0.136700,
-0.170970,
-0.146080,
0.034464,
0.125860,
0.050780,
0.027142,
-0.005439,
0.051122,
-0.078758,
-0.087953,
-0.159730,
0.013746,
-0.031188,
0.006069,
0.079493,
-0.186990,
-0.214710,
-0.105050,
-0.045939,
0.010895,
-0.230790,
-0.191120,
-0.100440,
0.097394,
0.063280,
-0.068273,
-0.120380,
-0.032670,
0.005612,
0.042273,
0.038897,
-0.117070,
-0.018330,
-0.096155,
-0.053910,
0.015407,
0.102660,
0.055206,
-0.052590,
-0.088891,
-0.215700,
-0.128250,
-0.013272,
-0.106340,
-0.153530,
-0.081846,
-0.110840,
-0.128340,
-0.126340,
-0.035592,
0.138570,
0.007511,
-0.152020,
-0.118720,
0.057668,
0.094686,
0.022174,
-0.223500,
-0.046263,
0.017680,
0.151800,
-0.092955,
-0.202140,
0.085190,
0.081597,
0.085481,
0.066263,
-0.170550,
0.036451,
0.033059,
-0.067353,
0.081366,
-0.195290,
0.145100,
-0.031441,
-0.020590,
0.077057,
0.093837,
0.047657,
-0.025542,
-0.020601,
0.010851,
0.012633,
0.030455,
0.070545,
0.055249,
0.092055,
0.028974,
0.070913,
0.070453,
-0.161530,
0.072444,
-0.101770,
-0.008746,
0.017575,
0.061859,
-0.046395,
0.011442,
0.028402,
-0.071847,
-0.164780,
-0.131200,
-0.030367,
0.094661,
-0.008403,
-0.073957,
-0.039455,
-0.026482,
-0.036558,
-0.019426,
-0.017311,
-0.119310,
0.043273,
-0.022162,
0.018145,
-0.105840,
-0.046125,
-0.011943,
0.059303,
-0.021608,
0.190450,
0.084909,
-0.069864,
0.052056,
0.011960,
0.035198,
-0.012663,
0.001965,
0.125110,
0.009584,
-0.090410,
-0.001534,
-0.041789,
-0.068479,
0.117090,
0.150600,
0.032221,
-0.010589,
-0.154260,
0.077508,
0.074658,
0.036360,
0.014104,
-0.048427,
0.046075,
0.044534,
0.054082,
-0.019873,
-0.041123,
0.013299,
0.053781,
0.070094,
0.072873,
-0.057893,
0.004635,
0.057381,
0.079345,
-0.098028,
-0.034566,
-0.036039,
0.025310,
-0.013672,
0.010980,
-0.037436,
-0.044251,
-0.020734,
0.015927,
-0.044264,
-0.025251,
-0.022447,
-0.002364,
0.028054,
0.043160,
-0.053489,
-0.013037,
0.002474,
-0.011231,
-0.005771,
-0.031400,
0.002824,
-0.000058,
-0.005431,
-0.001480,
-0.017249,
-0.060181,
0.023108,
0.123660,
-0.052915,
-0.063531,
-0.217010,
-0.199990,
-0.095868,
-0.128360,
0.001353,
-0.004983,
-0.085838,
-0.026216,
-0.045625,
0.173630,
0.135300,
0.139600,
0.139320,
0.093360,
0.019297,
0.028175,
-0.082337,
-0.029197,
0.084728,
-0.027472,
0.089704,
0.149320,
0.054024,
-0.011585,
-0.045960,
0.069805,
0.129750,
-0.012241,
-0.112570,
-0.096166,
-0.009115,
0.036379,
-0.001062,
-0.154560,
0.088024,
-0.009783,
-0.028963,
-0.024606,
-0.105290,
0.016539,
-0.017393,
-0.096951,
-0.009777,
0.080859,
0.213470,
0.065298,
0.062812,
-0.002002,
0.031866,
0.212990,
0.169760,
0.016350,
-0.067153,
-0.044089,
0.141140,
0.134450,
0.101740,
0.055897,
0.110170,
0.055830,
-0.024525,
-0.047168,
-0.016151,
-0.003336,
0.049342,
-0.002800,
-0.123980,
-0.071993,
0.116000,
0.030229,
0.016446,
-0.032508,
0.009996,
0.013856,
0.021279,
-0.035434,
-0.002744,
-0.007443,
0.039344,
-0.021305,
0.005509,
-0.028026,
0.000184,
0.032855,
-0.005595,
-0.021791,
0.009605,
-0.012397,
-0.010197,
-0.014450,
-0.024015,
-0.019444,
0.030473,
0.039821,
0.049845,
-0.022087,
-0.207560,
-0.058835,
0.145850,
-0.049617,
-0.159820,
-0.230220,
-0.087931,
0.078178,
-0.050464,
-0.114310,
-0.103770,
-0.019423,
0.127100,
0.032754,
-0.032664,
-0.069774,
-0.095203,
-0.021940,
-0.030175,
-0.114020,
-0.120690,
-0.152330,
-0.078326,
0.184070,
-0.002996,
0.108450,
0.038513,
0.026245,
0.147500,
0.168590,
0.215550,
0.100620,
0.002867,
0.099536,
0.149380,
0.090614,
0.110670,
0.023840,
-0.052372,
0.011715,
-0.099162,
-0.055481,
-0.056412,
-0.075905,
-0.043883,
-0.211150,
-0.063013,
-0.099908,
-0.041780,
0.006544,
0.029948,
-0.049068,
-0.141960,
0.028986,
-0.018777,
-0.099601,
0.004598,
0.001340,
0.001850,
-0.051566,
-0.075166,
0.034743,
0.000832,
-0.002641,
0.046333,
0.032061,
0.070803,
0.040666,
0.033525,
0.112580,
-0.011851,
0.065821,
0.043895,
0.149390,
0.069904,
-0.030453,
-0.036111,
-0.004221,
0.034669,
-0.034343,
-0.115780,
-0.056976,
0.093678,
0.161000,
-0.030883,
-0.176230,
-0.033366,
0.077150,
0.041639,
-0.130380,
-0.246840,
-0.132190,
-0.056254,
0.058895,
0.004792,
0.051740,
0.034920,
0.022102,
0.115130,
-0.032447,
-0.173700,
-0.044717,
0.158810,
0.173810,
0.001584,
-0.116080,
-0.086351,
0.057507,
0.070818,
-0.080870,
-0.079897,
0.032009,
0.113420,
-0.004371,
0.027164,
0.094877,
0.005942,
-0.035112,
0.139620,
0.025207,
0.072137,
0.023119,
0.067203,
-0.184010,
-0.103040,
0.058380,
0.086033,
-0.081749,
-0.102440,
-0.053100,
0.001202,
0.094370,
-0.089100,
-0.044048,
-0.002990,
-0.049994,
0.066176,
0.044576,
-0.040477,
0.044631,
0.068299,
0.066897,
0.029572,
0.091934,
0.140230,
0.135960,
0.160540,
0.168050,
0.022925,
0.061950,
0.084905,
0.035898,
0.101110,
0.039189,
0.089742,
-0.083724,
0.036146,
0.052179,
0.014091,
0.042901,
-0.062297,
0.012028,
0.059040,
0.060445,
0.003016,
0.010824,
0.084189,
0.004737,
0.008398,
-0.007107,
0.061659,
0.086411,
0.072375,
-0.127970,
-0.092713,
-0.117220,
0.083440,
-0.004817,
-0.005698,
0.079925,
0.012685,
0.121950,
0.002562,
0.012376,
0.129440,
0.074118,
0.147180,
0.008800,
0.076719,
0.047373,
-0.121500,
0.047644,
-0.030727,
0.102830,
0.108140,
-0.068054,
0.088955,
-0.069583,
-0.010737,
0.126360,
0.032161,
-0.094506,
-0.055104,
-0.049619,
-0.027508,
-0.027691,
-0.076683,
-0.031396,
-0.105810,
-0.082855,
-0.120510,
-0.056258,
-0.052942,
0.001659,
-0.013776,
-0.003242,
0.126310,
0.043277,
0.090710,
0.091682,
0.056510,
0.144080,
0.213700,
-0.006273,
0.013772,
-0.059411,
-0.029930,
-0.022503,
0.058220,
-0.019839,
-0.000947,
-0.042674,
0.001564,
0.024937,
-0.013518,
-0.013545,
0.052441,
0.022060,
-0.001831,
-0.009846,
-0.028785,
0.050507,
0.047833,
-0.024315,
-0.009652,
0.045069,
0.039674,
0.010530,
0.080660,
0.027331,
0.091516,
0.017098,
0.203800,
-0.074842,
-0.126790,
-0.034250,
0.038532,
-0.003919,
-0.053933,
-0.184910,
-0.182290,
0.064925,
0.190510,
-0.048907,
0.027545,
0.019884,
-0.034827,
0.014097,
-0.125350,
0.107890,
0.146970,
-0.039838,
0.010421,
0.107720,
0.072347,
0.037957,
0.027700,
-0.069452,
0.131630,
0.112810,
0.091645,
-0.081927,
-0.103080,
0.015731,
-0.060550,
-0.076919,
-0.045540,
-0.089107,
-0.061541,
-0.032232,
-0.113690,
-0.033950,
0.011922,
-0.036098,
-0.028449,
-0.091742,
-0.120750,
0.052547,
-0.033364,
-0.018741,
0.012318,
-0.000081,
-0.004409,
0.008415,
-0.027591,
-0.010995,
0.025485,
-0.042885,
0.030194,
0.027796,
-0.022360,
0.024309,
-0.006679,
0.009080,
-0.027466,
-0.030894,
-0.029714,
-0.033840,
0.007238,
-0.002358,
0.029049,
0.032533,
-0.031121,
-0.107550,
-0.146010,
0.020979,
-0.149250,
-0.185300,
0.014386,
0.171580,
0.070988,
-0.114110,
-0.167660,
-0.009941,
0.125070,
0.083699,
0.007805,
-0.105550,
-0.208650,
-0.086186,
0.051377,
-0.098356,
-0.080041,
-0.224470,
-0.006638,
0.140850,
-0.171390,
-0.215210,
0.034494,
0.002407,
0.026323,
-0.015328,
0.017946,
-0.000485,
0.023156,
0.019272,
-0.011756,
-0.005193,
-0.029012,
-0.028469,
-0.039477,
-0.026292,
-0.014551,
-0.013008,
0.034459,
0.004230,
0.022264,
0.007063,
0.005855,
0.062113,
0.055294,
0.009630,
0.073002,
0.106070,
0.065029,
0.037714,
-0.082016,
-0.092460,
-0.009528,
0.072947,
0.002155,
-0.027275,
0.038439,
0.108320,
0.049437,
-0.043598,
-0.047176,
-0.085402,
-0.079733,
0.079115,
0.010268,
-0.314910,
-0.295080,
-0.149960,
-0.093428,
-0.180880,
-0.094271,
-0.086780,
-0.066880,
-0.172280,
-0.121070,
-0.139940,
-0.098375,
-0.148460,
0.010676,
0.013306,
0.029411,
-0.080085,
-0.183350,
0.106100,
0.033838,
0.024737,
-0.012741,
-0.066034,
-0.051252,
0.033082,
0.006477,
0.021090,
0.200180,
0.162400,
0.268480,
0.211820,
0.180190,
0.075785,
0.046362,
-0.032295,
0.046613,
0.043799,
0.006618,
0.028535,
0.077881,
0.133770,
0.076898,
-0.058693,
-0.018448,
0.003705,
0.079527,
0.081680,
-0.095502,
-0.062553,
-0.083560,
-0.051448,
-0.029341,
0.069129,
-0.004610,
-0.031124,
0.063318,
0.162400,
-0.180910,
-0.256690,
-0.113160,
0.050323,
0.030713,
-0.065133,
-0.068428,
-0.111870,
0.020796,
-0.167720,
-0.063705,
0.043875,
0.015372,
-0.017699,
-0.045319,
-0.240140,
-0.117160,
-0.144910,
-0.056932,
-0.104870,
-0.132400,
-0.124110,
-0.077898,
0.032392,
0.012964,
-0.298780,
-0.014102,
0.178240,
-0.024810,
-0.035879,
-0.188180,
-0.098690,
0.114760,
-0.068442,
-0.125060,
-0.149160,
-0.185670,
0.102260,
-0.129670,
-0.058808,
-0.061195,
0.031840,
-0.130340,
-0.060053,
-0.170390,
-0.136790,
-0.304860,
-0.127800,
-0.094372,
-0.187540,
-0.060364,
-0.074500,
-0.032511,
-0.027347,
0.030009,
-0.042924,
-0.160520,
-0.089630,
-0.066113,
0.106000,
0.120180,
-0.065561,
-0.058628,
-0.013436,
0.137800,
-0.048739,
-0.061867,
0.061831,
0.114490,
0.103080,
0.037770,
0.013030,
0.163800,
0.074872,
0.066781,
0.035455,
0.068266,
0.228570,
0.184710,
0.359460,
-0.100400,
-0.098515,
0.098544,
0.021610,
0.160930,
-0.170100,
-0.154280,
0.014383,
-0.005433,
-0.012849,
-0.117880,
-0.165910,
-0.015685,
0.031943,
0.025297,
0.026256,
0.077453,
0.105740,
0.123430,
0.105850,
-0.091586,
-0.059051,
0.074070,
0.160550,
0.076701,
-0.089209,
-0.053280,
0.035723,
0.002781,
0.020524,
0.010750,
-0.006468,
-0.008576,
-0.043580,
0.061400,
-0.013009,
0.156050,
0.147480,
0.136260,
0.179740,
0.113390,
0.150200,
0.197860,
0.143000,
0.187650,
-0.110520,
-0.097727,
0.188530,
0.226680,
0.176870,
-0.145610,
-0.010918,
0.061732,
-0.085350,
-0.100860,
-0.055020,
0.119000,
0.079193,
-0.035251,
-0.008873,
0.007556,
0.098654,
-0.003162,
0.077300,
0.159120,
-0.105260,
-0.042497,
0.016019,
-0.047667,
-0.050861,
0.090239,
0.078345,
0.105420,
-0.011352,
0.140430,
-0.019613,
0.100150,
0.114280,
0.112710,
0.123240,
0.005008,
0.035065,
-0.030528,
0.050771,
0.002714,
-0.053042,
-0.051529,
0.064463,
-0.007976,
0.001873,
-0.090378,
-0.065063,
0.052176,
0.104430,
0.054111,
-0.103350,
-0.014633,
0.017051,
-0.027123,
0.044237,
-0.124520,
0.055863,
-0.019550,
-0.050677,
0.100970,
-0.056986,
0.000691,
-0.067475,
0.047880,
0.057693,
-0.040078,
0.054079,
-0.006070,
-0.142260,
-0.177820,
0.028142,
-0.011698,
-0.127110,
0.085847,
-0.085562,
-0.228290,
-0.172750,
-0.023356,
-0.165560,
-0.221560,
-0.129340,
0.030358,
0.074247,
-0.028393,
-0.074581,
-0.193010,
0.025631,
-0.140970,
-0.194450,
-0.175910,
-0.311520,
-0.052838,
-0.133260,
-0.287060,
-0.315410,
-0.334460,
-0.281460,
-0.237610,
-0.302500,
-0.351950,
0.018848,
0.002918,
-0.014191,
0.019547,
0.007579,
-0.033543,
-0.014877,
-0.015144,
0.026088,
-0.026474,
0.007254,
-0.021897,
-0.006269,
0.042232,
-0.019506,
0.025395,
0.004049,
-0.009212,
-0.010322,
-0.025884,
0.030654,
0.012142,
-0.001895,
0.025207,
-0.005150,
-0.017591,
0.104200,
0.171170,
0.104350,
0.175050,
0.165880,
0.083635,
0.085331,
0.129400,
0.080884,
-0.087768,
0.119380,
0.124750,
0.194780,
-0.016418,
-0.128780,
0.047942,
0.042793,
0.020672,
-0.133720,
-0.237640,
0.131180,
0.040006,
0.018351,
-0.148090,
0.006907,
-0.090530,
-0.169230,
0.055087,
-0.143820,
0.045823,
-0.036046,
-0.081885,
-0.026581,
-0.058352,
-0.050678,
0.088474,
-0.023551,
-0.045910,
0.014798,
-0.222610,
0.078349,
-0.010735,
0.025760,
0.090613,
-0.230920,
-0.095243,
0.039609,
-0.029731,
-0.149160,
0.241980,
0.081461,
-0.007542,
0.014760,
-0.084165,
0.044263,
0.063028,
-0.019633,
0.044179,
-0.084060,
-0.054705,
0.023534,
-0.037176,
-0.156850,
-0.113890,
-0.119840,
-0.055726,
-0.177420,
-0.223600,
-0.196480,
0.006619,
0.112990,
-0.054184,
0.020795,
-0.012916,
-0.018030,
-0.033351,
-0.008551,
-0.007776,
0.024785,
0.030855,
0.033389,
0.021416,
-0.010131,
-0.016996,
-0.028302,
0.006447,
-0.016220,
-0.002752,
-0.011941,
-0.013330,
0.024034,
0.021574,
0.033209,
0.036548,
0.003330,
0.011435,
0.026542,
-0.018447,
0.024454,
0.089596,
0.076299,
0.033518,
0.097389,
0.036205,
-0.032920,
0.021669,
-0.004577,
-0.004181,
-0.058193,
-0.107770,
0.022213,
0.113680,
0.086553,
0.040297,
0.006588,
-0.079245,
0.091079,
0.081147,
0.111640,
0.190180,
0.020960,
0.043510,
0.101730,
0.127590,
-0.064010,
0.020214,
0.067839,
0.107620,
0.007369,
-0.127510,
-0.016908,
-0.053695,
-0.015282,
-0.083535,
-0.058568,
-0.014978,
-0.020658,
0.034148,
-0.061745,
0.042795,
0.023972,
0.005171,
0.067458,
0.023336,
0.065060,
0.124100,
0.084398,
0.109010,
0.034007,
-0.041404,
-0.007544,
0.074118,
0.002292,
-0.089450,
-0.025930,
-0.013114,
-0.008771,
0.050335,
-0.091703,
-0.019295,
-0.087130,
0.039214,
-0.009996,
-0.159450,
0.005436,
0.100980,
0.027365,
-0.175780,
-0.175490,
-0.018582,
0.018262,
0.001712,
-0.065657,
-0.049459,
0.054804,
0.020251,
0.016359,
-0.004686,
0.060255,
0.064617,
0.068912,
-0.004855,
0.029550,
0.018619,
0.064369,
0.069853,
0.044871,
0.078795,
0.025512,
-0.070858,
-0.097752,
0.030885,
0.030917,
0.067075,
0.030558,
0.055185,
-0.013450,
-0.080953,
0.026020,
0.171170,
0.050377,
-0.187970,
-0.167270,
-0.130680,
0.004670,
-0.028505,
-0.024049,
-0.016372,
-0.085467,
-0.049406,
-0.050412,
-0.089688,
-0.048064,
-0.059410,
-0.149730,
-0.107080,
-0.178700,
-0.103070,
-0.153040,
-0.077092,
-0.077277,
-0.145830,
0.008953,
0.025453,
-0.169130,
-0.200110,
-0.134970,
-0.000088,
-0.321700,
-0.228790,
-0.044039,
0.001882,
-0.053316,
-0.255080,
-0.249070,
-0.113540,
-0.101700,
-0.214830,
-0.197070,
-0.356730,
-0.186750,
-0.129450,
-0.210920,
-0.133880,
-0.203030,
-0.151650,
-0.251080,
-0.136590,
-0.130800,
0.031670,
0.009357,
-0.041385,
-0.047391,
-0.021528,
0.025131,
0.003305,
0.023061,
-0.001112,
-0.001212,
-0.029983,
-0.009775,
-0.008845,
0.022491,
-0.024293,
0.019402,
-0.027500,
-0.015892,
0.006710,
-0.015660,
0.006097,
-0.025748,
-0.018157,
0.016443,
-0.030822,
0.214540,
0.155260,
0.016023,
0.163950,
0.023299,
0.016929,
0.126950,
0.139500,
0.207130,
-0.019807,
0.074927,
-0.189160,
-0.034123,
0.059212,
-0.062050,
-0.097896,
-0.091990,
0.042612,
0.190040,
0.074113,
-0.258050,
-0.257000,
-0.167120,
0.104450,
0.074308,
0.045675,
-0.158530,
-0.024582,
-0.065547,
0.098118,
-0.018130,
0.084683,
0.047406,
0.036024,
0.023898,
-0.084853,
0.097928,
0.014311,
-0.083125,
-0.049578,
0.039963,
0.089483,
-0.007753,
-0.040419,
-0.237700,
0.024647,
-0.053730,
-0.183190,
-0.199020,
-0.241780,
-0.028588,
-0.019428,
-0.001274,
-0.020591,
-0.026093,
0.015213,
-0.007478,
0.026326,
0.007364,
-0.010284,
0.016247,
0.006564,
0.020983,
-0.005518,
0.024342,
-0.043820,
-0.048506,
-0.017694,
-0.016889,
-0.018992,
-0.012823,
-0.051902,
0.003396,
-0.021002,
-0.035418,
-0.083726,
0.019603,
-0.058179,
-0.036520,
0.038803,
0.067436,
-0.043178,
-0.070662,
0.070504,
0.111870,
0.145250,
-0.008030,
0.001282,
-0.093970,
-0.027917,
-0.041248,
0.092547,
-0.035581,
0.052145,
-0.031062,
0.078087,
0.092885,
0.020826,
-0.061830,
0.091163,
-0.033079,
-0.031437,
-0.003506,
0.024733,
-0.037620,
0.010627,
-0.004006,
-0.008865,
0.006746,
-0.024029,
-0.011686,
-0.036151,
0.003098,
-0.020960,
-0.033152,
-0.015139,
-0.022757,
-0.040880,
0.014090,
-0.022868,
0.027652,
-0.025427,
0.006979,
0.034963,
0.026262,
-0.033487,
0.015379,
0.024345,
0.008648,
-0.040268,
0.001599,
-0.024580,
-0.000710,
0.017951,
-0.040129,
0.001030,
-0.027048,
-0.021242,
0.022878,
0.003515,
-0.014961,
0.008606,
0.003234,
-0.019187,
-0.005217,
0.002976,
-0.014794,
-0.005539,
0.026415,
-0.010941,
0.008462,
-0.015563,
-0.019062,
0.006622,
0.025944,
-0.026351,
0.002142,
-0.008759,
0.020724,
0.008400,
0.016027,
-0.013678,
0.028854,
-0.031326,
0.013312,
-0.035745,
0.012208,
-0.015269,
0.018107,
0.000285,
0.027734,
0.000100,
-0.011506,
-0.034927,
-0.016271,
0.027773,
-0.039726,
-0.019811,
-0.019348,
0.012269,
0.012685,
-0.019162,
-0.038526,
0.024917,
-0.033207,
0.012543,
-0.035613,
-0.005904,
0.028783,
-0.034467,
-0.028955,
-0.031725,
-0.030885,
-0.010730,
-0.010577,
0.002929,
0.001779,
0.017274,
-0.007103,
-0.001837,
-0.029813,
0.031258,
-0.003874,
-0.026352,
-0.029858,
0.023367,
0.010787,
0.016020,
-0.002095,
-0.018087,
0.002697,
-0.023031,
-0.001995,
0.010070,
0.023958,
-0.017921,
0.025417,
-0.020581,
-0.007696,
-0.031136,
-0.005598,
0.023033,
0.017297,
-0.037674,
-0.010634,
0.023972,
0.025853,
-0.004090,
-0.039965,
0.025141,
0.038520,
0.004141,
-0.012872,
0.021195,
-0.034380,
-0.039859,
0.021654,
-0.003174,
0.014152,
-0.033237,
0.031497,
-0.039179,
-0.039816,
-0.019748,
0.039177,
0.019465,
-0.014064,
-0.001116,
-0.003808,
0.001368,
-0.020238,
-0.035487,
-0.013272,
-0.016381,
-0.014244,
-0.016041,
-0.022925,
0.003865,
-0.002911,
-0.009011,
-0.035460,
-0.014202,
-0.029111,
-0.024787,
-0.018661,
0.008455,
0.014512,
0.004252,
0.006406,
-0.020948,
-0.036479,
-0.030692,
-0.014804,
-0.008650,
-0.008978,
0.019431,
-0.034362,
-0.007228,
-0.011101,
-0.003486,
-0.023356,
0.005598,
0.002303,
0.025499,
-0.029132,
-0.035921,
-0.017249,
-0.000242,
0.007473,
-0.038749,
-0.027535,
0.023277,
0.020571,
-0.026621,
0.010512,
0.008041,
-0.001471,
-0.020066,
-0.012585,
-0.018701,
0.027883,
-0.035976,
0.016752,
0.024329,
-0.032281,
0.017477,
-0.010101,
0.003912,
0.016586,
-0.010899,
-0.017978,
-0.002675,
-0.027462,
0.005793,
0.022552,
-0.027067,
-0.016675,
-0.001555,
-0.023227,
-0.013160,
0.028016,
0.023135,
0.008467,
-0.025217,
0.029258,
-0.013227,
-0.029277,
0.005217,
0.014901,
-0.016462,
-0.032338,
0.023012,
-0.033404,
0.024072,
-0.029100,
-0.026420,
-0.014102,
-0.021432,
0.026301,
-0.031639,
0.022514,
-0.010872,
-0.021549,
0.005197,
-0.004246,
0.007843,
0.020639,
-0.019871,
-0.011378,
0.020152,
0.009796,
-0.023566,
-0.009146,
-0.029820,
0.012906,
-0.008926,
-0.015034,
0.006610,
-0.012526,
0.013879,
-0.020336,
-0.018549,
-0.036053,
0.009865,
-0.025132,
0.025979,
-0.019002,
-0.006185,
-0.014320,
0.015361,
0.011021,
0.023389,
-0.030175,
0.014879,
0.015813,
0.023368,
-0.006616,
0.008421,
0.028275,
0.001089,
-0.027821,
0.018424,
0.021389,
0.018706,
-0.002661,
-0.016860,
0.018588,
-0.023312,
0.026905,
0.019612,
0.002426,
-0.029644,
-0.040065,
-0.038323,
-0.032794,
0.012672,
-0.033306,
-0.007962,
-0.002293,
0.026844,
0.017235,
-0.026917,
-0.006045,
-0.000822,
0.016160,
0.018474,
0.027108,
0.022826,
-0.019453,
0.008854,
-0.039571,
-0.026558,
-0.018925,
-0.005984,
0.004932,
-0.012586,
0.022334,
-0.023347,
0.025318,
-0.009065,
-0.013301,
0.016057,
-0.032567,
-0.032748,
-0.018559,
-0.003184,
-0.015219,
0.007080,
-0.014276,
0.012651,
-0.028886,
-0.003230,
-0.000232,
-0.008922,
0.008272,
-0.041077,
-0.018933,
-0.002083,
-0.017917,
-0.023478,
0.011399,
0.014686,
-0.036277,
-0.007170,
-0.000739,
0.009514,
0.003882,
-0.013141,
0.010110,
-0.024038,
0.015259,
0.017411,
-0.000757,
-0.015304,
-0.023644,
-0.016335,
0.019600,
-0.040249,
-0.034333,
-0.019077,
0.005323,
-0.002502,
-0.031013,
-0.003035,
-0.017048,
-0.006188,
-0.012431,
0.012034,
0.019888,
-0.009561,
-0.021795,
-0.032283,
-0.000609,
0.007167,
0.008934,
-0.014808,
0.020267,
-0.007071,
0.018649,
0.022232,
0.020680,
-0.028914,
-0.034061,
0.008365,
0.004366,
0.023321,
0.001250,
0.004019,
-0.014229,
-0.002379,
-0.029102,
0.005134,
0.025622,
-0.012416,
0.009401,
-0.007307,
0.017012,
0.003018,
0.022643,
0.011797,
-0.033498,
0.025095,
-0.040619,
-0.040042,
-0.013246,
0.017402,
-0.014629,
0.028214,
0.013968,
0.014288,
-0.009163,
0.000170,
0.021100,
-0.025120,
-0.033812,
0.022815,
0.000564,
0.002897,
-0.020347,
-0.000413,
-0.011846,
-0.027070,
0.021897,
-0.029776,
0.013221,
-0.000211,
0.001297,
-0.003607,
0.009691,
-0.035410,
-0.014520,
-0.040634,
-0.004147,
-0.016400,
0.011802,
0.008777,
-0.034525,
-0.040602,
0.016268,
0.000593,
0.026357,
0.003760,
0.006888,
0.000756,
-0.021806,
-0.001873,
-0.032020,
-0.016141,
0.009046,
0.002276,
0.005009,
-0.010829,
0.009404,
-0.035938,
-0.023840,
-0.028899,
0.007245,
0.014531,
0.006451,
-0.008677,
-0.010667,
0.025100,
-0.017329,
-0.036523,
-0.023900,
0.012961,
-0.004112,
-0.033949,
-0.018680,
-0.014707,
0.002996,
0.016714,
0.013275,
-0.034931,
0.005173,
-0.007319,
-0.039811,
-0.016575,
-0.006524,
0.010242,
0.010342,
-0.011202,
-0.003895,
-0.005487,
-0.024052,
0.011570,
-0.037463,
-0.028551,
-0.022981,
-0.022267,
0.024089,
-0.038285,
-0.032537,
0.023686,
-0.000474,
-0.009420,
0.009704,
-0.039502,
-0.018089,
-0.027145,
0.024090,
0.020845,
0.021088,
0.005087,
-0.010279,
-0.002945,
-0.018971,
0.007508,
0.014229,
0.005507,
0.026482,
-0.012003,
-0.023341,
-0.023175,
-0.013006,
0.001596,
-0.025954,
0.035156,
0.003714,
0.028007,
-0.017540,
0.008012,
-0.003007,
-0.023902,
-0.027619,
-0.018880,
-0.018233,
0.013803,
-0.003789,
0.014202,
-0.009381,
-0.028325,
0.021585,
-0.035100,
0.000493,
-0.027517,
-0.008458,
-0.010193,
0.009739,
0.003988,
-0.039953,
-0.014205,
-0.030435,
-0.010419,
0.006882,
0.023304,
0.024697,
-0.017161,
0.010672,
0.022555,
0.017328,
-0.023420,
0.004784,
0.009813,
-0.007987,
0.015239,
-0.004612,
-0.005161,
0.025300,
-0.005461,
-0.022756,
0.019051,
-0.030954,
-0.040309,
0.000540,
0.018838,
-0.018083,
-0.021919,
-0.039444,
0.027713,
0.012186,
0.028374,
-0.004879,
0.016249,
-0.038939,
0.016891,
0.005166,
-0.038441,
-0.003385,
-0.010307,
0.019947,
0.021001,
-0.011472,
0.007974,
-0.001766,
0.022666,
0.009717,
-0.008435,
-0.035672,
-0.027221,
-0.028522,
-0.026916,
0.008680,
-0.029253,
-0.018813,
0.026465,
-0.028575,
0.001368,
-0.033777,
-0.009692,
0.009653,
-0.002456,
-0.038535,
0.018744,
0.026979,
-0.039206,
0.011124,
-0.008425,
0.018370,
-0.033260,
0.018675,
-0.012746,
0.001960,
-0.012010,
-0.033626,
0.010051,
0.008038,
-0.004117,
0.025159,
-0.034109,
0.004012,
-0.018061,
-0.018665,
0.024281,
-0.019075,
0.000621,
-0.031263,
-0.009006,
-0.041333,
0.007712,
0.024322,
0.012107,
-0.012697,
-0.003134,
-0.040303,
-0.037261,
-0.014582,
0.014653,
-0.008178,
-0.017708,
0.002339,
0.011057,
0.001582,
-0.024679,
-0.002697,
-0.026965,
0.008504,
-0.010158,
-0.036394,
-0.001939,
0.004767,
-0.012688,
0.011990,
-0.028689,
0.019932,
-0.030525,
-0.004885,
0.004702,
-0.015755,
-0.038655,
-0.037720,
-0.035159,
-0.003425,
-0.037550,
0.023584,
0.008673,
-0.001304,
0.002167,
0.011750,
-0.011920,
-0.036523,
-0.001276,
0.024290,
-0.018750,
0.025157,
-0.024674,
0.020396,
-0.011676,
-0.007218,
0.014750,
-0.041036,
-0.007918,
0.003895,
0.025484,
-0.036983,
-0.010687,
-0.031874,
0.011872,
-0.038150,
0.026926,
0.037694,
-0.002616,
0.025733,
0.003602,
-0.012291,
-0.028565,
-0.026526,
0.014483,
0.025731,
0.022018,
0.016692,
-0.035447,
0.010904,
-0.018096,
-0.030343,
-0.034705,
0.006517,
0.008187,
-0.031811,
0.008954,
-0.004560,
0.002299,
0.014916,
-0.001641,
-0.034791,
-0.004183,
0.008962,
0.002850,
0.012133,
0.003134,
-0.034961,
-0.039967,
-0.022826,
-0.013195,
-0.011097,
-0.000188,
-0.003948,
-0.024994,
0.016229,
-0.024259,
-0.007175,
0.026944,
-0.019390,
0.013537,
-0.016464,
0.017799,
-0.034512,
0.004210,
-0.033985,
-0.027876,
-0.011327,
-0.014478,
0.014729,
0.029051,
-0.034554,
-0.016153,
-0.011070,
0.019793,
0.010734,
-0.037206,
0.017682,
0.011639,
0.018375,
0.013151,
0.018791,
-0.035991,
-0.033987,
0.007955,
-0.036777,
-0.023219,
-0.033914,
-0.026264,
-0.022063,
0.006624,
-0.016946,
0.022192,
-0.013668,
0.006181,
-0.015984,
0.020112,
-0.012226,
0.002465,
-0.002164,
0.003606,
0.016282,
0.011829,
-0.026229,
0.010887,
-0.037096,
-0.024237,
0.004789,
0.004623,
0.010692,
0.014391,
-0.034465,
-0.004942,
0.013397,
0.003851,
-0.036291,
-0.012172,
-0.021946,
0.016696,
0.022228,
0.016293,
-0.003639,
-0.015465,
-0.025678,
-0.009005,
-0.040005,
-0.016128,
-0.157710,
-0.099035,
0.078066,
-0.072026,
-0.167870,
-0.039950,
-0.087693,
0.075106,
-0.011733,
-0.147350,
-0.003516,
-0.070119,
-0.026020,
0.030025,
-0.119630,
-0.000589,
0.016890,
-0.121630,
-0.002865,
0.122130,
0.120430,
0.024346,
0.025875,
0.043372,
0.001434,
-0.023077,
0.020123,
0.014368,
-0.027578,
-0.021497,
0.023934,
-0.009260,
-0.007313,
0.005401,
0.012746,
0.011204,
-0.009166,
0.018404,
0.007678,
0.027739,
0.004506,
-0.032555,
-0.024606,
-0.029151,
0.033945,
-0.029887,
-0.037293,
0.008438,
0.034375,
0.026130,
-0.088400,
-0.092394,
-0.050958,
-0.046706,
-0.027937,
0.067820,
-0.078210,
-0.073164,
-0.018448,
-0.065381,
0.061346,
-0.039906,
-0.160350,
-0.034534,
-0.048640,
-0.052255,
0.044602,
0.029044,
-0.076815,
-0.119450,
-0.188860,
-0.022009,
0.031153,
0.004995,
-0.052772,
0.048273,
0.047667,
0.053892,
0.031659,
-0.011135,
0.038417,
0.004201,
-0.011607,
-0.015295,
0.035716,
-0.001961,
0.047822,
0.000878,
-0.040560,
0.012876,
-0.030247,
-0.032276,
-0.020518,
0.005829,
0.018865,
-0.010562,
0.034278,
0.030464,
-0.018323,
-0.004433,
0.008811,
-0.007131,
-0.062059,
-0.000910,
-0.026282,
-0.006009,
-0.050797,
-0.016806,
0.079536,
0.046003,
0.036415,
0.090202,
0.153620,
0.197670,
0.112190,
-0.239540,
-0.039367,
0.050242,
0.035738,
-0.013792,
-0.291360,
-0.238220,
-0.123970,
-0.115710,
-0.123510,
0.039378,
0.003486,
0.032770,
-0.022901,
-0.012752,
-0.061286,
0.005673,
0.119410,
0.007871,
-0.111300,
-0.066180,
0.039486,
0.004122,
-0.033311,
-0.097683,
-0.205680,
-0.054452,
0.101060,
-0.049302,
-0.156500,
-0.079055,
-0.029964,
0.025997,
-0.050377,
-0.141110,
0.047390,
0.073520,
0.104040,
0.015448,
-0.034872,
0.002852,
0.071316,
0.094497,
0.020210,
-0.013555,
-0.026536,
0.000190,
0.090231,
0.005332,
-0.024381,
-0.036150,
-0.008921,
0.007214,
0.007165,
0.112940,
0.130180,
-0.003064,
-0.048011,
0.105320,
0.237660,
0.050557,
-0.018144,
-0.012682,
0.006009,
0.075504,
0.022982,
-0.069388,
-0.018576,
-0.072722,
-0.036955,
0.076193,
-0.046258,
-0.157470,
-0.090991,
0.045236,
0.057544,
0.056831,
-0.039325,
0.010283,
0.011733,
0.019219,
0.127440,
-0.019373,
-0.106150,
-0.008420,
-0.091315,
-0.005608,
0.027032,
0.170570,
0.208090,
-0.056306,
-0.009432,
0.090160,
0.152560,
0.189560,
0.075351,
0.002047,
-0.026732,
0.105600,
0.036392,
0.028666,
-0.042686,
-0.118320,
-0.039829,
-0.088326,
-0.026864,
-0.027280,
-0.013909,
-0.033061,
-0.032325,
-0.094951,
0.107990,
0.148140,
0.081760,
-0.026641,
-0.174230,
0.019962,
0.136170,
0.076032,
-0.025185,
0.010559,
0.012787,
-0.057756,
-0.051604,
-0.016205,
0.091613,
-0.060327,
-0.165950,
-0.029533,
0.046677,
0.088763,
-0.112120,
-0.153940,
-0.075272,
-0.105110,
-0.141050,
-0.253490,
-0.258320,
-0.021061,
0.050494,
0.033104,
-0.096546,
-0.221350,
-0.105440,
0.051558,
0.170150,
-0.141450,
-0.208770,
0.030597,
0.049055,
0.057303,
-0.169760,
-0.167250,
0.079821,
0.000704,
0.017910,
-0.021122,
-0.169040,
0.021009,
-0.113630,
-0.056872,
0.066638,
0.015178,
0.072852,
0.032984,
-0.066461,
-0.060820,
0.016043,
-0.099534,
0.129860,
-0.001194,
-0.072067,
-0.216200,
-0.232550,
0.080475,
0.200950,
-0.070012,
-0.129360,
-0.108480,
0.062743,
0.110180,
0.127200,
0.070406,
-0.027104,
0.001840,
-0.078370,
-0.082722,
-0.054427,
0.056520,
0.055132,
-0.088721,
-0.062523,
0.031483,
0.046826,
0.077019,
-0.158310,
0.010674,
-0.020114,
-0.075675,
-0.006759,
-0.046128,
0.051704,
-0.025125,
-0.082597,
-0.021126,
-0.003301,
0.138720,
0.109460,
0.086976,
0.068034,
-0.080102,
-0.021449,
-0.036157,
-0.030943,
0.004544,
-0.138110,
-0.167610,
0.019588,
-0.010900,
0.117250,
0.083614,
0.031736,
-0.038177,
-0.009408,
-0.081810,
-0.005460,
-0.029823,
-0.040178,
-0.003394,
0.018456,
0.038760,
-0.056953,
-0.083525,
-0.228680,
-0.139220,
-0.146660,
-0.146910,
-0.136110,
0.067369,
0.210040,
-0.092831,
-0.176180,
-0.084576,
-0.094772,
0.023431,
-0.105180,
0.005473,
0.000976,
-0.009776,
0.091171,
0.056883,
0.009571,
0.141860,
-0.018704,
-0.070495,
0.007393,
0.010317,
0.046222,
-0.020583,
-0.219530,
-0.075152,
0.000381,
0.107870,
0.079978,
-0.022617,
-0.106390,
0.011567,
0.148840,
0.129530,
-0.030657,
-0.030983,
0.107190,
0.172920,
0.095324,
-0.000359,
-0.060286,
0.099269,
0.055392,
-0.042873,
-0.098266,
0.080723,
0.156170,
0.116850,
0.015045,
0.133870,
-0.007433,
-0.020188,
0.051774,
0.060955,
-0.001251,
-0.031849,
-0.006490,
-0.033147,
-0.026944,
0.036353,
-0.046617,
-0.057585,
-0.059518,
0.010103,
0.037612,
0.018661,
-0.052231,
-0.032594,
0.031110,
-0.004023,
0.015004,
-0.037466,
-0.024571,
0.012843,
-0.022981,
0.173090,
0.090062,
0.012612,
0.007504,
0.149040,
0.280860,
0.138410,
-0.063742,
-0.224630,
0.094605,
0.060707,
0.034507,
0.113170,
-0.067462,
0.107610,
-0.031715,
-0.028062,
0.016865,
0.032810,
0.040992,
-0.025889,
-0.013249,
0.063443,
0.076601,
0.138460,
-0.057977,
-0.148140,
-0.164900,
-0.143940,
-0.071771,
0.075034,
-0.153350,
-0.277370,
-0.113650,
0.018191,
-0.030156,
-0.151920,
-0.206390,
-0.152830,
0.049215,
-0.017502,
-0.066994,
-0.132630,
-0.099597,
-0.111360,
0.079774,
0.003661,
0.049824,
0.063461,
0.094210,
0.076711,
0.070904,
-0.007665,
0.060336,
-0.057949,
-0.134350,
-0.173660,
-0.179360,
-0.075749,
-0.062256,
-0.171540,
-0.141190,
-0.024192,
0.001235,
-0.093333,
-0.102700,
-0.109120,
0.008386,
-0.030891,
0.007264,
-0.152610,
-0.179770,
-0.171330,
-0.144670,
-0.110760,
0.032146,
-0.026289,
0.008504,
-0.001264,
0.008934,
-0.020529,
0.002345,
0.001909,
0.000839,
-0.011563,
0.023373,
0.030380,
0.007938,
0.021341,
-0.018794,
0.022271,
0.008538,
0.018713,
-0.006051,
0.035354,
-0.013069,
0.002575,
-0.004379,
0.038211,
-0.020743,
-0.020896,
0.069866,
0.211710,
0.224380,
0.188680,
-0.123260,
0.148610,
0.242030,
0.206960,
0.083832,
-0.157430,
-0.126280,
0.058086,
0.126290,
0.054005,
-0.162160,
-0.144330,
0.076768,
0.008147,
-0.064266,
0.168510,
-0.053956,
-0.032978,
-0.005414,
-0.093004,
0.072712,
0.077624,
-0.009606,
-0.127660,
0.018522,
0.064906,
-0.015436,
-0.020238,
-0.013647,
0.002392,
0.009809,
-0.047633,
-0.004377,
0.009728,
-0.024497,
-0.069526,
-0.028905,
0.030215,
-0.053798,
0.004392,
-0.028677,
0.000344,
-0.044523,
-0.073222,
0.033588,
0.171870,
-0.089025,
-0.123090,
-0.118390,
0.030590,
0.065761,
-0.112240,
-0.166350,
-0.178430,
-0.127370,
0.052274,
-0.017268,
-0.044594,
-0.061229,
-0.074377,
-0.077163,
-0.017942,
0.073666,
0.046789,
-0.012705,
-0.259430,
-0.186070,
0.058031,
0.036505,
-0.068929,
-0.052396,
-0.064662,
-0.068096,
-0.134140,
-0.139380,
0.032298,
-0.088134,
-0.000827,
-0.073829,
-0.149860,
0.161500,
0.034570,
-0.060029,
0.043823,
-0.041858,
-0.111720,
-0.059184,
0.023713,
0.069332,
0.035807,
-0.077662,
-0.023992,
0.023217,
0.090941,
0.146650,
-0.158850,
-0.125900,
-0.047615,
-0.036797,
-0.278530,
-0.005804,
0.062887,
0.018152,
-0.074582,
-0.081930,
-0.151160,
-0.130500,
-0.228770,
0.010416,
0.007932,
-0.052705,
-0.141950,
-0.047599,
-0.114770,
-0.064976,
-0.023186,
-0.193430,
-0.225890,
-0.229300,
-0.235450,
0.137690,
0.073442,
0.078656,
0.065701,
0.095959,
0.148740,
0.147060,
0.128520,
0.073944,
0.154150,
0.086193,
0.088137,
0.063911,
0.078347,
0.064548,
0.032508,
0.093022,
0.081955,
0.001785,
0.094777,
-0.030140,
-0.009953,
0.013907,
0.080509,
0.073231,
0.016983,
-0.017011,
0.023861,
-0.093425,
-0.013215,
0.015467,
0.031099,
-0.005611,
-0.027077,
-0.040868,
-0.002674,
-0.036834,
-0.023432,
-0.027263,
0.005846,
-0.014021,
-0.012572,
-0.022443,
-0.006503,
-0.015822,
0.032957,
0.034479,
-0.011654,
0.029643,
0.030744,
-0.047090,
-0.101940,
0.025247,
-0.084660,
-0.060685,
-0.016822,
0.034488,
-0.026165,
-0.024783,
0.049811,
-0.065789,
-0.185700,
-0.012244,
-0.186410,
-0.184680,
0.051057,
-0.087471,
-0.261030,
-0.156690,
-0.163190,
-0.080592,
-0.086966,
-0.092112,
0.050901,
-0.107780,
-0.045456,
-0.119310,
-0.126570,
-0.005105,
0.055563,
-0.059291,
-0.140030,
-0.215090,
-0.035714,
0.067066,
0.003276,
0.033117,
0.025119,
-0.001077,
0.038478,
0.012085,
0.085284,
0.094755,
0.027118,
0.064166,
0.056080,
0.047445,
0.172710,
0.177530,
-0.029211,
-0.012808,
0.027509,
0.008271,
0.022240,
0.045497,
0.001535,
0.020021,
0.062374,
0.023256,
0.002407,
0.039417,
0.010439,
0.072308,
0.023303,
-0.001329,
0.076099,
-0.000234,
-0.029498,
0.010861,
-0.020601,
0.024356,
-0.014916,
0.007338,
0.026642,
-0.011604,
-0.147310,
-0.062876,
0.102650,
0.050366,
-0.097906,
-0.126590,
-0.136420,
-0.133710,
-0.042142,
-0.079831,
0.084080,
-0.113900,
-0.110190,
0.031543,
-0.032529,
0.076328,
0.033469,
-0.065124,
0.001245,
0.084018,
0.016763,
0.041256,
-0.039144,
0.044284,
0.002016,
-0.029494,
0.055084,
-0.064930,
-0.071142,
-0.016124,
0.087122,
-0.087475,
-0.037956,
-0.159310,
-0.117920,
0.036391,
0.001412,
-0.128750,
-0.144810,
0.081862,
0.114000,
0.000794,
-0.130170,
-0.189750,
0.099580,
-0.083856,
-0.092073,
0.015994,
-0.111120,
-0.018602,
0.002635,
0.012379,
-0.028615,
-0.001322,
0.008102,
0.029871,
-0.008324,
-0.010522,
0.008867,
-0.002306,
0.000951,
-0.003281,
-0.025915,
-0.003147,
-0.004450,
-0.001413,
-0.025271,
-0.018863,
-0.023753,
0.027238,
-0.015621,
-0.002103,
0.029196,
0.031302,
0.004685,
-0.084491,
-0.068653,
-0.064692,
0.055526,
-0.054695,
-0.012718,
0.060892,
-0.000815,
0.022762,
-0.047119,
-0.092860,
-0.034545,
0.083237,
-0.051649,
-0.041234,
-0.101460,
0.012948,
-0.040098,
-0.129830,
-0.182120,
-0.141740,
0.001194,
0.020403,
-0.012255,
-0.133280,
-0.017615,
-0.048116,
0.014334,
-0.021479,
-0.019674,
-0.013596,
-0.030778,
-0.004532,
0.024183,
-0.009234,
-0.025172,
-0.048774,
-0.042867,
-0.076723,
-0.056136,
0.006148,
-0.025097,
-0.056218,
-0.042603,
0.016736,
-0.006300,
-0.015213,
-0.030016,
0.013177,
0.047241,
0.007818,
0.027751,
0.050005,
0.051612,
0.049003,
0.017344,
-0.030736,
0.019080,
0.080608,
0.046262,
-0.114980,
-0.087331,
-0.148410,
-0.080945,
-0.037844,
-0.064313,
-0.167860,
-0.051083,
-0.113560,
-0.096272,
0.112730,
0.004592,
0.045036,
0.019610,
0.022033,
0.138830,
0.019092,
-0.032508,
0.061526,
0.034212,
0.111240,
-0.061990,
-0.162780,
0.053058,
-0.058826,
0.086334,
-0.097140,
-0.053954,
0.040413,
-0.079091,
0.185250,
-0.052801,
0.010646,
-0.014076,
0.032214,
0.122230,
0.054235,
-0.059802,
-0.080179,
0.006326,
0.296320,
0.069509,
0.063875,
0.089414,
0.184200,
0.191120,
0.027951,
0.046104,
0.103330,
0.122110,
0.083560,
-0.075485,
-0.038221,
0.121160,
0.112300,
-0.007023,
-0.059012,
-0.066306,
-0.012088,
0.139310,
0.101590,
-0.108210,
-0.034418,
0.008653,
0.073884,
0.070997,
-0.108650,
0.073441,
0.066396,
0.026363,
0.039406,
0.020214,
0.044680,
0.058451,
0.049180,
0.015727,
-0.002160,
-0.010591,
0.160750,
0.080829,
0.110940,
0.123470,
0.094402,
0.010070,
0.117260,
-0.159860,
-0.191320,
0.047086,
0.050921,
0.118930,
-0.268020,
-0.191760,
-0.074884,
0.069984,
0.104500,
-0.043180,
-0.091908,
-0.006442,
0.034739,
0.012913,
0.042292,
-0.051039,
0.118480,
0.146230,
0.018968,
0.143620,
0.062293,
0.241800,
0.137190,
0.085493,
0.090945,
0.154270,
0.139370,
0.078552,
0.089007,
0.351610,
0.110080,
0.062721,
0.040844,
0.272920,
0.098900,
-0.027623,
0.025626,
0.017614,
0.114140,
0.009684,
-0.093033,
-0.078896,
-0.018924,
0.191180,
-0.022070,
-0.147320,
-0.164560,
-0.109210,
0.120400,
0.186220,
0.073073,
0.108460,
0.053141,
0.173340,
0.041201,
-0.029576,
-0.083784,
-0.062564,
-0.030087,
-0.053960,
-0.015110,
0.001890,
0.034617,
-0.000844,
-0.034219,
-0.087446,
0.062240,
0.025067,
0.114730,
-0.103510,
-0.188200,
-0.080431,
-0.102870,
0.093313,
-0.051507,
0.032908,
-0.052880,
0.013608,
0.125620,
0.015470,
0.029286,
0.085685,
0.131470,
0.097648,
-0.008736,
0.002146,
-0.067452,
-0.106070,
-0.058940,
-0.024793,
0.019175,
-0.082540,
-0.011846,
0.081412,
0.122040,
0.021407,
0.128020,
0.064301,
-0.032102,
-0.082462,
0.054730,
-0.020174,
-0.124090,
-0.105100,
0.151540,
0.064362,
0.102960,
0.151540,
0.222590,
0.163430,
0.023907,
-0.007747,
-0.092652,
-0.088394,
0.096418,
0.050689,
-0.026942,
0.007521,
0.012100,
0.033809,
-0.090871,
0.075640,
0.027675,
-0.073259,
-0.055664,
-0.086765,
-0.068659,
0.003361,
-0.059795,
-0.030875,
-0.014319,
-0.023624,
0.069959,
0.011403,
-0.034893,
0.034444,
-0.028796,
0.042447,
-0.055305,
0.075928,
0.014469,
-0.057783,
-0.005550,
-0.036777,
-0.049816,
-0.082947,
-0.025626,
-0.041698,
0.047039,
0.102050,
-0.039307,
0.025216,
-0.020740,
0.074868,
-0.121760,
-0.143960,
-0.086708,
-0.001154,
0.078868,
-0.133300,
-0.057069,
-0.101890,
-0.127010,
0.000046,
-0.157180,
-0.094010,
-0.155910,
-0.096552,
-0.108970,
-0.077859,
-0.109510,
-0.165930,
-0.070784,
-0.173100,
-0.123400,
-0.218470,
-0.262670,
-0.384350,
-0.236280,
-0.102120,
-0.098058,
0.004728,
0.023621,
-0.047461,
-0.080546,
-0.087068,
-0.143640,
-0.116970,
-0.046959,
-0.087361,
-0.089784,
-0.074689,
-0.017500,
-0.025347,
-0.028096,
-0.008493,
-0.005558,
-0.018543,
-0.030166,
0.063928,
0.051591,
0.059114,
0.017476,
-0.017711,
-0.025124,
-0.028984,
-0.015416,
0.016936,
-0.000924,
-0.018718,
0.017036,
-0.006219,
-0.046985,
-0.005177,
-0.056186,
-0.008015,
-0.061908,
-0.040172,
0.001769,
-0.006933,
-0.002149,
0.012603,
-0.028919,
0.011698,
0.024637,
-0.019301,
0.001115,
-0.048122,
0.000141,
0.043658,
-0.016584,
0.078499,
0.085663,
0.086849,
0.069035,
-0.067957,
0.018318,
0.085314,
0.086728,
-0.016203,
-0.045242,
-0.123640,
-0.031160,
-0.084150,
-0.272800,
-0.000937,
-0.078637,
-0.122240,
-0.142650,
-0.232310,
-0.305320,
-0.187180,
-0.210170,
-0.222960,
0.028103,
-0.115560,
-0.019995,
-0.051378,
-0.080401,
-0.042934,
-0.022328,
-0.053041,
0.014981,
-0.009757,
0.060669,
0.144190,
0.098745,
0.108860,
0.015638,
0.000857,
0.038811,
-0.060369,
0.014268,
0.037782,
-0.073379,
-0.164710,
-0.105530,
0.082363,
0.019072,
0.121950,
0.146270,
0.193040,
0.035282,
0.036068,
-0.011909,
-0.029139,
0.131270,
0.033781,
0.093012,
-0.038089,
-0.005405,
0.082498,
0.116400,
0.104800,
-0.063447,
-0.123080,
0.015395,
-0.011748,
0.102740,
-0.062983,
0.048866,
-0.095795,
-0.180500,
0.045302,
0.003016,
0.009488,
0.004340,
-0.007345,
0.027552,
0.015669,
0.020849,
-0.035320,
0.016031,
-0.011979,
-0.028519,
0.013581,
-0.083307,
-0.007017,
0.009910,
0.041255,
-0.034773,
0.008761,
-0.002174,
-0.010205,
0.003373,
-0.026714,
0.016342,
0.020528,
-0.043792,
0.045770,
-0.006727,
-0.117010,
-0.024578,
-0.043890,
0.064991,
0.097135,
-0.007353,
-0.002549,
-0.072221,
-0.018498,
0.075976,
0.194400,
0.078361,
0.096988,
0.103220,
0.073441,
0.054141,
0.042115,
0.179300,
0.108440,
0.083277,
-0.001016,
-0.106180,
0.089849,
0.037280,
-0.030347,
0.019590,
0.190720,
0.034663,
0.035661,
0.022004,
-0.072637,
0.136460,
-0.013575,
0.164540,
0.142320,
-0.025103,
0.052189,
-0.024520,
0.078747,
0.014764,
0.026828,
-0.014055,
-0.056007,
-0.001727,
-0.138160,
-0.016099,
-0.014577,
-0.068221,
0.013018,
0.023949,
-0.055706,
-0.129450,
-0.044646,
0.026636,
0.038506,
0.127920,
0.094254,
-0.009862,
0.068046,
0.045306,
0.029312,
0.003428,
-0.040044,
0.111890,
0.121940,
0.024761,
-0.047820,
-0.003688,
-0.019625,
0.020498,
-0.027763,
-0.071339,
0.047976,
0.133590,
0.033053,
-0.059410,
-0.111900,
0.045469,
0.170970,
0.180350,
0.026431,
-0.089389,
0.047874,
0.034049,
0.102570,
-0.078936,
-0.041293,
0.136860,
-0.258500,
-0.189870,
0.026831,
-0.104350,
-0.002296,
-0.040013,
-0.080263,
-0.042089,
0.096918,
0.117540,
0.160370,
0.068131,
-0.011840,
-0.016380,
0.102030,
0.092207,
0.061763,
-0.022329,
0.000060,
0.086931,
-0.092861,
0.091038,
0.203830,
0.064005,
0.095439,
0.033039,
-0.036220,
0.077139,
0.005616,
0.138050,
0.052707,
-0.057782,
-0.082352,
-0.134680,
0.082014,
-0.025062,
-0.013378,
0.058389,
0.038905,
0.065579,
0.050383,
0.026151,
0.063185,
0.021518,
0.002800,
0.022469,
-0.008880,
0.020002,
0.069476,
-0.072781,
-0.004780,
0.015265,
0.037429,
0.065707,
-0.011313,
-0.042851,
-0.032408,
-0.033749,
-0.029447,
-0.050502,
0.003344,
0.035148,
-0.077163,
0.008161,
0.008529,
0.110410,
0.023944,
-0.069707,
-0.025246,
-0.009800,
0.020329,
0.005481,
-0.033510,
0.035642,
0.028745,
-0.010234,
-0.002697,
-0.012123,
0.051847,
-0.011406,
0.022148,
0.007320,
-0.044557,
0.028564,
-0.050943,
0.057002,
0.021769,
0.131070,
0.111290,
0.000296,
0.016302,
0.019197,
0.116610,
0.040491,
0.023837,
0.130740,
-0.028331,
-0.055518,
-0.089687,
0.068664,
-0.024049,
0.021713,
0.020013,
0.090380,
0.140060,
0.048830,
0.106640,
0.156720,
0.140260,
0.121520,
-0.152800,
-0.067823,
-0.000153,
0.028825,
0.056234,
0.031879,
0.043356,
0.058332,
-0.104130,
0.013621,
0.039251,
0.011387,
0.028304,
-0.033600,
0.049642,
-0.019229,
0.046407,
-0.055819,
-0.135100,
-0.088666,
-0.037287,
-0.001879,
-0.135140,
-0.094363,
-0.223190,
-0.018092,
-0.034738,
-0.011866,
-0.005618,
-0.005778,
0.015528,
0.006492,
0.001616,
-0.015172,
-0.022940,
-0.040890,
-0.009466,
-0.022740,
-0.010901,
0.024556,
0.019328,
0.026981,
-0.025229,
-0.046699,
0.007137,
-0.008108,
-0.012518,
-0.008599,
-0.024594,
-0.008403,
0.137540,
0.110950,
0.122890,
0.074509,
0.057186,
0.059989,
-0.003626,
0.032466,
-0.129620,
0.105580,
-0.072526,
-0.007675,
-0.107420,
-0.000653,
0.021029,
-0.116140,
-0.082332,
-0.126990,
-0.191420,
0.022322,
-0.219710,
-0.164130,
-0.096320,
-0.076717,
0.106050,
0.144670,
0.161330,
0.144070,
0.066178,
0.056669,
-0.114160,
0.008113,
-0.053731,
-0.011052,
0.091414,
-0.173360,
-0.255930,
-0.041804,
0.048504,
0.047688,
-0.187370,
0.065093,
-0.158710,
-0.075807,
0.001351,
-0.058766,
0.101270,
-0.080651,
0.067423,
0.211260,
0.020059,
0.028635,
0.002151,
-0.027005,
0.036036,
0.003937,
-0.021662,
-0.005512,
0.031701,
-0.028915,
0.035126,
0.024064,
0.000607,
-0.001871,
-0.000710,
-0.021796,
-0.031863,
0.017367,
-0.024534,
-0.019087,
-0.008038,
-0.045081,
0.009404,
0.047790,
0.006850,
-0.103810,
-0.148180,
-0.143810,
-0.261780,
-0.236630,
-0.202970,
-0.165130,
-0.142370,
-0.111640,
-0.124960,
-0.026412,
-0.090499,
0.046191,
-0.051124,
-0.039027,
0.061023,
-0.092570,
0.092117,
-0.112990,
-0.015823,
0.056891,
0.076295,
0.117910,
-0.098287,
0.098117,
-0.020512,
0.050491,
-0.050341,
0.003327,
-0.089556,
0.008956,
-0.026924,
-0.014486,
0.001999,
-0.045586,
0.059589,
0.020892,
0.021626,
-0.037892,
-0.036625,
0.006289,
0.034477,
0.044385,
0.050543,
0.001476,
-0.017060,
0.011922,
0.014488,
0.030455,
-0.009555,
0.004998,
-0.022150,
-0.057086,
-0.036499,
0.005625,
0.028905,
0.128540,
0.127450,
0.017435,
-0.018380,
0.032485,
0.009218,
-0.031470,
-0.026362,
0.147990,
-0.001702,
-0.098517,
-0.071030,
-0.010129,
0.120460,
-0.036354,
0.062238,
-0.129810,
-0.143680,
-0.094430,
0.105110,
-0.116960,
-0.029391,
0.052282,
0.149240,
-0.069347,
-0.110680,
0.024254,
-0.092075,
-0.001098,
-0.015671,
-0.103090,
0.038951,
-0.044627,
-0.071133,
-0.038560,
-0.101330,
-0.000155,
0.070673,
0.157560,
-0.064523,
-0.032323,
0.153100,
0.067052,
0.017060,
0.178680,
0.018261,
0.014590,
0.057726,
0.163390,
0.030214,
-0.004067,
-0.066741,
-0.066439,
-0.085108,
0.141240,
0.036306,
-0.022386,
-0.007565,
0.032101,
-0.043290,
-0.053535,
0.021995,
0.015325,
0.050935,
-0.136630,
-0.162320,
0.007110,
0.154590,
0.022625,
0.083889,
-0.058894,
-0.056036,
-0.047020,
-0.051294,
0.131800,
-0.067277,
-0.063810,
-0.007130,
-0.099183,
0.259160,
0.076097,
-0.001867,
-0.047678,
-0.077762,
0.130680,
0.083172,
-0.100440,
0.012967,
0.065757,
-0.023318,
-0.103120,
-0.055467,
0.095906,
0.086225,
-0.132980,
0.039646,
-0.068824,
-0.059400,
-0.131740,
0.003895,
-0.091452,
0.025684,
0.019050,
-0.036878,
-0.147610,
0.033060,
0.027967,
0.071841,
0.010851,
0.098812,
0.084400,
0.069154,
0.035431,
-0.020152,
0.017617,
-0.036865,
0.076528,
0.050943,
-0.019442,
0.044424,
-0.003473,
0.102310,
0.053971,
0.049697,
-0.096401,
-0.133300,
-0.107400,
-0.176160,
-0.111500,
0.026112,
0.023556,
-0.069054,
0.014262,
0.109110,
0.016283,
-0.080485,
-0.068650,
-0.035814,
-0.075013,
0.053792,
-0.031069,
0.016423,
-0.040340,
-0.055622,
-0.090119,
-0.116840,
-0.003964,
-0.010488,
-0.084354,
-0.020514,
0.044165,
-0.076615,
-0.227820,
-0.076480,
0.105640,
-0.041245,
-0.161560,
-0.068626,
-0.076875,
0.042912,
-0.210240,
-0.180480,
-0.133760,
-0.054162,
0.080900,
0.022474,
0.007604,
-0.052910,
0.052239,
-0.034397,
-0.021968,
-0.004681,
-0.086475,
-0.016982,
-0.022955,
-0.057685,
-0.039951,
-0.017787,
-0.136610,
-0.049600,
-0.029138,
-0.011049,
-0.155340,
-0.100510,
-0.076516,
-0.006155,
-0.034610,
-0.139360,
-0.065582,
0.044880,
0.125490,
0.052349,
0.001541,
0.112970,
0.045607,
0.113940,
-0.073559,
0.045196,
0.095895,
0.163220,
-0.024735,
0.038072,
-0.006942,
-0.007561,
0.112660,
0.044881,
-0.016366,
0.027078,
0.107170,
0.096503,
0.020987,
0.080126,
0.031754,
0.013647,
0.124590,
0.079143,
0.100030,
0.045279,
0.030088,
0.140170,
0.013485,
0.056370,
0.110670,
-0.044949,
0.032262,
-0.054925,
-0.069263,
-0.025124,
-0.177320,
0.007037,
-0.057034,
-0.049153,
0.054144,
-0.147490,
-0.028682,
-0.119630,
-0.064153,
0.059257,
-0.082550,
0.213660,
0.003522,
-0.063031,
0.000711,
-0.042586,
-0.095655,
-0.070203,
-0.124520,
-0.082781,
-0.041630,
-0.093067,
-0.018447,
0.061484,
0.123910,
0.219310,
-0.036995,
0.067458,
-0.014081,
0.025974,
0.255940,
0.033149,
0.091745,
-0.046192,
-0.013704,
0.131000,
-0.062265,
0.160710,
-0.095592,
-0.150760,
0.073293,
0.067313,
0.110250,
0.019554,
-0.020907,
-0.020985,
0.045616,
0.032606,
0.039397,
-0.039255,
-0.020481,
-0.063070,
0.051639,
0.043120,
0.009032,
-0.057285,
-0.106780,
0.001685,
0.014050,
0.018349,
-0.049000,
0.012655,
0.058088,
0.109720,
0.009657,
-0.001745,
-0.005573,
0.010207,
0.012299,
-0.034236,
0.035781,
-0.058293,
-0.010239,
-0.047382,
-0.040966,
0.031895,
-0.026982,
-0.033338,
0.000994,
-0.007217,
-0.005707,
0.008163,
-0.028731,
-0.025996,
0.019488,
-0.015948,
-0.052807,
-0.000702,
-0.020433,
-0.056699,
-0.034847,
-0.016467,
-0.054866,
-0.176560,
-0.120620,
-0.010801,
0.039459,
-0.125550,
-0.034489,
-0.007180,
-0.053915,
-0.089335,
-0.078356,
0.091660,
-0.001585,
0.026247,
0.005913,
-0.029312,
0.005292,
-0.095337,
-0.015799,
0.128200,
0.194820,
0.221670,
0.222800,
-0.000982,
-0.142170,
-0.156840,
-0.049415,
-0.064964,
-0.128360,
-0.014678,
-0.035403,
0.095340,
0.067430,
-0.070069,
0.156290,
0.033424,
0.046338,
0.032677,
-0.017459,
0.197380,
0.148380,
0.096951,
0.106270,
0.078941,
0.100240,
0.131010,
0.099275,
0.040726,
-0.018652,
-0.043428,
-0.048817,
-0.082383,
-0.121240,
-0.144070,
0.021155,
0.013420,
0.039933,
-0.041903,
-0.081048,
0.076346,
0.010310,
-0.030502,
-0.155710,
-0.110020,
0.017800,
-0.020647,
0.026977,
0.026830,
-0.052983,
0.166930,
0.066080,
0.025065,
-0.037749,
0.023225,
-0.033973,
-0.041846,
0.007073,
-0.042501,
-0.019757,
-0.023806,
-0.050187,
-0.000875,
-0.020176,
0.011847,
0.029202,
-0.007967,
-0.027259,
0.001326,
-0.013395,
0.003817,
-0.031557,
-0.021641,
-0.047163,
0.033922,
-0.042933,
-0.010550,
-0.009698,
0.006263,
-0.003328,
0.169220,
0.056661,
0.113140,
0.120750,
0.220220,
0.056790,
0.129960,
0.066664,
0.006698,
0.170040,
0.031333,
0.052556,
-0.158290,
-0.139730,
0.002396,
-0.222050,
-0.023630,
-0.079777,
-0.093501,
0.079170,
-0.236600,
-0.070190,
-0.078421,
-0.123440,
-0.082653,
-0.072480,
-0.040569,
-0.046347,
0.041502,
-0.070235,
-0.149120,
-0.086448,
-0.056552,
-0.085165,
-0.149250,
-0.131210,
-0.119300,
-0.035725,
-0.045399,
-0.128150,
-0.061896,
-0.117490,
-0.056092,
0.088000,
-0.025575,
-0.069958,
-0.046754,
0.024204,
0.102080,
0.009170,
-0.145920,
-0.048438,
-0.119880,
-0.069810,
-0.147470,
0.128260,
0.055999,
0.002969,
0.074772,
0.002477,
0.233460,
0.139610,
-0.000174,
0.034058,
0.117590,
0.115660,
0.091335,
0.042811,
0.055380,
0.162960,
0.186290,
0.070262,
0.057236,
0.117480,
0.064948,
0.010987,
0.009323,
0.072650,
0.069091,
0.004607,
0.051465,
-0.055822,
-0.185570,
-0.162850,
-0.010064,
0.053630,
0.037691,
-0.067943,
0.033268,
0.125210,
0.036034,
-0.100660,
-0.094493,
0.152250,
0.129130,
0.023694,
0.020290,
-0.062991,
0.007541,
0.137490,
-0.036660,
-0.069573,
-0.149220,
-0.219360,
-0.030240,
0.178690,
0.070675,
-0.021275,
0.041124,
0.094636,
0.011311,
0.087293,
-0.107500,
0.047680,
0.059468,
0.042435,
0.087351,
-0.141560,
0.030923,
0.165290,
-0.118620,
-0.008323,
-0.186710,
-0.076955,
-0.053622,
0.109820,
0.027473,
-0.003167,
0.012173,
-0.046995,
0.039469,
0.093227,
-0.020263,
-0.007157,
0.004997,
0.068740,
-0.031648,
-0.015272,
0.042126,
0.044273,
0.002316,
-0.109290,
-0.018980,
0.046140,
0.059077,
-0.011496,
-0.169720,
-0.046972,
-0.091338,
-0.072813,
0.088671,
0.031781,
0.063515,
0.030208,
0.042758,
0.021545,
0.027138,
0.061346,
0.041411,
-0.010451,
0.059247,
0.031195,
0.005249,
0.019003,
-0.010980,
0.004426,
0.052391,
0.059107,
0.034083,
-0.002918,
0.040436,
0.029829,
0.047029,
0.018764,
0.022722,
0.023723,
-0.119220,
-0.086163,
0.020043,
-0.033891,
-0.035432,
-0.040568,
-0.083568,
-0.063973,
-0.139450,
-0.076898,
-0.036942,
-0.181330,
-0.178190,
-0.189740,
0.103370,
0.053598,
-0.063099,
-0.021392,
-0.067650,
0.154440,
0.178350,
0.035361,
0.118050,
0.104360,
-0.033458,
-0.028648,
-0.005059,
-0.080199,
-0.021417,
-0.003785,
-0.069149,
-0.028243,
0.016741,
0.067889,
-0.006571,
0.001934,
0.038651,
0.067173,
0.080545,
0.064012,
0.056360,
0.040253,
-0.073209,
0.171920,
0.025978,
0.117030,
0.107760,
-0.000007,
0.130080,
-0.008164,
0.011277,
0.007534,
-0.012210,
-0.026302,
0.010061,
-0.014227,
-0.020634,
-0.009246,
-0.009026,
0.010285,
0.023084,
0.037117,
-0.029742,
-0.007154,
0.009084,
0.033575,
-0.005750,
-0.004694,
-0.013939,
-0.077840,
-0.054258,
0.038276,
0.005965,
-0.051093,
0.009665,
0.073665,
0.027175,
-0.061924,
0.023503,
0.085472,
0.011168,
-0.037884,
-0.134680,
-0.057897,
-0.126520,
-0.139850,
-0.091835,
-0.058669,
0.023303,
-0.010748,
-0.047023,
0.095243,
-0.054223,
-0.066508,
0.178300,
0.126410,
0.018098,
0.184560,
0.164060,
-0.060724,
-0.048522,
0.004324,
0.023332,
-0.009133,
-0.114330,
-0.040538,
-0.044322,
0.024576,
0.081284,
0.001850,
-0.079115,
0.007328,
0.087276,
0.115540,
0.090843,
0.009012,
0.147960,
0.045956,
0.038905,
0.192140,
0.203530,
0.102800,
0.050673,
0.030259,
-0.018408,
0.001541,
0.038482,
0.020518,
0.001759,
0.035691,
-0.028377,
-0.014247,
0.033872,
-0.014349,
0.009903,
-0.025712,
0.008683,
0.011678,
0.029789,
0.017681,
-0.022539,
-0.027105,
0.021659,
0.010180,
0.017886,
0.026674,
0.032229,
0.005968,
0.039802,
-0.113040,
-0.102610,
-0.182390,
-0.007100,
0.068090,
-0.151000,
-0.151300,
-0.138530,
-0.060456,
-0.156650,
-0.077789,
-0.096511,
0.016013,
0.022470,
-0.076846,
-0.039963,
-0.028723,
0.086042,
0.043665,
0.053691,
0.109290,
0.068538,
0.146760,
0.049254,
0.061012,
-0.036478,
-0.024774,
-0.079044,
-0.040966,
-0.018295,
0.031515,
0.020189,
0.027450,
0.026614,
-0.024218,
0.032726,
0.001551,
-0.006344,
-0.008915,
-0.035834,
-0.016512,
-0.022680,
-0.023989,
-0.041034,
-0.014036,
-0.051274,
-0.057252,
-0.015972,
-0.000802,
-0.036804,
0.112180,
0.077272,
0.013996,
-0.053590,
0.003390,
0.000749,
0.012955,
0.048452,
0.062639,
0.063075,
-0.017327,
-0.022188,
0.005703,
-0.051677,
0.034460,
-0.026727,
-0.052963,
0.010398,
0.039299,
0.044733,
-0.085658,
-0.057816,
0.042272,
0.056384,
-0.031775,
0.093281,
0.016263,
-0.047086,
-0.007502,
0.068434,
-0.002314,
-0.074910,
-0.144630,
-0.025063,
0.064182,
0.015493,
-0.147040,
-0.136670,
-0.157740,
0.001399,
-0.093594,
-0.047398,
0.002153,
0.042519,
-0.041405,
-0.117790,
0.021436,
0.090667,
0.031287,
-0.019120,
0.094119,
0.080256,
-0.011952,
0.055695,
0.163400,
0.032852,
0.030434,
-0.004038,
0.011818,
0.032190,
0.085077,
0.018676,
-0.033332,
0.054340,
-0.050239,
0.044094,
-0.012853,
0.035957,
-0.008664,
-0.061972,
0.024373,
-0.082298,
-0.013578,
0.048004,
-0.103120,
-0.021381,
-0.077177,
0.006205,
0.026304,
0.075842,
-0.198300,
-0.133000,
-0.080856,
-0.045270,
0.033325,
-0.026022,
0.017271,
-0.004666,
-0.059304,
0.052483,
0.063644,
0.065129,
-0.033774,
-0.104210,
0.012343,
0.027553,
0.014165,
-0.032667,
-0.151570,
0.012291,
-0.292810,
-0.141640,
-0.097373,
-0.162920,
-0.121670,
-0.188970,
-0.188110,
-0.195800,
-0.270840,
-0.116360,
0.023322,
-0.100130,
-0.210950,
-0.146590,
-0.006663,
-0.151900,
-0.056425,
-0.104320,
-0.082269,
-0.029625,
-0.133860,
-0.150750,
-0.202550,
-0.177510,
0.092045,
-0.007104,
-0.081845,
-0.065206,
-0.011050,
0.083449,
0.012172,
0.021156,
0.148510,
0.012944,
-0.034985,
0.011326,
0.107480,
0.137230,
0.215310,
0.097832,
-0.032972,
0.093678,
0.045148,
0.098990,
-0.041421,
-0.215580,
-0.106560,
-0.077620,
-0.124170,
-0.157410,
-0.075044,
-0.087970,
-0.242370,
-0.183660,
0.004864,
-0.000931,
0.065442,
0.016252,
-0.079710,
-0.110470,
0.074563,
0.156200,
0.093010,
0.148800,
0.167910,
-0.034611,
0.101650,
0.149440,
0.030829,
0.163940,
-0.001151,
0.102460,
0.138800,
0.134220,
0.217930,
-0.022152,
-0.067400,
-0.000481,
0.023210,
0.146950,
-0.044838,
0.015313,
-0.034002,
-0.051081,
0.018926,
0.009047,
0.095460,
0.067648,
0.038389,
0.059315,
0.067541,
0.002900,
0.086391,
0.097413,
-0.003131,
0.176250,
0.057435,
0.009283,
-0.036693,
-0.019983,
0.032321,
0.038720,
0.111840,
-0.071780,
-0.061990,
0.033751,
0.019169,
0.037456,
0.105700,
0.068959,
-0.062681,
-0.081720,
-0.069354,
0.011834,
0.016854,
-0.086615,
-0.070800,
-0.076001,
-0.028605,
0.037925,
-0.120320,
-0.159280,
-0.187450,
-0.130680,
-0.138040,
-0.006878,
-0.012138,
-0.029281,
-0.017741,
0.006757,
0.054939,
0.022855,
0.005877,
0.026567,
-0.009773,
0.032822,
-0.025879,
0.059698,
-0.025147,
-0.107080,
0.037223,
0.000025,
0.001099,
0.058585,
-0.082219,
0.044718,
-0.011994,
0.076368,
0.010484,
-0.053206,
-0.010606,
0.053484,
-0.013238,
-0.123920,
-0.178790,
-0.169500,
0.064229,
-0.010222,
0.068722,
0.025237,
-0.144040,
-0.140420,
-0.054008,
-0.018927,
-0.012756,
-0.253520,
-0.274050,
-0.184640,
-0.125990,
0.037539,
-0.278360,
-0.246330,
-0.141640,
-0.132760,
0.006856,
-0.104060,
-0.114500,
-0.146350,
-0.134670,
-0.149990,
-0.203310,
-0.100040,
-0.129650,
-0.045971,
-0.094441,
-0.308160,
-0.153190,
-0.126640,
-0.044507,
-0.024312,
-0.225280,
-0.173760,
-0.200310,
-0.108930,
-0.086083,
-0.284880,
-0.155080,
-0.087571,
-0.141500,
-0.158550,
0.017634,
0.026515,
-0.017778,
-0.021565,
0.003511,
-0.019458,
0.001696,
-0.009817,
-0.048756,
-0.002818,
-0.030291,
-0.030682,
0.013030,
-0.057238,
-0.016956,
-0.044113,
0.002005,
0.010637,
-0.027470,
-0.045776,
0.006438,
-0.029276,
0.043514,
0.007955,
-0.019203,
-0.057553,
-0.015415,
0.008604,
0.002483,
0.118730,
0.085160,
0.014817,
0.025584,
0.003859,
-0.086325,
0.129010,
0.109100,
-0.030408,
-0.081843,
-0.026516,
0.094547,
-0.064823,
0.067333,
0.079386,
-0.067579,
-0.099801,
0.013729,
0.048089,
0.030596,
-0.093946,
-0.007032,
-0.066337,
-0.038848,
-0.028021,
0.014618,
-0.046595,
-0.009425,
-0.023572,
0.018270,
0.050380,
0.016435,
0.027821,
-0.065224,
-0.070056,
-0.010033,
0.026234,
-0.000007,
-0.024967,
0.030606,
-0.018966,
0.065811,
0.056333,
0.008663,
-0.013387,
-0.088534,
0.039795,
0.019110,
-0.079044,
-0.096144,
-0.015024,
0.049139,
0.045552,
0.080356,
0.057764,
0.066430,
0.105350,
0.055049,
0.087800,
0.075735,
0.044049,
0.103770,
0.080774,
0.066293,
0.034171,
0.079126,
0.028040,
-0.015419,
-0.019106,
-0.028556,
0.131590,
0.002301,
0.004409,
0.016671,
-0.012637,
-0.033571,
0.014371,
-0.030957,
-0.022655,
-0.016042,
0.011851,
0.021982,
-0.001334,
-0.013833,
-0.032237,
-0.018603,
-0.030793,
-0.023656,
-0.003522,
-0.024544,
0.015578,
-0.022010,
-0.013217,
0.004917,
0.025635,
0.039537,
0.122700,
-0.086733,
-0.051564,
-0.035105,
0.047380,
0.057709,
-0.123910,
-0.057867,
-0.030573,
-0.025279,
-0.023379,
-0.088178,
-0.103440,
-0.118830,
-0.033137,
0.038056,
-0.007860,
-0.027053,
0.067721,
-0.005649,
0.037783,
0.043253,
0.105400,
0.101390,
0.092653,
-0.045037,
-0.044282,
-0.078717,
-0.031348,
-0.047186,
-0.226130,
-0.187050,
-0.176950,
-0.088888,
-0.137380,
-0.074976,
-0.082446,
-0.247050,
-0.224390,
-0.098977,
0.090814,
0.140530,
-0.039571,
-0.046852,
-0.083001,
0.118920,
0.092934,
0.123460,
0.039718,
-0.003296,
-0.144740,
-0.132050,
-0.093483,
-0.145500,
-0.168390,
0.103130,
0.019500,
0.002501,
-0.002384,
0.047711,
0.203330,
0.141540,
0.097085,
-0.030766,
0.027536,
0.237720,
0.036282,
0.065460,
0.105850,
-0.025780,
0.132690,
0.043587,
0.100170,
0.142920,
-0.010210,
0.060883,
0.004611,
0.096923,
0.039286,
0.005501,
0.026201,
0.110520,
0.090431,
0.130390,
-0.015164,
0.027748,
0.100820,
0.051796,
0.078846,
0.100360,
-0.052868,
0.066468,
0.077903,
-0.055895,
0.001937,
-0.006807,
-0.032496,
0.058340,
0.055781,
-0.087148,
-0.106070,
-0.214830,
-0.035591,
-0.111040,
0.032687,
-0.045358,
-0.028716,
-0.090586,
-0.082888,
-0.005593,
-0.084125,
-0.003381,
-0.023611,
0.005054,
0.033845,
0.061072,
0.050816,
-0.035498,
-0.069241,
0.066823,
0.025870,
0.035200,
0.072701,
0.066988,
0.146490,
-0.142060,
-0.064396,
-0.084393,
-0.026880,
-0.134670,
-0.069135,
-0.153080,
-0.231720,
-0.070877,
-0.087179,
-0.046636,
-0.052238,
-0.117360,
-0.134190,
-0.181460,
-0.018491,
-0.030068,
0.025538,
-0.032892,
-0.018211,
-0.016616,
-0.003095,
-0.005464,
0.049756,
-0.052117,
0.017396,
0.049421,
-0.037467,
-0.052271,
-0.018132,
-0.029769,
-0.013138,
-0.074122,
-0.016281,
-0.046601,
-0.006544,
0.041734,
-0.023727,
-0.011976,
0.056376,
0.030707,
-0.018737,
-0.020926,
0.015443,
0.085110,
0.017338,
-0.003009,
-0.042378,
-0.023167,
0.046861,
-0.109190,
-0.025422,
0.132810,
-0.048492,
-0.017581,
-0.195080,
0.014950,
0.198800,
0.103960,
-0.050765,
-0.140650,
-0.084701,
0.046994,
0.073309,
-0.065415,
0.051095,
0.012760,
-0.037397,
0.045956,
0.034611,
0.046278,
-0.101060,
-0.059923,
-0.036020,
-0.023884,
-0.008493,
0.074987,
-0.004517,
-0.138510,
-0.130310,
0.082849,
0.013220,
0.002997,
-0.026579,
-0.014607,
0.020010,
0.021340,
0.020498,
0.059558,
0.095160,
-0.082059,
-0.034958,
-0.073711,
-0.061480,
0.116040,
-0.117200,
-0.083264,
-0.144100,
-0.092746,
0.037535,
0.003652,
0.024316,
-0.008766,
-0.023592,
-0.016409,
0.007733,
-0.007111,
0.032929,
0.027144,
-0.028102,
0.000728,
0.033437,
-0.007665,
0.003165,
0.016635,
-0.031647,
0.008504,
0.029516,
0.046448,
-0.015093,
0.028450,
-0.017095,
-0.007490,
0.019986,
0.022943,
0.016819,
-0.009301,
-0.077304,
-0.115240,
-0.153100,
0.114600,
0.017714,
0.050844,
-0.012742,
-0.092610,
0.144940,
0.192810,
-0.011646,
-0.024715,
0.043543,
0.192380,
0.223890,
0.083744,
0.037403,
0.034137,
0.019752,
0.100430,
0.079531,
0.009329,
-0.041208,
-0.022727,
0.024384,
-0.062130,
0.002874,
-0.033961,
-0.033292,
-0.014078,
0.024187,
-0.007776,
-0.043792,
-0.000785,
-0.003781,
0.009305,
-0.011418,
-0.005092,
-0.004183,
-0.042677,
-0.024175,
0.005758,
-0.028466,
0.015099,
-0.005578,
0.017256,
0.005877,
0.013727,
0.006948,
-0.005807,
-0.011293,
0.033412,
-0.034826,
-0.005474,
-0.007048,
-0.016181,
-0.022710,
0.036352,
0.014329,
-0.028190,
0.020570,
-0.028576,
0.027548,
0.009634,
0.027913,
-0.027038,
0.032867,
0.000368,
-0.008477,
0.001387,
0.023627,
0.016832,
0.025122,
-0.037214,
-0.034903,
0.016229,
0.034521,
0.011590,
0.004629,
-0.041001,
-0.009079,
-0.000367,
0.022718,
-0.037289,
-0.012194,
0.009406,
0.012710,
0.024746,
-0.039490,
0.028092,
0.027269,
-0.033433,
-0.014642,
-0.011615,
0.005407,
-0.033626,
-0.028150,
-0.045865,
-0.004612,
-0.002872,
-0.002695,
0.032382,
-0.002746,
-0.013582,
-0.002967,
0.019841,
-0.023874,
0.008025,
-0.032636,
-0.035443,
0.010610,
0.002175,
-0.013441,
0.010607,
-0.032314,
0.003403,
0.019898,
-0.016070,
-0.034215,
-0.013585,
0.022585,
0.012324,
0.015596,
-0.011226,
0.006043,
-0.010840,
0.016854,
-0.003037,
-0.039974,
-0.038926,
0.005108,
-0.018022,
0.003228,
0.014742,
-0.009972,
-0.003835,
0.018344,
-0.031009,
-0.038957,
-0.001867,
-0.012939,
-0.010938,
0.002792,
-0.000920,
-0.020460,
-0.023234,
0.000517,
-0.015471,
-0.037953,
-0.000561,
0.002325,
-0.049536,
-0.013348,
-0.061155,
-0.041989,
-0.042626,
0.017824,
-0.013205,
0.010110,
-0.005898,
-0.016035,
0.024929,
-0.054495,
0.021625,
-0.032655,
0.018139,
-0.015968,
0.005236,
-0.009994,
-0.021965,
0.028917,
-0.012687,
-0.009890,
-0.040041,
-0.014774,
-0.010553,
-0.004031,
0.028799,
-0.042786,
-0.003600,
0.022743,
-0.009075,
0.000616,
-0.009237,
-0.024101,
0.004380,
-0.008130,
-0.039741,
0.016967,
0.002227,
-0.004453,
0.021632,
-0.041050,
-0.057511,
-0.011668,
-0.012546,
0.001917,
-0.017483,
-0.041117,
-0.008204,
-0.037069,
-0.022744,
0.007260,
0.002210,
-0.053324,
-0.007812,
0.003074,
-0.051770,
-0.032608,
-0.007263,
0.007264,
-0.051810,
-0.039638,
-0.025463,
-0.032524,
-0.014398,
-0.021528,
-0.003908,
-0.018875,
-0.008973,
0.004489,
-0.034871,
0.013847,
-0.031525,
0.032946,
-0.057245,
-0.043774,
0.002499,
-0.006406,
-0.052555,
-0.040507,
-0.052517,
0.001536,
-0.054466,
-0.032392,
-0.035501,
-0.032003,
-0.017351,
-0.011639,
0.010049,
0.000125,
-0.006586,
-0.014934,
-0.023106,
-0.027074,
-0.032033,
-0.030579,
-0.062089,
-0.047668,
-0.052415,
-0.026794,
-0.024604,
-0.027445,
0.007479,
-0.037883,
0.029675,
0.016978,
0.000386,
0.011918,
0.024665,
-0.002890,
-0.039906,
-0.027835,
-0.033030,
-0.011797,
-0.006443,
-0.024190,
0.022778,
-0.019201,
-0.003297,
0.005344,
0.033526,
0.023264,
-0.039492,
-0.012523,
-0.038983,
-0.014762,
-0.030098,
0.016947,
-0.006190,
-0.020599,
-0.029954,
-0.016987,
0.012255,
0.011550,
-0.000982,
-0.009748,
0.012102,
-0.001425,
-0.003711,
-0.032323,
-0.022486,
-0.002380,
-0.012479,
0.025265,
-0.035781,
-0.035374,
-0.055564,
-0.027200,
0.014882,
0.001441,
-0.043667,
-0.039258,
-0.023861,
-0.017546,
-0.004533,
-0.049170,
-0.015181,
-0.010026,
-0.004822,
-0.019969,
-0.006984,
-0.031161,
-0.033595,
-0.048121,
0.033161,
0.034988,
-0.007596,
-0.012597,
-0.009160,
-0.007922,
0.031459,
0.018474,
0.015622,
-0.038424,
0.002981,
0.002174,
-0.030644,
-0.029021,
-0.018759,
-0.017220,
-0.036989,
0.032043,
-0.003562,
-0.017360,
-0.020967,
0.010988,
-0.035974,
-0.059359,
-0.010675,
-0.038110,
-0.035851,
0.021063,
-0.013199,
0.004585,
0.021499,
-0.027575,
-0.023212,
0.011980,
-0.020310,
0.015750,
-0.004312,
-0.020554,
-0.006384,
0.007260,
0.008321,
0.012785,
-0.042114,
-0.015068,
0.017449,
-0.030942,
-0.044084,
-0.016396,
-0.004578,
0.003855,
0.024357,
-0.032155,
-0.040659,
0.001511,
-0.038003,
-0.043453,
-0.008247,
-0.015514,
-0.028457,
-0.026703,
-0.033587,
-0.027571,
0.026061,
-0.058665,
0.005835,
-0.025049,
-0.017093,
0.007038,
-0.031164,
-0.014236,
0.016142,
0.021803,
0.003190,
-0.009437,
0.017933,
-0.010009,
-0.047341,
-0.024039,
-0.039626,
0.005817,
-0.033360,
-0.050781,
-0.017706,
-0.031928,
-0.006142,
0.014620,
-0.040478,
-0.010411,
0.024404,
-0.014750,
-0.011194,
-0.020417,
-0.039630,
-0.032777,
0.007601,
0.020221,
0.013604,
-0.032812,
-0.000202,
-0.007269,
-0.035933,
0.023016,
-0.035200,
0.032009,
-0.029592,
-0.033950,
-0.015898,
0.008830,
-0.035341,
0.012362,
-0.004905,
-0.008952,
-0.025160,
-0.013553,
-0.014078,
0.035720,
-0.004325,
0.029573,
0.007875,
-0.009312,
-0.022440,
0.028670,
-0.032416,
-0.003675,
0.023336,
-0.014890,
0.032746,
0.002733,
-0.023438,
0.016136,
0.026629,
0.012415,
0.012962,
-0.022083,
-0.042946,
-0.022130,
-0.034502,
-0.042615,
-0.017482,
-0.006719,
-0.042205,
0.009783,
0.021978,
-0.030911,
-0.017631,
-0.055918,
-0.019610,
-0.021753,
0.000901,
-0.030650,
-0.037307,
0.007040,
-0.002604,
-0.044616,
-0.037040,
-0.026628,
-0.031176,
-0.019028,
-0.023799,
-0.035225,
-0.040126,
-0.027011,
-0.012922,
-0.042306,
-0.001293,
-0.027004,
-0.010930,
0.012941,
-0.004131,
-0.002089,
-0.024418,
-0.026784,
-0.045623,
-0.039128,
-0.007292,
-0.066772,
0.024658,
0.010781,
-0.021821,
-0.026679,
0.000301,
-0.029186,
-0.009491,
-0.012725,
-0.011348,
-0.050240,
0.027065,
-0.010446,
-0.052407,
-0.060023,
-0.029024,
-0.006560,
-0.010366,
0.018057,
0.011932,
-0.003011,
0.005654,
-0.030968,
0.014582,
-0.027279,
0.019064,
-0.029622,
-0.020039,
0.019275,
0.004007,
-0.005616,
-0.063388,
0.004690,
-0.019395,
0.024750,
0.019810,
0.032553,
0.016161,
-0.012708,
-0.018029,
-0.033403,
-0.030368,
-0.017194,
-0.029499,
-0.003529,
-0.030647,
-0.017502,
-0.020586,
0.019702,
-0.020750,
0.014352,
0.001822,
-0.028206,
-0.006799,
-0.015449,
0.015176,
-0.001810,
-0.007946,
-0.038140,
-0.047505,
-0.044179,
0.018128,
-0.013932,
-0.024006,
-0.011814,
-0.024771,
0.020427,
-0.030808,
-0.005970,
-0.031588,
-0.026610,
-0.018697,
-0.014498,
0.021920,
0.021857,
-0.023185,
0.019776,
-0.011168,
0.006336,
0.031614,
-0.031549,
0.025911,
-0.003525,
0.001125,
-0.030958,
-0.033582,
-0.018426,
-0.044902,
0.023520,
0.023893,
-0.034195,
-0.041600,
-0.036359,
-0.036908,
-0.009935,
0.013422,
-0.031271,
-0.015739,
-0.039239,
-0.008925,
-0.044645,
0.024144,
-0.035384,
-0.026057,
-0.020404,
-0.036986,
-0.014335,
0.005903,
-0.014087,
-0.054825,
-0.024061,
-0.043726,
-0.012946,
-0.036401,
-0.047582,
0.007700,
-0.014911,
-0.014603,
-0.038830,
-0.011358,
0.015509,
0.012578,
-0.010210,
-0.004361,
0.004083,
0.001124,
-0.033349,
0.002251,
-0.005944,
0.007718,
-0.002950,
-0.052278,
-0.054129,
0.008238,
-0.040442,
0.014252,
0.000002,
-0.025593,
-0.032566,
-0.037360,
-0.037086,
-0.015560,
-0.017939,
-0.030890,
-0.052625,
0.001394,
-0.018627,
0.010114,
0.013619,
0.020671,
-0.021331,
-0.037692,
-0.030309,
0.002287,
0.012795,
0.003974,
0.025113,
0.023274,
0.007507,
-0.025123,
0.004641,
-0.010263,
0.017961,
-0.047330,
-0.000604,
-0.027646,
-0.003247,
-0.022158,
0.019397,
-0.037352,
-0.023398,
0.015685,
-0.013534,
0.009463,
0.006693,
-0.036827,
-0.000062,
-0.062067,
0.018563,
-0.032526,
0.019336,
0.004834,
-0.011040,
-0.015194,
-0.026438,
-0.007606,
0.028708,
0.018808,
-0.054909,
-0.053145,
-0.035008,
-0.028107,
-0.019950,
-0.025213,
-0.046892,
-0.060107,
-0.024074,
-0.031343,
-0.026600,
0.004883,
-0.016693,
-0.007232,
0.026951,
-0.006328,
-0.014236,
-0.009602,
-0.020275,
-0.052771,
-0.009133,
0.022004,
-0.034908,
-0.032053,
0.010735,
-0.023554,
0.004846,
-0.018590,
0.027002,
0.005385,
0.001282,
-0.026168,
-0.022004,
0.024232,
0.019179,
-0.012387,
0.022173,
0.003269,
0.026243,
-0.023491,
-0.003608,
0.021938,
0.019036,
0.029276,
0.038837,
-0.009071,
-0.034855,
-0.035433,
0.024218,
-0.041326,
-0.034631,
-0.028873,
-0.006261,
-0.003066,
0.002580,
0.006728,
-0.025556,
-0.035242,
0.019906,
0.010436,
-0.000174,
0.003530,
0.023227,
-0.021194,
0.027241,
-0.018769,
0.003506,
0.037305,
-0.000599,
0.026208,
0.000355,
-0.007886,
0.001043,
-0.041560,
-0.003422,
-0.016956,
-0.018637,
-0.042123,
-0.046650,
-0.005918,
-0.048958,
-0.003264,
-0.008236,
-0.015800,
-0.025665,
-0.056170,
-0.024880,
-0.002906,
-0.052127,
-0.051793,
-0.013761,
0.004898,
-0.066304,
-0.026400,
-0.050415,
-0.006788,
0.013977,
-0.036790,
0.020744,
0.024909,
-0.036664,
0.027290,
-0.007145,
-0.024766,
-0.033343,
0.032582,
-0.015428,
0.021602,
0.009574,
-0.004314,
0.035698,
0.001518,
0.000070,
-0.016682,
0.019326,
0.014156,
-0.014248,
0.002822,
0.019008,
-0.008474,
-0.018899,
0.023063,
-0.032102,
0.012970,
-0.023151,
-0.038326,
0.037562,
-0.036905,
-0.037545,
-0.018468,
-0.020903,
-0.042766,
0.025946,
0.009395,
0.015951,
-0.003001,
-0.035526,
-0.009713,
-0.014401,
0.007590,
-0.004845,
-0.030251,
0.028469,
-0.028993,
-0.001371,
-0.025727,
-0.011324,
-0.018147,
-0.007134,
-0.028895,
-0.032480,
-0.045705,
-0.014296,
-0.008612,
0.003538,
-0.023766,
-0.048063,
-0.002674,
-0.045893,
-0.020626,
-0.041600,
-0.042899,
0.012102,
-0.031231,
0.007745,
0.006584,
-0.006318,
-0.028826,
-0.007790,
0.019228,
0.013475,
0.011284,
-0.035161,
-0.009501,
-0.005438,
-0.027975,
-0.030541,
-0.028497,
-0.020462,
-0.030527,
0.005747,
0.017081,
-0.021696,
-0.006990,
-0.009067,
-0.028061,
-0.009418,
0.010066,
-0.003919,
0.017225,
0.026416,
0.008146,
-0.016307,
-0.039160,
0.021205,
0.013418,
0.001394,
-0.002523,
-0.014921,
-0.019265,
-0.024615,
0.007757,
0.007625,
-0.008000,
0.005712,
0.021870,
0.000775,
-0.014945,
0.020081,
0.005225,
0.007204,
0.012615,
0.001586,
0.017826,
0.001631,
-0.024170,
-0.035249,
0.022670,
-0.021238,
-0.033504,
-0.022992,
0.018849,
0.005532,
0.006031,
0.021697,
-0.012363,
-0.036263,
0.024714,
0.012265,
-0.029183,
-0.022360,
-0.032021,
0.011513,
0.005923,
-0.022535,
0.031020,
-0.015291,
0.033885,
0.002894,
-0.020571,
0.015259,
0.009585,
-0.028455,
-0.018767,
-0.026751,
0.019312,
0.016568,
-0.005650,
0.006747,
-0.033347,
-0.020653,
-0.027391,
-0.027904,
-0.004615,
-0.048015,
0.010135,
-0.018380,
0.009677,
-0.022270,
-0.042914,
0.002536,
-0.009865,
-0.007953,
0.007034,
-0.029582,
-0.050273,
0.010022,
-0.040611,
-0.017707,
0.009462,
-0.012076,
-0.002761,
-0.045742,
-0.004714,
-0.004323,
0.002816,
-0.049308,
-0.002192,
-0.030281,
-0.000254,
-0.036388,
-0.053542,
0.003762,
0.007275,
-0.001142,
-0.033055,
0.001112,
-0.020775,
-0.040419,
-0.038873,
-0.036269,
-0.046401,
-0.034960,
-0.004208,
-0.016707,
-0.040623,
-0.032883,
-0.039567,
0.004029,
-0.045133,
-0.058448,
0.000922,
-0.052456,
-0.035690,
-0.054427,
-0.005503,
-0.051026,
-0.031479,
-0.003949,
-0.023522,
-0.003784,
-0.008799,
-0.005532,
-0.038938,
-0.002673,
-0.058300,
-0.042968,
-0.037051,
-0.039183,
-0.039857,
-0.038843,
-0.008580,
-0.006220,
-0.016082,
-0.002355,
-0.000539,
-0.055712,
-0.003507,
-0.026214,
-0.019600,
-0.052067,
-0.029634,
-0.038583,
-0.055009,
-0.004234,
0.005945,
-0.031436,
-0.007077,
-0.059790,
-0.021225,
0.016506,
0.006509,
0.026814,
-0.014929,
-0.025192,
0.029974,
-0.008558,
-0.001135,
0.024456,
0.004313,
-0.012950,
0.025740,
-0.017344,
-0.028662,
-0.032703,
-0.027097,
-0.005098,
-0.003259,
-0.001980,
0.015931,
-0.029035,
-0.020819,
0.025468,
-0.020987,
0.028181,
-0.026852,
0.008075,
-0.034099,
0.023813,
0.018733,
-0.056273,
-0.031090,
-0.012068,
-0.034122,
-0.061361,
0.004211,
-0.033014,
-0.017133,
-0.023439,
-0.010188,
-0.000039,
0.010210,
-0.005147,
-0.051198,
0.006929,
-0.006748,
0.004698,
-0.034840,
-0.023048,
-0.011280,
-0.039010,
-0.012240,
-0.015425,
-0.051610,
0.000696,
-0.024851,
-0.031720,
0.027380,
-0.009838,
0.002579,
-0.039284,
-0.027057,
0.008693,
0.018394,
-0.027649,
-0.033322,
0.004400,
-0.026393,
0.024988,
0.014196,
-0.048823,
0.026726,
0.017335,
-0.035764,
-0.025638,
-0.063468,
-0.058534,
-0.055466,
-0.029701,
-0.020915,
0.001090,
-0.040388,
-0.054338,
-0.060693,
-0.059759,
0.007204,
-0.047861,
-0.035787,
-0.023922,
-0.049176,
-0.020561,
-0.005540,
-0.011182,
-0.054476,
-0.003013,
0.020621,
-0.019480,
-0.007315,
-0.032904,
0.016389,
-0.001686,
-0.031503,
-0.014080,
-0.048575,
-0.062659,
0.025015,
0.014482,
-0.034482,
-0.025134,
-0.038783,
0.026379,
0.008430,
-0.024607,
-0.010104,
0.005925,
-0.029000,
-0.000940,
0.005774,
-0.054753,
-0.018429,
-0.029842,
0.019366,
0.025930,
-0.000121,
0.021460,
0.023654,
0.019876,
0.016621,
0.026210,
-0.028098,
-0.045668,
-0.005866,
0.016073,
-0.019165,
-0.009404,
-0.047596,
-0.049811,
-0.015320,
-0.019921,
-0.012025,
-0.008755,
-0.049983,
-0.021854,
-0.002464,
-0.044218,
-0.014995,
-0.061995,
-0.045459,
-0.015553,
-0.040956,
-0.012578,
-0.006901,
-0.043987,
-0.000877,
-0.007463,
0.025635,
-0.012935,
0.034518,
0.031612,
-0.011875,
-0.031045,
0.008031,
-0.021696,
-0.032476,
0.009274,
-0.034840,
-0.063782,
-0.002484,
-0.031877,
-0.002537,
-0.007967,
-0.018195,
-0.020356,
-0.022272,
0.002881,
-0.023922,
-0.043167,
-0.051610,
0.003509,
0.001623,
0.022841,
0.023599,
-0.002532,
-0.022430,
-0.019715,
-0.014553,
0.017450,
-0.032525,
-0.034771,
-0.010082,
-0.050267,
-0.031705,
-0.001278,
-0.025632,
0.024379,
-0.050824,
-0.033385,
-0.047381,
-0.013081,
-0.015161,
-0.037888,
-0.018325,
0.002965,
-0.001599,
-0.006142,
-0.022973,
-0.014578,
-0.004996,
0.007001,
0.025887,
-0.034541,
-0.025530,
-0.028400,
0.014514,
-0.025415,
-0.019424,
0.015704,
0.027797,
0.021118,
-0.005796,
-0.009123,
0.022221,
-0.001613,
-0.037470,
0.005694,
-0.029024,
-0.026565,
-0.013315,
0.023438,
0.011853,
-0.013134,
-0.021724,
-0.026871,
-0.014403,
-0.040843,
0.014467,
0.023174,
0.014078,
-0.026444,
-0.013344,
-0.036267,
-0.048694,
0.014902,
0.022247,
0.006345,
-0.001374,
-0.009538,
-0.016612,
0.004665,
-0.000567,
-0.014704,
-0.040651,
-0.012188,
-0.002173,
0.003760,
0.011529,
-0.005035,
-0.023851,
0.025495,
-0.018568,
0.003822,
0.018092,
-0.001604,
-0.034031,
-0.012173,
0.000979,
-0.022158,
0.008875,
-0.011999,
0.005163,
-0.040996,
0.025417,
-0.006437,
-0.032144,
-0.022001,
-0.007615,
-0.008777,
0.016105,
-0.026968,
-0.028609,
0.008364,
0.026627,
-0.021812,
-0.004617,
0.010181,
-0.041131,
-0.022507,
-0.014884,
-0.040983,
-0.054455,
0.014355,
-0.048572,
0.021126,
0.017970,
-0.021181,
-0.005556,
0.026269,
-0.004893,
-0.037741,
-0.006381,
-0.052541,
-0.036415,
-0.056834,
-0.026163,
0.001715,
-0.004625,
-0.022805,
-0.019453,
-0.034924,
0.012543,
0.030784,
-0.031665,
-0.018030,
-0.002024,
0.019598,
-0.033746,
0.002058,
0.007626,
0.009440,
-0.003162,
-0.029655,
-0.023436,
0.006881,
-0.010818,
-0.006453,
-0.010495,
-0.020727,
0.032961,
-0.023944,
0.024874,
-0.012661,
-0.025361,
-0.005029,
-0.005701,
0.004716,
-0.035397,
-0.031990,
-0.002959,
-0.017858,
-0.013708,
-0.028182,
-0.046197,
-0.017292,
-0.053009,
0.005053,
-0.013921,
-0.019316,
-0.006203,
0.000599,
-0.027628,
0.025598,
0.000644,
-0.018605,
0.003318,
0.011680,
-0.040246,
-0.053636,
-0.021625,
0.000131,
0.005403,
-0.025426,
-0.008761,
-0.036855,
-0.051220,
-0.020559,
-0.050287,
-0.050758,
-0.031889,
0.003889,
-0.055811,
-0.036261,
-0.013980,
-0.019505,
-0.002990,
-0.018079,
0.022069,
0.024948,
0.008861,
0.003284,
-0.019334,
-0.030637,
0.009372,
-0.006395,
-0.007309,
0.017802,
0.021498,
0.024949,
-0.011175,
-0.031896,
0.009420,
-0.023073,
-0.035221,
0.021589,
0.003968,
-0.020117,
-0.010458,
-0.015615,
-0.045194,
-0.054535,
-0.026901,
-0.012751,
-0.002226,
-0.045314,
0.006389,
-0.027161,
-0.008233,
-0.002776,
-0.052148,
-0.018053,
-0.011155,
-0.045818,
-0.044677,
-0.008355,
-0.040353,
-0.001047,
-0.020907,
0.004497,
0.002682,
-0.032251,
-0.017781,
-0.032579,
-0.013405,
-0.055597,
-0.001918,
-0.008200,
-0.006541,
-0.037156,
-0.012176,
-0.022724,
-0.021399,
0.024758,
-0.005020,
0.024374,
-0.015474,
-0.014619,
0.007545,
-0.030611,
-0.039802,
-0.018308,
-0.024257,
-0.042044,
-0.030848,
-0.058394,
-0.016633,
-0.058695,
-0.049489,
-0.031030,
-0.028116,
-0.018771,
-0.034038,
0.004573,
-0.016253,
0.004171,
-0.029962,
0.005141,
-0.006518,
0.004149,
0.009080,
-0.030804,
-0.033684,
0.008580,
-0.002135,
0.019664,
-0.011250,
-0.018493,
-0.014909,
-0.020384,
0.018393,
-0.005455,
-0.006243,
-0.021524,
0.028204,
-0.040855,
0.002759,
0.009678,
-0.018094,
-0.040541,
-0.029691,
0.006637,
0.009966,
0.006836,
0.000000,
-0.009684,
-0.005073,
-0.033492,
0.032384,
-0.015737,
-0.021583,
-0.021852,
-0.029272,
0.033818,
0.030897,
-0.014445,
-0.024718,
0.010935,
-0.029894,
-0.028893,
-0.012166,
-0.017388,
0.027055,
0.021626,
0.029575,
-0.004344,
-0.009110,
-0.007213,
0.002341,
-0.011228,
0.014691,
-0.007075,
0.017092,
0.026969,
0.012939,
0.005122,
-0.027247,
0.016156,
0.005350,
0.017314,
-0.050400,
0.012881,
-0.031509,
-0.038440,
-0.030386,
0.007609,
-0.035903,
0.000079,
-0.001911,
-0.031735,
0.022904,
-0.004995,
0.000528,
-0.026507,
0.018266,
-0.022966,
-0.033015,
-0.004914,
-0.006606,
0.021293,
-0.017730,
0.027391,
-0.008363,
0.013339,
-0.025077,
-0.001098,
-0.041001,
0.031109,
-0.001823,
-0.011597,
-0.018643,
-0.002331,
-0.056115,
-0.018305,
-0.020050,
-0.026331,
-0.034118,
-0.057523,
0.034365,
-0.040064,
0.019790,
0.010163,
0.012408,
-0.022976,
-0.028273,
-0.010523,
-0.032150,
0.001131,
-0.011133,
0.013388,
-0.022890,
-0.021270,
-0.004030,
-0.014062,
-0.019468,
-0.031051,
-0.028864,
0.031364,
-0.037995,
-0.030653,
0.004606,
0.028407,
-0.033372,
-0.024074,
-0.046375,
0.001430,
-0.028484,
-0.051938,
-0.012846,
-0.027523,
-0.007609,
-0.013572,
-0.060376,
-0.016800,
-0.027345,
-0.059656,
-0.056840,
-0.006977,
0.012264,
-0.035739,
-0.011254,
0.007573,
-0.055856,
-0.043506,
-0.005488,
-0.053511,
-0.013091,
-0.009864,
-0.153290,
-0.010576,
0.025056,
-0.098882,
-0.027420,
-0.085557,
-0.145820,
-0.004739,
-0.030666,
-0.083779,
-0.163440,
-0.088914,
-0.015671,
-0.008256,
-0.132400,
0.109390,
0.111820,
0.063524,
0.063149,
-0.026001,
0.086129,
-0.010859,
-0.063646,
0.006478,
-0.039472,
0.009334,
0.020303,
-0.026285,
0.038919,
0.028533,
-0.025552,
-0.014218,
0.021465,
0.012780,
-0.014403,
-0.001733,
-0.029961,
-0.016182,
-0.010472,
0.015667,
-0.022605,
0.019088,
0.036679,
-0.019794,
0.006110,
0.003106,
-0.031238,
-0.004593,
-0.025630,
0.014691,
-0.329300,
-0.287490,
-0.316440,
-0.253660,
-0.345960,
-0.079637,
-0.157660,
-0.072484,
-0.049210,
-0.157910,
0.053773,
0.031371,
0.128290,
-0.027439,
-0.082994,
0.048139,
0.202090,
0.157340,
0.114460,
-0.043868,
-0.090715,
-0.011789,
0.047362,
0.100090,
-0.187600,
-0.014461,
-0.022319,
0.015570,
0.059714,
0.016361,
0.038583,
0.023440,
-0.012543,
0.012872,
0.023301,
-0.022086,
0.013377,
0.049637,
-0.022490,
0.009387,
-0.029421,
0.007492,
0.050861,
0.027449,
0.057874,
0.017404,
0.066524,
0.002152,
-0.033816,
-0.024486,
-0.053867,
-0.125560,
-0.043475,
0.025769,
-0.064791,
-0.069157,
-0.004795,
0.021980,
0.036493,
0.000373,
0.074123,
0.032052,
0.043535,
0.130490,
0.064824,
-0.054517,
-0.057312,
0.025519,
0.121510,
0.003870,
-0.029961,
0.125310,
0.188220,
0.190490,
0.051486,
0.001317,
-0.026341,
0.058266,
0.037813,
0.059559,
-0.024381,
-0.030160,
-0.014837,
0.033573,
0.103810,
0.047535,
0.022963,
-0.074389,
-0.078346,
0.093065,
0.108610,
0.070324,
-0.023512,
0.039060,
0.104880,
0.125300,
0.030647,
-0.023649,
0.063758,
-0.116740,
0.080009,
-0.014962,
-0.019318,
-0.084507,
-0.027870,
0.003727,
-0.081602,
-0.038907,
-0.016804,
-0.003813,
0.028788,
-0.041987,
0.059742,
-0.005665,
-0.020264,
0.001490,
-0.104710,
-0.061321,
-0.088851,
-0.002380,
0.113060,
-0.055405,
-0.095731,
-0.038466,
-0.024710,
-0.078283,
0.052106,
0.110920,
-0.043864,
-0.063705,
-0.019935,
-0.002135,
0.053540,
-0.034593,
-0.020135,
-0.077760,
0.011647,
0.103290,
0.095217,
0.086738,
0.166340,
0.157510,
0.036648,
0.178930,
0.154810,
-0.008092,
0.092501,
-0.002102,
0.054743,
0.103040,
-0.221030,
-0.099984,
-0.062472,
0.083213,
0.008716,
-0.042814,
-0.049662,
-0.051972,
0.023643,
0.043326,
-0.032425,
-0.060864,
0.086291,
0.061917,
0.037881,
-0.069879,
0.017324,
0.039433,
0.029495,
0.097756,
0.072905,
0.133100,
0.059791,
0.056807,
0.133510,
0.002821,
-0.068520,
-0.122140,
-0.032656,
0.121420,
-0.070234,
-0.036973,
-0.096388,
-0.062826,
-0.057091,
-0.073483,
-0.042795,
-0.080186,
-0.102790,
-0.057319,
-0.045267,
-0.083056,
-0.144380,
-0.117100,
0.036461,
0.069955,
-0.027669,
-0.060280,
0.013231,
0.061240,
-0.134170,
-0.139220,
-0.169440,
-0.135910,
-0.095589,
-0.204580,
-0.011466,
-0.177250,
-0.235690,
-0.058354,
-0.180930,
-0.057737,
-0.027231,
-0.064530,
0.075855,
-0.117110,
-0.120770,
-0.027065,
-0.056296,
0.187140,
0.043708,
0.003987,
-0.082738,
0.066769,
0.152040,
-0.045944,
-0.009159,
0.070405,
0.156990,
0.167310,
-0.068545,
0.012992,
0.044332,
0.033931,
0.156840,
-0.087076,
-0.031337,
0.041300,
0.049813,
0.210110,
0.115740,
-0.123040,
0.111810,
0.054856,
0.223920,
0.129650,
0.112190,
0.100890,
0.078103,
0.135850,
-0.043869,
-0.010834,
-0.093915,
-0.078685,
0.050199,
-0.113690,
-0.057571,
0.012284,
0.036623,
0.053506,
-0.304280,
-0.038924,
0.037969,
-0.005657,
0.000891,
-0.080826,
-0.014802,
-0.014776,
-0.012705,
-0.059723,
-0.141730,
-0.016801,
-0.041994,
0.035060,
-0.100140,
0.018770,
0.027534,
-0.027093,
0.052128,
0.031163,
0.019396,
0.050679,
-0.036057,
-0.107680,
0.023987,
-0.017455,
0.032044,
0.062766,
-0.034550,
-0.118810,
-0.022865,
0.061523,
0.049067,
-0.063456,
0.000002,
0.039862,
0.038081,
0.157150,
-0.035171,
-0.050451,
-0.295880,
-0.216170,
-0.120050,
-0.007839,
0.130850,
-0.159270,
-0.031438,
-0.000772,
0.050622,
0.087368,
0.012746,
0.108990,
0.071199,
0.019668,
0.134060,
-0.009280,
0.010439,
0.187480,
0.137310,
0.046539,
-0.133960,
-0.117100,
-0.009376,
-0.042850,
-0.072745,
-0.000093,
0.049738,
0.068103,
0.094354,
0.060571,
-0.002425,
0.056720,
0.079205,
0.057159,
0.034870,
0.090918,
0.100430,
0.050807,
0.012974,
-0.054697,
0.044124,
0.118210,
0.067346,
-0.044474,
-0.020067,
0.030543,
0.102440,
0.134960,
0.024253,
0.050479,
-0.019880,
-0.007771,
-0.002159,
0.031491,
-0.009098,
0.016690,
-0.008789,
-0.035113,
0.029947,
0.032931,
-0.060242,
0.002893,
-0.056132,
0.000332,
-0.027676,
-0.020235,
-0.041944,
0.004004,
-0.009516,
0.000013,
0.008213,
-0.004456,
-0.022945,
-0.016505,
-0.009151,
0.015665,
-0.113560,
0.028383,
0.035521,
-0.232220,
0.050392,
0.099834,
0.084211,
0.050277,
0.064765,
0.077102,
0.122480,
0.058335,
-0.008244,
0.030769,
0.020887,
0.030219,
0.018158,
0.062237,
0.077426,
-0.288600,
-0.047472,
-0.015673,
-0.012687,
-0.066545,
-0.141240,
-0.084930,
-0.198720,
-0.365420,
-0.332550,
0.073272,
0.039317,
0.048501,
-0.174150,
-0.202230,
0.080374,
0.010434,
0.090774,
-0.016338,
0.004459,
-0.042953,
-0.050884,
-0.012892,
-0.042768,
0.011190,
0.056155,
-0.015770,
0.061298,
-0.013898,
-0.021681,
-0.045128,
0.001940,
-0.035736,
-0.014331,
-0.130380,
0.065977,
-0.024071,
0.041819,
0.011235,
-0.027160,
0.069900,
0.040048,
0.090596,
0.036338,
-0.020070,
0.015471,
0.077535,
0.093735,
-0.069680,
-0.015411,
-0.067439,
-0.049986,
-0.016214,
-0.026443,
0.044710,
0.007826,
-0.016571,
-0.009749,
0.006428,
-0.023710,
-0.000012,
0.020462,
0.038692,
-0.015829,
0.033852,
0.035500,
-0.007582,
-0.035653,
-0.028334,
0.044881,
0.023745,
0.017908,
-0.019334,
-0.018399,
-0.019340,
0.026996,
-0.005851,
-0.000118,
-0.018831,
0.002018,
-0.040911,
0.130890,
0.124450,
0.091968,
0.071995,
0.072781,
0.223720,
0.170090,
0.075980,
0.037867,
0.046335,
0.085054,
0.080397,
0.078218,
0.200050,
0.163110,
0.118510,
0.078029,
0.032349,
0.045814,
0.123160,
0.041944,
0.000564,
0.002941,
0.111020,
0.067694,
0.089279,
0.131520,
0.098716,
0.021393,
0.176260,
0.118060,
0.120070,
0.058423,
0.012549,
0.136670,
0.034585,
0.133060,
0.044216,
-0.009960,
0.021008,
0.051685,
0.126170,
-0.016952,
-0.108100,
-0.048647,
-0.108760,
0.034537,
-0.055897,
-0.129920,
-0.118490,
-0.170280,
-0.261420,
-0.284840,
-0.388490,
-0.007421,
0.011713,
-0.120680,
-0.048931,
-0.137620,
0.077348,
0.113750,
0.112570,
0.097945,
-0.062881,
0.028269,
0.082427,
0.104950,
0.121720,
-0.084018,
0.002228,
0.099966,
0.257760,
0.086876,
0.043627,
0.021277,
0.084709,
-0.101050,
-0.252860,
-0.174030,
-0.121910,
-0.097640,
0.014603,
-0.036824,
-0.180860,
-0.027229,
0.034527,
-0.004047,
0.076017,
-0.164950,
-0.066952,
-0.013641,
-0.030727,
0.091882,
0.024692,
-0.012740,
-0.033355,
0.031696,
0.100990,
0.131130,
-0.238830,
0.000105,
-0.114160,
-0.184620,
-0.156370,
0.013759,
0.116360,
0.137280,
0.055209,
-0.054566,
-0.000094,
0.098223,
-0.006510,
0.061931,
0.082865,
-0.014052,
0.065557,
0.074631,
-0.088388,
0.021322,
0.007794,
-0.008481,
0.058698,
-0.052619,
0.082439,
-0.055933,
0.015758,
-0.013565,
-0.100570,
-0.121870,
-0.021556,
0.057899,
0.140870,
0.074967,
-0.063222,
-0.074767,
0.128810,
0.105960,
0.175950,
0.077397,
-0.059859,
0.064713,
0.171310,
0.129670,
0.087806,
-0.067800,
-0.004077,
0.010962,
0.083214,
0.098088,
-0.063731,
-0.011038,
-0.043977,
-0.095650,
-0.005295,
-0.052229,
0.012714,
-0.025009,
-0.080850,
0.024473,
-0.086792,
0.036136,
-0.000525,
-0.098844,
0.060711,
-0.004749,
-0.009171,
0.003695,
-0.068312,
0.018203,
0.024837,
-0.004148,
-0.084728,
-0.090356,
0.022785,
-0.086225,
0.115330,
0.036168,
0.018814,
0.023959,
-0.100200,
0.100240,
0.039328,
0.086775,
0.099198,
-0.211210,
-0.035918,
0.046825,
0.023895,
-0.127310,
-0.096557,
0.026820,
0.118720,
0.049290,
-0.049360,
0.022826,
0.019968,
0.013197,
0.069760,
0.024192,
-0.274080,
-0.295020,
-0.346860,
-0.275860,
-0.163880,
-0.306840,
-0.194580,
-0.063237,
-0.072146,
-0.165730,
-0.240860,
0.056435,
0.068541,
0.047887,
-0.048491,
-0.104220,
0.041424,
0.023816,
-0.017990,
-0.055501,
-0.062548,
-0.012426,
0.014915,
0.074851,
-0.006612,
0.008514,
-0.011607,
0.018427,
-0.040091,
-0.035783,
-0.014179,
0.047504,
0.007007,
0.044486,
0.043015,
0.034155,
-0.015735,
0.059076,
0.038612,
-0.002106,
-0.025844,
-0.011548,
0.021376,
-0.039009,
0.030617,
-0.040100,
-0.016098,
-0.024272,
0.003165,
-0.004974,
0.027200,
-0.053511,
0.041823,
-0.077587,
-0.178080,
-0.014874,
-0.048212,
-0.044218,
-0.012426,
-0.179100,
0.066702,
0.064477,
0.086424,
-0.042594,
-0.137730,
0.007288,
-0.002708,
0.024841,
0.026682,
0.044865,
-0.067205,
-0.035881,
-0.040137,
0.034526,
0.004035,
-0.077686,
0.028991,
-0.029343,
-0.014707,
-0.033873,
-0.007271,
-0.000926,
-0.061108,
-0.178400,
0.116100,
0.109920,
-0.031020,
-0.019338,
-0.161700,
0.128480,
0.008785,
-0.053486,
0.136580,
0.099785,
-0.047373,
0.009349,
0.012218,
0.046067,
-0.083798,
-0.191640,
0.038910,
0.016190,
0.033680,
-0.012783,
0.002882,
0.031937,
0.029299,
-0.013675,
0.011158,
0.014354,
-0.019106,
0.019803,
-0.001638,
0.019980,
0.020622,
0.045084,
-0.003180,
-0.027547,
0.016224,
0.006921,
-0.005699,
-0.021677,
0.006727,
0.017745,
0.004915,
0.036329,
0.077337,
0.008084,
-0.039046,
0.010071,
-0.022598,
0.028708,
0.099291,
-0.003078,
0.009422,
-0.065936,
-0.019833,
0.107500,
0.001251,
-0.045457,
-0.064313,
-0.054130,
-0.071305,
0.053332,
0.009066,
0.090507,
0.107240,
0.185740,
0.052714,
0.131270,
-0.052995,
-0.004405,
-0.060230,
-0.028798,
-0.088129,
0.029263,
0.028006,
0.013049,
-0.002673,
-0.009924,
-0.017920,
-0.024641,
-0.043264,
-0.044661,
-0.073262,
-0.013593,
-0.048001,
-0.025425,
-0.059014,
-0.000225,
0.037099,
0.028062,
-0.004922,
0.030677,
0.010299,
-0.165520,
-0.136840,
-0.053278,
-0.018338,
-0.055702,
-0.062050,
-0.088276,
-0.124780,
-0.128700,
-0.136730,
-0.023472,
-0.030288,
-0.037462,
-0.044540,
-0.065800,
0.065416,
-0.067598,
-0.102370,
-0.048184,
0.044999,
-0.031753,
0.059124,
-0.075384,
-0.078296,
-0.054191,
0.102680,
0.138950,
0.131730,
0.095704,
0.129990,
0.160050,
0.059912,
-0.025324,
0.025170,
0.012787,
0.064844,
-0.044995,
0.014445,
-0.014514,
-0.087065,
-0.112520,
-0.096056,
-0.125570,
-0.010738,
0.079333,
-0.033510,
0.034441,
-0.136520,
-0.105190,
-0.074382,
0.035087,
-0.006224,
0.092626,
0.038607,
0.155320,
-0.000388,
0.053698,
-0.036216,
0.002973,
0.062596,
0.076756,
0.145560,
0.097434,
0.073217,
0.020298,
0.029929,
0.024415,
-0.060659,
-0.024167,
-0.060959,
-0.066803,
-0.094659,
0.000654,
0.085284,
-0.111180,
0.070381,
0.070877,
0.104430,
-0.005308,
0.012638,
0.096464,
-0.044847,
0.036844,
0.018879,
0.000169,
0.166690,
-0.069912,
0.006834,
-0.019147,
0.043760,
0.126780,
0.203250,
0.057838,
0.094953,
0.059373,
-0.071015,
-0.044368,
0.084358,
0.138930,
0.113690,
-0.018972,
-0.016107,
-0.104890,
-0.213400,
-0.066701,
-0.026022,
-0.180050,
-0.211770,
-0.201500,
-0.067718,
-0.250520,
-0.251010,
-0.113570,
-0.031129,
0.091487,
-0.103690,
0.012744,
0.086611,
0.219610,
0.118720,
0.079638,
0.087870,
0.163050,
0.236320,
0.089139,
0.064321,
-0.119800,
-0.001264,
-0.030007,
0.110020,
0.173000,
0.083738,
0.041427,
-0.019023,
0.062629,
0.077496,
0.052036,
-0.027871,
0.067414,
0.009568,
-0.029589,
0.001021,
-0.089966,
-0.037646,
-0.009494,
-0.041526,
0.141950,
-0.000111,
-0.026708,
0.008108,
-0.024890,
-0.062174,
0.074389,
-0.045862,
-0.076385,
0.060237,
0.118630,
0.125270,
0.040643,
-0.152390,
-0.045158,
0.058181,
0.037913,
-0.035934,
0.027106,
-0.156670,
-0.136900,
-0.074509,
0.006202,
0.009135,
-0.143790,
-0.042886,
-0.008515,
-0.026912,
-0.027156,
0.058229,
0.000715,
-0.048627,
-0.154920,
0.058855,
0.014196,
0.087315,
-0.011135,
-0.021185,
0.081652,
0.038566,
0.070789,
0.061465,
0.065231,
0.173810,
0.136840,
0.060484,
-0.048595,
-0.028497,
-0.047432,
0.013011,
-0.078216,
-0.152150,
0.004519,
0.049840,
0.063233,
0.047397,
0.004022,
-0.010359,
0.092788,
0.148710,
0.000727,
0.060650,
0.093055,
0.113180,
0.088136,
0.074334,
-0.022627,
-0.002265,
0.123470,
0.070907,
-0.024952,
-0.105060,
-0.015735,
-0.099932,
0.129670,
-0.067293,
-0.043294,
0.001817,
0.126310,
-0.310340,
-0.313440,
-0.271930,
-0.164410,
-0.109350,
-0.120830,
-0.149580,
-0.086079,
-0.100760,
-0.045657,
-0.046206,
0.005801,
0.045951,
0.190450,
0.097881,
0.001426,
0.096836,
0.056690,
0.015040,
0.104230,
-0.050308,
0.032096,
-0.036903,
0.085714,
0.028602,
-0.083426,
-0.058832,
-0.146910,
-0.149920,
-0.028162,
-0.238010,
-0.088490,
0.006680,
-0.072806,
-0.058043,
-0.064803,
0.004035,
-0.055088,
0.023094,
0.060320,
0.095512,
0.092428,
0.027441,
0.060832,
0.128710,
-0.028946,
0.045233,
0.063262,
0.012907,
0.174770,
0.026397,
0.025771,
0.014074,
0.046215,
0.075495,
0.034650,
0.073468,
0.047202,
0.062586,
0.074580,
-0.023215,
-0.052476,
-0.044649,
-0.019257,
0.054534,
-0.098069,
-0.125980,
-0.076980,
-0.063189,
-0.016943,
0.061713,
0.006302,
-0.004320,
0.022141,
0.005865,
-0.013157,
0.012406,
-0.016197,
-0.056163,
-0.009099,
-0.020098,
-0.021302,
-0.028463,
-0.017324,
-0.012565,
-0.021957,
0.000446,
-0.029961,
-0.047666,
-0.025866,
-0.011636,
-0.003345,
-0.004736,
-0.010305,
0.000778,
0.004808,
0.003102,
-0.002833,
-0.028994,
-0.066403,
0.116900,
-0.001219,
-0.001844,
0.103420,
0.102050,
0.105010,
0.174180,
0.083272,
0.192610,
0.235360,
0.000656,
0.106610,
0.082940,
0.060933,
0.035196,
-0.059063,
-0.041899,
0.003407,
0.007894,
0.022063,
-0.001225,
0.025012,
0.079949,
0.044355,
0.012644,
-0.257040,
-0.102090,
-0.087097,
-0.030979,
-0.085643,
-0.152440,
-0.173360,
-0.119430,
-0.099895,
-0.020339,
-0.005060,
-0.085298,
-0.081981,
-0.059199,
-0.067802,
0.058855,
0.052945,
-0.014647,
-0.001658,
0.090753,
0.109830,
0.064039,
0.003967,
0.002868,
0.088094,
-0.184360,
-0.201120,
-0.232720,
-0.160070,
-0.122600,
-0.118340,
-0.062202,
-0.127030,
-0.170060,
-0.224990,
-0.031450,
-0.002681,
-0.065971,
-0.023769,
0.013265,
0.147020,
0.129290,
0.108860,
-0.001907,
0.086948,
0.284370,
0.136970,
0.156700,
0.014157,
0.050893,
-0.054879,
-0.002825,
-0.022305,
-0.010700,
0.011049,
0.008353,
-0.007204,
-0.029355,
-0.016953,
0.032295,
-0.047321,
-0.001905,
-0.016955,
-0.007065,
0.025409,
-0.032907,
0.004089,
-0.030221,
-0.047431,
-0.023831,
-0.053184,
-0.013361,
0.021775,
0.006414,
-0.018699,
-0.018358,
-0.110200,
-0.128390,
-0.127050,
0.048029,
0.250800,
0.063138,
-0.077160,
-0.113750,
0.018149,
0.154650,
0.056546,
-0.079812,
0.011627,
0.028763,
-0.067112,
0.095000,
0.010163,
0.051696,
-0.018696,
-0.251540,
-0.022054,
-0.022859,
0.002420,
-0.103940,
-0.013623,
0.103260,
0.028931,
0.142650,
0.116670,
-0.180280,
-0.069937,
-0.142830,
0.040970,
-0.035412,
-0.146620,
-0.025423,
-0.158050,
-0.099623,
-0.109940,
-0.027072,
-0.040051,
-0.114820,
-0.118940,
-0.070141,
-0.008684,
-0.002431,
-0.120210,
-0.186250,
-0.063800,
-0.073858,
-0.060370,
-0.169360,
-0.108280,
-0.133550,
-0.013872,
-0.199400,
-0.185180,
-0.049494,
-0.062291,
0.112910,
0.018135,
-0.108590,
-0.048689,
0.002057,
0.181790,
-0.002279,
-0.002629,
0.016155,
0.073413,
0.117860,
-0.023168,
-0.037152,
-0.067936,
-0.114170,
-0.114660,
-0.055296,
-0.027514,
-0.094965,
-0.030377,
0.142600,
0.092310,
0.057378,
0.051730,
0.052284,
0.149380,
0.123830,
0.153330,
0.064787,
-0.013714,
0.136740,
0.061774,
0.050461,
0.067497,
0.003080,
0.006897,
0.106170,
0.076138,
0.006820,
-0.075500,
-0.056660,
-0.103570,
0.025892,
-0.097710,
-0.062191,
0.025334,
0.030684,
-0.022288,
0.019458,
-0.007529,
-0.121250,
0.022135,
-0.077069,
0.000547,
0.049098,
0.099624,
0.296260,
0.090306,
0.111710,
0.223490,
0.153720,
0.237690,
0.114570,
0.113980,
0.143180,
0.037876,
-0.005005,
-0.063743,
-0.077235,
-0.066736,
0.030840,
-0.038559,
-0.129880,
-0.086988,
-0.074681,
0.035669,
-0.120790,
-0.053729,
-0.088733,
0.013082,
0.078093,
-0.002280,
0.071048,
0.076390,
-0.000950,
0.067270,
-0.052928,
0.012438,
-0.066500,
-0.026862,
0.037811,
0.007287,
-0.046151,
-0.020027,
-0.024544,
0.034509,
0.008485,
-0.064272,
0.030748,
-0.043251,
-0.005055,
0.032806,
-0.033016,
-0.031455,
0.025414,
0.033681,
-0.013556,
-0.027793,
0.045344,
-0.000908,
0.020445,
0.046294,
0.047151,
0.026567,
-0.020338,
-0.084669,
0.148160,
-0.118530,
-0.203040,
-0.174280,
-0.147660,
0.118390,
0.058811,
-0.016132,
-0.043210,
-0.042129,
0.094701,
-0.008789,
-0.009347,
-0.088959,
-0.033640,
0.098674,
-0.087408,
-0.079265,
-0.038920,
0.073368,
0.078732,
0.107010,
0.023996,
0.050405,
-0.058321,
-0.018878,
-0.112520,
-0.123120,
-0.175010,
-0.092764,
-0.201320,
-0.091934,
-0.162630,
-0.124870,
-0.031863,
-0.137620,
-0.112060,
0.021302,
0.054224,
0.088444,
-0.001839,
0.040242,
0.031812,
-0.016622,
0.147990,
0.078785,
-0.029564,
-0.019780,
0.088849,
-0.005773,
0.034756,
0.027162,
0.024347,
-0.024352,
0.013769,
-0.004644,
-0.006546,
0.017338,
0.030761,
0.001001,
0.044055,
0.035528,
-0.022935,
-0.040933,
-0.007476,
-0.018733,
0.035437,
-0.025302,
0.003870,
-0.030998,
-0.001130,
0.020185,
-0.025523,
-0.013852,
0.003643,
-0.018602,
-0.075429,
-0.134060,
-0.115250,
0.083930,
0.071922,
0.094386,
-0.086290,
-0.019808,
0.073386,
0.068628,
0.010427,
-0.114780,
0.006795,
0.096433,
0.055273,
0.104490,
0.016329,
0.056801,
0.161320,
0.010155,
-0.060732,
0.058387,
-0.089212,
-0.008103,
-0.017875,
-0.021807,
-0.033192,
-0.068741,
-0.001033,
-0.049583,
0.000596,
-0.046158,
-0.055184,
-0.037254,
0.017513,
-0.042672,
-0.022678,
-0.003572,
-0.016820,
0.027981,
-0.014588,
-0.011684,
-0.041296,
-0.016716,
0.026603,
-0.023746,
-0.057935,
-0.053739,
0.011024,
-0.019945,
0.018996,
-0.016618,
-0.033194,
-0.031073,
0.019409,
0.003465,
-0.004977,
-0.031321,
0.001325,
-0.035934,
0.011960,
0.007032,
-0.037098,
-0.000194,
0.019145,
-0.009755,
-0.002757,
-0.007244,
0.004226,
0.006011,
0.003926,
-0.037051,
0.013058,
0.014572,
-0.010516,
-0.006236,
-0.013224,
0.013364,
0.013870,
0.009037,
0.016560,
0.009218,
-0.006008,
-0.024288,
0.000118,
0.021157,
0.007965,
-0.031577,
-0.036107,
-0.034203,
-0.033459,
-0.028344,
-0.004400,
-0.040917,
0.009440,
-0.011858,
-0.004363,
-0.010188,
0.027638,
-0.035946,
-0.022613,
-0.013042,
-0.024474,
0.027102,
0.029823,
0.026150,
0.026659,
0.004306,
-0.042493,
-0.043517,
-0.024049,
-0.009358,
-0.021095,
-0.023602,
0.016765,
0.007908,
-0.030775,
-0.003674,
-0.022295,
-0.041543,
0.006854,
0.007359,
0.008114,
-0.037207,
0.011182,
-0.051318,
0.009529,
-0.017390,
-0.001452,
-0.020481,
-0.047526,
-0.011541,
0.021362,
-0.041219,
-0.030006,
-0.029358,
-0.055210,
-0.003246,
-0.043103,
-0.000260,
-0.059722,
-0.042655,
-0.047411,
-0.032982,
-0.007605,
-0.010238,
-0.030033,
-0.053471,
-0.033441,
-0.048201,
-0.048608,
-0.062931,
0.003549,
-0.043704,
-0.024604,
-0.059571,
-0.002307,
-0.031569,
-0.049584,
-0.052105,
-0.057105,
-0.001418,
-0.028124,
-0.040203,
0.006123,
-0.034946,
-0.037070,
-0.024560,
-0.044311,
0.024400,
-0.009595,
-0.052156,
-0.021703,
-0.017340,
-0.064615,
-0.008522,
-0.052365,
-0.008042,
-0.057819,
-0.013219,
-0.049496,
0.001245,
0.017373,
0.018778,
-0.000972,
-0.018524,
0.003758,
0.011296,
0.014405,
-0.009583,
0.016935,
-0.011157,
0.007626,
0.000008,
-0.020597,
-0.040393,
-0.010741,
-0.006739,
0.024859,
0.000703,
-0.038151,
0.010866,
-0.006321,
0.017324,
-0.007886,
-0.012174,
-0.029446,
0.022029,
-0.034900,
0.018957,
-0.018812,
0.003501,
-0.000008,
0.021716,
0.011049,
-0.015091,
0.019536,
-0.018782,
0.025907,
-0.018876,
0.023716,
-0.033350,
-0.041886,
-0.053587,
-0.003305,
-0.036194,
0.004036,
-0.064844,
0.013030,
-0.010118,
-0.030057,
-0.002890,
-0.036640,
-0.062255,
-0.013522,
-0.050937,
0.023837,
-0.022503,
-0.026891,
-0.002091,
0.011857,
-0.022913,
-0.011513,
-0.018302,
-0.008966,
0.000459,
0.004567,
-0.018862,
0.000490,
-0.005975,
-0.033348,
-0.048743,
-0.064072,
0.006025,
-0.012687,
-0.008432,
-0.030008,
-0.038353,
-0.002385,
0.001655,
0.019540,
-0.061410,
-0.037450,
-0.011908,
-0.031267,
-0.013355,
-0.028306,
-0.062427,
-0.021816,
-0.031292,
-0.002766,
-0.059509,
-0.039894,
0.008653,
-0.041264,
0.012876,
-0.003828,
0.026214,
-0.005804,
-0.035429,
-0.031366,
0.009400,
-0.021576,
-0.038713,
0.021377,
-0.000533,
0.001106,
-0.017678,
0.000865,
-0.022203,
-0.010834,
-0.031682,
-0.023111,
0.003225,
-0.021432,
-0.018499,
-0.022189,
-0.018907,
-0.011511,
-0.003562,
-0.037978,
-0.040673,
0.005793,
-0.015698,
0.023483,
0.025245,
-0.024465,
-0.015401,
0.022726,
-0.038796,
0.020017,
0.022543,
0.005797,
-0.017013,
0.036956,
0.011031,
0.004786,
-0.003986,
-0.023823,
-0.000164,
-0.037665,
-0.008818,
-0.005772,
-0.037048,
0.021038,
0.006912,
-0.016333,
-0.022926,
-0.042563,
0.021331,
0.019565,
-0.022309,
0.024492,
-0.015719,
-0.010975,
-0.042693,
0.007757,
0.031124,
-0.000143,
-0.059154,
-0.015768,
0.001384,
-0.028493,
0.016619,
-0.021579,
-0.030532,
0.017992,
-0.016976,
-0.031802,
-0.035460,
-0.009540,
-0.029459,
0.006475,
-0.033105,
0.015298,
-0.032967,
-0.002594,
-0.014921,
-0.030193,
0.029119,
0.014936,
0.000197,
-0.018584,
-0.022938,
-0.028173,
0.027285,
0.025418,
-0.041032,
-0.005672,
0.021371,
-0.030914,
0.004265,
0.019293,
-0.004473,
-0.022594,
-0.030662,
-0.018879,
0.018037,
0.010478,
-0.026590,
-0.051112,
-0.015336,
0.012596,
-0.030333,
-0.011185,
0.063649,
-0.024327,
0.000042,
-0.018036,
0.015997,
0.028718,
-0.033746,
0.005258,
-0.014018,
-0.002748,
-0.014836,
0.002912,
0.034610,
-0.014612,
-0.014643,
-0.026027,
0.002612,
-0.020321,
-0.003648,
-0.007227,
-0.038932,
-0.054778,
-0.018557,
-0.010886,
-0.000056,
-0.002304,
-0.062589,
-0.002648,
-0.047601,
-0.011523,
-0.040986,
-0.009797,
-0.012752,
-0.021863,
-0.050340,
-0.042649,
0.009459,
0.006844,
0.012402,
-0.011843,
-0.036541,
-0.035226,
0.017854,
-0.016606,
0.013711,
-0.017471,
0.027793,
0.007738,
0.016103,
0.002575,
-0.025945,
-0.042442,
-0.009834,
-0.021314,
-0.033987,
0.015317,
0.010770,
0.004323,
-0.016173,
-0.017345,
-0.017648,
0.004218,
-0.029242,
-0.014519,
-0.039890,
-0.022995,
-0.009200,
-0.013040,
-0.002783,
-0.011080,
-0.003583,
-0.011568,
-0.003433,
-0.003634,
0.008508,
0.030674,
-0.014988,
-0.012040,
0.009710,
-0.030732,
0.017382,
0.007131,
-0.017584,
-0.008470,
0.002648,
0.025954,
-0.012581,
-0.032564,
-0.012954,
-0.024015,
-0.029770,
-0.025010,
0.019604,
0.022105,
-0.027942,
-0.013517,
-0.032263,
0.016020,
0.027746,
-0.002470,
-0.002342,
-0.007875,
-0.003947,
-0.000444,
-0.024298,
0.013872,
0.011160,
-0.040689,
0.009626,
0.011505,
0.026575,
-0.016355,
0.007121,
-0.023808,
0.015310,
0.015930,
-0.012107,
0.024722,
-0.004859,
-0.002271,
-0.020575,
-0.000659,
-0.031748,
0.009880,
0.025932,
-0.034000,
-0.013171,
-0.010150,
-0.000513,
0.028929,
0.034550,
-0.012267,
0.017861,
0.002154,
0.039009,
0.014051,
0.017432,
-0.036367,
0.001588,
0.027130,
0.009526,
-0.021577,
0.000033,
-0.012234,
-0.000497,
-0.004013,
0.000709,
0.019647,
0.002673,
-0.012809,
-0.031365,
0.028344,
0.004456,
-0.031043,
-0.025016,
-0.008065,
-0.001317,
0.012173,
-0.011746,
-0.000903,
0.026641,
0.018109,
-0.002141,
-0.001283,
-0.015934,
-0.023608,
-0.062158,
-0.018610,
-0.005982,
-0.010791,
-0.037066,
-0.041524,
-0.049110,
-0.046768,
-0.021109,
-0.057093,
-0.053920,
-0.062110,
-0.054905,
0.008943,
0.021663,
-0.008506,
0.000855,
-0.037970,
-0.016695,
0.031820,
-0.015904,
-0.003021,
-0.015769,
-0.005675,
-0.014865,
0.011848,
0.007574,
0.009271,
0.026849,
0.007465,
0.009259,
-0.017594,
-0.023071,
-0.013243,
0.004665,
0.025833,
-0.037713,
-0.020330,
0.022188,
0.021666,
0.023991,
-0.023044,
0.000529,
-0.004988,
-0.031389,
0.008547,
-0.021575,
0.020277,
-0.041984,
-0.022622,
0.007333,
-0.007636,
-0.018105,
0.004237,
-0.028685,
-0.008050,
-0.006961,
-0.029635,
-0.038443,
-0.034653,
-0.004923,
0.015598,
-0.035780,
0.016340,
0.004934,
-0.043439,
-0.014996,
-0.011441,
-0.027511,
-0.040964,
0.004617,
0.022097,
-0.027450,
0.004093,
-0.024512,
0.023140,
0.004473,
0.018065,
-0.015413,
0.006172,
-0.038353,
0.019046,
-0.018325,
0.025517,
0.005562,
-0.035681,
-0.033655,
-0.005927,
0.008742,
0.026549,
-0.022228,
-0.039319,
0.019522,
-0.040097,
-0.003235,
-0.005362,
-0.022877,
-0.023119,
-0.001163,
-0.040542,
-0.012787,
-0.012944,
0.019915,
-0.020997,
0.015025,
-0.027096,
-0.029158,
-0.031783,
-0.002145,
-0.031057,
0.008090,
-0.023796,
-0.000384,
0.022368,
-0.002051,
-0.037881,
0.002609,
0.027418,
-0.001431,
0.026122,
-0.037651,
0.038908,
-0.059101,
-0.010467,
-0.007821,
-0.014651,
-0.054130,
-0.035929,
0.000776,
-0.042322,
-0.061572,
-0.028464,
-0.004709,
-0.063718,
-0.052341,
-0.061808,
-0.038476,
-0.063908,
-0.017298,
-0.016832,
-0.018962,
-0.014250,
0.011589,
-0.017851,
-0.060654,
-0.025269,
-0.044686,
-0.013055,
-0.013042,
-0.029645,
0.029554,
-0.016179,
-0.002247,
0.005931,
0.003510,
-0.037479,
-0.020131,
0.014523,
-0.018207,
-0.039372,
-0.028332,
-0.028708,
0.002724,
-0.007948,
-0.019296,
-0.022665,
-0.037598,
-0.019109,
-0.036177,
-0.014820,
-0.024425,
-0.017927,
-0.042977,
-0.004870,
-0.004044,
-0.013430,
-0.030064,
0.002092,
-0.023319,
-0.031165,
-0.060690,
-0.003489,
-0.035465,
-0.015036,
-0.019306,
0.010151,
-0.023112,
-0.060658,
-0.068833,
-0.038213,
-0.035011,
-0.006800,
-0.025829,
-0.053467,
-0.027377,
-0.061300,
-0.056838,
-0.025644,
0.000091,
0.011396,
-0.029445,
0.001466,
0.023404,
-0.006939,
-0.032731,
0.026015,
-0.014023,
0.015365,
-0.005793,
-0.030505,
-0.025139,
-0.009637,
-0.028921,
0.012581,
0.010758,
0.006299,
-0.040331,
0.003807,
0.017075,
0.023505,
-0.007878,
0.010600,
-0.027297,
0.002794,
-0.023472,
0.020847,
-0.030476,
-0.023735,
-0.008668,
0.024060,
-0.016818,
-0.003455,
-0.004627,
-0.001913,
-0.021410,
0.011141,
-0.020532,
-0.032239,
0.000311,
0.013219,
0.005304,
0.010351,
-0.002924,
-0.021047,
-0.030585,
-0.020013,
0.002168,
-0.033491,
-0.039162,
-0.021826,
-0.040023,
0.020233,
-0.014977,
-0.008725,
-0.011847,
0.012893,
-0.029225,
-0.020951,
-0.008208,
-0.010253,
0.026430,
0.001427,
-0.005224,
-0.018294,
0.027557,
-0.035878,
0.026585,
0.028215,
-0.012418,
0.016547,
-0.009107,
-0.029724,
-0.041392,
-0.033036,
-0.038015,
-0.000384,
-0.040893,
-0.054839,
-0.057284,
-0.050514,
-0.019428,
-0.057335,
-0.052236,
-0.014487,
-0.015606,
-0.040181,
-0.022318,
-0.050695,
-0.019592,
0.021918,
0.011331,
0.025828,
-0.016924,
-0.067567,
-0.034922,
-0.019886,
-0.006700,
0.015020,
-0.024341,
-0.001287,
-0.038189,
-0.028150,
-0.033931,
-0.018883,
-0.011938,
-0.002060,
0.007382,
0.023510,
0.020877,
0.019653,
0.010096,
-0.034619,
-0.015079,
0.001039,
0.005485,
-0.031382,
-0.002503,
0.002026,
0.004529,
0.027614,
-0.038041,
0.007934,
-0.023276,
0.021965,
-0.026893,
0.024644,
0.025144,
0.006906,
0.007314,
-0.013224,
-0.030242,
-0.008162,
-0.005439,
-0.012158,
-0.030458,
-0.018038,
-0.037551,
-0.030567,
-0.055141,
-0.027346,
-0.012836,
0.014109,
-0.033202,
-0.008022,
-0.030528,
-0.018624,
-0.005584,
0.015361,
-0.030646,
-0.014086,
-0.011734,
-0.014820,
0.003110,
0.012090,
-0.016446,
-0.014754,
-0.016108,
0.024408,
0.006038,
0.006707,
-0.030344,
0.012093,
-0.001886,
0.022909,
-0.028555,
0.002988,
-0.025419,
0.017900,
0.029230,
-0.012570,
0.016081,
-0.022314,
-0.006128,
-0.022625,
-0.030726,
-0.052415,
-0.039153,
-0.010994,
-0.023183,
0.001322,
-0.062921,
-0.064092,
-0.011934,
-0.020831,
-0.009229,
-0.060496,
-0.022333,
-0.058357,
-0.023553,
-0.061059,
-0.043677,
0.014921,
-0.012490,
-0.041300,
-0.010816,
-0.019980,
-0.064928,
-0.049420,
-0.000177,
-0.001963,
-0.036793,
-0.016142,
-0.001624,
-0.036725,
-0.054644,
-0.004467,
-0.023648,
-0.020638,
-0.036325,
-0.020445,
-0.037369,
0.000362,
-0.005571,
-0.014537,
-0.023734,
-0.027898,
-0.027103,
0.010914,
-0.011706,
0.011200,
0.010358,
0.014989,
-0.015826,
-0.046725,
-0.001984,
-0.060252,
-0.024358,
-0.052017,
-0.034267,
-0.016339,
0.007332,
-0.010432,
-0.001862,
-0.004149,
-0.011463,
-0.034252,
-0.036602,
-0.005985,
-0.035265,
0.021693,
-0.013842,
-0.023731,
-0.051516,
-0.036937,
0.014172,
-0.057681,
-0.030281,
-0.032403,
-0.040870,
-0.030337,
-0.026768,
0.000718,
-0.011417,
0.022739,
-0.022405,
0.022153,
-0.027535,
0.007108,
-0.020580,
0.016086,
-0.008399,
0.017407,
-0.020627,
-0.021046,
0.009708,
-0.008422,
-0.045337,
0.025238,
0.016221,
-0.031782,
-0.019379,
-0.032543,
-0.008924,
-0.000951,
0.011366,
0.022670,
0.030663,
0.016480,
-0.013985,
-0.021260,
0.015232,
-0.007241,
0.005340,
0.014977,
-0.056998,
0.006992,
-0.032012,
-0.006796,
-0.039111,
-0.060908,
-0.002349,
-0.000214,
0.016274,
-0.036932,
-0.058556,
-0.012305,
-0.052987,
-0.061615,
-0.023689,
-0.066002,
-0.002629,
-0.023918,
-0.015377,
-0.019569,
-0.022785,
-0.015452,
-0.057697,
-0.058302,
0.022396,
-0.009468,
-0.002729,
-0.018738,
0.004733,
-0.032163,
-0.030381,
-0.008618,
0.007957,
-0.035581,
-0.029141,
-0.033263,
-0.019487,
-0.013750,
0.027189,
0.012628,
-0.012907,
-0.043447,
-0.001874,
0.015761,
0.015534,
-0.012835,
-0.010442,
-0.027419,
0.005978,
-0.013333,
0.013846,
0.001887,
-0.000911,
0.010160,
-0.044170,
-0.024662,
-0.017245,
-0.010289,
0.004823,
0.024047,
-0.005409,
-0.019585,
0.020461,
-0.021702,
0.030279,
0.022636,
0.000952,
0.037495,
-0.018836,
-0.027855,
-0.037173,
0.028715,
-0.009071,
-0.027117,
-0.060451,
-0.048010,
0.002260,
0.011678,
-0.011520,
-0.006739,
-0.034378,
-0.017663,
0.027118,
-0.006056,
-0.030350,
-0.047136,
0.030893,
-0.023666,
-0.038254,
0.023820,
-0.043147,
-0.002660,
-0.005589,
0.010034,
-0.018145,
0.023059,
-0.015018,
-0.003472,
-0.070400,
-0.002352,
-0.014739,
-0.019468,
-0.033785,
-0.042812,
-0.040577,
-0.022074,
-0.031625,
-0.034496,
0.016718,
-0.068349,
-0.007935,
-0.056775,
-0.005296,
-0.012475,
-0.004874,
-0.034622,
-0.038049,
0.014910,
-0.046205,
-0.053074,
-0.026095,
-0.025583,
-0.063237,
-0.035863,
-0.010269,
-0.031336,
-0.024750,
-0.036119,
0.002972,
0.012178,
-0.030696,
-0.023401,
-0.043041,
-0.021082,
0.023312,
0.021299,
-0.009306,
-0.049083,
-0.028537,
-0.013449,
0.026070,
-0.038740,
-0.028966,
-0.030471,
-0.033851,
-0.057271,
-0.056660,
0.018275,
-0.007151,
-0.010895,
-0.026904,
-0.033994,
-0.000040,
-0.056721,
-0.006382,
-0.020372,
0.020473,
0.009747,
-0.039018,
-0.037181,
-0.026289,
-0.023101,
0.005164,
0.000970,
-0.037209,
-0.006262,
-0.032862,
-0.016563,
-0.023520,
-0.049717,
-0.043069,
-0.006569,
-0.066336,
-0.040270,
-0.045739,
-0.003289,
-0.048771,
-0.053082,
-0.018130,
-0.007845,
-0.017863,
0.006681,
0.006128,
-0.033354,
-0.039717,
-0.032753,
-0.042525,
-0.046728,
0.022753,
-0.036226,
-0.002642,
0.011092,
-0.028634,
0.003314,
0.007307,
0.021706,
0.022457,
0.006614,
0.011761,
-0.000448,
-0.043397,
-0.026217,
-0.018369,
-0.016564,
0.001974,
0.035365,
-0.014366,
-0.024823,
0.020476,
0.018919,
0.035956,
0.016858,
-0.021732,
-0.019133,
-0.012891,
-0.026106,
-0.019684,
-0.026343,
0.004418,
0.003026,
-0.044240,
0.026319,
0.022675,
0.006805,
0.022026,
0.012756,
-0.029728,
-0.027016,
-0.025298,
-0.012494,
-0.000339,
-0.016065,
-0.038419,
0.008302,
0.024799,
-0.019801,
-0.035688,
-0.043848,
-0.015505,
-0.009890,
-0.017792,
0.022869,
0.000912,
-0.015203,
0.015504,
-0.000821,
0.011999,
-0.014324,
-0.006866,
-0.023633,
-0.029281,
-0.013891,
-0.042313,
0.010061,
-0.053951,
0.014041,
-0.061187,
0.003036,
-0.002367,
0.015512,
-0.002003,
-0.010702,
-0.026495,
-0.035707,
0.013485,
0.004045,
-0.003239,
-0.039132,
-0.032716,
-0.026390,
0.013713,
0.021415,
-0.042793,
-0.009816,
-0.038688,
-0.044584,
-0.044572,
-0.028695,
0.014567,
-0.021476,
0.011421,
-0.032328,
0.003880,
-0.030957,
0.023699,
-0.015096,
-0.012698,
0.029111,
-0.002737,
0.014718,
0.004907,
0.013744,
0.009729,
0.022063,
-0.020526,
0.021996,
-0.009125,
-0.006860,
0.014879,
-0.029044,
-0.030902,
-0.019436,
0.008583,
0.000150,
-0.020775,
0.001078,
-0.028904,
0.020300,
0.003890,
-0.016483,
0.029050,
0.028788,
-0.025770,
-0.020066,
-0.043968,
-0.063376,
-0.008153,
-0.045330,
-0.048619,
-0.000545,
-0.015791,
-0.056001,
-0.037917,
-0.053209,
-0.010262,
-0.054432,
-0.036492,
-0.020872,
-0.000880,
-0.018749,
-0.033486,
0.001625,
0.017959,
0.020204,
-0.003360,
-0.026147,
-0.040768,
-0.015227,
-0.010997,
-0.000295,
0.021645,
0.025718,
-0.032516,
-0.043416,
-0.017823,
0.014663,
-0.020335,
-0.036249,
-0.030358,
-0.018158,
-0.022208,
-0.031891,
0.015425,
0.002144,
0.022245,
-0.040702,
-0.009564,
0.014217,
-0.004358,
-0.010742,
-0.004461,
0.010841,
0.001044,
-0.032495,
-0.033446,
0.015903,
0.002575,
-0.018021,
0.017504,
0.004101,
-0.021194,
-0.013487,
-0.030576,
-0.016303,
-0.023133,
-0.011270,
-0.018787,
-0.043427,
0.015276,
-0.010564,
-0.013163,
-0.026235,
-0.048791,
0.022220,
0.009357,
-0.016240,
-0.029741,
0.012561,
0.001913,
-0.035752,
-0.008460,
-0.057182,
-0.050130,
-0.018735,
-0.040927,
-0.017284,
-0.006214,
-0.062980,
-0.007157,
0.011635,
-0.000373,
0.019977,
-0.015416,
-0.043393,
-0.056960,
-0.004987,
-0.017453,
-0.008734,
-0.040039,
-0.002100,
0.017799,
-0.038008,
-0.012218,
0.001236,
-0.035937,
-0.029781,
-0.053888,
0.000317,
-0.038832,
-0.030681,
0.004481,
-0.031770,
-0.038361,
-0.046902,
-0.005756,
-0.003067,
-0.030878,
-0.003797,
-0.014228,
0.007785,
-0.005028,
-0.014068,
0.029398,
0.016680,
-0.029700,
-0.024526,
-0.021876,
-0.002753,
-0.039678,
-0.008177,
0.021438,
-0.035543,
0.009525,
-0.036109,
-0.031673,
-0.014222,
0.014232,
-0.039908,
0.010205,
-0.060517,
-0.020182,
-0.071529,
-0.004799,
-0.012898,
-0.003752,
-0.067092,
-0.007292,
-0.055953,
-0.040877,
-0.018894,
-0.059660,
-0.017688,
0.014150,
-0.018686,
-0.013696,
0.024170,
-0.017483,
-0.027205,
0.034691,
0.027678,
0.028213,
-0.024639,
0.026812,
-0.013254,
0.015327,
-0.007568,
0.000254,
-0.010878,
-0.030624,
-0.037419,
-0.007642,
-0.013562,
0.003510,
0.015968,
-0.005212,
-0.012969,
0.000250,
-0.020272,
-0.044289,
-0.020248,
-0.014348,
-0.044353,
-0.062803,
-0.024548,
-0.029956,
-0.008830,
-0.064543,
-0.016244,
-0.022695,
-0.048349,
-0.015225,
-0.040790,
-0.026742,
-0.035533,
-0.011007,
0.020789,
-0.034480,
0.008786,
-0.034809,
-0.018030,
-0.046211,
0.001133,
-0.040872,
-0.028489,
-0.024918,
0.005527,
-0.019584,
0.003758,
-0.029482,
-0.034173,
-0.019475,
-0.022755,
-0.004006,
-0.056905,
-0.024008,
-0.051667,
0.008370,
0.015209,
-0.031314,
0.000148,
-0.056645,
-0.033578,
-0.009146,
0.018128,
-0.008950,
-0.014426,
0.004114,
-0.033137,
0.023895,
-0.008575,
0.034093,
-0.026743,
0.003875,
0.021029,
-0.009916,
0.000395,
0.019914,
0.003628,
0.015833,
-0.020893,
-0.021178,
-0.021458,
-0.026716,
-0.009469,
0.003863,
-0.017304,
0.002716,
0.029029,
0.014471,
-0.020700,
-0.004831,
-0.005869,
-0.003814,
-0.032935,
0.005480,
0.004144,
-0.022690,
0.016802,
-0.021360,
-0.017366,
0.017155,
-0.055618,
-0.046185,
-0.027563,
-0.033884,
0.008950,
-0.047787,
-0.057620,
-0.033234,
-0.033039,
-0.004687,
-0.024869,
-0.020871,
-0.002167,
-0.007886,
-0.043790,
0.022431,
0.013874,
-0.014380,
0.015452,
-0.028913,
-0.006354,
0.024559,
-0.025094,
-0.033399,
-0.030775,
0.027691,
-0.014200,
0.014115,
-0.009355,
0.005975,
-0.008905,
0.016009,
-0.008072,
-0.009488,
0.004338,
0.013441,
-0.038316,
0.004940,
-0.018381,
-0.045284,
-0.005410,
-0.008096,
-0.017670,
-0.003957,
-0.002503,
0.019313,
0.027619,
-0.001700,
-0.013802,
0.020486,
-0.025474,
-0.016242,
-0.016722,
0.014592,
-0.019987,
0.028491,
-0.024985,
-0.018398,
-0.034386,
0.037130,
0.027516,
0.024745,
-0.011142,
-0.007559,
-0.019247,
-0.020931,
-0.011512,
-0.019594,
-0.013429,
-0.034037,
0.025949,
-0.000292,
-0.019098,
-0.036900,
0.029500,
-0.023344,
0.014927,
0.015800,
-0.007092,
-0.002329,
-0.034725,
-0.000744,
0.026713,
-0.001816,
-0.059541,
-0.009268,
0.017924,
0.023573,
-0.021270,
0.002706,
-0.015006,
-0.022343,
0.005226,
-0.029265,
-0.002819,
0.010052,
-0.036036,
0.015799,
-0.018569,
0.031136,
-0.029397,
0.005323,
0.016810,
-0.030500,
0.014473,
-0.025673,
-0.036016,
0.012336,
-0.029936,
0.030456,
0.009261,
0.016432,
0.002917,
0.026074,
-0.021345,
0.015887,
0.025622,
-0.006939,
-0.040976,
-0.022893,
-0.018572,
-0.024533,
0.028839,
-0.062983,
-0.052376,
-0.055291,
-0.012593,
0.010112,
-0.044014,
-0.053997,
-0.057479,
0.009315,
-0.004873,
-0.005812,
-0.003066,
-0.039452,
-0.029448,
-0.024490,
-0.062117,
-0.020209,
-0.002684,
-0.037548,
-0.019957,
-0.032899,
0.027978,
-0.036403,
-0.036557,
0.020562,
-0.036320,
0.008559,
-0.025573,
-0.035405,
-0.028046,
0.010763,
-0.011948,
0.002346,
-0.019968,
0.020039,
-0.011659,
-0.010965,
0.006277,
0.015699,
-0.013531,
0.000748,
-0.029765,
-0.005852,
-0.001350,
0.001613,
-0.010676,
-0.059555,
-0.052704,
-0.007032,
-0.000059,
-0.037560,
0.023260,
-0.056013,
-0.001807,
-0.020459,
0.033476,
0.010900,
-0.030438,
-0.051869,
-0.023487,
-0.028802,
0.010612,
-0.019917,
-0.025552,
-0.001991,
-0.032935,
-0.025890,
-0.008711,
-0.032805,
0.009980,
-0.040397,
-0.016029,
-0.019521,
0.005961,
-0.001949,
0.026183,
-0.004194,
-0.029114,
-0.035997,
-0.070347,
-0.027594,
0.016716,
-0.008563,
0.016245,
-0.009952,
0.018051,
-0.031524,
0.014581,
-0.013917,
0.012532,
-0.030388,
-0.001477,
-0.031166,
-0.003690,
-0.058078,
-0.029986,
-0.032624,
-0.016154,
-0.022083,
-0.002864,
-0.032918,
-0.004329,
-0.014614,
0.025990,
-0.016640,
-0.028435,
-0.040281,
-0.027762,
-0.016082,
0.010500,
-0.023602,
0.005586,
0.027724,
-0.012543,
-0.016061,
-0.013217,
0.019590,
0.021668,
-0.029407,
0.004300,
0.016806,
0.019951,
-0.000982,
0.015033,
-0.001183,
0.024748,
0.003550,
-0.033070,
-0.009966,
0.023163,
0.001924,
0.009946,
-0.034363,
-0.018708,
-0.030018,
-0.031897,
-0.040654,
-0.009990,
0.021047,
-0.024680,
0.011880,
0.013125,
0.024136,
-0.030304,
-0.014994,
-0.032475,
-0.000171,
-0.034993,
0.013665,
0.000031,
-0.027193,
-0.021423,
-0.034957,
-0.009483,
0.009596,
0.017513,
-0.004433,
-0.038073,
-0.027992,
0.007467,
-0.021706,
-0.063604,
0.013593,
-0.024629,
-0.017537,
-0.036226,
0.011874,
0.020884,
0.021372,
-0.006174,
-0.032504,
-0.010725,
-0.010331,
-0.022901,
-0.019257,
-0.010705,
-0.011365,
-0.016411,
-0.024204,
0.009609,
-0.002093,
-0.030929,
0.027725,
-0.028934,
0.034921,
-0.021076,
0.018890,
-0.007665,
0.012461,
0.026363,
0.025435,
-0.033668,
0.009309,
-0.037341,
0.008891,
-0.052101,
-0.057328,
-0.005747,
-0.016314,
0.007128,
-0.027205,
0.029202,
-0.045541,
-0.026414,
-0.006958,
-0.017210,
0.011408,
-0.006329,
-0.010686,
0.005919,
-0.035510,
-0.002471,
-0.055155,
-0.011540,
-0.026595,
-0.012738,
-0.018111,
-0.016499,
-0.011850,
-0.054129,
-0.002729,
-0.011536,
-0.042875,
-0.043265,
-0.020552,
-0.038326,
-0.051738,
-0.038642,
-0.029977,
-0.032325,
-0.002831,
0.014471,
-0.028081,
0.015738,
-0.034786,
-0.062538,
-0.038212,
-0.028317,
-0.038780,
0.006011,
-0.007361,
-0.027022,
-0.024326,
0.025752,
-0.010530,
-0.019457,
0.015468,
-0.015106,
-0.003402,
-0.051618,
-0.049932,
-0.009051,
-0.051006,
-0.032462,
-0.049446,
-0.033894,
-0.003098,
-0.046431,
-0.059966,
-0.038847,
-0.000416,
-0.007348,
-0.034747,
-0.035442,
-0.012279,
-0.020817,
-0.039572,
0.035082,
-0.067753,
-0.031217,
0.004458,
0.028518,
0.019910,
-0.010509,
-0.025113,
-0.040820,
0.014941,
-0.049108,
-0.000907,
0.006010,
-0.018246,
-0.026905,
-0.002648,
-0.035620,
0.027252,
-0.035766,
-0.012715,
0.021130,
-0.049116,
-0.006624,
-0.011699,
-0.012609,
-0.034613,
0.007296,
-0.005208,
-0.019684,
0.012859,
0.002903,
-0.041533,
0.018399,
-0.039678,
0.022446,
-0.038873,
-0.025447,
0.013439,
-0.005471,
-0.018589,
-0.013885,
0.035497,
-0.019806,
0.008876,
-0.024488,
0.026076,
0.034848,
0.020909,
0.009729,
-0.024117,
-0.018186,
-0.013719,
-0.019624,
0.007209,
-0.034274,
-0.031858,
0.023451,
-0.062511,
-0.054071,
-0.062882,
-0.032687,
-0.019552,
-0.046351,
-0.062780,
-0.036107,
-0.023087,
-0.072324,
-0.002293,
-0.016188,
-0.013613,
-0.027167,
-0.020828,
-0.007155,
-0.062003,
-0.025340,
-0.009092,
-0.008614,
-0.033696,
-0.016262,
-0.013084,
-0.017427,
-0.005489,
-0.015581,
-0.015155,
-0.051030,
-0.020795,
-0.021906,
0.000384,
-0.048760,
-0.034625,
-0.035764,
-0.002414,
-0.066355,
-0.070807,
-0.038661,
-0.063153,
-0.063977,
-0.004072,
-0.024861,
-0.023721,
-0.016679,
-0.072030,
-0.002210,
-0.011629,
-0.041528,
-0.008075,
-0.038390,
-0.010599,
-0.018745,
-0.048700,
0.025940,
0.019989,
0.001465,
-0.060978,
-0.010405,
-0.031721,
0.017529,
0.017355,
0.018454,
-0.005787,
-0.020172,
-0.035170,
-0.039351,
0.023434,
0.026606,
0.016122,
0.008085,
-0.007156,
-0.037131,
0.012271,
0.013282,
-0.000220,
0.023708,
0.028010,
-0.015648,
-0.031930,
-0.004733,
0.032134,
-0.006347,
-0.011957,
0.019062,
0.008202,
-0.018950,
0.008506,
-0.009317,
0.000927,
-0.019217,
-0.002321,
0.012570,
0.010941,
0.017666,
-0.027194,
-0.004921,
0.001850,
-0.029093,
-0.032187,
-0.000645,
0.012578,
-0.034732,
-0.024360,
-0.026645,
-0.027394,
0.025206,
0.024399,
0.009948,
0.002276,
-0.000320,
0.005406,
-0.013091,
0.002046,
0.016130,
-0.019467,
-0.023560,
0.026703,
-0.002442,
0.007958,
-0.013877,
-0.066016,
-0.018262,
-0.039483,
0.014989,
-0.001256,
-0.058296,
0.015272,
-0.037186,
0.025445,
0.015290,
-0.053177,
-0.053155,
-0.023216,
-0.010002,
-0.020357,
-0.020517,
-0.025292,
-0.030565,
-0.040061,
-0.033197,
-0.023048,
-0.025250,
-0.031955,
-0.016917,
0.021814,
-0.039204,
0.021081,
-0.006622,
0.015518,
0.017737,
-0.050779,
-0.063314,
-0.005439,
-0.032227,
-0.056429,
-0.071007,
-0.007824,
-0.047212,
-0.022037,
-0.013640,
-0.041221,
0.016149,
-0.039742,
0.009540,
-0.025439,
-0.015953,
-0.063167,
-0.024315,
0.002625,
-0.024367,
-0.008586,
-0.036390,
-0.014754,
-0.013266,
-0.037884,
-0.020172,
-0.043159,
0.015240,
-0.039219,
-0.041221,
-0.044831,
-0.031932,
0.018778,
-0.028473,
0.011980,
-0.071296,
-0.057715,
-0.010782,
-0.012884,
-0.027659,
-0.028279,
-0.019662,
-0.043455,
0.011080,
-0.025705,
0.024185,
-0.019274,
-0.031175,
0.012161,
-0.011064,
0.023752,
0.005528,
0.023553,
0.018480,
0.002320,
-0.011400,
-0.039452,
0.024460,
-0.028516,
-0.029739,
0.013081,
0.021440,
-0.013763,
0.004649,
0.017351,
-0.041783,
-0.008610,
0.020741,
0.026125,
-0.022789,
-0.055768,
-0.014317,
0.018489,
-0.044897,
-0.020260,
-0.020567,
-0.031326,
-0.035973,
-0.010720,
-0.014068,
-0.025910,
-0.016983,
-0.034794,
-0.003025,
-0.030402,
-0.039051,
-0.029431,
-0.020172,
0.006204,
0.008159,
-0.047449,
-0.059153,
-0.057994,
-0.040597,
-0.001479,
-0.025364,
0.015961,
-0.004579,
0.025452,
-0.034394,
0.034014,
-0.008445,
0.012333,
-0.026223,
-0.025989,
0.030728,
-0.024424,
0.035142,
-0.002104,
0.024609,
-0.002693,
-0.015919,
-0.004875,
-0.000790,
0.008240,
-0.024925,
0.014664,
0.006114,
0.028555,
0.000400,
-0.003950,
0.001870,
-0.034987,
-0.008420,
-0.044977,
0.002167,
0.002602,
-0.030161,
0.003872,
-0.004991,
-0.005328,
0.021071,
-0.018212,
0.015044,
-0.062130,
0.008407,
0.021712,
0.013589,
-0.006048,
-0.045743,
-0.049542,
-0.036645,
-0.025427,
-0.036343,
-0.039172,
-0.023924,
-0.021914,
-0.062029,
-0.026344,
-0.017705,
-0.041094,
-0.005425,
-0.034810,
-0.067335,
-0.006480,
-0.043485,
-0.035173,
-0.042271,
-0.009807,
-0.051800,
-0.019101,
-0.055828,
-0.027983,
-0.025482,
-0.041493,
-0.068980,
-0.022225,
-0.066666,
-0.009826,
-0.018122,
-0.006109,
0.021642,
-0.002329,
-0.014866,
-0.025765,
-0.001729,
0.040668,
0.040271,
0.021374,
-0.004301,
0.021492,
-0.022673,
0.015622,
0.016235,
0.014518,
0.040776,
0.004041,
-0.029037,
-0.023653,
-0.011040,
0.028126,
-0.006220,
-0.015190,
-0.010546,
0.031852,
-0.008023,
-0.003068,
-0.008795,
-0.015950,
-0.019219,
-0.004501,
-0.067866,
-0.019625,
-0.022000,
0.008239,
0.004152,
-0.033786,
-0.029334,
-0.005786,
-0.009703,
-0.070391,
-0.066427,
-0.026985,
-0.032411,
-0.039730,
-0.029074,
0.014949,
0.029298,
0.003212,
-0.002534,
-0.123420,
-0.021742,
-0.102810,
-0.116210,
-0.139440,
0.047068,
0.007845,
0.019083,
-0.057429,
-0.102840,
0.110270,
0.143790,
-0.020030,
-0.151600,
-0.087172,
0.262150,
0.178190,
0.030933,
-0.014100,
-0.090460,
-0.019705,
0.058153,
-0.003856,
-0.011805,
0.011446,
0.014275,
-0.018999,
-0.036041,
0.037057,
-0.014437,
0.012685,
0.001885,
-0.027758,
-0.002104,
-0.019312,
0.018906,
0.003774,
-0.004577,
-0.010638,
0.003250,
0.030933,
0.017519,
0.023176,
0.029956,
0.025534,
0.014241,
-0.015022,
-0.006966,
0.039582,
-0.015451,
0.044685,
0.075817,
0.157870,
0.197000,
0.182240,
-0.010464,
0.047787,
0.072353,
-0.073172,
0.055442,
0.036061,
0.011194,
0.014071,
-0.000535,
-0.011083,
-0.058654,
0.030296,
-0.011900,
-0.071532,
-0.092930,
-0.150570,
-0.005188,
0.053958,
0.078849,
-0.109060,
-0.023014,
-0.054918,
-0.082981,
-0.032348,
0.032364,
0.036739,
-0.010395,
0.000270,
0.069935,
0.018512,
-0.037900,
0.029615,
0.047852,
0.027200,
0.013742,
-0.049017,
-0.051369,
0.000693,
-0.019592,
-0.031076,
0.007371,
-0.004699,
-0.034045,
-0.014878,
-0.013927,
0.000499,
0.052246,
0.108390,
0.141090,
0.087858,
0.068054,
0.088490,
0.091405,
0.121370,
0.078189,
0.085579,
-0.011860,
-0.006124,
0.037013,
0.014632,
0.138830,
0.080397,
0.052626,
-0.037130,
0.018991,
0.165110,
-0.031188,
-0.085875,
-0.009451,
0.056326,
-0.139640,
-0.020458,
0.048638,
-0.038918,
-0.118290,
0.030453,
0.132820,
0.149130,
0.024936,
-0.073693,
0.087397,
0.092078,
-0.087072,
-0.077495,
-0.034192,
0.014194,
-0.083491,
-0.083844,
-0.138930,
-0.066642,
0.216420,
0.061369,
-0.204350,
-0.100090,
-0.093824,
-0.244510,
-0.171690,
-0.078479,
-0.094414,
-0.234010,
-0.116370,
-0.054598,
0.015475,
0.072092,
-0.124170,
-0.095988,
-0.028061,
-0.016632,
0.121920,
-0.036669,
-0.018786,
0.035433,
-0.000084,
0.108830,
0.135800,
0.151190,
0.009248,
0.062061,
0.092602,
0.132530,
-0.046954,
-0.022741,
-0.029087,
-0.070115,
-0.174130,
0.055176,
-0.030759,
-0.000325,
0.019902,
-0.086864,
0.035970,
0.027696,
-0.074036,
0.037933,
0.027024,
-0.036218,
-0.031641,
-0.070377,
0.053687,
-0.047988,
0.022037,
-0.069141,
-0.118150,
0.007368,
-0.047879,
-0.244760,
-0.040723,
0.079217,
0.091745,
0.358230,
-0.087480,
0.107040,
0.047589,
0.062126,
0.095293,
-0.083204,
-0.021138,
0.109150,
0.061886,
0.017397,
-0.028298,
0.027372,
0.086403,
0.076233,
-0.012318,
0.009018,
0.101820,
0.033237,
0.021067,
0.085309,
0.009490,
0.025358,
-0.067674,
0.031422,
0.024727,
0.008992,
0.004858,
0.011108,
0.007875,
0.040342,
0.052926,
-0.067628,
-0.104730,
-0.058113,
0.031256,
0.200020,
0.022283,
-0.055441,
-0.030389,
0.125560,
0.182430,
0.025013,
-0.010992,
0.019724,
0.038141,
0.158960,
-0.001028,
-0.017514,
0.043350,
-0.260080,
0.122260,
0.149680,
0.145970,
0.048425,
-0.080817,
0.142500,
0.122980,
0.121380,
0.074434,
0.180080,
0.108230,
0.101390,
-0.005303,
0.058285,
0.071526,
0.139500,
0.134950,
-0.030961,
-0.022279,
-0.124580,
-0.183010,
-0.056008,
0.057229,
0.169230,
0.022120,
-0.128800,
-0.029474,
0.062041,
0.080081,
0.047367,
0.016713,
0.080600,
0.059819,
0.133370,
0.134970,
0.218130,
-0.016886,
0.072413,
0.125820,
0.094288,
0.079718,
-0.008675,
-0.147190,
-0.076368,
0.020353,
-0.147200,
-0.060096,
0.110760,
0.007634,
0.219140,
-0.268740,
-0.173470,
-0.097013,
-0.038581,
-0.019618,
-0.244350,
-0.130990,
-0.069148,
-0.048090,
-0.045644,
-0.135050,
-0.045357,
-0.035101,
-0.026042,
-0.064784,
-0.120300,
0.022175,
0.033135,
0.010056,
-0.033841,
-0.191780,
-0.202150,
-0.259540,
-0.065980,
-0.031165,
-0.251040,
-0.100800,
-0.037108,
0.070080,
0.061409,
-0.020387,
0.081476,
-0.013335,
-0.046590,
-0.106710,
0.056126,
0.105480,
0.074674,
0.095114,
0.130570,
-0.072873,
-0.047826,
-0.073931,
-0.096828,
-0.050329,
-0.097939,
-0.022726,
-0.070751,
0.048450,
0.162020,
0.115140,
0.088985,
-0.050274,
-0.094135,
-0.048810,
0.013716,
-0.000617,
-0.126960,
-0.094097,
0.015720,
-0.000471,
-0.049789,
-0.131290,
0.023591,
0.032575,
0.046377,
-0.077004,
-0.106160,
-0.060173,
-0.217300,
-0.157060,
-0.062620,
0.012160,
0.087553,
0.128200,
-0.066978,
-0.002313,
-0.048569,
0.032912,
0.081342,
-0.030631,
-0.028527,
-0.029556,
0.016243,
0.103820,
-0.014895,
-0.058098,
-0.013540,
-0.070987,
-0.024965,
0.012763,
-0.044425,
0.005312,
0.019724,
0.009984,
0.038663,
0.057106,
0.031821,
0.054787,
0.007287,
0.042140,
-0.013069,
0.010450,
-0.013401,
-0.042419,
-0.026141,
0.010621,
-0.029234,
0.019977,
-0.031976,
-0.017052,
-0.032087,
-0.002371,
0.014800,
-0.036172,
0.046365,
0.016721,
0.018323,
0.044896,
0.009801,
0.052470,
0.025397,
0.129700,
0.016418,
0.072599,
0.065407,
0.101520,
0.109200,
0.039302,
0.078599,
0.031393,
0.067701,
-0.005114,
0.001267,
0.075002,
-0.103770,
-0.039759,
-0.057059,
-0.028848,
-0.009056,
-0.114160,
0.003585,
-0.113770,
-0.077727,
-0.067974,
0.129040,
-0.029224,
-0.070335,
-0.132600,
-0.187040,
0.094530,
0.028708,
-0.157580,
-0.207440,
-0.103850,
-0.120770,
-0.059114,
-0.065475,
-0.125590,
-0.035845,
-0.167290,
0.006694,
-0.057114,
-0.043703,
-0.145500,
0.019669,
0.066514,
0.010102,
0.094982,
0.039824,
-0.112110,
-0.154880,
-0.141820,
-0.072252,
-0.137990,
-0.128900,
-0.161170,
-0.022365,
0.035078,
-0.111180,
-0.101440,
-0.017644,
0.056670,
0.020348,
-0.047734,
0.033931,
0.097006,
0.127090,
0.057751,
0.204420,
0.025649,
0.066397,
0.033919,
0.082213,
0.195650,
-0.006019,
0.025586,
0.036483,
0.049760,
0.049500,
-0.014626,
0.000551,
0.039382,
0.030812,
-0.002447,
0.040070,
0.039245,
-0.008521,
0.012730,
0.038389,
-0.010184,
-0.009122,
-0.006014,
-0.017847,
0.018371,
-0.014287,
0.005410,
0.033644,
-0.030490,
-0.031890,
-0.136920,
0.057522,
-0.011155,
0.116610,
-0.056925,
-0.130030,
0.033590,
0.037906,
0.089291,
-0.017168,
0.047457,
-0.139110,
-0.004178,
0.055437,
0.065015,
0.119800,
0.025994,
0.073807,
0.076988,
0.009277,
0.124880,
0.032038,
-0.086798,
0.094857,
0.206990,
0.085778,
0.148900,
0.075593,
0.023115,
0.102880,
0.051873,
0.003039,
-0.053492,
-0.012106,
0.081435,
-0.003537,
-0.019145,
0.020864,
-0.029703,
-0.013030,
-0.028149,
0.000204,
0.090519,
0.005860,
0.021518,
0.028120,
0.053140,
0.080808,
0.081389,
0.118350,
0.164260,
0.019330,
0.172040,
0.028051,
-0.020363,
0.011913,
0.027290,
0.181840,
0.141180,
0.110120,
0.039958,
-0.062330,
0.065923,
0.150630,
0.000285,
0.111870,
-0.025046,
-0.035582,
0.092128,
0.006223,
-0.069496,
0.015372,
0.044545,
0.015898,
0.046450,
0.059702,
-0.056911,
-0.191970,
-0.105730,
-0.179880,
-0.031143,
0.026057,
-0.017854,
-0.067421,
-0.044262,
0.106810,
0.130610,
0.006449,
-0.018297,
-0.143850,
0.015667,
0.069429,
0.073989,
0.057374,
0.037382,
0.010404,
-0.005196,
0.015879,
0.002785,
0.091039,
-0.131940,
-0.097823,
-0.068667,
0.066044,
-0.169800,
-0.033099,
-0.019712,
-0.134870,
-0.188570,
-0.171830,
0.028848,
0.035519,
-0.074639,
0.039572,
0.041222,
0.164170,
-0.007518,
0.007062,
-0.068225,
0.007708,
0.189190,
0.047499,
0.028980,
0.077530,
0.310230,
0.024237,
0.024167,
0.058008,
0.100130,
0.102910,
-0.004822,
-0.012014,
0.042308,
0.058416,
0.091853,
-0.008819,
0.039695,
0.085937,
0.034837,
-0.003550,
0.044320,
0.069505,
0.085876,
0.047447,
-0.024344,
0.053463,
0.040352,
0.053128,
0.049661,
-0.004186,
-0.124570,
-0.084315,
-0.070532,
-0.096429,
-0.019109,
-0.047436,
-0.000961,
-0.051566,
-0.026949,
-0.016747,
-0.061812,
-0.026932,
-0.044124,
-0.039407,
-0.071355,
-0.028191,
-0.075092,
-0.066107,
0.043303,
-0.083010,
-0.081149,
-0.042112,
-0.074334,
-0.019285,
-0.028743,
0.034149,
0.096162,
0.091597,
0.138830,
-0.023729,
0.048733,
0.099387,
-0.085663,
0.036623,
0.153480,
-0.082394,
-0.129510,
-0.147030,
-0.014154,
0.013494,
-0.088853,
-0.056757,
-0.095093,
-0.009671,
0.011987,
-0.037150,
-0.088198,
0.056777,
0.032224,
0.051182,
-0.381890,
-0.194670,
-0.162890,
-0.139440,
0.026326,
-0.143930,
-0.082537,
0.029835,
-0.000196,
-0.009472,
0.021241,
0.054995,
0.111480,
0.087640,
0.054297,
-0.017644,
0.048639,
0.031404,
0.046191,
-0.044378,
0.084891,
0.031285,
0.005965,
0.024971,
-0.044219,
0.031388,
0.008132,
0.007529,
0.081295,
0.006396,
-0.016665,
0.008428,
0.005635,
0.049424,
0.006051,
0.033429,
0.050320,
0.025345,
-0.025498,
0.003738,
0.029428,
0.078617,
0.031928,
0.022009,
0.019578,
0.041623,
0.023825,
0.024717,
-0.029539,
-0.000802,
0.037724,
0.026465,
-0.032809,
-0.121460,
-0.332660,
0.097012,
0.075530,
-0.024223,
0.027926,
-0.067775,
0.121940,
0.150020,
0.053111,
0.056712,
-0.080450,
0.243610,
0.297340,
0.048198,
0.090226,
0.058862,
-0.002241,
0.009869,
-0.012313,
0.035183,
0.046767,
-0.022974,
-0.030062,
-0.017708,
-0.041759,
-0.017906,
-0.009154,
0.012868,
-0.019342,
0.001652,
0.025557,
0.010705,
-0.010353,
-0.002771,
-0.014723,
-0.030497,
-0.019002,
0.020878,
-0.000628,
0.020950,
-0.026502,
-0.001332,
-0.024844,
-0.015579,
0.000016,
0.024716,
-0.040495,
0.027310,
0.017425,
0.020664,
-0.007617,
0.021581,
-0.023969,
-0.036311,
0.009841,
0.023549,
-0.010795,
0.025922,
0.006964,
-0.007394,
-0.031289,
-0.033549,
-0.023430,
0.018761,
0.013325,
0.012934,
-0.011937,
-0.036102,
0.021839,
0.028338,
0.010020,
-0.037679,
-0.027904,
-0.030690,
-0.025913,
0.011232,
-0.022809,
-0.004753,
-0.004410,
-0.013464,
-0.027953,
0.014671,
-0.016158,
-0.037192,
0.016799,
-0.024393,
-0.011418,
-0.014060,
0.010716,
-0.022368,
-0.020161,
-0.028177,
0.028674,
0.010993,
0.007373,
-0.027069,
0.020086,
-0.005892,
-0.006512,
-0.027830,
-0.037118,
-0.003872,
-0.007813,
0.029003,
-0.002728,
0.000949,
-0.000325,
-0.013611,
-0.009420,
-0.038718,
-0.015142,
0.003906,
0.006054,
-0.024440,
-0.001235,
0.022923,
-0.031000,
0.013811,
-0.006308,
-0.023866,
0.006890,
0.020189,
0.014163,
0.029521,
0.043024,
0.009414,
0.013560,
0.011654,
-0.029588,
-0.016603,
0.021598,
0.000339,
0.013579,
0.003170,
0.037477,
0.009395,
0.002401,
-0.032869,
-0.011065,
-0.041755,
-0.020278,
0.017389,
-0.020433,
0.021030,
0.013327,
-0.017087,
0.017424,
-0.000690,
0.011378,
0.015535,
-0.017249,
-0.024058,
-0.006059,
-0.014046,
0.006337,
0.010072,
-0.038449,
0.015583,
-0.011855,
0.014545,
0.014407,
0.026662,
-0.006450,
-0.027487,
-0.032866,
0.022827,
-0.005786,
-0.011136,
-0.004900,
0.023142,
0.010031,
-0.007557,
-0.017748,
-0.023263,
0.007411,
-0.035667,
0.003257,
-0.012181,
-0.001919,
-0.009345,
0.011650,
-0.017960,
0.028423,
-0.029903,
-0.038864,
-0.037342,
-0.034491,
-0.043723,
-0.032891,
-0.041897,
0.012212,
0.020989,
-0.038560,
-0.000210,
-0.041389,
0.013999,
0.006529,
0.019578,
0.010527,
-0.018407,
-0.005381,
0.003806,
0.011446,
0.019456,
-0.014473,
-0.033649,
0.021768,
-0.002843,
-0.026684,
-0.014325,
0.019851,
0.010393,
-0.023716,
-0.021003,
-0.023797,
-0.025713,
0.019435,
-0.028606,
0.004708,
-0.038252,
-0.020569,
0.001888,
-0.030748,
-0.034569,
-0.001224,
-0.006512,
-0.016588,
0.023257,
-0.040397,
0.003705,
-0.009774,
-0.014235,
-0.038879,
0.005468,
-0.024487,
0.028414,
0.016163,
-0.036684,
-0.008642,
0.007330,
0.000982,
0.018989,
0.022433,
-0.036649,
0.013302,
0.020824,
0.002240,
0.022338,
-0.025498,
0.028309,
-0.028540,
0.020583,
-0.019887,
0.023104,
-0.021898,
0.027611,
0.000829,
0.018269,
-0.028099,
-0.034032,
-0.033424,
-0.006623,
-0.040388,
-0.029329,
0.002693,
-0.020490,
0.001058,
0.000546,
-0.004294,
-0.022987,
0.001265,
-0.024878,
-0.000697,
-0.012894,
0.014898,
0.023473,
-0.030522,
-0.040196,
-0.021237,
0.019194,
-0.042781,
0.024509,
-0.031658,
0.005373,
0.005793,
-0.022157,
0.012857,
0.009031,
0.023994,
-0.016551,
0.017290,
-0.040163,
0.003359,
-0.011689,
0.010245,
-0.020859,
0.012389,
0.018242,
-0.015833,
0.018649,
-0.030646,
0.017728,
-0.009722,
0.025348,
-0.031107,
-0.036334,
-0.026902,
-0.006993,
-0.017306,
-0.008823,
-0.011954,
0.004257,
-0.035922,
-0.028310,
0.016291,
0.000826,
0.000964,
-0.019145,
-0.004127,
0.005236,
0.006970,
-0.014909,
-0.007946,
-0.013928,
-0.022628,
-0.017821,
-0.004085,
0.024735,
0.017006,
0.021862,
0.023841,
-0.033200,
-0.028918,
-0.024068,
-0.011609,
0.006633,
-0.022914,
0.024046,
0.021541,
0.006401,
0.027487,
0.002755,
0.022492,
0.015067,
-0.016694,
0.034142,
-0.002322,
-0.008620,
-0.023905,
-0.000323,
0.008396,
-0.032056,
-0.027971,
-0.039589,
-0.012083,
-0.002320,
-0.002811,
-0.007341,
-0.022202,
-0.009136,
0.004977,
-0.033256,
0.028503,
-0.019327,
0.017197,
-0.016732,
0.026574,
-0.018292,
-0.010659,
0.008482,
0.021215,
-0.014838,
-0.012446,
0.025440,
-0.013499,
0.009056,
-0.021578,
-0.005911,
-0.005692,
0.007916,
-0.022510,
0.020537,
0.014492,
-0.015881,
0.023021,
-0.015401,
-0.040784,
-0.026717,
0.024119,
-0.004265,
0.027475,
0.007934,
-0.043093,
-0.025519,
0.003769,
0.016097,
-0.024673,
0.005322,
0.005666,
-0.036564,
-0.001971,
0.002218,
0.018352,
-0.025167,
0.021239,
-0.020661,
-0.021490,
-0.016483,
-0.029204,
-0.027203,
-0.020793,
-0.002569,
-0.026798,
0.013743,
-0.032553,
0.004631,
-0.023147,
0.004511,
-0.037774,
-0.036823,
-0.021883,
-0.040486,
-0.021899,
-0.007283,
-0.025712,
0.012058,
-0.029252,
-0.025536,
-0.006681,
-0.019919,
0.024099,
-0.021973,
-0.007849,
0.002109,
-0.028971,
0.026291,
0.013801,
-0.027746,
0.010169,
-0.023562,
0.020623,
-0.001006,
-0.019532,
-0.020520,
-0.029062,
-0.031864,
-0.004145,
-0.025579,
-0.010139,
-0.011792,
-0.021405,
0.001125,
-0.019131,
-0.001633,
0.010392,
-0.024469,
0.005385,
-0.022209,
0.002440,
0.012566,
-0.003600,
0.023189,
0.014101,
-0.002864,
0.008924,
0.010746,
-0.003055,
-0.014834,
0.014691,
0.006845,
-0.014816,
0.014633,
-0.011371,
-0.031932,
0.014329,
0.020541,
-0.025594,
0.006015,
0.030634,
-0.036487,
-0.011876,
-0.002659,
0.018539,
0.018192,
-0.002206,
0.022733,
-0.014647,
-0.008237,
-0.034617,
-0.002021,
0.003622,
0.000348,
0.021132,
0.000886,
0.007252,
-0.012395,
0.027378,
0.005875,
0.017945,
-0.027121,
-0.018557,
-0.007761,
-0.017788,
0.008207,
-0.032213,
-0.039920,
0.025497,
-0.040436,
-0.030921,
-0.034748,
0.013869,
-0.025534,
0.026869,
-0.030500,
-0.029330,
-0.002584,
-0.018381,
-0.028191,
0.025218,
0.019143,
-0.022213,
0.032301,
-0.020985,
0.007295,
0.031658,
0.022412,
0.008672,
0.006289,
-0.039322,
-0.018188,
-0.034685,
-0.001128,
-0.020475,
0.025103,
-0.010902,
-0.000311,
-0.036445,
-0.010870,
-0.011090,
0.000919,
-0.024684,
-0.022351,
-0.027626,
0.015761,
0.033172,
-0.028679,
0.013753,
-0.001280,
0.004222,
-0.005733,
-0.009157,
0.009153,
0.016781,
-0.001186,
-0.013836,
0.020355,
0.020408,
0.014736,
-0.025488,
0.021749,
0.008946,
-0.003614,
0.000150,
-0.018502,
-0.001904,
0.000444,
0.012628,
0.010550,
0.013101,
0.000833,
-0.010425,
0.026347,
-0.029571,
0.022223,
0.018830,
-0.041650,
-0.021193,
-0.020009,
-0.028031,
-0.040557,
0.010348,
-0.032161,
-0.007167,
0.009685,
-0.014787,
0.016232,
0.022570,
0.003964,
-0.019941,
-0.017445,
-0.012601,
-0.031156,
0.023238,
-0.018452,
-0.033380,
-0.037932,
0.017291,
0.026097,
-0.011903,
-0.003290,
-0.033616,
-0.034689,
0.011071,
-0.019739,
0.009214,
-0.028993,
-0.010572,
-0.034152,
0.027245,
-0.031649,
-0.042169,
-0.009867,
-0.030657,
-0.029520,
-0.015743,
-0.020913,
0.005062,
-0.006488,
0.000440,
-0.017392,
0.019111,
-0.020207,
0.014758,
0.015257,
-0.023298,
-0.013432,
-0.023121,
0.000595,
-0.000231,
-0.021232,
-0.029291,
-0.029839,
-0.020545,
-0.023576,
0.016892,
-0.039045,
0.009340,
-0.019554,
-0.025856,
0.022219,
0.025495,
-0.014364,
-0.029259,
-0.000044,
-0.003839,
-0.036288,
0.004520,
0.016159,
-0.037390,
0.023624,
-0.009435,
-0.014518,
-0.021789,
-0.016299,
0.017213,
-0.012106,
0.000760,
-0.039258,
0.003448,
-0.010015,
-0.002725,
0.014374,
-0.033393,
-0.003486,
0.021015,
0.018550,
0.021156,
-0.031198,
-0.010449,
0.009819,
-0.007793,
0.021557,
0.009088,
-0.023906,
0.013589,
-0.000944,
0.030004,
-0.040438,
0.001354,
0.022935,
0.023660,
-0.004630,
0.000217,
-0.034533,
-0.023766,
-0.010795,
-0.019043,
0.027106,
-0.031542,
-0.022720,
0.002097,
0.017669,
0.023938,
-0.000887,
0.007907,
-0.042666,
0.009372,
0.029606,
0.026299,
-0.029775,
0.004050,
0.017889,
-0.009344,
-0.014998,
0.011816,
-0.033429,
-0.028111,
-0.034909,
-0.009610,
-0.040409,
-0.032006,
-0.025463,
0.027496,
-0.042022,
-0.040398,
-0.038534,
0.025860,
-0.033114,
-0.003840,
-0.022082,
-0.025009,
-0.019358,
0.021509,
0.025385,
0.004291,
-0.042470,
0.023552,
-0.024092,
-0.032076,
-0.004612,
-0.006120,
0.020832,
-0.008477,
-0.039575,
-0.029660,
0.004093,
-0.026920,
-0.034785,
-0.023247,
-0.029766,
0.010567,
0.009179,
0.011944,
0.017305,
-0.008303,
-0.016395,
0.012397,
-0.000265,
-0.036901,
-0.025797,
-0.001308,
-0.005782,
0.009571,
-0.011558,
-0.004024,
-0.015065,
0.009057,
-0.015637,
0.006038,
-0.002059,
-0.016052,
0.026183,
0.024084,
-0.006964,
0.023131,
-0.028718,
0.015732,
0.005293,
-0.003970,
-0.029283,
-0.016546,
0.011155,
-0.006274,
-0.037069,
-0.016684,
-0.022559,
0.002104,
-0.039108,
-0.010903,
0.009373,
0.019420,
0.013144,
0.001840,
-0.029952,
0.002224,
-0.029289,
0.008005,
0.014863,
-0.040764,
0.018818,
0.019261,
-0.033235,
-0.026411,
0.019215,
0.024015,
0.003393,
0.009102,
-0.023415,
-0.011683,
0.010407,
0.005421,
-0.021973,
-0.026076,
-0.032368,
-0.013637,
-0.028815,
-0.005872,
-0.009791,
0.010334,
-0.041396,
0.021785,
0.015054,
-0.012247,
-0.033004,
-0.009788,
-0.003879,
0.022827,
-0.036787,
-0.017175,
-0.007379,
-0.032070,
-0.036413,
-0.012492,
-0.002190,
0.018587,
-0.019665,
0.012953,
-0.010452,
-0.034157,
0.016911,
-0.001600,
0.007339,
-0.036560,
0.012665,
-0.036077,
-0.017657,
0.005284,
-0.022713,
-0.029604,
0.019870,
-0.040356,
0.016606,
0.030061,
-0.009703,
-0.028855,
0.001230,
-0.032027,
0.000266,
0.017426,
-0.037161,
-0.033163,
0.009090,
0.016913,
-0.036331,
0.002657,
0.008292,
0.003475,
-0.017880,
-0.010792,
-0.016196,
-0.010780,
0.010121,
0.010125,
-0.020763,
-0.028110,
0.027624,
0.000648,
-0.017728,
-0.015224,
-0.024331,
0.024827,
-0.022089,
-0.043474,
-0.025418,
-0.013659,
-0.027951,
0.006130,
-0.000320,
-0.017419,
0.013587,
0.029615,
0.007915,
-0.037714,
0.010092,
0.020253,
-0.015823,
-0.030823,
0.020785,
-0.012763,
-0.030127,
-0.022595,
0.012870,
-0.033538,
-0.025982,
-0.012869,
-0.004475,
-0.007101,
-0.028261,
0.024666,
0.015219,
-0.019229,
-0.001902,
-0.031927,
-0.014675,
0.001592,
-0.016188,
-0.022345,
0.019811,
-0.005998,
0.009101,
-0.036144,
-0.025275,
0.001811,
-0.031124,
0.014394,
-0.003856,
-0.018860,
-0.021208,
-0.030962,
0.004668,
-0.011086,
-0.007376,
-0.002090,
0.006096,
0.007937,
0.002378,
0.011494,
-0.000010,
-0.039636,
0.017786,
0.005373,
-0.034966,
-0.008754,
-0.026066,
0.005482,
-0.012429,
0.020660,
-0.014658,
-0.001735,
-0.019450,
-0.027289,
-0.004112,
-0.016321,
-0.027506,
-0.010924,
0.002441,
0.011599,
0.028090,
0.024074,
0.025616,
0.000315,
0.019368,
-0.028678,
-0.036646,
-0.001396,
0.023866,
-0.022819,
0.021162,
-0.031400,
-0.035767,
0.007411,
-0.016821,
0.016908,
-0.022080,
0.022731,
-0.022941,
-0.011962,
-0.006490,
0.005828,
-0.027407,
-0.009929,
0.020135,
-0.019860,
0.004399,
-0.024810,
0.017801,
-0.014401,
-0.000033,
0.005758,
-0.038792,
-0.000375,
0.021412,
-0.016343,
0.010869,
-0.039663,
0.022582,
-0.023466,
-0.032848,
-0.041641,
0.008919,
0.011496,
0.004156,
-0.001114,
-0.006082,
-0.026509,
-0.015855,
-0.026671,
0.014777,
0.007657,
-0.027835,
0.001390,
-0.026044,
0.001204,
0.005651,
-0.027871,
-0.019988,
0.013011,
0.012816,
-0.019594,
-0.039121,
0.006708,
-0.020565,
-0.016141,
-0.027288,
-0.013660,
0.012141,
-0.033930,
-0.039850,
-0.013348,
-0.012301,
0.022750,
-0.018261,
-0.003143,
0.013761,
0.014979,
-0.005246,
0.007556,
-0.005414,
0.019028,
-0.015122,
-0.019466,
0.023095,
-0.043277,
-0.002892,
-0.055203,
-0.013830,
0.006985,
0.010967,
-0.023530,
-0.025299,
-0.049856,
-0.032229,
-0.016570,
0.026827,
-0.026266,
-0.008386,
0.029681,
0.017251,
-0.008107,
-0.034111,
-0.039472,
0.028346,
0.031187,
-0.025124,
0.005247,
-0.012719,
-0.014550,
-0.028415,
-0.020282,
0.002173,
-0.021077,
0.008673,
-0.002875,
-0.033328,
0.011607,
-0.006577,
0.011030,
-0.025793,
0.008164,
-0.057576,
-0.018614,
-0.026318,
0.026513,
0.024850,
0.022411,
-0.018782,
-0.014323,
-0.005235,
-0.018289,
0.002619,
-0.028176,
0.022291,
0.020991,
-0.017116,
-0.025768,
-0.007094,
-0.019841,
0.023248,
0.007342,
-0.006109,
-0.014570,
0.005190,
0.013893,
0.004065,
0.004162,
0.001055,
0.023802,
0.019515,
0.000728,
0.002469,
-0.033797,
0.024974,
0.016931,
-0.041234,
-0.010463,
-0.026380,
-0.023727,
0.018309,
-0.022207,
0.019429,
0.003136,
-0.000331,
-0.025884,
-0.034524,
-0.025929,
-0.039365,
-0.032811,
-0.009826,
-0.011676,
-0.020420,
-0.035883,
-0.043596,
-0.008162,
-0.012437,
-0.014913,
-0.020026,
0.000214,
-0.015411,
0.002458,
-0.038264,
-0.035537,
-0.024696,
-0.003298,
-0.049305,
-0.002876,
0.005549,
-0.033662,
-0.015959,
-0.031677,
0.011779,
-0.044283,
-0.003114,
0.007139,
-0.012620,
0.024722,
0.023992,
-0.005143,
0.004662,
0.004310,
-0.023906,
-0.026432,
0.015271,
0.020280,
0.019328,
-0.036194,
-0.014832,
-0.016653,
-0.013103,
0.007709,
-0.032845,
0.011140,
0.027445,
0.004511,
-0.005804,
-0.017140,
0.025501,
-0.037679,
-0.036490,
0.026095,
-0.016960,
-0.003091,
-0.008400,
0.003031,
-0.020845,
0.000021,
-0.031739,
-0.025424,
0.013089,
0.015344,
-0.001510,
-0.023736,
-0.031893,
-0.022763,
-0.008186,
0.012144,
-0.014345,
0.014476,
-0.008847,
0.018762,
-0.014036,
-0.008136,
-0.000758,
-0.007274,
-0.007354,
-0.012658,
0.008060,
-0.018901,
0.016303,
-0.031678,
0.027055,
0.002856,
-0.020578,
0.012481,
0.014512,
-0.044603,
-0.000003,
-0.005737,
0.007023,
-0.027790,
-0.047151,
-0.014951,
0.016328,
-0.013855,
0.010675,
-0.052581,
0.005090,
0.020623,
-0.019027,
0.008302,
0.018303,
-0.051059,
0.013756,
0.021818,
-0.027157,
-0.012255,
-0.036100,
-0.022591,
0.019448,
0.010773,
-0.003228,
-0.020435,
-0.003749,
-0.004025,
-0.018875,
0.001905,
-0.022083,
-0.000623,
-0.001523,
0.024423,
-0.026517,
-0.006444,
-0.040771,
-0.030538,
-0.021734,
-0.029272,
0.020749,
0.018191,
-0.040076,
-0.019630,
0.019364,
-0.004089,
-0.044400,
-0.014061,
-0.020976,
-0.039477,
0.018269,
0.008231,
-0.009144,
0.000078,
0.001803,
-0.022381,
-0.003092,
-0.000210,
-0.036138,
-0.034386,
0.026447,
-0.036848,
-0.021262,
-0.025145,
-0.000171,
0.007258,
-0.048259,
-0.032167,
-0.015270,
0.012562,
0.002197,
0.012849,
-0.044428,
-0.001303,
-0.023009,
0.007439,
-0.022345,
-0.030088,
-0.014851,
-0.014847,
-0.001734,
-0.002792,
-0.009714,
-0.027105,
-0.001980,
-0.014146,
-0.039439,
-0.007172,
0.002886,
-0.022507,
-0.000161,
0.011745,
-0.019417,
-0.009256,
0.009869,
-0.026634,
0.019003,
0.006325,
-0.014306,
0.013849,
0.028327,
0.006857,
-0.004687,
-0.036409,
0.022545,
0.027338,
-0.012328,
-0.005503,
-0.001127,
-0.027289,
-0.032678,
0.018869,
0.009722,
-0.007004,
-0.032251,
-0.033343,
0.034315,
-0.010351,
0.010053,
0.010731,
-0.023895,
-0.017209,
0.009204,
-0.030224,
-0.011156,
-0.038523,
-0.006082,
0.000061,
0.008309,
0.026734,
0.012219,
0.021962,
0.006023,
-0.027499,
-0.006793,
-0.020774,
0.011921,
0.026932,
0.006930,
0.020096,
-0.014215,
0.025395,
-0.035151,
-0.035514,
-0.013769,
0.006837,
0.022317,
0.009028,
0.021899,
-0.035842,
-0.004928,
-0.013932,
0.002923,
0.024978,
-0.019767,
-0.039682,
0.006621,
0.020750,
0.008577,
-0.023366,
0.015354,
-0.038719,
0.027084,
-0.014083,
-0.028854,
-0.019568,
-0.031038,
-0.039524,
-0.005275,
-0.019841,
-0.002619,
0.028402,
0.003245,
0.015385,
0.011976,
-0.020126,
0.015946,
0.016515,
0.021387,
-0.006785,
0.010999,
0.003576,
0.024051,
0.021723,
-0.001904,
0.010124,
0.024866,
0.004828,
-0.009986,
-0.018779,
-0.023271,
0.011562,
-0.011878,
-0.046339,
0.003594,
0.015642,
-0.004157,
-0.015717,
-0.021987,
0.004454,
-0.030673,
-0.006512,
-0.026748,
-0.023871,
0.023034,
0.009667,
0.007502,
-0.026032,
-0.011981,
0.015422,
-0.012776,
0.000295,
-0.031431,
-0.039124,
0.010484,
-0.045706,
-0.005406,
-0.012431,
0.011370,
0.019764,
-0.007685,
-0.003610,
0.020385,
0.011397,
-0.036526,
0.024851,
0.017766,
-0.001722,
-0.004481,
0.009150,
-0.004701,
0.012050,
0.025567,
-0.020688,
-0.041179,
-0.036466,
0.022813,
-0.007446,
-0.031783,
0.000936,
-0.003358,
0.023452,
-0.020800,
-0.008051,
0.023945,
0.003348,
-0.012603,
-0.021927,
-0.003372,
-0.015670,
0.015019,
-0.008603,
-0.013834,
-0.028164,
0.002500,
0.023302,
0.010439,
-0.036582,
-0.037152,
0.008614,
-0.019016,
0.025116,
0.006655,
0.008093,
-0.021337,
-0.039749,
-0.008504,
0.010748,
-0.015943,
-0.026373,
-0.040967,
-0.000081,
0.006949,
0.012896,
0.006253,
-0.008770,
-0.002255,
-0.019939,
0.022366,
0.026982,
-0.041044,
0.016022,
-0.035712,
-0.040915,
-0.008700,
0.023123,
0.015996,
0.005032,
0.022414,
-0.040859,
-0.012457,
-0.001545,
0.011282,
-0.010604,
-0.000091,
0.011465,
-0.035759,
-0.031303,
-0.023220,
0.010588,
0.011177,
-0.022882,
-0.015298,
-0.008558,
0.011412,
-0.023457,
-0.028025,
-0.026585,
-0.021594,
-0.037441,
-0.002004,
0.002078,
-0.013952,
0.014051,
0.009407,
-0.023321,
0.001341,
0.021286,
0.022323,
-0.039568,
0.011124,
-0.020232,
-0.001709,
-0.040187,
-0.038735,
-0.029970,
-0.012383,
-0.026053,
0.000233,
0.006493,
-0.039012,
-0.031057,
0.016921,
0.015277,
-0.018248,
-0.023119,
-0.038631,
-0.028480,
0.012660,
-0.037597,
0.008897,
-0.034452,
0.013933,
0.011983,
-0.036125,
-0.009123,
-0.010375,
-0.032047,
-0.017767,
-0.009856,
0.015766,
0.011706,
-0.022928,
-0.011828,
0.020764,
-0.021767,
0.006176,
-0.030080,
-0.021035,
0.022722,
0.025244,
0.005694,
0.005156,
-0.007603,
0.012615,
-0.000794,
-0.026279,
-0.027983,
0.027852,
0.021186,
0.014351,
-0.038111,
0.031039,
-0.031563,
0.016966,
-0.021714,
-0.029343,
-0.012130,
-0.040455,
-0.011640,
0.024410,
0.029471,
-0.036667,
-0.024144,
0.013222,
-0.038058,
0.006871,
-0.037211,
0.000187,
0.015244,
0.007715,
-0.030345,
0.000255,
-0.010678,
-0.035117,
-0.016158,
0.022285,
-0.036358,
0.000412,
-0.021357,
-0.021655,
0.010409,
-0.024318,
-0.014301,
0.007805,
-0.034388,
-0.009079,
0.023911,
0.026729,
-0.034658,
-0.002203,
-0.014910,
-0.007237,
0.002007,
-0.010377,
-0.025318,
-0.034704,
0.009100,
-0.006580,
-0.021501,
-0.013271,
0.017877,
-0.003466,
-0.034087,
-0.023722,
-0.033505,
-0.041304,
-0.000245,
-0.008572,
0.012371,
-0.027362,
0.018329,
0.028909,
-0.034630,
-0.011324,
0.018094,
-0.005591,
0.026841,
0.011790,
-0.022749,
0.027324,
0.007627,
0.008956,
-0.039651,
-0.024387,
0.015542,
0.025327,
-0.015107,
0.023316,
0.023898,
-0.019450,
0.023707,
0.003443,
-0.023205,
-0.033780,
0.004974,
0.027862,
-0.031958,
0.016732,
0.016755,
-0.015075,
-0.037427,
-0.005273,
-0.022739,
0.011314,
-0.021495,
0.005102,
0.011233,
-0.001297,
0.018880,
-0.031071,
0.025763,
-0.008461,
-0.003328,
-0.027069,
0.020818,
0.020304,
-0.018446,
0.014935,
-0.018753,
-0.014256,
0.017359,
0.025940,
-0.015885,
0.024475,
0.014570,
-0.020172,
0.024947,
-0.006194,
0.006220,
-0.026604,
0.027399,
0.005391,
-0.013812,
0.010038,
-0.000375,
0.024763,
0.023283,
-0.037475,
-0.032558,
-0.030484,
0.027938,
-0.033168,
-0.021757,
-0.023784,
-0.039849,
-0.004476,
0.004223,
-0.024257,
-0.002018,
-0.018158,
0.028378,
-0.006221,
-0.029200,
-0.031144,
-0.035212,
0.006176,
-0.042756,
0.001070,
0.015599,
-0.011995,
-0.011602,
0.020114,
-0.034560,
-0.016538,
-0.000610,
0.002940,
-0.031572,
-0.022403,
-0.029727,
-0.012038,
-0.010633,
-0.012415,
0.013241,
-0.035592,
-0.011446,
-0.010409,
0.000391,
-0.036409,
-0.004746,
-0.032614,
-0.033481,
0.009586,
-0.057209,
0.012983,
0.012588,
-0.001223,
0.019045,
-0.019786,
0.002584,
-0.001204,
0.020616,
-0.008528,
0.012869,
-0.026245,
0.025255,
-0.041083,
0.020866,
0.032304,
-0.013760,
-0.000171,
0.004643,
-0.007285,
-0.014634,
-0.020397,
-0.007133,
0.026246,
-0.004813,
-0.032162,
-0.030132,
0.012446,
0.015046,
-0.032758,
0.015528,
-0.046181,
-0.021229,
-0.032504,
-0.007034,
0.011952,
-0.032755,
0.010297,
0.020805,
0.012157,
-0.016079,
-0.028955,
0.002197,
0.020963,
-0.018793,
-0.027515,
0.022100,
-0.035927,
-0.042694,
-0.031765,
0.002712,
0.008285,
-0.027410,
0.001972,
0.022699,
-0.005060,
-0.019706,
-0.000222,
-0.031134,
-0.039088,
-0.011932,
-0.019812,
-0.029619,
0.011162,
-0.008730,
-0.025163,
-0.034322,
-0.013188,
-0.029954,
-0.004465,
-0.044003,
-0.012270,
0.027691,
0.025789,
-0.027778,
-0.035345,
-0.004501,
0.007474,
0.006397,
-0.017148,
0.002648,
-0.036700,
-0.036846,
-0.045924,
0.015658,
-0.021845,
-0.022651,
-0.035784,
-0.042609,
-0.006844,
-0.006924,
-0.043924,
-0.026835,
0.018707,
0.019981,
-0.023637,
-0.025686,
0.003120,
-0.022447,
-0.049516,
0.011648,
0.018001,
-0.048010,
-0.031536,
0.014157,
-0.030000,
-0.038667,
0.006352,
0.000725,
-0.000045,
0.010125,
-0.033653,
-0.003615,
-0.043765,
-0.020685,
-0.010515,
-0.023930,
-0.015031,
-0.026289,
0.021328,
-0.028621,
-0.000004,
0.014105,
0.006430,
0.018014,
-0.044514,
-0.046799,
0.008541,
-0.007841,
-0.028628,
-0.045249,
0.014493,
0.000950,
0.008990,
-0.041313,
-0.006478,
-0.044828,
-0.012311,
-0.041654,
-0.038697,
-0.016612,
0.011210,
-0.034164,
-0.023206,
0.006826,
-0.033032,
-0.005771,
0.022411,
0.007154,
-0.021856,
0.024225,
-0.009706,
-0.005924,
0.026134,
-0.024181,
-0.000018,
-0.015459,
-0.022301,
0.025301,
0.027907,
-0.003247,
-0.016935,
-0.003688,
-0.034204,
0.017196,
-0.029770,
0.005014,
-0.027838,
-0.006508,
0.031178,
-0.023647,
0.015437,
0.016138,
-0.035290,
0.023510,
-0.021879,
0.016022,
-0.013976,
-0.012947,
0.028939,
-0.017403,
-0.004371,
-0.005192,
0.003449,
-0.032172,
-0.011998,
-0.000510,
0.008287,
-0.006623,
0.024044,
0.022467,
0.005126,
0.037786,
0.014118,
0.026329,
0.013231,
0.025838,
0.001624,
-0.011080,
-0.047878,
-0.022982,
-0.041662,
0.010957,
-0.013575,
0.001616,
0.009840,
-0.047611,
0.017605,
0.020104,
-0.008602,
-0.029767,
0.020587,
0.014645,
0.014741,
-0.042173,
-0.034547,
-0.000224,
-0.017572,
-0.006884,
0.018722,
-0.040628,
-0.026337,
-0.034886,
-0.017823,
0.013586,
-0.027111,
0.029791,
-0.039402,
0.015444,
0.017111,
0.020715,
-0.031468,
-0.010449,
-0.025915,
-0.016103,
-0.003878,
-0.013477,
-0.033458,
-0.019688,
0.020878,
0.001799,
0.019823,
0.025276,
-0.032556,
-0.014787,
-0.013996,
-0.009882,
-0.023766,
-0.008407,
-0.015459,
-0.024791,
0.022940,
-0.025006,
-0.021843,
-0.020343,
-0.027413,
-0.006591,
-0.001155,
0.007755,
0.008440,
0.011240,
-0.020177,
0.015602,
-0.043794,
-0.020586,
0.004465,
-0.000064,
0.022743,
-0.019566,
-0.047177,
-0.009874,
0.008853,
-0.018356,
-0.033455,
0.019639,
-0.027979,
0.028330,
-0.026055,
0.014291,
-0.034113,
-0.014693,
-0.005934,
-0.005587,
-0.010022,
0.014950,
0.015664,
0.006797,
0.009159,
-0.030574,
-0.031279,
0.015819,
-0.038146,
0.005240,
0.003705,
-0.010532,
-0.032071,
-0.000970,
-0.011898,
0.000654,
0.008499,
-0.033345,
-0.035104,
-0.025457,
0.019105,
-0.028439,
0.015521,
0.000306,
0.024259,
0.008391,
0.016621,
0.014750,
-0.027064,
-0.037419,
-0.039150,
0.011354,
-0.026273,
0.006139,
-0.038654,
-0.010951,
-0.009935,
0.017149,
-0.023032,
0.001438,
-0.016915,
-0.003159,
0.027827,
-0.014934,
-0.001008,
-0.030232,
-0.033840,
-0.028603,
0.019764,
-0.011781,
-0.009023,
-0.045652,
-0.031668,
-0.005872,
0.005529,
-0.018833,
0.003168,
-0.009092,
-0.002677,
-0.022863,
0.014939,
-0.017040,
0.003870,
0.008466,
-0.016408,
0.008757,
-0.007633,
-0.026969,
-0.001915,
0.008859,
-0.043241,
-0.040643,
-0.026085,
-0.046837,
-0.047897,
-0.025645,
-0.016106,
0.022087,
-0.004829,
0.015811,
-0.005377,
-0.033581,
0.006229,
0.017368,
-0.024980,
-0.028187,
-0.043938,
0.010068,
-0.021981,
0.027275,
-0.025596,
-0.035317,
0.006480,
-0.040485,
0.014492,
0.033851,
-0.012893,
0.023751,
-0.012491,
-0.037242,
-0.034654,
0.022811,
-0.009470,
0.027730,
0.006701,
-0.030880,
-0.010723,
-0.015910,
0.018889,
-0.035608,
-0.024031,
-0.012203,
-0.010829,
0.015903,
-0.016558,
0.001108,
0.001235,
-0.018921,
0.011375,
0.027477,
0.025853,
-0.034756,
0.001654,
0.019132,
-0.013739,
-0.020784,
0.010927,
-0.011299,
0.012337,
0.012410,
-0.004686,
-0.035405,
-0.039387,
-0.030045,
-0.024948,
0.000193,
0.034470,
0.013570,
-0.006878,
0.030861,
-0.021092,
-0.035244,
-0.024198,
-0.025452,
-0.021358,
-0.040230,
0.008808,
-0.003368,
-0.030553,
-0.020593,
-0.034669,
-0.043121,
0.024631,
0.020194,
-0.015687,
0.005360,
-0.007904,
-0.006784,
-0.027307,
0.020201,
-0.019800,
-0.029022,
0.007832,
0.011035,
-0.010837,
0.006945,
-0.024932,
0.018975,
-0.000563,
-0.018011,
-0.007418,
-0.030692,
0.011947,
-0.012013,
-0.007785,
0.008808,
-0.009692,
-0.014437,
-0.011228,
-0.007748,
-0.016018,
0.002287,
0.014615,
-0.003180,
0.025202,
-0.029319,
0.019721,
-0.025926,
-0.044835,
0.016633,
0.003561,
0.020847,
-0.012591,
0.007547,
-0.047679,
-0.026997,
0.022930,
-0.026634,
0.006470,
-0.029559,
-0.014940,
-0.033400,
-0.010031,
-0.008536,
-0.009224,
-0.027588,
-0.012266,
0.011463,
0.016012,
0.008586,
-0.005343,
-0.036212,
-0.023632,
0.000140,
-0.032135,
-0.050305,
-0.002627,
-0.052512,
0.012835,
0.000004,
-0.011439,
-0.023845,
-0.037218,
0.001062,
0.009209,
-0.045371,
0.004370,
0.000323,
-0.026525,
-0.007207,
-0.046942,
-0.038129,
0.004524,
-0.013257,
-0.001511,
0.008811,
-0.049401,
-0.011156,
0.020909,
-0.032861,
0.013445,
0.000931,
-0.016007,
-0.021959,
0.008398,
0.009217,
-0.011793,
0.007006,
0.010884,
0.018817,
-0.004764,
-0.037069,
0.006775,
-0.039828,
-0.013285,
0.012444,
0.020633,
0.018084,
0.003458,
0.015079,
0.024174,
-0.035909,
-0.040330,
-0.011258,
-0.007259,
0.026202,
0.008560,
-0.007727,
0.023519,
0.014530,
0.016711,
-0.030527,
0.020054,
-0.036317,
-0.004160,
0.017347,
0.010611,
-0.031604,
0.028555,
0.022606,
0.004291,
-0.008200,
0.015932,
-0.032305,
-0.040980,
-0.000805,
0.022265,
-0.019785,
-0.001411,
0.005121,
0.022736,
-0.023140,
0.011497,
-0.026491,
-0.000313,
0.014299,
-0.020308,
-0.015052,
-0.006966,
0.016302,
0.002661,
0.001603,
-0.013632,
0.022969,
-0.013956,
0.020448,
-0.005600,
0.022731,
-0.037904,
0.013291,
-0.016665,
0.016297,
-0.017912,
-0.010845,
-0.015013,
0.007181,
0.022332,
-0.004576,
0.012951,
-0.024324,
-0.003823,
-0.046002,
-0.025840,
0.016464,
-0.026575,
0.017299,
-0.036879,
-0.017774,
0.010498,
0.023950,
-0.026251,
-0.029602,
-0.012107,
-0.027293,
0.003015,
0.014275,
-0.038669,
0.006416,
-0.040423,
-0.018315,
0.025565,
0.025934,
-0.033258,
-0.018144,
-0.035745,
0.000348,
-0.030346,
-0.025446,
-0.040663,
-0.005317,
-0.009885,
0.019133,
0.008531,
-0.001410,
0.013418,
0.021633,
-0.036360,
-0.027721,
-0.039292,
0.023738,
-0.023253,
0.006974,
-0.040783,
0.025222,
0.029155,
-0.028396,
-0.030947,
0.019116,
-0.015067,
0.013162,
-0.027310,
-0.011224,
0.019013,
0.010551,
-0.010848,
0.004271,
-0.002316,
-0.019568,
-0.023944,
-0.043175,
0.023695,
0.017095,
-0.006183,
-0.036618,
-0.006959,
0.010201,
-0.040471,
0.003010,
0.028127,
0.010337,
-0.054008,
-0.014350,
-0.006511,
-0.007434,
-0.062287,
-0.032035,
-0.042838,
-0.037995,
0.013813,
-0.017761,
-0.037679,
0.034447,
0.032214,
-0.014251,
0.014748,
-0.031774,
0.018358,
-0.003249,
-0.018431,
-0.037536,
-0.008318,
0.001667,
0.029923,
0.030030,
-0.013939,
0.004551,
0.013650,
-0.030424,
-0.007696,
0.023596,
0.024540,
-0.029073,
0.029224,
0.027525,
0.020450,
0.007140,
0.001596,
0.024625,
-0.000131,
-0.022791,
0.004033,
0.011988,
-0.021549,
-0.001854,
-0.028945,
0.003707,
0.027295,
-0.013900,
-0.002319,
-0.005318,
-0.030443,
-0.069062,
-0.015105,
-0.019848,
0.002985,
-0.039614,
-0.050157,
-0.046080,
-0.019086,
-0.004824,
-0.062017,
-0.010279,
-0.039653,
-0.031630,
0.002782,
-0.013005,
-0.028946,
-0.032510,
-0.035823,
-0.009792,
-0.005819,
-0.020858,
-0.047672,
-0.037424,
0.015490,
0.013396,
-0.011567,
-0.012189,
-0.013588,
-0.026006,
0.032486,
0.021134,
-0.039988,
-0.010897,
0.027575,
-0.010398,
0.016205,
0.010505,
-0.008002,
-0.016179,
0.016730,
0.012468,
-0.020841,
-0.011863,
0.012396,
0.017029,
0.032739,
0.002622,
0.012047,
-0.021272,
-0.031173,
-0.040848,
-0.059159,
-0.027978,
-0.049741,
0.019407,
0.016546,
-0.049139,
-0.002583,
-0.044908,
-0.017959,
-0.002644,
-0.024156,
0.017459,
0.032332,
0.037358,
-0.000573,
-0.003420,
-0.005909,
-0.006703,
0.022855,
0.049891,
0.035304,
0.015130,
-0.007287,
-0.073428,
-0.004728,
-0.032695,
-0.032420,
-0.066628,
-0.018280,
-0.071665,
-0.029146,
-0.043159,
-0.019437,
-0.006982,
-0.005877,
-0.014027,
0.033186,
0.033079,
-0.040115,
-0.015739,
0.051866,
-0.002511,
0.047987,
-0.032255,
0.027635,
0.007645,
0.013784,
-0.041782,
-0.011374,
-0.029042,
-0.006567,
-0.023430,
-0.032495,
-0.022878,
-0.040568,
0.000167,
0.008923,
0.005506,
-0.022948,
-0.024978,
-0.028235,
0.012475,
-0.011772,
0.017335,
-0.005322,
-0.038062,
0.028172,
0.030854,
-0.057502,
0.015517,
-0.012359,
-0.004322,
0.016339,
-0.027552,
-0.051086,
-0.018964,
-0.021992,
-0.054561,
-0.070601,
-0.037082,
-0.042460,
-0.059662,
-0.070499,
0.012331,
-0.009582,
0.020797,
-0.011734,
-0.046322,
0.025026,
0.023905,
0.016752,
0.026858,
-0.003442,
0.056245,
0.060615,
0.057572,
0.054352,
0.046390,
0.003278,
-0.022687,
-0.051582,
-0.027171,
-0.004107,
0.012625,
-0.045131,
-0.009638,
0.003802,
-0.037262,
-0.053944,
-0.025552,
-0.013607,
-0.012599,
-0.031167,
-0.002397,
-0.013067,
0.020991,
-0.023395,
-0.001181,
0.032353,
0.005836,
-0.021841,
-0.037901,
-0.000944,
-0.029458,
-0.044977,
0.013096,
-0.074891,
-0.072507,
-0.020001,
-0.023543,
-0.001665,
-0.027797,
-0.044162,
-0.020824,
-0.022039,
-0.031046,
0.003878,
-0.013046,
-0.068189,
0.004008,
0.029398,
0.027811,
-0.020952,
-0.033696,
-0.030621,
0.026059,
-0.030079,
0.005239,
-0.008881,
-0.036234,
-0.015661,
-0.042612,
0.016139,
0.024897,
-0.026348,
-0.024415,
-0.030152,
0.003276,
0.006958,
-0.052427,
-0.040210,
-0.035782,
-0.022419,
0.025996,
-0.042409,
-0.015534,
-0.026211,
-0.048442,
0.021898,
-0.040225,
-0.028473,
-0.005931,
0.001717,
-0.022799,
-0.035078,
0.026438,
-0.003399,
0.020936,
-0.016555,
0.013635,
0.043862,
0.026625,
-0.015117,
0.000323,
-0.014837,
0.022200,
0.006593,
-0.000454,
-0.010393,
-0.032794,
-0.031179,
-0.034418,
-0.049699,
-0.010704,
-0.007360,
-0.035515,
-0.035696,
-0.050410,
-0.052160,
-0.043947,
0.035969,
-0.022853,
-0.056844,
-0.029459,
-0.003374,
0.019877,
-0.005916,
-0.046176,
-0.061597,
-0.018252,
0.034253,
-0.029587,
-0.001696,
-0.032490,
0.016137,
-0.029214,
-0.060337,
-0.025151,
0.010169,
-0.042557,
0.022339,
-0.018130,
-0.010773,
-0.002858,
0.009139,
-0.061960,
-0.030586,
-0.022438,
-0.038952,
-0.036386,
-0.033270,
-0.025478,
0.004549,
0.004871,
-0.006362,
-0.009441,
0.009071,
-0.033569,
-0.011079,
-0.021458,
0.025319,
-0.033412,
0.006499,
-0.000626,
0.022768,
-0.013305,
0.022768,
0.018209,
-0.021245,
-0.000388,
0.009553,
0.018852,
0.007560,
0.005490,
0.005707,
-0.021618,
-0.023307,
-0.035685,
-0.030971,
0.005379,
-0.004955,
0.013991,
0.011849,
0.017977,
0.017685,
0.025131,
-0.021013,
0.013534,
-0.049911,
0.015413,
0.035133,
0.048931,
-0.007863,
-0.051760,
-0.014122,
-0.048492,
-0.018086,
-0.013702,
-0.027940,
-0.056279,
-0.049897,
-0.045281,
-0.009710,
-0.051263,
-0.020525,
-0.044651,
-0.051981,
-0.013078,
-0.043045,
-0.039670,
-0.016986,
0.005315,
-0.040737,
-0.017057,
-0.052895,
-0.016889,
0.007123,
-0.006065,
-0.039945,
0.021428,
-0.006499,
-0.000306,
0.009351,
-0.027008,
0.007643,
-0.022903,
0.026526,
0.004031,
0.005961,
0.010181,
0.012464,
0.013065,
0.002103,
0.020789,
0.031941,
-0.006205,
0.010589,
0.017852,
-0.036059,
0.013308,
0.004644,
-0.010231,
0.026797,
-0.056403,
-0.037803,
0.009657,
0.022576,
-0.019803,
-0.001803,
-0.025085,
0.013392,
-0.005674,
-0.016518,
0.003620,
-0.031100,
-0.032962,
-0.051131,
-0.056049,
-0.035973,
0.027526,
-0.052897,
-0.042988,
0.004448,
-0.024759,
-0.016576,
-0.061475,
-0.070753,
-0.023203,
-0.002190,
0.019660,
0.016630,
0.024405,
-0.011588,
-0.026730,
0.034992,
-0.022073,
-0.026414,
-0.056960,
-0.031004,
-0.027572,
-0.020406,
-0.043551,
-0.053096,
-0.000094,
-0.000058,
-0.014420,
-0.041721,
-0.066199,
0.002985,
-0.030568,
-0.006076,
-0.022385,
-0.063141,
-0.031372,
-0.059629,
-0.071241,
-0.025079,
-0.060022,
-0.008236,
-0.040281,
-0.019234,
-0.059603,
-0.012000,
-0.000916,
0.004834,
-0.006856,
-0.003328,
0.007355,
0.010401,
-0.022573,
-0.012024,
0.009248,
0.017226,
0.036356,
0.022272,
0.053858,
0.053903,
0.031120,
-0.003776,
-0.017658,
-0.006168,
-0.001471,
-0.018421,
-0.024330,
-0.023742,
-0.013949,
-0.005670,
-0.030587,
-0.002062,
0.003817,
0.001884,
-0.008988,
-0.007955,
-0.030976,
-0.007023,
0.021922,
-0.005116,
0.009008,
0.022286,
-0.004764,
0.009011,
0.013323,
0.005071,
0.023495,
0.020159,
-0.004906,
-0.013684,
0.014913,
-0.036861,
-0.030808,
-0.014643,
-0.019167,
0.014865,
0.031028,
0.054169,
0.035461,
0.028259,
-0.015779,
-0.073101,
-0.041770,
0.001770,
-0.008243,
-0.037346,
-0.037345,
-0.062213,
0.012527,
0.018276,
-0.045331,
-0.026171,
-0.017387,
0.005086,
-0.008033,
-0.005798,
-0.028001,
-0.031118,
0.023142,
0.012374,
-0.013462,
-0.001331,
-0.010139,
0.032505,
0.021431,
-0.031148,
-0.020235,
-0.020395,
0.032784,
0.006114,
-0.001939,
-0.046768,
-0.003849,
0.036064,
-0.005572,
-0.026954,
-0.024560,
0.001304,
-0.044117,
-0.033219,
-0.011512,
-0.003132,
-0.052612,
-0.046428,
-0.028776,
-0.037643,
-0.048650,
-0.033034,
-0.024796,
-0.039294,
-0.073702,
0.032708,
-0.019161,
-0.023578,
0.028300,
-0.005423,
0.023448,
0.004053,
-0.020349,
0.000162,
0.009590,
-0.057967,
-0.030871,
-0.020273,
-0.034735,
-0.052152,
0.004514,
-0.044830,
0.031885,
0.007761,
0.026173,
-0.039093,
0.016688,
-0.003719,
0.009819,
-0.019569,
0.009247,
-0.008727,
0.014992,
0.009571,
0.005100,
-0.044169,
-0.043902,
-0.009398,
-0.028130,
0.004800,
-0.026592,
-0.030318,
-0.051056,
-0.012835,
0.025097,
-0.012239,
0.027737,
-0.011622,
-0.047780,
-0.019124,
0.051862,
-0.005885,
-0.013613,
0.006303,
0.025992,
0.009106,
-0.036107,
-0.041385,
-0.008153,
-0.037550,
-0.052264,
0.001307,
-0.017729,
-0.018158,
-0.002965,
-0.046175,
-0.016949,
-0.089190,
-0.023095,
-0.039426,
-0.036469,
-0.069220,
-0.051935,
-0.023827,
-0.063322,
0.003327,
-0.032628,
-0.061269,
-0.075736,
-0.022522,
0.025917,
-0.075462,
0.001220,
-0.006935,
-0.003955,
0.005833,
-0.041668,
-0.035950,
-0.026315,
0.018241,
-0.009878,
-0.008887,
-0.016084,
-0.024941,
-0.019583,
-0.017591,
0.015891,
-0.023244,
0.003419,
0.018848,
-0.035717,
0.031557,
0.022916,
-0.035721,
-0.022463,
0.000708,
-0.021802,
-0.028977,
-0.028554,
0.003756,
0.025853,
-0.018315,
-0.025052,
-0.009681,
-0.001379,
-0.010527,
-0.041236,
-0.055275,
-0.059773,
-0.043062,
-0.000756,
0.010164,
0.020077,
-0.008272,
0.018238,
-0.007741,
0.035082,
-0.000229,
-0.017625,
0.014121,
0.012341,
-0.007335,
-0.042316,
-0.010494,
-0.018807,
0.021903,
0.011386,
0.000564,
-0.041504,
-0.032283,
-0.038814,
-0.062062,
-0.029584,
-0.013301,
-0.040501,
-0.015600,
-0.038038,
-0.029891,
-0.002797,
-0.026273,
-0.015029,
-0.042488,
-0.019857,
-0.060511,
-0.015692,
-0.043325,
0.000670,
0.005241,
0.025794,
0.022325,
-0.035231,
-0.021520,
0.022497,
-0.023238,
-0.014303,
-0.033002,
0.000610,
0.000457,
-0.021148,
-0.012294,
0.024918,
-0.006530,
0.004077,
-0.016413,
-0.018696,
-0.009772,
0.027316,
0.000779,
0.026922,
0.012501,
0.025199,
-0.020052,
-0.030490,
-0.037273,
0.014372,
0.013324,
-0.021319,
-0.025343,
0.011602,
0.026964,
-0.048147,
-0.054539,
-0.020663,
-0.026891,
-0.061266,
-0.044310,
-0.030641,
-0.022444,
-0.039676,
-0.046439,
0.018075,
0.006039,
0.042481,
0.046099,
-0.017804,
0.003246,
-0.012783,
-0.000670,
-0.004978,
-0.038289,
0.004483,
-0.011920,
-0.022804,
-0.028374,
0.012325,
0.134080,
0.032543,
-0.005231,
-0.112490,
-0.067651,
0.076781,
0.063698,
-0.016588,
-0.053799,
-0.029544,
-0.014431,
0.008516,
0.049083,
-0.119900,
-0.142840,
-0.208250,
-0.109880,
-0.028831,
-0.135860,
-0.133380,
-0.304660,
-0.281370,
0.046938,
-0.084570,
-0.254530,
0.003147,
-0.004812,
-0.010436,
-0.007951,
0.015824,
0.020967,
0.042837,
-0.010990,
0.022683,
-0.022843,
0.001788,
0.004625,
0.012179,
0.037986,
0.005249,
-0.020322,
-0.020166,
-0.020703,
0.033958,
-0.039034,
0.000240,
0.034321,
0.035504,
-0.021113,
-0.016698,
-0.008082,
0.006798,
0.001147,
0.053424,
-0.101630,
0.054488,
-0.019274,
-0.025611,
0.012950,
-0.220720,
-0.043038,
-0.035189,
0.009491,
0.002171,
-0.067065,
0.060474,
-0.045489,
-0.029372,
0.145880,
0.124900,
0.188090,
0.151850,
0.069500,
0.178910,
0.263160,
-0.039996,
0.047355,
0.043592,
-0.045272,
-0.007466,
-0.030107,
0.029906,
0.002301,
-0.014573,
0.018664,
0.022952,
0.011762,
0.012853,
0.012695,
0.027724,
0.061040,
0.018977,
-0.040755,
-0.013993,
-0.062518,
-0.004755,
-0.035675,
-0.036648,
-0.008057,
-0.016611,
0.063501,
0.056974,
0.098270,
0.094352,
0.095957,
0.057590,
-0.022720,
-0.097586,
-0.022802,
-0.011633,
0.054761,
0.065424,
-0.081461,
-0.060911,
0.029964,
0.131750,
0.056306,
-0.108670,
-0.091695,
0.052905,
0.034197,
0.009193,
-0.058203,
-0.038564,
0.047368,
0.128710,
0.079714,
0.105670,
0.117920,
0.080950,
0.109540,
0.020599,
0.057464,
0.032946,
-0.016812,
0.072152,
0.049900,
0.029507,
0.019025,
-0.123570,
0.160880,
0.183050,
-0.032030,
-0.000656,
-0.026498,
-0.016015,
0.037707,
-0.017146,
-0.002586,
0.014180,
0.144890,
0.119580,
0.062925,
0.075573,
0.194790,
0.084043,
-0.023065,
-0.043625,
-0.017081,
0.149660,
0.056070,
0.005641,
-0.173150,
-0.117980,
-0.021313,
0.041178,
0.025785,
-0.149030,
-0.100930,
-0.097614,
-0.058835,
0.085469,
-0.030744,
-0.060243,
-0.018300,
0.000739,
0.032420,
0.021503,
0.122090,
0.162250,
-0.025293,
0.010755,
0.032473,
0.042902,
0.065680,
0.045181,
-0.005003,
-0.028667,
-0.098551,
-0.023119,
0.059651,
-0.015915,
-0.051843,
-0.307920,
-0.107170,
0.076895,
0.109610,
0.072372,
-0.030933,
0.042621,
-0.039257,
-0.013129,
-0.119280,
0.076177,
0.032896,
-0.094020,
0.029960,
0.034820,
0.027711,
-0.049010,
-0.130700,
0.055502,
-0.025808,
-0.021006,
0.003102,
0.053602,
0.063751,
0.014629,
0.090080,
0.044039,
0.172890,
0.166340,
0.124510,
0.151170,
-0.142570,
0.040084,
-0.014554,
-0.111940,
-0.027492,
-0.116370,
0.111060,
-0.051257,
-0.109760,
-0.010088,
0.029111,
0.203210,
0.070215,
-0.052448,
0.093483,
0.052848,
-0.000036,
-0.036716,
-0.232780,
-0.220960,
-0.226040,
-0.094831,
-0.102500,
-0.202120,
-0.193480,
-0.156190,
-0.248730,
0.005371,
0.168630,
0.085989,
0.075457,
-0.116620,
0.132040,
-0.014250,
-0.105930,
0.036951,
-0.108610,
0.068783,
0.018545,
-0.089665,
0.030824,
-0.142590,
-0.000062,
-0.136880,
-0.153730,
-0.048420,
-0.086438,
-0.125510,
-0.106750,
-0.164340,
-0.167540,
0.096638,
-0.051401,
-0.118670,
-0.067071,
-0.158440,
0.053789,
-0.020628,
-0.099548,
-0.122210,
-0.156240,
0.036959,
0.055958,
0.052637,
0.056346,
-0.145840,
-0.031383,
0.061550,
0.071239,
0.036072,
-0.186130,
-0.163550,
-0.107260,
-0.034523,
-0.114720,
-0.242880,
0.031668,
-0.086262,
-0.050889,
-0.102180,
-0.132700,
0.112280,
0.005371,
-0.022688,
-0.095934,
-0.171610,
-0.013382,
0.004412,
-0.006313,
0.000180,
-0.068626,
0.041785,
-0.111040,
-0.095247,
-0.033513,
0.001045,
0.183510,
0.005708,
0.028038,
-0.005931,
0.063205,
0.114250,
0.085354,
0.118110,
0.087994,
0.022328,
-0.017723,
0.104630,
0.113440,
0.063257,
-0.011907,
0.045031,
-0.003272,
-0.015021,
0.007686,
0.012282,
0.072461,
0.026810,
-0.062303,
-0.038454,
0.082885,
0.011663,
0.050467,
-0.147690,
-0.078732,
0.004771,
-0.021748,
0.013401,
0.042539,
-0.046049,
-0.041963,
0.002310,
0.000632,
0.015497,
0.032363,
-0.066373,
-0.004911,
-0.055445,
-0.013633,
-0.064359,
-0.123730,
0.078928,
0.045976,
-0.058628,
-0.062731,
-0.115760,
0.060072,
0.096471,
0.107010,
0.038641,
0.116360,
-0.012994,
0.106620,
0.090874,
0.017300,
-0.023875,
-0.072189,
0.080951,
-0.065512,
-0.097699,
-0.095507,
-0.064952,
0.008577,
-0.032898,
-0.079562,
-0.165320,
-0.085935,
-0.082820,
-0.107180,
-0.055779,
-0.130120,
0.028140,
0.018358,
0.129510,
0.132500,
-0.022886,
-0.042190,
-0.039383,
-0.033446,
-0.028198,
-0.017716,
0.014207,
0.009507,
-0.015460,
-0.037439,
0.012518,
0.016206,
-0.030861,
-0.045040,
0.029859,
-0.001712,
-0.000154,
-0.035990,
-0.026667,
0.001020,
-0.034854,
-0.033236,
-0.001471,
-0.034335,
-0.039912,
-0.010004,
0.132700,
-0.055682,
0.000447,
-0.003582,
-0.048181,
-0.100520,
-0.073544,
-0.027092,
0.083521,
-0.142480,
-0.117890,
-0.156030,
-0.076143,
-0.012713,
0.010247,
-0.011345,
-0.081507,
-0.082055,
-0.145720,
0.002322,
0.117400,
-0.013636,
-0.012839,
0.011186,
0.109670,
-0.043444,
-0.033499,
0.060943,
0.079865,
0.077329,
-0.087058,
-0.030901,
0.074932,
-0.002978,
-0.032882,
-0.058994,
0.050283,
0.034982,
0.017961,
-0.088381,
-0.007515,
-0.019697,
0.022854,
-0.010277,
-0.049437,
-0.063327,
-0.028243,
-0.011409,
-0.043661,
0.048040,
0.104660,
0.067013,
0.223170,
0.114360,
0.162490,
0.154600,
0.097286,
0.037880,
0.001295,
0.104830,
0.089170,
0.071484,
-0.029310,
0.010672,
0.062652,
-0.049953,
0.070116,
-0.067731,
-0.029132,
-0.035894,
0.211800,
0.189250,
0.197700,
0.075036,
0.086483,
-0.022341,
-0.015842,
-0.011759,
0.034341,
0.027429,
0.037913,
-0.021387,
0.005402,
0.033512,
-0.044205,
0.016843,
0.015804,
0.033133,
-0.003150,
-0.010944,
-0.046732,
0.015919,
-0.011651,
-0.026896,
-0.030771,
0.004010,
0.009962,
-0.006569,
0.004853,
0.013868,
0.002642,
-0.057594,
-0.077643,
-0.092509,
0.052355,
0.017781,
0.009112,
-0.075170,
-0.083045,
-0.061905,
0.097748,
0.123890,
-0.086143,
-0.139510,
-0.115960,
0.155780,
0.180200,
0.102380,
0.094160,
0.076217,
-0.062325,
-0.051395,
0.011584,
0.011819,
-0.017948,
0.146300,
-0.022610,
0.043933,
-0.002918,
0.021185,
0.029234,
0.011220,
0.051590,
0.005765,
0.020628,
-0.040669,
0.026287,
0.105810,
-0.019931,
0.074264,
-0.155930,
-0.081757,
-0.008112,
-0.128970,
0.042971,
-0.202900,
-0.077650,
-0.021500,
0.037764,
0.050746,
-0.021403,
0.121810,
0.052613,
0.049862,
-0.048719,
-0.037804,
0.076248,
-0.031560,
-0.042206,
0.003371,
-0.028557,
0.013637,
-0.052238,
0.024570,
0.058788,
0.049487,
0.092504,
0.075887,
-0.003759,
0.120380,
0.043868,
0.111660,
0.029494,
0.075991,
0.091114,
-0.035186,
-0.006395,
-0.041560,
-0.025511,
-0.055751,
0.014147,
0.017875,
-0.081205,
-0.063546,
0.078899,
0.134240,
0.050988,
0.032516,
0.035064,
0.107620,
0.016311,
-0.107830,
-0.157080,
-0.094229,
-0.146350,
-0.027843,
-0.014060,
-0.202520,
-0.158490,
-0.084633,
0.018867,
-0.011121,
-0.026489,
-0.083931,
0.122620,
0.193940,
0.082328,
0.065050,
0.004194,
0.042688,
0.131280,
0.112980,
0.091866,
-0.033223,
0.062121,
-0.046703,
0.115600,
-0.070336,
-0.073440,
-0.075678,
-0.055489,
0.032814,
0.013164,
-0.072922,
-0.002189,
-0.208240,
-0.125200,
-0.157990,
-0.118380,
-0.120760,
-0.245000,
-0.048478,
-0.033640,
-0.078872,
-0.186450,
-0.136440,
-0.084876,
-0.023482,
0.010085,
-0.064595,
-0.006669,
0.056834,
0.078145,
0.118700,
0.032814,
0.067217,
0.046694,
0.046090,
0.100820,
0.079002,
0.034758,
0.004321,
0.061084,
0.081674,
-0.001313,
0.059826,
0.006323,
0.020117,
0.084505,
0.041411,
-0.010087,
0.016130,
0.003906,
0.036440,
0.008090,
0.005673,
0.041119,
0.038103,
-0.057076,
-0.033921,
0.017526,
0.033307,
0.049698,
0.000571,
-0.057781,
0.149300,
0.083646,
0.071769,
0.048116,
-0.026417,
0.103160,
0.088200,
0.015473,
0.041057,
-0.018966,
0.089211,
-0.018964,
-0.023214,
-0.020062,
0.170600,
0.034207,
0.130650,
0.144370,
0.029406,
-0.018375,
-0.012301,
0.161420,
-0.100640,
-0.007265,
-0.073813,
0.123420,
0.150640,
0.061779,
-0.030383,
-0.075970,
-0.018720,
0.076359,
0.058388,
0.039637,
0.072458,
0.025699,
-0.032309,
-0.003880,
-0.011538,
-0.101430,
0.042511,
0.017219,
0.016644,
0.016388,
0.004229,
0.021301,
0.061749,
0.099797,
0.001802,
0.073588,
0.027329,
-0.014526,
-0.024889,
-0.043439,
0.040651,
0.028054,
-0.041395,
-0.032561,
0.008113,
-0.001494,
0.006209,
0.013686,
0.035727,
0.019880,
0.004480,
-0.008502,
0.002346,
-0.013824,
-0.012773,
0.011934,
-0.002607,
-0.025643,
-0.013140,
0.008879,
-0.025905,
0.143510,
0.094509,
0.117890,
-0.000890,
0.115930,
0.044035,
0.005637,
-0.106330,
-0.083447,
0.031304,
-0.164080,
-0.096273,
-0.060240,
0.008262,
0.014325,
-0.174130,
-0.198700,
-0.126620,
-0.102420,
-0.054785,
-0.097039,
-0.252260,
-0.195890,
-0.134070,
-0.205290,
-0.003430,
-0.017415,
-0.062672,
-0.013906,
-0.018150,
0.014980,
0.004487,
-0.034079,
-0.004883,
0.022983,
-0.018865,
-0.005754,
0.042491,
-0.001521,
0.005913,
0.002553,
0.014215,
0.045641,
0.009626,
0.012836,
-0.043191,
0.023836,
-0.006430,
-0.032035,
-0.042525,
0.029504,
0.013983,
-0.010904,
-0.024489,
-0.029402,
-0.003611,
0.006551,
0.007333,
-0.004338,
0.006027,
-0.039643,
0.015399,
-0.039028,
-0.024190,
0.025421,
0.014874,
0.006011,
-0.001164,
-0.041559,
-0.013985,
-0.001902,
-0.009575,
0.007299,
0.017664,
-0.023658,
0.037938,
0.066994,
0.060167,
0.025310,
0.000613,
-0.024764,
0.031541,
0.063384,
0.025961,
-0.002263,
-0.014106,
-0.019580,
-0.064434,
-0.034605,
-0.037637,
0.019930,
-0.058074,
0.024051,
0.024220,
-0.042838,
-0.007772,
-0.028661,
-0.024645,
-0.041254,
-0.083110,
-0.020754,
-0.035274,
-0.033758,
-0.028288,
-0.016135,
-0.023792,
0.013946,
-0.003817,
0.005663,
0.013868,
0.028437,
0.017867,
0.023638,
0.003515,
0.005127,
-0.035912,
-0.029916,
-0.032022,
0.024484,
-0.022745,
0.019752,
-0.012753,
-0.027103,
0.011626,
-0.009907,
-0.018308,
-0.030640,
-0.002870,
-0.030249,
-0.044761,
-0.034224,
-0.053138,
-0.011674,
-0.017369,
-0.039715,
0.001397,
0.034551,
0.020845,
0.046693,
-0.019600,
-0.038459,
-0.033209,
0.002782,
0.024332,
0.029011,
-0.016239,
0.002803,
0.041885,
0.030498,
0.016816,
0.047060,
0.059193,
-0.013042,
-0.058879,
-0.003768,
-0.029319,
-0.006468,
0.027377,
-0.002309,
0.006552,
-0.096079,
0.010437,
-0.031732,
-0.029255,
0.009022,
0.006134,
-0.085492,
0.021459,
-0.028222,
-0.009971,
0.042248,
-0.038458,
-0.055197,
-0.038863,
-0.019282,
-0.032640,
-0.053768,
-0.031128,
-0.053133,
0.014340,
-0.059330,
-0.025581,
-0.016925,
-0.034717,
-0.009841,
-0.077827,
-0.035135,
-0.013219,
-0.024514,
0.010146,
-0.052285,
-0.039206,
-0.015706,
-0.079250,
-0.045223,
-0.042786,
0.005706,
0.045155,
-0.025202,
-0.006357,
-0.002562,
-0.034806,
-0.006867,
-0.027767,
-0.037731,
0.015148,
0.041879,
-0.033005,
0.036388,
-0.018750,
-0.055603,
-0.019029,
-0.030146,
-0.028530,
-0.028458,
0.086885,
0.044097,
-0.054579,
-0.001224,
0.089191,
0.004127,
-0.030141,
-0.055978,
-0.037458,
0.049574,
0.045562,
-0.043639,
0.046697,
0.001188,
-0.052483,
0.047666,
0.025692,
0.013778,
-0.021229,
-0.014833,
0.012132,
-0.025128,
0.045118,
-0.026288,
-0.010518,
-0.035165,
-0.019874,
0.015593,
-0.024722,
-0.018946,
-0.027402,
-0.057139,
-0.083337,
0.027341,
-0.008176,
-0.025829,
-0.027591,
-0.026858,
-0.061723,
-0.067308,
-0.034871,
-0.005486,
-0.002905,
-0.007606,
-0.029865,
-0.070166,
-0.046004,
-0.077449,
-0.063146,
-0.051857,
-0.046837,
0.004705,
0.003550,
-0.012987,
-0.012138,
-0.007330,
0.056632,
0.010537,
0.007755,
-0.025294,
-0.049687,
-0.034535,
0.043123,
0.016860,
-0.023541,
-0.025441,
0.049432,
0.054684,
-0.025546,
-0.054772,
-0.016892,
0.058948,
-0.008926,
0.037524,
-0.015635,
0.032063,
0.046825,
0.074893,
0.038340,
0.037705,
-0.039032,
0.025620,
-0.004900,
0.031588,
-0.024768,
0.026443,
0.057428,
0.003113,
-0.029885,
0.006100,
0.052828,
0.088215,
-0.016356,
0.035075,
0.012466,
0.009225,
0.051816,
0.046535,
0.013453,
-0.008110,
0.049971,
0.074351,
0.031021,
-0.003891,
-0.004563,
0.045153,
-0.000087,
-0.000649,
-0.077547,
-0.050339,
0.014887,
-0.033404,
-0.008998,
-0.005024,
0.028354,
-0.016991,
0.000015,
-0.016413,
-0.023128,
0.010391,
-0.000760,
-0.029329,
-0.037134,
-0.006206,
0.022563,
-0.002928,
-0.029205,
-0.013836,
-0.016076,
-0.013719,
-0.018056,
-0.002045,
-0.026311,
0.029613,
-0.052995,
-0.014424,
-0.006491,
0.025410,
-0.042850,
-0.048613,
-0.019986,
0.098389,
0.026121,
0.020103,
-0.012824,
0.008627,
-0.024038,
0.070234,
0.042533,
-0.000432,
-0.025634,
-0.017848,
-0.023674,
0.004460,
-0.010050,
0.011184,
-0.022622,
0.029951,
-0.024228,
0.016771,
-0.020478,
0.028326,
0.005047,
-0.061622,
-0.023853,
0.001995,
0.014450,
-0.085733,
-0.010713,
-0.012197,
0.039879,
0.031670,
-0.038334,
-0.031281,
-0.052088,
-0.021568,
-0.015056,
-0.016868,
-0.011763,
-0.038023,
-0.010289,
-0.087492,
0.006207,
-0.056290,
-0.039870,
-0.005402,
-0.018018,
0.001596,
-0.059443,
-0.083766,
-0.016833,
-0.024595,
-0.016276,
0.048990,
-0.020354,
-0.048058,
-0.049864,
-0.068847,
-0.040283,
-0.047962,
-0.075552,
-0.057211,
-0.000500,
-0.069021,
-0.078640,
-0.093344,
-0.043868,
-0.100540,
-0.060733,
0.026132,
-0.023344,
-0.009854,
0.032326,
-0.016496,
0.020494,
-0.021910,
-0.036680,
0.005563,
0.026565,
0.008844,
-0.018189,
0.039519,
-0.033412,
0.013431,
-0.002831,
0.014720,
-0.005456,
0.027620,
0.007629,
-0.011797,
-0.032986,
-0.002984,
0.010849,
-0.009907,
-0.033223,
-0.002104,
0.061801,
-0.054580,
-0.030594,
0.014316,
-0.023192,
-0.017979,
0.003758,
0.010409,
-0.002274,
0.032505,
0.047343,
-0.058578,
-0.030884,
-0.052135,
-0.020302,
0.025976,
0.029561,
-0.020043,
0.010436,
0.037651,
-0.037150,
-0.042850,
-0.018218,
0.002851,
0.024013,
0.027117,
0.000001,
0.038908,
-0.063039,
0.014830,
0.035725,
0.005830,
0.015586,
-0.033634,
-0.056702,
-0.045272,
-0.055912,
-0.020043,
-0.017647,
-0.046300,
-0.029874,
-0.067417,
-0.043625,
0.015771,
-0.022634,
-0.025359,
0.010870,
0.008761,
0.019255,
-0.007281,
-0.073741,
-0.033910,
-0.067631,
-0.085058,
-0.024070,
-0.009551,
-0.040137,
-0.017755,
-0.103130,
-0.084936,
-0.048137,
-0.019016,
-0.036367,
-0.031563,
-0.081615,
-0.066117,
-0.040946,
-0.010384,
-0.010311,
-0.000890,
-0.060815,
-0.017545,
-0.052241,
-0.071498,
0.017986,
0.014054,
0.004720,
0.004749,
-0.026180,
-0.028712,
0.024276,
0.023162,
-0.015222,
-0.012270,
0.005705,
-0.004893,
0.007299,
-0.028656,
0.033247,
-0.016398,
0.033330,
0.021277,
-0.020999,
0.024204,
-0.026936,
-0.030247,
-0.027233,
-0.016450,
0.012684,
-0.030304,
0.011874,
-0.058388,
-0.014353,
0.003909,
-0.015713,
0.008250,
-0.013061,
-0.008101,
-0.035663,
-0.025501,
0.090384,
0.009699,
0.019642,
-0.008524,
-0.021321,
-0.006239,
-0.064657,
-0.016291,
0.012945,
-0.020490,
0.020191,
0.005909,
-0.053663,
0.005811,
-0.026672,
-0.013756,
-0.059059,
-0.016270,
-0.006023,
0.014574,
0.008736,
-0.051919,
0.001414,
0.015343,
0.045256,
0.034750,
-0.067892,
-0.004265,
-0.011550,
-0.011599,
0.004588,
0.011748,
-0.018275,
-0.064987,
0.021914,
0.000461,
0.005702,
-0.008887,
-0.020617,
0.031730,
0.039755,
0.044743,
0.026841,
-0.049202,
-0.037475,
-0.057539,
0.005498,
-0.013087,
-0.041566,
0.000064,
-0.026093,
0.024762,
0.036782,
-0.051584,
-0.019508,
-0.017899,
-0.024664,
-0.033423,
0.010029,
-0.040850,
-0.056829,
-0.079849,
-0.068554,
-0.056117,
-0.035643,
-0.026054,
-0.012804,
0.012959,
0.001253,
-0.031289,
-0.038596,
-0.049062,
-0.003538,
0.008687,
-0.075917,
-0.009510,
-0.044793,
-0.035085,
-0.000523,
0.024752,
-0.027138,
-0.039384,
0.025496,
-0.010010,
0.016887,
0.035738,
-0.011304,
0.045727,
0.020914,
-0.119140,
-0.053833,
-0.048391,
-0.023980,
-0.071915,
-0.042593,
-0.001903,
-0.039391,
-0.018076,
-0.074929,
-0.061374,
0.008484,
-0.034237,
0.010088,
0.025114,
-0.064894,
0.015744,
-0.072258,
-0.063892,
-0.040257,
-0.046581,
-0.057458,
0.025598,
-0.043570,
-0.034665,
-0.011373,
-0.031321,
0.029092,
-0.034467,
-0.040129,
-0.064419,
0.024386,
0.024506,
0.009199,
0.018950,
-0.059621,
-0.028081,
0.022145,
-0.048657,
0.020986,
-0.039359,
-0.100240,
-0.037524,
0.029512,
0.025720,
-0.050921,
-0.041482,
-0.089528,
-0.031522,
-0.069399,
-0.025719,
-0.022362,
-0.017457,
0.022687,
0.004502,
0.000690,
-0.009289,
-0.027279,
-0.032706,
0.001317,
0.010599,
0.017999,
0.038661,
0.026634,
0.039957,
-0.009088,
-0.029699,
0.019661,
0.037520,
0.009087,
0.041232,
0.019487,
0.009655,
0.042464,
0.015266,
-0.014653,
-0.033222,
-0.045825,
0.000788,
-0.074722,
-0.023627,
0.073028,
0.016846,
-0.004073,
-0.010568,
0.007435,
-0.023197,
0.000962,
-0.022183,
0.005652,
0.008325,
-0.013143,
0.036195,
-0.025214,
-0.059959,
-0.012739,
0.027393,
0.046399,
-0.013421,
0.035866,
-0.016070,
0.057629,
-0.019945,
-0.054419,
-0.026639,
-0.028775,
0.010330,
-0.061345,
-0.051397,
0.014236,
-0.031523,
-0.016477,
-0.041558,
0.008819,
-0.038749,
-0.001393,
0.023372,
-0.053312,
-0.088519,
-0.086762,
-0.085522,
-0.069803,
-0.042221,
-0.101880,
-0.049617,
0.004540,
0.021957,
0.003042,
0.019742,
0.027629,
-0.028547,
0.018705,
0.038430,
0.037855,
0.009600,
-0.006196,
-0.017584,
0.017928,
-0.013496,
0.002448,
0.021285,
0.015669,
0.005536,
-0.029914,
0.010468,
-0.015744,
0.031766,
-0.014147,
0.016303,
-0.024686,
-0.068973,
-0.044548,
0.001325,
-0.030041,
-0.033185,
-0.054268,
-0.000204,
0.031068,
-0.014741,
-0.011506,
-0.035631,
-0.109240,
-0.061975,
-0.070590,
-0.100520,
-0.057027,
0.033420,
0.001832,
-0.008898,
0.002797,
0.031919,
-0.013864,
-0.020791,
0.040038,
-0.009673,
-0.186910,
-0.030438,
0.054018,
-0.108070,
-0.159280,
0.074985,
0.049294,
0.165760,
0.098003,
0.040399,
0.040401,
0.048960,
-0.040338,
0.195890,
0.084856,
-0.046070,
0.092502,
0.104300,
0.100730,
-0.021167,
-0.180260,
-0.011902,
0.120560,
0.027098,
0.101930,
-0.000993,
-0.036733,
-0.015821,
-0.021142,
-0.015309,
0.036640,
-0.014529,
-0.026996,
-0.013522,
-0.010520,
-0.013227,
-0.017453,
0.025942,
0.033753,
0.004056,
-0.027454,
-0.026278,
-0.029706,
0.038684,
-0.011284,
-0.036273,
-0.039986,
0.011014,
0.026409,
-0.022793,
-0.062284,
0.072416,
-0.003752,
-0.038791,
-0.117550,
-0.003076,
-0.051962,
-0.100040,
-0.025360,
-0.018737,
0.035594,
0.080331,
0.065668,
0.086525,
0.100640,
-0.026337,
0.088254,
0.134370,
0.134640,
0.013233,
-0.078332,
0.020472,
0.084007,
0.020206,
-0.004575,
-0.011408,
-0.010539,
-0.066952,
-0.071035,
0.038399,
-0.032544,
0.016302,
0.031731,
-0.008230,
-0.000027,
0.043815,
0.003329,
-0.010802,
-0.041614,
0.017543,
-0.009552,
-0.023114,
0.018664,
0.012060,
-0.011924,
0.022603,
-0.022334,
0.027519,
-0.032713,
-0.050211,
0.058704,
0.108040,
0.092520,
0.208590,
0.088442,
-0.002541,
-0.028644,
0.076007,
0.175810,
0.028197,
-0.034020,
-0.023539,
0.011296,
0.173060,
0.087892,
-0.055988,
0.077790,
-0.003717,
0.045983,
-0.084116,
-0.016809,
0.011049,
0.002865,
-0.072192,
-0.010326,
-0.067296,
-0.047966,
-0.038044,
-0.068537,
-0.109910,
-0.050594,
-0.056521,
-0.034567,
-0.098112,
-0.188530,
-0.080747,
-0.041625,
0.044945,
-0.107850,
-0.316690,
-0.051393,
0.136140,
0.169600,
0.015108,
-0.109840,
0.046797,
0.019061,
-0.006272,
0.142220,
-0.048099,
-0.026459,
0.054255,
0.048291,
-0.077714,
-0.086375,
0.064584,
0.102120,
0.274320,
0.140480,
-0.016603,
0.051572,
0.032567,
0.110750,
0.022010,
-0.044839,
-0.042030,
-0.102660,
0.014656,
-0.028593,
0.008804,
0.063590,
-0.044998,
-0.040454,
0.015175,
-0.022364,
-0.256360,
-0.108320,
-0.294190,
-0.133370,
-0.200510,
-0.112250,
-0.135080,
-0.088066,
-0.028618,
-0.037687,
-0.138930,
0.025178,
-0.000096,
0.027073,
0.167440,
-0.066520,
0.105460,
0.057755,
-0.038311,
-0.149280,
-0.077171,
0.056301,
-0.183920,
-0.193100,
-0.278760,
-0.024364,
-0.075123,
-0.016396,
-0.006950,
-0.064347,
0.043849,
0.030969,
0.030645,
0.007584,
0.136130,
-0.010239,
0.022472,
-0.044393,
0.033891,
0.015372,
0.037061,
-0.030438,
-0.076842,
-0.049649,
-0.024894,
0.009742,
-0.085815,
0.031129,
-0.001900,
-0.093185,
-0.083077,
0.095860,
0.144990,
0.037366,
-0.146420,
-0.132400,
0.067811,
0.127170,
0.032831,
-0.114230,
-0.230460,
-0.142910,
-0.170580,
0.012185,
-0.108470,
-0.182000,
-0.169220,
-0.135410,
0.152160,
0.111590,
-0.095005,
-0.104240,
-0.044456,
0.048487,
0.073600,
0.035430,
-0.105210,
-0.126600,
-0.175490,
-0.177090,
0.040313,
-0.025913,
0.151860,
0.023331,
-0.011748,
0.102270,
-0.086590,
0.026869,
0.074955,
0.030701,
0.032179,
-0.137770,
-0.139150,
0.085949,
-0.082871,
-0.053566,
-0.187800,
-0.289420,
-0.064643,
-0.150450,
-0.072498,
0.085226,
0.075143,
0.154890,
0.079518,
-0.024900,
0.030661,
0.052151,
-0.075802,
0.138890,
-0.300970,
-0.168310,
0.005477,
-0.011613,
0.096002,
-0.274190,
-0.137490,
-0.122880,
-0.024789,
-0.041657,
-0.248340,
-0.188620,
0.029582,
-0.106240,
-0.090301,
0.174810,
0.075646,
0.052379,
0.184710,
0.185320,
-0.043331,
0.003908,
0.000366,
0.046371,
0.201010,
-0.039591,
-0.012608,
-0.001882,
0.013280,
0.079216,
0.055422,
0.040470,
0.039465,
0.005017,
0.118880,
0.057508,
0.056892,
0.017722,
0.080953,
0.080106,
-0.069828,
-0.213290,
-0.106590,
-0.124590,
-0.215420,
-0.073543,
-0.117580,
-0.063402,
-0.153050,
-0.183930,
-0.036292,
-0.117450,
-0.113150,
0.036342,
0.009199,
0.019374,
-0.062198,
-0.067269,
0.071440,
0.152740,
0.071924,
-0.022800,
0.025633,
-0.028529,
-0.038863,
-0.075342,
-0.148290,
-0.176640,
0.035577,
0.090332,
-0.135080,
-0.196960,
0.064889,
0.127840,
0.018290,
-0.159700,
-0.069050,
0.015707,
0.127120,
0.095503,
-0.037802,
0.042344,
0.047983,
0.042957,
-0.039734,
-0.072802,
-0.077940,
-0.082317,
-0.100580,
0.001508,
0.095415,
0.068566,
0.066349,
0.040007,
0.050073,
0.089514,
0.036381,
0.077727,
0.033004,
0.019630,
0.077909,
-0.075113,
0.024810,
0.076044,
0.084628,
0.060498,
-0.025389,
-0.005371,
-0.023698,
0.070008,
0.121200,
0.079436,
0.105360,
0.046350,
0.232650,
0.014099,
-0.025239,
0.001967,
0.026744,
0.049791,
0.002452,
0.012462,
-0.020285,
0.001005,
-0.004432,
-0.026065,
-0.021351,
-0.023060,
-0.024563,
0.075397,
-0.024104,
-0.016046,
0.005292,
0.018665,
0.023818,
-0.007500,
0.010184,
-0.017392,
0.009988,
0.030400,
0.092441,
0.038184,
-0.073073,
-0.047914,
0.043346,
0.060629,
-0.059961,
-0.147180,
-0.070095,
0.229100,
0.040403,
-0.086175,
-0.028743,
-0.116750,
0.026512,
0.024701,
-0.005799,
-0.043765,
-0.020793,
-0.040163,
-0.000231,
-0.014075,
-0.091194,
-0.083048,
-0.112890,
-0.113400,
0.033719,
-0.062411,
-0.015521,
-0.115660,
0.002059,
-0.048044,
0.033731,
0.094801,
-0.058677,
0.090881,
0.103160,
0.025638,
0.084119,
0.013757,
0.037099,
0.064519,
0.043781,
0.058281,
-0.003145,
0.068717,
0.039492,
0.127040,
0.005257,
-0.000300,
-0.071932,
-0.106940,
-0.112140,
-0.003689,
-0.161380,
-0.047749,
0.072427,
0.030180,
0.033959,
-0.145610,
-0.009330,
0.090403,
0.043141,
0.147350,
-0.138850,
0.031751,
0.048227,
-0.067929,
0.015241,
-0.117300,
0.009546,
0.039102,
0.027062,
-0.052725,
-0.199720,
0.002236,
-0.014116,
-0.011054,
0.005498,
0.008488,
-0.027932,
-0.020340,
0.006301,
-0.026964,
0.004506,
0.015390,
0.012912,
-0.039922,
0.031278,
0.044937,
-0.000758,
-0.005486,
-0.010082,
-0.009825,
0.010956,
-0.009644,
0.009494,
-0.011287,
0.010571,
-0.027375,
-0.108240,
-0.116320,
-0.059361,
0.092397,
0.020954,
-0.188440,
-0.056944,
0.018188,
-0.081257,
-0.003924,
-0.010027,
0.145520,
0.174330,
0.071240,
-0.019464,
-0.177240,
0.096955,
0.095780,
-0.036974,
-0.132380,
-0.021104,
-0.045469,
-0.109270,
-0.025143,
-0.024178,
-0.271380,
-0.109120,
-0.137720,
-0.065128,
-0.054772,
-0.013516,
-0.017815,
-0.020148,
-0.062642,
-0.038959,
-0.036182,
-0.028560,
0.014327,
-0.051294,
-0.011544,
-0.155090,
-0.076826,
-0.009055,
-0.085189,
-0.040483,
-0.170740,
-0.111270,
-0.007558,
-0.027840,
-0.022065,
-0.067369,
0.053694,
0.041975,
-0.023331,
-0.093794,
0.062222,
0.142350,
0.127800,
0.089636,
0.049806,
0.113700,
0.115290,
0.154590,
0.076607,
-0.032453,
0.057806,
0.079814,
0.068144,
0.026638,
-0.025133,
0.121260,
0.110280,
0.124630,
-0.037431,
-0.034294,
-0.126520,
-0.097482,
-0.106200,
-0.110930,
-0.101230,
-0.147750,
-0.160300,
-0.116770,
-0.085532,
-0.220730,
-0.019573,
-0.073249,
-0.173350,
-0.098960,
-0.107900,
0.043973,
0.115580,
0.049176,
0.020816,
0.022425,
-0.126860,
-0.153810,
-0.118500,
-0.073347,
-0.024512,
-0.282130,
-0.124440,
-0.048254,
0.008434,
-0.177490,
-0.160570,
-0.005038,
-0.246430,
-0.274340,
-0.079252,
-0.127840,
0.004612,
-0.127770,
-0.117760,
-0.073180,
-0.068406,
0.023802,
0.007383,
-0.062529,
0.050726,
-0.203830,
-0.201290,
-0.252380,
-0.144800,
-0.150360,
0.139570,
0.057082,
0.097787,
0.076586,
0.116610,
0.112070,
0.083988,
0.107270,
0.067691,
0.107940,
0.174240,
0.134760,
0.077455,
0.045483,
0.093753,
0.074774,
0.110110,
0.058778,
-0.014389,
0.130730,
0.102630,
-0.037172,
-0.024912,
-0.011445,
0.050232,
0.002857,
-0.001095,
0.018064,
-0.095830,
-0.064617,
-0.012018,
0.044911,
0.020485,
-0.055866,
0.008197,
0.010338,
0.018080,
-0.045576,
-0.006922,
0.018801,
0.026520,
0.004427,
-0.008425,
0.023448,
0.060728,
0.050530,
0.054155,
-0.031891,
-0.018318,
0.032703,
0.021828,
0.088704,
0.077131,
0.046467,
-0.019808,
0.025767,
0.084652,
0.050874,
-0.055102,
-0.042679,
-0.021402,
-0.040440,
0.057315,
-0.041160,
-0.171070,
-0.060246,
-0.029836,
-0.051063,
-0.105530,
-0.015878,
0.016563,
0.047525,
-0.027507,
-0.005124,
-0.029405,
-0.007842,
0.027085,
-0.142220,
-0.058561,
-0.020864,
0.027349,
-0.009910,
-0.154020,
-0.096860,
0.115860,
-0.019113,
-0.145320,
0.064322,
0.052180,
0.072965,
-0.083455,
-0.125830,
0.016048,
0.042829,
0.153740,
-0.161530,
0.022954,
0.010957,
0.011169,
-0.034877,
-0.084703,
-0.004268,
-0.043097,
-0.029072,
-0.028342,
-0.056091,
-0.012772,
0.021113,
0.060161,
-0.006878,
0.075043,
0.049122,
0.024707,
0.046312,
0.012051,
0.036073,
0.014778,
-0.031031,
-0.001582,
0.034308,
-0.015097,
-0.023515,
0.016416,
0.001386,
-0.004503,
-0.164200,
-0.125870,
0.016566,
0.014756,
-0.159890,
0.021976,
-0.016706,
0.008206,
-0.052831,
-0.086639,
-0.165860,
-0.234800,
-0.177210,
-0.021448,
-0.017702,
-0.079789,
-0.138190,
-0.035371,
0.023982,
-0.164270,
-0.022165,
-0.108420,
0.046932,
0.080177,
-0.053442,
0.074057,
-0.103470,
-0.120690,
-0.141240,
-0.088656,
-0.088030,
-0.112820,
-0.086373,
-0.079838,
-0.113610,
-0.193620,
-0.086687,
-0.053395,
0.101880,
-0.002279,
0.011987,
0.010240,
-0.162050,
-0.021535,
-0.065835,
0.015663,
0.011484,
-0.164460,
-0.134340,
-0.154030,
0.041038,
0.001266,
-0.014738,
0.012034,
-0.027864,
0.029635,
-0.010799,
-0.008054,
-0.015763,
0.026873,
-0.030004,
-0.017934,
-0.001886,
0.021761,
0.020757,
0.039737,
0.013490,
0.001617,
-0.004826,
0.009248,
-0.026180,
0.008734,
-0.005692,
0.018615,
-0.027078,
0.035312,
0.019563,
0.041154,
0.008848,
-0.087983,
-0.150490,
-0.003657,
-0.037461,
-0.133580,
0.058578,
0.011611,
0.006775,
-0.011613,
0.012916,
0.055003,
0.048627,
0.006882,
-0.117300,
0.037779,
-0.052908,
-0.079094,
0.025972,
-0.007954,
0.014047,
0.052915,
-0.025943,
-0.014640,
-0.004867,
-0.031980,
-0.005922,
0.021339,
-0.030195,
0.029773,
-0.015883,
0.013298,
0.002371,
-0.000568,
-0.015359,
-0.028575,
0.006801,
-0.015188,
0.018673,
0.023947,
0.012668,
-0.010538,
0.015645,
0.004949,
-0.006466,
-0.031064,
0.022904,
-0.099357,
-0.042346,
-0.013735,
-0.024700,
-0.046256,
-0.009020,
-0.018658,
-0.070993,
-0.038212,
-0.015036,
-0.038294,
-0.077183,
-0.045387,
0.026426,
-0.024046,
-0.067434,
-0.098556,
-0.121830,
0.000944,
-0.064220,
0.027043,
-0.051154,
-0.028776,
-0.065616,
-0.053544,
-0.039901,
-0.110720,
-0.068063,
-0.028935,
-0.012154,
-0.061968,
-0.059825,
-0.070216,
0.025965,
0.012760,
0.070443,
-0.036644,
-0.042737,
-0.053098,
-0.045854,
-0.021266,
-0.041224,
-0.110750,
-0.008216,
-0.050031,
-0.165990,
-0.044696,
-0.056335,
-0.015793,
0.084793,
-0.156370,
-0.035429,
-0.087067,
0.037379,
-0.150740,
-0.015966,
-0.007275,
-0.012121,
0.020935,
-0.056225,
0.022753,
0.026620,
-0.111730,
-0.018580,
0.022656,
-0.074091,
-0.026830,
-0.026544,
-0.217230,
-0.056601,
-0.113600,
-0.065346,
0.046283,
0.009098,
0.003212,
0.041395,
-0.058999,
0.046450,
0.048433,
-0.001900,
0.065113,
0.034650,
0.073155,
0.076625,
-0.099729,
0.030163,
-0.036994,
-0.015827,
0.013085,
-0.029298,
0.067229,
-0.011212,
-0.036002,
-0.008464,
-0.048288,
-0.036891,
-0.065065,
-0.054710,
0.041522,
0.111350,
0.030848,
-0.009835,
0.042099,
0.002690,
-0.002050,
-0.041338,
-0.031359,
0.056756,
-0.024611,
-0.044558,
0.018713,
0.081746,
0.000813,
-0.003729,
0.090784,
-0.002093,
0.131090,
-0.003896,
0.056003,
0.060844,
0.132120,
-0.028347,
-0.042957,
0.042785,
-0.044095,
-0.108910,
-0.019911,
0.099235,
0.076490,
-0.108830,
-0.107190,
-0.033505,
-0.012229,
-0.013831,
-0.106340,
-0.040393,
-0.010038,
-0.089009,
-0.005662,
0.072641,
-0.063698,
-0.026329,
-0.146980,
-0.175540,
0.032394,
-0.086177,
-0.116580,
-0.206640,
-0.224040,
-0.171540,
-0.010830,
-0.054714,
-0.044436,
-0.092738,
0.001295,
0.025624,
-0.130650,
0.013164,
-0.032312,
0.056974,
-0.038349,
-0.060915,
0.131870,
0.127530,
0.072832,
-0.111560,
-0.098427,
0.089498,
0.081569,
0.008079,
-0.191940,
-0.210210,
0.023325,
0.006723,
-0.068257,
-0.054436,
-0.020946,
-0.049262,
0.059374,
-0.102750,
0.042990,
-0.021395,
0.061468,
0.014856,
-0.126890,
0.051651,
0.066199,
0.082686,
-0.037343,
0.130860,
-0.012362,
0.035715,
-0.083543,
-0.179420,
0.021228,
-0.123200,
-0.152530,
-0.204220,
-0.143990,
0.022864,
0.070217,
0.018741,
0.019400,
0.000752,
-0.080765,
-0.020873,
-0.015596,
-0.015595,
0.034656,
-0.025814,
-0.115530,
-0.060936,
-0.080943,
-0.118420,
0.054092,
0.000777,
-0.147150,
-0.032149,
-0.060628,
0.024475,
-0.080657,
-0.145350,
-0.012701,
0.041252,
-0.023793,
-0.089760,
-0.036668,
-0.039551,
0.081620,
0.007302,
-0.030912,
0.028910,
-0.011670,
0.025019,
-0.102970,
-0.113110,
-0.110730,
0.015051,
-0.069716,
0.080631,
-0.048458,
0.018171,
-0.080112,
0.063652,
0.048745,
-0.093267,
-0.060674,
-0.231100,
-0.122410,
-0.101490,
0.023041,
-0.049771,
0.003161,
0.051644,
0.151200,
0.029496,
-0.071054,
-0.013731,
0.058874,
0.130630,
0.080721,
-0.040985,
0.006483,
-0.019377,
-0.018290,
-0.003162,
-0.048918,
-0.064719,
-0.053450,
-0.013165,
-0.022995,
0.066218,
0.096404,
-0.073534,
-0.104470,
0.007617,
-0.000565,
0.049504,
-0.025537,
-0.044903,
-0.079753,
-0.052111,
0.023311,
-0.012594,
-0.023995,
0.038167,
-0.080839,
0.013747,
-0.038008,
0.052691,
0.028793,
-0.100620,
-0.068980,
0.015955,
-0.041311,
-0.068919,
-0.037750,
0.055441,
-0.042747,
-0.108180,
0.029687,
0.017536,
0.024248,
0.031601,
-0.017323,
0.006174,
0.031854,
-0.015379,
0.017862,
-0.009771,
0.038110,
0.024660,
-0.009695,
-0.012171,
-0.000442,
0.007476,
-0.002656,
-0.013964,
-0.005507,
0.009203,
-0.011734,
-0.001988,
-0.029024,
-0.001118,
-0.004537,
0.001457,
-0.047079,
0.036543,
-0.044610,
-0.074031,
-0.031611,
-0.069631,
-0.176720,
0.016745,
-0.018009,
-0.056262,
-0.065494,
-0.121220,
0.007337,
-0.025723,
-0.024590,
-0.018399,
-0.048377,
-0.108990,
-0.046348,
0.005979,
-0.098797,
0.037620,
-0.041281,
0.040022,
-0.073884,
-0.101040,
-0.154370,
0.039825,
0.049724,
-0.067297,
-0.059217,
-0.082907,
0.000290,
-0.013912,
-0.124310,
-0.166430,
0.027620,
-0.079652,
-0.084849,
-0.045865,
-0.153300,
-0.074324,
-0.179580,
-0.012909,
0.079365,
-0.053187,
0.047244,
-0.008098,
-0.080545,
-0.188340,
-0.038986,
-0.043821,
-0.054681,
0.021300,
-0.011774,
-0.064892,
-0.019279,
-0.154660,
-0.066740,
-0.074605,
-0.059454,
0.008512,
-0.131000,
-0.082372,
0.028001,
-0.096244,
0.016005,
-0.013284,
-0.021180,
-0.004917,
0.011831,
0.068240,
-0.180740,
-0.111420,
-0.006003,
-0.036860,
-0.028760,
-0.000311,
0.032070,
0.024093,
0.035209,
0.030887,
0.038228,
0.002135,
-0.027718,
-0.009541,
0.031333,
-0.022668,
0.027790,
-0.025542,
0.010634,
0.029753,
0.018894,
-0.008231,
-0.025703,
0.024554,
0.029671,
-0.010881,
-0.036871,
-0.115780,
-0.092098,
-0.052923,
-0.024325,
-0.021670,
-0.065510,
-0.036736,
-0.088398,
-0.001812,
0.078784,
-0.051589,
-0.054285,
-0.062411,
-0.030166,
-0.036154,
-0.106040,
-0.122850,
0.005234,
-0.136820,
-0.141130,
-0.113900,
0.086540,
0.134090,
0.053699,
-0.047436,
-0.084928,
-0.075289,
-0.091555,
-0.040757,
-0.027017,
-0.037345,
-0.007833,
-0.093907,
-0.028320,
-0.117020,
0.000798,
-0.030752,
-0.117360,
-0.066373,
-0.183550,
-0.009181,
-0.008673,
-0.024309,
-0.043173,
0.001716,
0.025052,
-0.015140,
-0.075509,
0.011372,
0.041514,
-0.168820,
-0.049337,
-0.145140,
-0.016134,
0.126720,
-0.120800,
-0.109240,
-0.061314,
-0.005028,
0.038980,
-0.074239,
-0.013862,
-0.042198,
-0.070307,
-0.036482,
-0.087178,
0.011114,
-0.007921,
-0.002523,
-0.060318,
-0.028224,
0.074142,
-0.053383,
-0.003345,
-0.002504,
-0.057181,
-0.128550,
-0.153010,
-0.179920,
-0.092048,
-0.119110,
-0.031751,
-0.023246,
-0.044025,
-0.087869,
-0.119960,
-0.111320,
-0.148810,
-0.048927,
-0.004917,
-0.137830,
-0.136430,
-0.242250,
-0.153790,
-0.195310,
-0.069719,
-0.023194,
-0.144930,
-0.136200,
-0.103770,
-0.016710,
-0.059482,
-0.134600,
-0.035846,
0.001019,
0.000108,
-0.089862,
-0.059897,
-0.125840,
-0.078014,
0.079420,
-0.090470,
-0.010297,
-0.095456,
-0.202390,
0.045959,
-0.135440,
-0.031194,
-0.155240,
-0.055030,
-0.038510,
0.096226,
0.034576,
-0.077045,
-0.028943,
0.053761,
-0.006453,
-0.026615,
0.034293,
0.088102,
0.033521,
-0.009544,
0.006940,
-0.062672,
0.113560,
-0.012465,
-0.004981,
-0.020016,
-0.001957,
0.042185,
-0.045464,
-0.009981,
-0.037518,
0.050464,
0.053015,
0.067637,
0.083897,
0.074295,
0.102430,
0.117460,
0.022060,
0.015305,
0.022457,
-0.015448,
-0.008652,
0.017187,
-0.008325,
0.037666,
-0.024705,
0.008565,
0.024067,
0.001823,
0.028646,
0.000935,
0.040506,
0.026321,
-0.008986,
-0.027941,
0.036795,
0.024889,
0.003430,
0.039260,
0.010834,
0.009027,
0.026181,
0.015083,
-0.008926,
-0.092224,
0.080610,
-0.130940,
-0.095111,
-0.041208,
-0.195830,
-0.150580,
-0.229040,
-0.199960,
0.105790,
0.075415,
-0.016939,
-0.032568,
-0.043136,
0.074661,
0.093097,
-0.148300,
-0.001466,
-0.121930,
-0.078247,
-0.146580,
-0.222400,
-0.099262,
0.002486,
-0.001880,
0.033477,
0.052914,
0.142630,
-0.058559,
0.027525,
-0.030378,
0.068535,
0.071600,
-0.032637,
0.080981,
0.050156,
0.040945,
-0.004228,
0.116990,
0.035336,
-0.055532,
-0.001445,
-0.160860,
0.093346,
0.013688,
-0.023409,
-0.095865,
-0.157280,
-0.031755,
-0.004949,
0.032706,
-0.014520,
0.000759,
0.001234,
0.009429,
0.005484,
0.035520,
-0.007026,
0.016565,
-0.019563,
0.003828,
-0.005688,
0.036840,
0.003223,
-0.029038,
-0.013593,
-0.030231,
0.005484,
-0.012430,
0.005693,
-0.007607,
-0.012999,
0.012499,
-0.095219,
-0.170640,
-0.101330,
-0.128540,
-0.021018,
-0.203990,
-0.113210,
0.021984,
-0.108300,
-0.043309,
-0.028486,
-0.163250,
-0.006932,
0.049720,
0.047053,
-0.228170,
-0.114000,
-0.022589,
0.042692,
0.014180,
-0.176480,
-0.077172,
-0.098643,
-0.097471,
0.014568,
0.022645,
0.009945,
-0.025356,
0.017309,
-0.040325,
0.018502,
-0.025257,
-0.022116,
0.021343,
-0.005200,
-0.033704,
-0.023426,
-0.018969,
0.002084,
-0.019531,
0.019795,
-0.023572,
0.006591,
0.006509,
-0.004127,
-0.009215,
0.006160,
-0.032068,
-0.021445,
-0.022960,
-0.029259,
0.021726,
-0.005153,
-0.006575,
0.014065,
-0.006446,
-0.008625,
-0.031296,
-0.027713,
-0.020378,
-0.029548,
-0.018492,
-0.039689,
-0.033522,
0.009880,
0.013993,
0.018910,
-0.011995,
0.012759,
0.019538,
0.024617,
0.027000,
-0.016087,
-0.014383,
0.026502,
-0.025052,
-0.034629,
-0.009690,
-0.007431,
-0.028169,
-0.007589,
-0.011921,
0.001971,
-0.012314,
-0.003562,
-0.018099,
0.008266,
0.026492,
0.004670,
-0.032469,
-0.038239,
-0.015494,
-0.032679,
-0.040638,
-0.025253,
0.014035,
-0.009282,
-0.040520,
-0.007011,
0.001422,
0.009802,
0.028672,
-0.001262,
-0.019675,
-0.018033,
0.026522,
0.017107,
-0.003302,
0.018146,
-0.002448,
0.008297,
0.016415,
-0.018207,
0.015061,
0.000190,
0.001022,
-0.026804,
0.001547,
-0.029366,
-0.025390,
-0.009763,
-0.022750,
0.025695,
-0.029793,
-0.030442,
0.007328,
0.001859,
0.016835,
-0.028823,
-0.023238,
0.009605,
0.020886,
-0.041084,
-0.001703,
-0.009816,
-0.007623,
0.007404,
-0.017583,
0.003784,
-0.040703,
0.017668,
0.012396,
0.029131,
-0.009483,
-0.003538,
-0.021383,
-0.009296,
-0.018107,
0.021001,
0.006844,
-0.029300,
-0.030984,
0.020060,
-0.006345,
-0.008886,
0.022953,
0.017743,
-0.004770,
0.003638,
-0.021470,
-0.028336,
-0.023794,
0.011568,
-0.012381,
-0.026584,
0.013990,
0.001481,
-0.012275,
0.004363,
-0.007174,
-0.027577,
-0.023377,
-0.001829,
-0.017048,
0.005412,
0.000016,
-0.041336,
-0.014600,
0.002549,
0.027469,
0.001102,
0.018035,
0.016628,
0.005930,
-0.027593,
-0.030185,
0.011006,
0.023734,
-0.017643,
-0.031680,
-0.023577,
-0.017204,
-0.036663,
0.022668,
0.021662,
-0.011934,
-0.030898,
-0.012361,
0.006983,
0.020354,
-0.014453,
0.017544,
0.011882,
-0.031729,
-0.024762,
-0.024079,
-0.041054,
0.003844,
0.007608,
-0.003433,
-0.038395,
0.026645,
-0.019508,
-0.028427,
-0.030921,
0.006243,
0.017498,
-0.028909,
-0.035944,
-0.003148,
-0.000619,
0.003461,
0.007313,
0.020305,
-0.017528,
0.001092,
-0.002584,
0.020785,
-0.022858,
-0.018647,
-0.030441,
-0.017762,
0.003014,
-0.039804,
-0.036903,
-0.012672,
-0.013734,
0.009404,
-0.029409,
-0.031537,
0.002645,
-0.018130,
0.007709,
0.007368,
-0.037076,
0.008138,
-0.011201,
-0.041027,
0.002477,
0.022378,
0.024976,
0.024913,
-0.035999,
-0.021725,
0.006918,
-0.023038,
0.024646,
-0.019783,
0.002987,
-0.022192,
0.012844,
-0.033793,
-0.018559,
0.017634,
0.011117,
-0.011852,
-0.004228,
0.013842,
0.025960,
-0.007255,
0.012868,
-0.007622,
0.007162,
0.020728,
-0.026045,
0.011498,
-0.010072,
-0.023611,
-0.019598,
0.018586,
-0.023736,
-0.017003,
-0.005650,
-0.039056,
0.017098,
-0.016150,
0.020466,
0.012247,
-0.030584,
0.006961,
0.012055,
0.015421,
0.026050,
-0.011918,
-0.008450,
-0.024089,
0.006242,
0.016698,
-0.035505,
-0.027021,
-0.000071,
-0.002382,
-0.021767,
0.012902,
0.027548,
-0.014349,
0.027574,
0.021432,
0.026504,
-0.028244,
-0.033381,
0.024427,
-0.007711,
0.019162,
-0.007591,
-0.016452,
0.010909,
-0.024699,
-0.014206,
-0.036270,
-0.018786,
-0.008798,
0.022767,
0.023896,
0.001132,
-0.001940,
-0.018489,
-0.020088,
0.018982,
0.003691,
0.003696,
0.023438,
-0.005666,
-0.028670,
-0.039018,
0.005426,
-0.027659,
-0.010959,
-0.004624,
-0.038631,
-0.036118,
0.021619,
-0.015534,
0.006323,
-0.014755,
0.025597,
-0.032934,
0.027515,
0.020544,
-0.009611,
-0.018989,
-0.016674,
-0.004668,
-0.014940,
0.026707,
-0.005943,
-0.001438,
0.015646,
0.011931,
0.017103,
0.009886,
0.021370,
-0.036927,
-0.031691,
-0.039432,
0.023606,
-0.037208,
0.001938,
0.003611,
-0.030943,
-0.015361,
-0.021449,
-0.033282,
-0.024593,
-0.016599,
-0.015872,
0.017176,
0.001730,
-0.031133,
-0.017600,
0.026915,
0.008778,
0.002464,
-0.013703,
-0.010461,
-0.028426,
0.000077,
0.013981,
-0.030022,
0.008707,
0.028746,
0.021676,
-0.034211,
-0.017518,
-0.033928,
0.022938,
-0.035402,
-0.016526,
-0.004945,
0.002965,
0.023833,
0.007316,
-0.001560,
0.021587,
-0.026062,
0.012860,
-0.009422,
-0.026555,
0.005150,
-0.014528,
-0.018406,
0.026053,
-0.035829,
-0.032517,
-0.016696,
-0.018888,
-0.030138,
-0.034665,
0.026571,
-0.013437,
0.008822,
-0.014028,
0.012395,
-0.007406,
0.009160,
-0.030757,
0.028983,
-0.018681,
-0.018988,
0.023238,
-0.019361,
0.025049,
0.026834,
0.026855,
-0.039008,
-0.014819,
-0.013427,
0.009058,
0.017591,
-0.020508,
-0.038299,
0.019817,
0.014982,
-0.023470,
-0.000572,
-0.019071,
0.015725,
0.002138,
0.008560,
0.029197,
-0.011424,
0.019886,
-0.039901,
0.014061,
-0.011510,
-0.003839,
0.008870,
0.023439,
0.006443,
-0.037816,
0.020126,
-0.023945,
0.022263,
-0.017368,
-0.031589,
-0.029614,
-0.009548,
0.002955,
0.016932,
-0.022929,
0.017705,
0.007935,
0.002757,
0.017651,
0.016295,
-0.027984,
-0.021698,
-0.040255,
0.024832,
-0.019959,
-0.039383,
0.015156,
-0.013723,
-0.005436,
-0.029231,
-0.033901,
-0.024893,
0.016102,
-0.036846,
-0.028784,
-0.015159,
0.007128,
-0.021011,
-0.037714,
0.026546,
-0.009132,
-0.015341,
-0.036940,
-0.039240,
0.020194,
0.000263,
-0.038894,
0.017452,
-0.008376,
0.003368,
-0.015439,
-0.029209,
0.011433,
-0.021636,
0.025791,
0.012273,
-0.019254,
0.010698,
-0.027474,
0.011785,
0.015883,
-0.004276,
0.025960,
-0.017223,
-0.019364,
0.002258,
-0.038952,
-0.003172,
0.002125,
0.012220,
0.011205,
-0.036971,
0.016297,
-0.011603,
-0.007583,
-0.028699,
-0.032745,
0.023289,
0.004917,
0.023608,
-0.034114,
0.021329,
0.025788,
-0.002771,
-0.005223,
-0.014654,
0.017446,
0.020325,
-0.013149,
-0.001520,
-0.022949,
-0.029583,
0.008936,
0.025870,
-0.020266,
0.021002,
0.003123,
-0.023608,
0.007675,
0.008925,
-0.021482,
-0.002372,
-0.010032,
-0.008846,
-0.004601,
-0.030191,
0.019255,
-0.020631,
0.004130,
-0.028892,
-0.017186,
0.016852,
0.013875,
0.015435,
0.022984,
0.017586,
-0.026508,
0.027198,
-0.004690,
-0.040432,
-0.008039,
0.010534,
-0.002516,
-0.033916,
0.016134,
0.000521,
0.008422,
0.003141,
-0.011458,
0.001837,
0.012128,
-0.009237,
-0.027033,
-0.025222,
-0.040261,
-0.022732,
0.004766,
0.015427,
-0.035575,
-0.018137,
0.018533,
-0.007900,
-0.008440,
-0.030847,
0.021472,
0.003970,
0.006348,
-0.039857,
-0.004734,
-0.002180,
0.014772,
-0.037863,
-0.004537,
0.007561,
0.006310,
0.005130,
0.026645,
-0.022460,
0.018100,
-0.017399,
-0.019704,
0.012858,
0.027100,
-0.024038,
-0.040009,
-0.032947,
0.015941,
0.025917,
-0.013662,
0.017310,
-0.019751,
-0.034258,
-0.029434,
-0.012272,
-0.011204,
0.014734,
-0.035821,
-0.000855,
0.020618,
-0.041139,
0.025405,
0.014696,
0.025719,
-0.020947,
-0.012197,
0.025674,
-0.031492,
-0.028234,
0.013182,
-0.027652,
0.006557,
-0.037831,
-0.006288,
-0.021589,
-0.021859,
-0.003868,
0.008150,
-0.020496,
-0.013427,
-0.039563,
0.011875,
-0.024368,
-0.034677,
-0.031775,
0.019747,
-0.037371,
0.012499,
-0.018042,
0.009906,
-0.005507,
0.022008,
-0.011805,
0.009098,
-0.001189,
-0.011833,
-0.038543,
-0.039246,
0.006356,
-0.003209,
-0.041209,
0.014765,
0.003404,
0.008338,
-0.006243,
-0.020627,
0.019991,
-0.040793,
-0.036621,
-0.011866,
0.008618,
-0.025570,
-0.002545,
-0.000478,
0.006903,
0.019227,
-0.013630,
-0.007549,
-0.032933,
-0.030399,
0.024699,
0.019026,
0.017897,
-0.008016,
0.002348,
0.019661,
0.028411,
0.021369,
-0.006797,
0.001277,
-0.018704,
0.016313,
0.024023,
-0.013859,
-0.030513,
0.025479,
-0.035490,
0.022776,
0.002753,
0.015467,
0.017439,
-0.035280,
-0.018978,
0.004151,
-0.017455,
-0.013349,
-0.025830,
-0.023862,
-0.000132,
0.023859,
-0.017306,
-0.037041,
0.024658,
-0.003781,
-0.024577,
-0.027874,
-0.007607,
-0.031868,
-0.021815,
-0.028010,
-0.014999,
-0.007523,
0.008396,
0.010178,
0.020431,
0.018236,
0.006217,
-0.001759,
-0.036103,
-0.017488,
0.007420,
0.028992,
-0.000605,
-0.016018,
-0.040847,
-0.037345,
0.004711,
-0.007018,
-0.035573,
0.023141,
0.002050,
0.010439,
-0.034751,
0.006006,
-0.011870,
-0.040263,
-0.005198,
0.001059,
-0.021698,
0.016673,
-0.024837,
-0.000218,
-0.004818,
0.017747,
0.015101,
0.006190,
0.008254,
0.000578,
-0.017591,
-0.017295,
0.008061,
-0.004046,
-0.028334,
-0.040062,
-0.028077,
-0.011609,
-0.035219,
0.020876,
-0.031842,
0.016909,
0.003204,
-0.023168,
0.009821,
-0.011934,
0.017782,
-0.023404,
0.015455,
-0.017020,
0.022581,
0.004484,
0.021568,
0.010325,
-0.020425,
0.016261,
0.025971,
-0.026221,
-0.010223,
-0.036643,
0.024005,
0.026507,
0.026189,
0.002611,
0.017294,
0.025816,
-0.016976,
-0.033545,
-0.036921,
-0.020825,
-0.034436,
0.020979,
0.023187,
-0.028090,
-0.012886,
0.026537,
0.025412,
-0.021679,
0.009177,
0.008841,
0.027584,
-0.016026,
0.025367,
0.036442,
0.083942,
0.091531,
-0.000900,
0.030653,
-0.221130,
-0.086469,
0.093285,
0.106260,
0.105060,
-0.011528,
-0.209490,
-0.046323,
0.140630,
0.105550,
-0.048390,
-0.068562,
-0.138900,
-0.003420,
0.034608,
-0.068443,
0.071969,
-0.017392,
-0.094334,
0.066349,
-0.009983,
0.035854,
0.019528,
0.033271,
0.021529,
0.037796,
0.030526,
0.027071,
0.005523,
0.009100,
-0.006616,
0.022536,
0.010034,
-0.022784,
0.010876,
0.006734,
-0.011339,
-0.021147,
-0.030003,
-0.003636,
0.001305,
-0.013158,
-0.021707,
0.036695,
0.052637,
-0.132250,
-0.017794,
-0.024950,
-0.093847,
-0.070967,
-0.095344,
-0.069072,
-0.120120,
-0.015577,
-0.126410,
-0.023469,
-0.098234,
0.032008,
-0.131700,
0.007972,
-0.051278,
0.012922,
0.089512,
-0.134750,
0.023353,
0.031632,
0.034987,
0.012882,
-0.138580,
-0.034249,
0.013223,
0.072842,
0.052340,
-0.005696,
-0.003053,
0.055134,
0.023671,
0.029302,
-0.019984,
-0.015872,
0.015062,
-0.049328,
-0.042535,
-0.053431,
-0.021794,
-0.002675,
0.016428,
0.000646,
0.002895,
-0.059307,
0.030537,
0.017997,
0.054230,
0.057048,
0.028187,
0.009670,
-0.019868,
-0.023546,
-0.086794,
-0.138650,
0.008755,
-0.076943,
-0.070824,
-0.051707,
-0.000380,
0.048279,
-0.142600,
-0.059353,
-0.135930,
0.024331,
0.061092,
-0.097921,
0.006998,
0.023544,
0.103360,
0.024908,
0.050946,
0.087560,
0.148480,
0.074501,
0.114950,
-0.062049,
-0.062732,
0.129570,
0.209570,
-0.009043,
-0.004352,
-0.015469,
0.063170,
0.076853,
0.015458,
0.036789,
0.056329,
0.028008,
0.115260,
-0.104130,
0.019427,
0.018484,
0.016204,
-0.006340,
-0.208910,
-0.111590,
-0.081041,
-0.139990,
-0.145920,
0.151450,
-0.008333,
-0.051093,
0.034021,
0.185480,
0.007832,
-0.024785,
-0.029427,
-0.072836,
0.005123,
0.064927,
0.031734,
0.084477,
-0.024710,
-0.032705,
-0.055518,
0.022584,
0.128730,
0.048177,
0.059881,
-0.084318,
-0.067395,
0.012255,
0.072557,
0.065191,
-0.019390,
-0.006380,
0.067925,
-0.016491,
0.166690,
0.025289,
0.064127,
-0.009072,
-0.029181,
0.093356,
0.179670,
0.028126,
-0.056948,
-0.031586,
0.014956,
0.188270,
0.075334,
-0.009918,
-0.020836,
0.068471,
-0.064560,
-0.119550,
0.086705,
-0.029531,
0.114810,
0.123300,
0.137760,
0.076127,
0.070092,
0.118970,
0.063460,
0.015453,
-0.011752,
0.019870,
-0.072297,
0.123950,
0.077288,
-0.132210,
-0.091411,
-0.109420,
0.063691,
0.016742,
-0.122860,
-0.063694,
-0.085450,
0.013107,
-0.038700,
-0.088110,
-0.154960,
-0.142510,
0.193780,
0.023439,
0.067505,
0.071749,
0.101670,
-0.037596,
-0.049050,
0.072670,
-0.045537,
-0.010894,
0.024648,
-0.046367,
-0.011706,
-0.026405,
0.044704,
0.046821,
-0.091159,
-0.027685,
-0.046040,
0.028021,
0.006763,
-0.006011,
0.036317,
-0.001843,
-0.012769,
-0.057544,
0.075835,
0.080313,
-0.014867,
0.063760,
0.124180,
0.212730,
0.018263,
0.077079,
-0.096760,
0.135740,
0.151760,
-0.025726,
0.075061,
-0.019160,
-0.006757,
-0.037280,
-0.013198,
0.065906,
0.039011,
-0.014261,
0.054294,
0.105660,
0.053296,
0.093799,
-0.002534,
-0.017476,
-0.058664,
0.014228,
0.066490,
-0.005280,
0.006687,
-0.052189,
-0.011700,
0.012406,
0.113560,
-0.017699,
-0.004004,
-0.165370,
-0.109020,
0.155800,
-0.042578,
-0.028917,
-0.223440,
-0.236180,
0.127030,
0.114760,
0.003309,
-0.086899,
-0.060054,
0.023164,
-0.004473,
0.071956,
-0.029396,
0.006520,
0.017094,
0.044619,
-0.029592,
-0.010387,
-0.073420,
0.027527,
0.003475,
-0.068120,
-0.015226,
0.017350,
0.029845,
-0.034645,
0.028284,
0.011071,
-0.078721,
0.165410,
-0.130170,
-0.119910,
0.005927,
-0.062466,
0.101680,
0.003142,
0.003689,
-0.051633,
0.050212,
-0.087121,
-0.108820,
-0.104420,
-0.026861,
0.036076,
0.008780,
-0.013432,
0.038684,
0.068266,
0.030040,
0.051847,
-0.061739,
-0.041315,
0.005059,
-0.061801,
0.138100,
0.040729,
0.046132,
0.001087,
0.007053,
-0.076494,
-0.056767,
-0.065406,
0.053981,
0.009405,
-0.051826,
-0.042596,
-0.062931,
-0.005429,
0.012639,
-0.016284,
-0.111470,
-0.043531,
0.061734,
0.116960,
-0.010122,
-0.031502,
-0.095556,
-0.124380,
0.001979,
-0.001978,
-0.084799,
-0.096203,
-0.076810,
0.089203,
-0.052430,
-0.110190,
-0.131910,
-0.240160,
-0.106640,
-0.067963,
-0.111080,
-0.112070,
-0.160100,
-0.238130,
-0.072280,
-0.044110,
0.011573,
-0.033142,
-0.124190,
-0.003698,
0.067972,
0.119470,
0.083226,
-0.099885,
0.031717,
0.071823,
0.004357,
-0.006187,
-0.056602,
0.010574,
-0.039572,
0.012099,
-0.006747,
-0.037062,
-0.035732,
-0.046497,
-0.010540,
-0.030529,
-0.030072,
-0.001518,
0.015305,
0.010238,
-0.028427,
-0.060485,
-0.011135,
0.026765,
-0.030029,
-0.029158,
-0.008062,
-0.019735,
-0.001546,
-0.004011,
0.006992,
-0.014825,
0.012725,
-0.018555,
0.006320,
0.001646,
0.148680,
0.127780,
0.097562,
0.088485,
-0.034610,
0.014104,
-0.080687,
0.027899,
-0.002347,
0.000253,
0.044014,
0.052011,
0.032258,
0.068407,
0.027643,
0.020727,
0.033277,
0.095859,
-0.003618,
0.056311,
-0.007403,
-0.096755,
-0.079338,
0.054172,
0.026755,
-0.129780,
-0.058743,
-0.084699,
-0.048556,
0.003000,
-0.148540,
0.025236,
0.018743,
-0.063132,
0.028791,
-0.036250,
0.073775,
-0.009974,
-0.058357,
0.024008,
-0.011312,
0.096413,
-0.104890,
0.010736,
-0.041748,
-0.161340,
0.072898,
-0.026035,
-0.035754,
-0.072346,
-0.089389,
-0.050434,
-0.054199,
0.076685,
0.070576,
-0.025581,
0.026285,
0.032616,
0.084045,
0.040702,
-0.069281,
0.137330,
0.070556,
0.128630,
0.201050,
0.091258,
0.198120,
0.152650,
0.029456,
0.157420,
0.221460,
-0.031814,
-0.012762,
0.009564,
0.013728,
-0.003586,
0.005680,
-0.032692,
0.023672,
0.000589,
-0.016581,
-0.024195,
0.010756,
-0.014815,
-0.037112,
-0.028050,
0.010792,
0.023314,
0.015165,
-0.002086,
0.018202,
0.024020,
0.017906,
0.023930,
-0.001006,
-0.016235,
0.194390,
0.097546,
0.048100,
-0.006575,
0.210570,
0.211210,
0.054403,
-0.002423,
-0.026582,
0.137480,
0.137140,
0.086161,
0.009642,
-0.050025,
0.073184,
0.010480,
0.026199,
0.044006,
-0.004240,
0.100650,
-0.225500,
-0.152710,
-0.059130,
-0.085437,
-0.216820,
0.068198,
0.110080,
0.081845,
0.100450,
0.084793,
-0.013076,
0.037974,
0.104220,
0.054373,
-0.006398,
-0.021149,
-0.000769,
-0.069172,
-0.009715,
-0.043778,
0.008495,
0.030471,
-0.154860,
-0.006389,
-0.073052,
-0.056441,
-0.055137,
-0.093212,
-0.058245,
-0.066744,
0.037872,
0.006312,
-0.077415,
-0.096551,
-0.103270,
0.085739,
0.086410,
-0.027156,
-0.040799,
-0.027385,
0.027830,
0.068443,
-0.018652,
-0.091514,
0.073852,
-0.124000,
0.059798,
0.093845,
-0.031142,
0.080734,
-0.053526,
-0.020108,
0.111540,
0.144280,
0.034924,
-0.125520,
-0.143580,
-0.039453,
-0.077774,
0.068843,
-0.010675,
0.014764,
-0.038640,
-0.080026,
-0.084715,
0.056307,
-0.009853,
-0.016532,
0.120410,
0.143510,
0.130900,
0.004666,
0.013665,
0.056258,
0.174520,
-0.017842,
-0.022948,
0.041337,
0.048736,
0.023634,
-0.088176,
-0.066669,
0.014653,
-0.037708,
0.088010,
0.163200,
0.060214,
-0.140110,
0.047616,
0.046170,
0.109750,
0.099027,
-0.055561,
-0.068411,
0.186450,
0.164060,
-0.006287,
0.041824,
-0.011631,
0.140710,
0.119350,
-0.092382,
0.085322,
0.010714,
0.012924,
-0.021320,
-0.012520,
-0.059835,
-0.016634,
-0.159240,
0.076549,
-0.020472,
-0.172870,
-0.063978,
-0.078677,
-0.050068,
-0.143510,
-0.188590,
-0.108490,
-0.137290,
-0.085139,
-0.132740,
-0.116360,
-0.103030,
-0.080090,
-0.070763,
-0.093235,
-0.026982,
-0.066098,
-0.180550,
0.024948,
-0.009090,
-0.014622,
0.017931,
0.048310,
-0.035883,
0.067954,
-0.048321,
-0.024647,
0.029444,
0.014878,
0.070428,
-0.007857,
0.037427,
0.017605,
0.008885,
0.035410,
-0.054301,
-0.002695,
0.003591,
0.068941,
0.008019,
-0.036687,
-0.026390,
0.010481,
-0.102960,
0.156010,
0.101480,
-0.127510,
-0.139120,
-0.179040,
0.121310,
-0.084330,
-0.120950,
-0.003812,
-0.101860,
0.014402,
-0.138150,
-0.130810,
-0.042333,
0.014280,
-0.012763,
-0.009215,
-0.081271,
-0.080126,
0.081605,
-0.029156,
0.091562,
0.079044,
-0.126110,
0.049217,
-0.019111,
-0.062179,
-0.093789,
0.032177,
-0.104030,
-0.065588,
-0.066928,
-0.067716,
-0.095153,
-0.061313,
-0.016101,
-0.021432,
0.044244,
0.069393,
0.039322,
0.057662,
-0.005874,
0.029279,
0.037620,
0.198790,
0.092416,
-0.050189,
-0.119480,
0.052057,
0.041109,
-0.033807,
-0.038977,
-0.022742,
-0.033621,
0.025551,
-0.026349,
0.011137,
-0.009815,
-0.035951,
0.004996,
0.032039,
-0.012818,
0.055145,
-0.036087,
-0.013371,
0.056633,
0.034790,
0.015348,
0.065622,
-0.004087,
0.012570,
0.031926,
0.022824,
-0.004344,
0.042881,
-0.029526,
0.019803,
0.051822,
0.124980,
-0.062090,
0.024344,
-0.005039,
-0.036415,
0.022260,
0.010035,
-0.079058,
-0.095290,
-0.115390,
-0.099782,
0.004901,
-0.037403,
-0.009510,
-0.009087,
0.047237,
-0.037531,
-0.058990,
0.009256,
0.036619,
0.079582,
-0.076234,
-0.021610,
-0.035710,
0.081946,
0.000009,
-0.126330,
-0.005579,
0.044347,
0.001221,
0.008569,
0.114590,
0.149250,
0.047050,
-0.091217,
-0.172730,
0.129350,
0.150890,
-0.039757,
-0.132240,
-0.286380,
0.013148,
-0.093688,
-0.171680,
-0.178750,
-0.371040,
-0.012067,
0.032612,
-0.023593,
0.043118,
0.019847,
0.040808,
-0.010243,
0.019866,
-0.015524,
-0.029040,
-0.012228,
0.012604,
-0.015886,
-0.011057,
0.020433,
0.015768,
-0.013904,
0.007360,
0.007139,
-0.010229,
0.007402,
-0.015379,
-0.007181,
-0.029335,
0.029089,
-0.108820,
0.005597,
-0.151810,
-0.033457,
-0.028099,
-0.064606,
-0.021949,
-0.058428,
-0.008668,
0.091721,
-0.061051,
-0.002272,
0.102520,
0.088213,
0.266480,
-0.014179,
0.092591,
0.103330,
0.109460,
0.195490,
-0.036312,
0.022438,
0.009637,
0.117730,
0.121820,
0.069289,
0.045662,
0.092388,
0.042870,
-0.064835,
0.012066,
0.054850,
-0.023988,
-0.015996,
-0.014576,
-0.017251,
0.009461,
0.048540,
0.052730,
0.074394,
0.005086,
-0.061465,
-0.003377,
0.011102,
-0.025591,
0.012266,
0.017679,
-0.064972,
-0.037500,
-0.020846,
-0.113140,
-0.092807,
0.005805,
-0.008477,
-0.040283,
0.038437,
0.026842,
-0.019062,
-0.060425,
-0.103130,
0.094854,
0.046232,
-0.043403,
-0.073297,
-0.056479,
0.069586,
-0.016417,
0.014581,
0.001436,
0.110570,
0.022883,
0.114780,
0.062056,
0.066448,
0.046954,
0.062390,
0.098059,
-0.011792,
-0.070886,
-0.083045,
-0.015012,
0.111170,
-0.014161,
-0.055230,
-0.200600,
-0.150570,
-0.051902,
-0.126650,
-0.001081,
-0.011466,
-0.085683,
-0.042775,
-0.176090,
0.006055,
0.072156,
0.058586,
0.022596,
-0.108840,
-0.015046,
0.105770,
-0.109620,
0.019414,
-0.032791,
-0.018024,
-0.029597,
-0.210150,
-0.107600,
0.044648,
0.030985,
-0.028440,
-0.119530,
-0.025853,
0.017232,
0.038519,
0.033782,
-0.050564,
-0.020075,
0.047513,
0.152280,
0.135290,
-0.035474,
-0.000136,
0.022440,
0.089131,
0.285220,
0.134420,
0.048688,
0.023613,
0.058783,
0.080584,
0.023091,
-0.046850,
-0.018519,
-0.097566,
-0.029409,
-0.088725,
-0.104610,
-0.066012,
-0.057001,
-0.088128,
-0.004447,
-0.064169,
-0.162380,
-0.072870,
-0.073487,
-0.018969,
0.038538,
-0.114010,
-0.114870,
-0.129770,
0.056614,
0.065419,
0.085700,
0.022528,
0.058068,
-0.067494,
0.030685,
0.078583,
0.088350,
0.086843,
-0.085084,
-0.060145,
0.074333,
-0.056472,
0.078710,
-0.076480,
0.105300,
0.001280,
0.029555,
0.002499,
-0.009754,
0.078780,
0.031152,
0.131150,
0.062522,
-0.085534,
0.019039,
0.007633,
0.012510,
-0.106770,
0.057958,
0.135710,
0.060356,
0.071760,
0.054122,
0.107450,
0.076473,
0.040013,
0.016117,
0.023080,
0.132630,
-0.016515,
-0.110800,
-0.001641,
0.159720,
0.007633,
0.081791,
-0.119490,
-0.024096,
0.045053,
0.139270,
0.076054,
0.148930,
0.082336,
-0.115190,
0.102530,
0.178360,
0.240310,
0.124390,
-0.056410,
-0.168910,
0.132420,
0.054271,
0.059847,
0.053257,
-0.044240,
0.036724,
-0.060325,
0.077641,
0.003751,
-0.116960,
-0.062217,
-0.070280,
0.015974,
-0.152680,
-0.123460,
-0.040098,
-0.013959,
-0.005277,
-0.184770,
-0.013936,
0.069324,
0.091029,
0.053034,
-0.050317,
-0.053063,
0.101370,
0.112120,
0.111500,
0.025613,
-0.164640,
-0.033437,
-0.078480,
0.084088,
0.149540,
-0.208990,
-0.196210,
-0.175860,
0.054999,
0.121730,
-0.142100,
-0.105540,
-0.060559,
-0.142950,
-0.061918,
-0.005086,
-0.013549,
0.019506,
0.103510,
0.029260,
0.010776,
0.011976,
0.070258,
0.087547,
0.019061,
0.153820,
0.016805,
-0.022689,
0.074472,
0.030585,
0.126620,
-0.012010,
-0.057769,
0.013485,
0.072947,
-0.057220,
0.085327,
0.195230,
0.045301,
-0.003489,
-0.094700,
0.134670,
0.241860,
0.172220,
0.048192,
-0.092827,
0.066773,
0.142990,
0.023008,
0.034430,
-0.133170,
0.036478,
0.037990,
0.110030,
0.104520,
-0.180550,
0.018669,
0.003443,
0.028859,
0.042398,
-0.048766,
-0.046010,
0.023184,
0.029224,
-0.050578,
-0.022823,
0.105970,
0.046605,
0.061975,
-0.099407,
0.034031,
0.077055,
0.100160,
0.064108,
0.091511,
-0.046602,
-0.010187,
-0.037791,
0.135920,
0.002640,
-0.054539,
0.085627,
0.130480,
0.047022,
0.054482,
-0.013926,
-0.084258,
-0.065764,
-0.050245,
0.016157,
-0.020537,
-0.063200,
-0.056927,
-0.009448,
0.023100,
0.081839,
0.049414,
0.020649,
0.049683,
0.005052,
0.065563,
0.113650,
0.198570,
0.081756,
0.033808,
0.009379,
-0.012487,
-0.071532,
-0.033448,
-0.050750,
0.003692,
0.032388,
-0.022691,
-0.012697,
-0.022649,
0.005024,
-0.025861,
0.007029,
-0.013636,
-0.071017,
0.004404,
-0.047806,
-0.026109,
-0.021248,
-0.070857,
-0.003762,
-0.020578,
-0.038197,
-0.002342,
-0.052256,
-0.034646,
-0.005133,
-0.052818,
-0.021391,
-0.027095,
-0.053335,
-0.050856,
-0.120750,
-0.125390,
-0.119410,
0.010947,
0.052475,
-0.096961,
-0.056135,
-0.063859,
0.098157,
-0.015506,
-0.110000,
-0.067391,
-0.024114,
0.052552,
-0.041800,
-0.017680,
-0.001834,
-0.038440,
-0.186470,
-0.071941,
-0.059845,
0.015302,
-0.067264,
-0.135130,
-0.143610,
-0.064159,
-0.007849,
-0.024650,
-0.059113,
-0.057318,
-0.092810,
-0.047577,
-0.027862,
0.035576,
-0.090645,
-0.115000,
-0.012957,
-0.088624,
-0.024015,
-0.064617,
-0.055497,
0.001146,
-0.034777,
-0.130450,
-0.086976,
-0.006390,
-0.102000,
-0.063419,
-0.092746,
-0.092565,
-0.046756,
0.070346,
0.007678,
-0.113880,
-0.037975,
-0.035280,
0.107350,
-0.052926,
-0.079078,
0.112800,
0.021545,
0.100650,
-0.109100,
-0.018676,
0.051169,
0.058154,
0.062022,
-0.098331,
0.163100,
0.245260,
0.242600,
0.149260,
0.097571,
-0.029971,
0.033818,
0.023229,
-0.019325,
0.011828,
0.018765,
0.021492,
-0.025512,
-0.048422,
-0.023066,
-0.038873,
0.003455,
-0.007114,
0.013697,
-0.022356,
-0.000980,
-0.006219,
0.000819,
-0.001011,
0.010049,
-0.028867,
0.014291,
0.000781,
-0.025910,
0.033935,
-0.084640,
0.022069,
-0.001880,
-0.117510,
-0.084345,
-0.027305,
0.001764,
-0.024277,
-0.106180,
-0.164070,
-0.126650,
-0.081088,
-0.042881,
0.006765,
-0.099110,
-0.073550,
-0.020376,
0.035539,
0.083372,
-0.039662,
-0.074637,
-0.027349,
-0.094018,
0.048050,
0.034039,
-0.118680,
-0.112650,
-0.020199,
-0.050755,
-0.070329,
-0.070610,
-0.114650,
0.056357,
0.073008,
0.063497,
-0.153000,
-0.142460,
-0.041776,
0.004661,
0.107720,
-0.179000,
-0.083216,
-0.009318,
0.076880,
0.032084,
-0.159590,
0.046245,
0.121810,
0.167350,
0.093180,
-0.069265,
-0.100040,
-0.066374,
-0.046202,
-0.024488,
-0.211970,
-0.072888,
-0.090535,
-0.026109,
0.015938,
-0.095387,
0.037548,
0.003969,
-0.033024,
-0.009341,
-0.068609,
0.004825,
0.001306,
-0.025792,
-0.089734,
-0.115700,
-0.039251,
0.009163,
-0.015157,
-0.034346,
-0.051444,
-0.049421,
0.028922,
0.109680,
0.016873,
0.125330,
0.163000,
0.140920,
0.131170,
0.147740,
0.042313,
0.103220,
0.163470,
0.115090,
-0.004704,
0.085669,
0.046346,
-0.079066,
-0.063603,
-0.053695,
-0.001438,
-0.043054,
-0.179570,
-0.181580,
-0.112310,
0.031162,
0.127750,
0.170050,
0.009074,
0.143770,
-0.076416,
-0.085946,
0.051368,
0.207530,
0.162340,
0.059723,
-0.021737,
-0.016667,
-0.057825,
0.023588,
0.127440,
0.201030,
0.111030,
0.059320,
-0.032443,
0.008818,
0.096796,
-0.024928,
0.101610,
0.163670,
0.035771,
-0.051236,
-0.108920,
-0.052006,
-0.059016,
-0.001666,
-0.065089,
-0.200440,
-0.147770,
-0.070967,
0.002355,
-0.007433,
-0.128870,
-0.135720,
-0.056377,
0.071655,
0.054888,
-0.003793,
-0.066288,
-0.052863,
0.084840,
0.060108,
0.069853,
0.052822,
-0.013320,
-0.090818,
-0.060733,
-0.025119,
-0.043364,
0.036459,
-0.032304,
-0.060959,
-0.009211,
-0.015270,
0.002422,
-0.019318,
0.032124,
-0.058419,
-0.021032,
0.011974,
-0.019280,
-0.016690,
-0.041985,
0.033703,
0.004497,
0.000715,
-0.076490,
-0.025957,
-0.047223,
0.053771,
0.032472,
0.067892,
-0.002762,
-0.017501,
-0.031869,
-0.092778,
0.029024,
0.055050,
0.043266,
0.114400,
0.074250,
0.137610,
0.041424,
0.036956,
0.167110,
-0.002810,
0.066809,
0.085181,
0.158330,
0.110200,
-0.005933,
-0.049278,
-0.039523,
0.032117,
0.155460,
0.017933,
0.084202,
-0.012921,
0.034122,
0.034231,
-0.071805,
-0.001386,
0.067451,
0.001262,
-0.008939,
0.035994,
0.066156,
-0.030315,
-0.043939,
-0.075841,
0.042202,
-0.029121,
0.030168,
-0.011417,
-0.084451,
0.084953,
0.009225,
-0.000665,
-0.024397,
-0.077169,
0.036168,
-0.007170,
0.016360,
-0.039507,
-0.074085,
0.002283,
0.003784,
0.040970,
0.007866,
-0.023875,
-0.015901,
0.007892,
0.022623,
0.023558,
-0.032217,
-0.061064,
0.046075,
-0.009775,
-0.022998,
0.030663,
-0.013932,
0.013670,
0.019963,
-0.000185,
-0.013088,
0.069670,
-0.112310,
-0.008826,
-0.030411,
-0.015609,
-0.038979,
-0.016572,
-0.090158,
0.053793,
-0.164100,
0.142010,
0.087902,
0.028058,
-0.082095,
-0.105100,
-0.022809,
-0.016173,
-0.091990,
0.025034,
-0.070161,
0.127880,
-0.037213,
-0.127370,
-0.087847,
-0.091017,
-0.068457,
0.087429,
-0.005432,
0.033632,
0.036841,
-0.210030,
-0.054675,
-0.085444,
-0.092734,
-0.006573,
-0.145040,
-0.137140,
-0.166740,
-0.020283,
-0.025903,
-0.166940,
-0.140980,
-0.031883,
-0.004956,
0.046491,
-0.091981,
0.014700,
0.000326,
0.158830,
0.218150,
-0.022239,
0.011868,
-0.025372,
0.021711,
0.037072,
0.001613,
0.007731,
-0.006523,
-0.019630,
-0.005429,
0.036835,
0.000842,
0.010314,
-0.003205,
0.018016,
-0.024211,
-0.003401,
0.035603,
0.010368,
0.023142,
-0.014032,
0.008227,
0.020705,
0.018754,
-0.002958,
0.133380,
-0.028496,
0.126830,
0.093471,
0.191620,
0.051566,
0.072429,
0.045765,
0.077355,
0.030132,
0.010568,
-0.004004,
0.075450,
0.047192,
-0.072911,
-0.025281,
-0.120640,
-0.045663,
-0.050602,
-0.147380,
-0.108610,
-0.168280,
-0.139890,
-0.042677,
-0.088298,
-0.034792,
-0.090999,
0.039755,
0.061906,
-0.022752,
-0.038783,
0.022742,
-0.006939,
0.028061,
0.028925,
0.070867,
-0.007063,
-0.019959,
-0.003198,
-0.000420,
0.003796,
0.014922,
0.034714,
0.027829,
0.008266,
-0.029190,
-0.026761,
-0.030620,
-0.039907,
0.037431,
0.037489,
0.009003,
-0.105740,
-0.221910,
-0.112510,
-0.098612,
-0.162470,
-0.001190,
-0.034630,
-0.081192,
-0.208960,
-0.161650,
0.020322,
-0.173550,
-0.161220,
-0.035110,
-0.180740,
-0.095707,
-0.100720,
-0.061641,
0.078586,
-0.027380,
0.006530,
-0.047171,
-0.069487,
-0.049537,
0.054025,
0.071154,
0.110220,
-0.047096,
0.049016,
0.076405,
0.037630,
0.036007,
0.049097,
0.051707,
0.113180,
0.095244,
0.087723,
0.035482,
0.058734,
0.106620,
0.131400,
0.026509,
0.102800,
-0.034183,
0.004170,
0.035237,
0.067356,
-0.063143,
0.020057,
-0.045214,
0.002589,
0.013744,
-0.017393,
0.091176,
0.091301,
-0.013617,
-0.001852,
-0.131990,
0.113640,
0.095722,
0.010423,
0.009502,
-0.162550,
0.042193,
-0.069890,
-0.051551,
-0.037890,
-0.067631,
0.120560,
0.008357,
-0.009955,
-0.091292,
-0.054350,
0.028290,
-0.037069,
0.013742,
-0.003553,
-0.122700,
-0.071596,
0.000634,
-0.052675,
0.071902,
-0.000776,
-0.036480,
0.046157,
0.042386,
0.049130,
0.007258,
0.000564,
-0.044847,
0.029068,
0.069509,
0.103190,
0.119270,
-0.020237,
0.096379,
0.102390,
0.192360,
0.072521,
0.065784,
0.079250,
0.122850,
-0.005651,
0.123520,
0.104890,
0.055182,
-0.038651,
0.035901,
0.090895,
0.029575,
0.060198,
0.052184,
0.018606,
-0.039973,
-0.001816,
0.113420,
0.066018,
0.103490,
-0.096968,
-0.017170,
-0.064672,
-0.097782,
0.127140,
0.077941,
-0.104060,
-0.139730,
-0.096533,
0.046136,
-0.026562,
-0.242170,
-0.165010,
-0.179660,
-0.186700,
-0.130000,
-0.097672,
0.063897,
0.012170,
-0.161910,
-0.127420,
0.031145,
0.212950,
0.067311,
-0.059385,
-0.009127,
0.119320,
0.221130,
0.174950,
0.191850,
0.044595,
0.054942,
0.019572,
0.039506,
0.017600,
-0.026383,
-0.047057,
-0.039716,
-0.092734,
-0.049188,
-0.039444,
0.092784,
-0.023569,
-0.067082,
-0.045032,
0.079870,
0.134410,
0.118570,
-0.025821,
0.004221,
0.241810,
0.173130,
0.122090,
0.076458,
0.174350,
0.138120,
-0.065505,
-0.108440,
-0.081243,
-0.068490,
0.123250,
-0.170560,
-0.079336,
-0.095345,
-0.209760,
0.039206,
-0.028667,
-0.089999,
-0.003893,
-0.049596,
0.118490,
-0.047587,
-0.002256,
0.097564,
-0.037586,
0.036231,
-0.033945,
-0.040071,
0.037516,
-0.026116,
0.073618,
0.070750,
0.120440,
0.075122,
-0.016023,
0.097860,
0.102020,
0.055887,
0.014396,
0.046655,
0.038163,
0.004795,
0.061171,
0.105380,
0.070668,
-0.074415,
-0.046427,
0.083287,
0.126010,
0.048139,
-0.068341,
-0.048282,
0.031961,
-0.033577,
-0.057215,
0.045699,
-0.064222,
-0.018017,
0.021298,
0.083609,
-0.029730,
-0.032674,
0.003885,
-0.091556,
-0.085402,
-0.053250,
-0.003662,
-0.054764,
-0.207560,
-0.107260,
0.030442,
-0.059918,
-0.073363,
-0.107680,
-0.153390,
0.032539,
-0.034465,
0.021283,
0.035403,
-0.045377,
0.052057,
0.132450,
0.035034,
-0.078255,
-0.101570,
0.063008,
0.048313,
-0.089870,
-0.132120,
-0.129020,
-0.089768,
-0.028170,
-0.083069,
-0.200700,
-0.115710,
-0.102020,
-0.108100,
-0.040000,
-0.143770,
0.105360,
-0.102970,
-0.062045,
-0.005810,
0.137750,
0.064402,
0.122610,
0.086238,
0.028985,
-0.003493,
0.001300,
0.065820,
0.044503,
-0.047853,
-0.075728,
-0.037415,
-0.020540,
0.019397,
-0.078346,
-0.126440,
-0.053810,
-0.054506,
-0.149480,
-0.122010,
-0.076703,
-0.038543,
-0.085145,
-0.082864,
-0.021188,
-0.039040,
-0.069515,
-0.011545,
0.040544,
0.051165,
0.014781,
-0.013079,
0.005646,
-0.023337,
0.015868,
0.027573,
0.048377,
0.014256,
0.020637,
0.044408,
0.013061,
0.027528,
-0.001228,
0.054242,
0.057251,
-0.036136,
-0.002188,
-0.028271,
0.033825,
0.041776,
0.012275,
-0.005633,
-0.104720,
-0.027118,
-0.094093,
-0.050086,
0.024650,
-0.040421,
-0.031161,
-0.064752,
0.078133,
-0.111200,
0.055299,
0.111740,
0.108340,
0.064002,
-0.021188,
0.035217,
0.109310,
0.052614,
-0.008274,
-0.026277,
0.043179,
0.047699,
0.078952,
0.055733,
-0.009920,
0.132010,
0.057208,
0.110330,
0.015339,
0.108110,
-0.080027,
0.049285,
0.082913,
0.068642,
0.147760,
0.059476,
0.053640,
0.125320,
0.077389,
0.098165,
-0.062621,
-0.068423,
-0.020000,
-0.057993,
-0.087552,
-0.038927,
-0.096399,
-0.129050,
0.008689,
-0.150350,
-0.086597,
-0.089797,
0.018948,
-0.047371,
0.075519,
-0.054954,
-0.048576,
-0.047290,
0.029846,
0.064419,
-0.115950,
-0.073211,
-0.104070,
-0.201040,
0.014426,
-0.030404,
-0.074152,
-0.055346,
-0.124450,
-0.039668,
-0.133110,
-0.055412,
-0.124900,
-0.091240,
-0.088706,
0.019943,
0.034428,
0.030710,
0.020992,
0.037608,
-0.010755,
0.005397,
0.006460,
-0.008905,
0.017480,
-0.002187,
0.050850,
-0.009976,
0.011197,
0.000286,
0.006204,
0.053361,
0.011356,
0.011558,
-0.008245,
0.004574,
0.044144,
-0.014244,
-0.015356,
-0.019054,
-0.028714,
0.098388,
0.043866,
-0.014144,
-0.050251,
0.176000,
0.123620,
-0.048933,
0.001385,
0.069076,
0.160520,
0.002490,
-0.151260,
-0.107550,
-0.024425,
0.143440,
-0.067910,
-0.159220,
-0.067239,
0.062082,
0.022338,
-0.042932,
-0.014538,
-0.104500,
-0.016149,
0.044270,
0.092547,
0.023291,
-0.002772,
-0.014676,
-0.006405,
0.023459,
0.016750,
0.034752,
0.074166,
0.078905,
0.042415,
0.025239,
0.053378,
0.129410,
0.101960,
0.060322,
0.016023,
0.107830,
0.152110,
0.065085,
0.034973,
-0.068967,
0.037155,
0.108140,
0.093479,
0.030223,
0.074968,
0.132780,
0.108590,
0.071988,
-0.037753,
-0.022468,
0.028941,
0.048612,
0.004578,
-0.138270,
-0.042787,
-0.083588,
0.002109,
-0.059596,
-0.127110,
-0.134560,
0.015273,
-0.012682,
0.079101,
0.011996,
-0.176080,
-0.127960,
-0.044438,
-0.065250,
0.060487,
0.139400,
0.070081,
0.048106,
-0.212320,
-0.049180,
0.000005,
0.004891,
-0.013818,
-0.210250,
-0.105780,
-0.087794,
-0.081417,
-0.041030,
-0.024442,
0.025696,
0.042485,
-0.074396,
-0.109720,
0.090804,
0.085412,
0.100850,
0.074523,
-0.058079,
0.098788,
0.001940,
-0.044889,
-0.024757,
0.035409,
0.065337,
-0.022577,
0.046924,
-0.041430,
-0.019901,
0.234620,
0.038353,
0.128790,
0.010439,
-0.080843,
0.068536,
-0.241560,
-0.146100,
-0.165630,
-0.039122,
0.134420,
-0.030484,
0.069379,
0.028004,
0.069364,
0.058780,
0.057327,
0.068969,
0.087663,
0.079623,
0.045327,
0.082161,
0.053574,
0.011580,
0.038179,
0.071538,
0.141310,
0.086505,
0.083997,
0.025820,
-0.016626,
0.035386,
0.031297,
0.043880,
-0.012819,
-0.008234,
0.011210,
-0.001283,
0.040200,
0.040328,
0.017341,
-0.024631,
-0.037394,
0.046266,
0.048563,
-0.036987,
-0.028458,
0.019039,
0.041891,
-0.019938,
0.004734,
-0.019947,
0.022289,
0.080592,
-0.011758,
0.045154,
-0.082468,
-0.003496,
0.070335,
-0.024315,
-0.022700,
-0.044693,
0.002854,
-0.038020,
-0.065869,
0.138550,
0.042244,
-0.013145,
0.052125,
0.295870,
0.075871,
-0.066891,
-0.021113,
0.138030,
0.092928,
-0.014638,
-0.059974,
-0.169570,
0.026794,
0.083592,
0.126510,
-0.069644,
-0.094808,
0.086466,
0.122370,
0.004086,
-0.090101,
-0.088213,
0.047124,
-0.001344,
-0.014115,
0.006681,
0.099171,
0.001031,
0.009220,
0.074880,
0.101520,
0.078873,
0.026412,
0.019215,
-0.068051,
-0.004492,
0.038383,
0.079715,
0.018600,
-0.148150,
-0.104030,
-0.010741,
0.060344,
0.034162,
-0.096775,
-0.073050,
-0.019259,
0.085409,
0.151460,
0.046544,
-0.011767,
0.012378,
0.006150,
0.022949,
0.061430,
-0.003740,
0.043606,
0.033279,
-0.031126,
-0.021516,
-0.017737,
-0.010257,
-0.019891,
-0.038008,
0.020209,
-0.006400,
-0.018620,
-0.031231,
-0.020273,
-0.006218,
0.033116,
-0.004503,
0.004066,
0.053988,
-0.047136,
0.078493,
-0.062428,
-0.006747,
-0.012705,
0.057627,
0.109850,
0.123570,
0.070182,
0.032404,
-0.014042,
0.155420,
0.043917,
0.048922,
0.102730,
0.060939,
0.018818,
0.039992,
-0.025646,
-0.091363,
-0.103690,
0.025823,
0.096826,
-0.064288,
-0.021945,
0.092911,
0.083497,
0.070506,
0.012366,
0.042486,
-0.006104,
0.057805,
-0.005688,
0.093204,
-0.095146,
0.008565,
0.057739,
0.076789,
0.007333,
-0.028216,
0.116700,
0.038247,
-0.085053,
-0.000101,
0.068572,
0.016715,
0.136470,
-0.008604,
-0.006455,
0.019927,
0.021986,
-0.030149,
-0.000730,
0.041267,
0.004368,
-0.004126,
-0.008927,
-0.018304,
0.036824,
0.041723,
-0.029401,
-0.019754,
0.012444,
0.029992,
-0.012391,
0.004520,
-0.000556,
0.026760,
0.002124,
-0.014741,
-0.022861,
-0.016434,
0.029718,
0.046580,
-0.012757,
-0.041854,
0.034999,
0.055662,
0.060464,
-0.107580,
0.072973,
0.099521,
-0.024733,
0.002910,
-0.052030,
0.025252,
-0.003434,
0.032677,
-0.012310,
-0.022255,
0.023990,
0.019129,
0.094157,
-0.046926,
0.066267,
0.062147,
0.034668,
-0.024770,
-0.020830,
-0.180190,
0.039767,
-0.023708,
0.060029,
0.074984,
-0.004472,
-0.012807,
-0.038880,
-0.048340,
-0.026361,
-0.009803,
0.015444,
0.046888,
0.001367,
0.014511,
0.016058,
0.057853,
0.054051,
0.037074,
-0.003396,
0.068982,
0.061699,
-0.013943,
0.005611,
-0.024904,
0.027725,
0.118180,
-0.021938,
-0.037206,
-0.078822,
0.016696,
0.088153,
0.019681,
-0.088383,
-0.073048,
0.012526,
0.147430,
-0.003487,
0.122280,
0.022027,
0.115390,
0.020700,
0.008110,
0.223000,
0.051032,
0.009036,
0.035771,
-0.051088,
0.042908,
0.033600,
-0.068806,
0.246030,
0.090722,
0.028637,
0.100740,
0.165080,
0.008990,
0.041835,
0.026100,
0.003232,
0.091801,
-0.030940,
0.105000,
-0.012557,
0.072394,
0.234680,
0.036862,
0.149570,
0.112710,
0.015426,
0.142790,
0.083241,
0.113780,
0.159290,
0.079855,
0.084160,
0.019642,
0.010908,
-0.052704,
-0.059298,
-0.009330,
-0.076917,
-0.158160,
-0.095284,
-0.036403,
0.033728,
-0.004757,
-0.149160,
-0.111390,
-0.031616,
0.050796,
0.004496,
-0.027099,
0.028145,
0.024349,
0.018773,
0.001038,
-0.044239,
0.032500,
-0.076214,
0.055623,
0.066462,
-0.021733,
0.070126,
0.050955,
0.229420,
0.052106,
0.084938,
-0.058273,
-0.019738,
0.132370,
-0.004117,
0.070499,
-0.047870,
0.007222,
0.097160,
0.040014,
-0.029576,
-0.076285,
-0.038145,
0.064744,
0.178650,
0.093383,
0.070622,
-0.032348,
0.043177,
0.189010,
0.198120,
0.187670,
0.082315,
0.302780,
0.105720,
0.175750,
0.027167,
0.039920,
0.054641,
0.137150,
0.043954,
0.026208,
-0.054746,
-0.113740,
0.033120,
0.005370,
-0.044012,
-0.090094,
-0.056080,
0.104740,
-0.007679,
-0.016170,
-0.025815,
0.102600,
-0.055019,
-0.006829,
-0.059130,
-0.055858,
-0.114880,
0.025579,
-0.023592,
-0.064092,
-0.026394,
-0.026741,
0.101420,
-0.038836,
0.010108,
0.016838,
0.109580,
0.169450,
0.111510,
0.080881,
-0.011243,
0.118790,
0.092611,
0.004044,
-0.034945,
-0.058023,
0.017902,
-0.040575,
0.075187,
0.040275,
0.206860,
0.254190,
-0.065317,
0.045580,
0.083977,
0.118340,
0.021385,
-0.004883,
0.055108,
-0.031385,
0.086863,
0.019498,
0.122800,
0.045879,
-0.060350,
0.034889,
0.157690,
0.119940,
0.005339,
-0.007223,
0.071908,
-0.062564,
0.062644,
-0.026470,
0.119020,
0.082366,
-0.030304,
0.079501,
0.029664,
-0.015428,
-0.003590,
0.029006,
0.168000,
0.040925,
0.070287,
-0.012738,
0.001537,
0.194540,
0.146190,
0.108470,
0.077651,
0.078535,
0.210860,
0.247180,
0.135950,
-0.027677,
0.063266,
-0.355340,
-0.173730,
0.002017,
-0.111280,
-0.217730,
-0.152580,
-0.032344,
0.067313,
-0.005836,
-0.150490,
-0.144120,
-0.086779,
0.010556,
-0.071226,
-0.129380,
-0.049961,
-0.060646,
-0.114530,
-0.058839,
-0.096248,
0.052746,
-0.030792,
-0.096567,
-0.160190,
-0.242210,
0.226960,
0.195110,
0.111350,
0.002567,
0.180750,
-0.012569,
-0.001631,
0.010055,
0.070001,
0.096685,
-0.025207,
0.042782,
-0.005628,
-0.095810,
0.052101,
-0.012272,
0.024107,
0.015082,
-0.063799,
-0.088594,
0.114310,
0.000717,
-0.028603,
-0.114500,
-0.022376,
0.055369,
-0.013302,
-0.021323,
0.038943,
0.005861,
0.113950,
0.036995,
-0.067064,
-0.125890,
0.026935,
0.050689,
-0.003354,
0.016072,
-0.021186,
-0.013276,
0.006386,
-0.132520,
-0.023205,
-0.026112,
-0.122800,
0.132740,
0.047190,
-0.095492,
-0.101080,
-0.313690,
-0.099923,
-0.078965,
-0.126310,
-0.153720,
-0.163720,
-0.071753,
-0.053836,
-0.020803,
-0.132500,
-0.099728,
-0.095387,
0.050500,
-0.000831,
-0.158200,
-0.149930,
-0.100200,
0.060711,
0.051754,
-0.023902,
-0.156290,
-0.129910,
-0.049931,
-0.042215,
-0.069419,
-0.107940,
-0.041035,
0.020431,
-0.003664,
0.057546,
0.021492,
-0.039825,
-0.018293,
0.002090,
0.000605,
-0.012366,
-0.008624,
-0.024228,
0.013286,
0.035488,
-0.029946,
0.012892,
0.032191,
-0.020458,
0.002573,
-0.045071,
-0.029970,
-0.024466,
-0.028492,
0.014874,
-0.033455,
-0.167630,
-0.084406,
-0.028339,
-0.010957,
-0.057544,
-0.016588,
-0.013735,
-0.126810,
-0.071615,
-0.037010,
0.055685,
0.056314,
-0.045322,
-0.034770,
0.023888,
-0.037136,
-0.007546,
0.032053,
0.058336,
0.006971,
-0.177650,
-0.111910,
-0.046082,
-0.039560,
-0.049508,
-0.125040,
-0.019752,
0.045921,
-0.047270,
-0.036890,
-0.001696,
0.068847,
-0.079793,
0.055957,
0.069621,
-0.047788,
-0.040196,
-0.050450,
-0.114860,
-0.100430,
-0.025171,
-0.045236,
-0.069652,
-0.014992,
-0.091774,
0.006334,
-0.128050,
-0.022090,
0.016554,
-0.019194,
0.074531,
-0.021906,
-0.017295,
-0.044559,
0.023635,
0.085148,
-0.152820,
-0.048713,
-0.040408,
0.000579,
-0.037646,
-0.103820,
-0.008707,
-0.104190,
-0.105250,
-0.155430,
-0.173650,
-0.015324,
-0.099127,
-0.037655,
-0.275530,
-0.239350,
-0.186720,
-0.132580,
-0.038262,
0.015481,
0.024825,
0.024468,
-0.009136,
-0.021278,
-0.001529,
-0.012686,
-0.015341,
0.036375,
-0.023755,
0.021560,
-0.006600,
0.014254,
0.030395,
-0.023901,
0.047183,
0.025200,
0.047949,
-0.002429,
0.029872,
-0.001746,
-0.024240,
-0.005675,
-0.017606,
-0.013688,
0.100100,
0.190010,
0.148570,
0.167390,
0.096407,
0.020290,
0.129760,
0.162370,
0.234500,
0.130180,
0.016572,
-0.047631,
0.050529,
0.016417,
0.034528,
0.192840,
-0.106400,
0.099950,
0.073575,
0.084174,
0.195980,
0.001101,
-0.031316,
-0.018266,
-0.025209,
0.142040,
0.077793,
0.027732,
-0.015940,
0.066369,
0.124360,
0.120520,
0.130060,
0.060836,
0.192270,
-0.013502,
0.014649,
0.049603,
0.020439,
0.171830,
-0.000424,
-0.022196,
0.046522,
0.072021,
-0.007891,
0.091954,
0.128910,
0.128300,
0.132950,
0.037304,
0.028961,
0.062365,
0.116040,
0.077628,
0.072326,
-0.003888,
0.041678,
-0.007737,
-0.037811,
-0.019042,
-0.008852,
-0.010018,
-0.034078,
-0.067544,
-0.039859,
-0.053004,
0.021100,
0.051853,
-0.028287,
0.016999,
-0.152860,
-0.043658,
0.071210,
0.137630,
0.102250,
-0.012764,
-0.005171,
0.016149,
-0.023238,
-0.026869,
-0.015720,
0.024362,
0.034741,
-0.019204,
-0.049193,
-0.043176,
0.020604,
0.048134,
0.049195,
0.072699,
0.019723,
-0.006006,
0.053406,
-0.020268,
-0.009447,
0.000100,
-0.043262,
0.009384,
0.081018,
0.102620,
0.002464,
-0.103550,
-0.078089,
-0.068136,
-0.061933,
-0.072983,
-0.014288,
0.074166,
0.035899,
0.053931,
0.096556,
-0.014390,
-0.038845,
-0.140140,
0.015258,
0.063112,
-0.136830,
0.113060,
-0.073214,
-0.096019,
0.133540,
-0.122400,
-0.030257,
-0.252890,
-0.115930,
-0.100310,
-0.036675,
0.030896,
0.029969,
-0.018105,
0.024642,
0.004759,
-0.055510,
-0.003531,
-0.057209,
-0.002223,
0.080001,
0.055039,
-0.011772,
-0.054447,
-0.040634,
0.118730,
0.040024,
-0.024120,
0.019655,
0.027943,
0.181670,
0.151840,
0.172520,
0.090185,
-0.039282,
-0.000967,
-0.000303,
-0.033998,
0.022957,
-0.033452,
0.001670,
-0.067072,
-0.010294,
-0.021396,
0.006063,
-0.002611,
-0.024203,
-0.040150,
0.022566,
0.014116,
-0.031924,
0.008200,
0.008924,
0.038815,
-0.039305,
-0.028631,
-0.035298,
0.009771,
0.026248,
-0.002316,
0.000492,
0.055937,
0.179710,
0.116820,
0.009723,
0.060689,
0.010565,
0.081658,
0.210640,
-0.067707,
0.050433,
-0.059373,
0.012799,
0.206080,
-0.080913,
0.010230,
-0.014812,
0.013656,
0.119380,
-0.043693,
-0.094437,
-0.061337,
0.037569,
0.014350,
-0.022756,
0.076715,
0.011612,
0.025143,
-0.056338,
-0.032879,
0.044550,
0.072722,
0.017089,
-0.096328,
-0.129630,
0.080728,
-0.043155,
-0.067912,
-0.056893,
-0.088605,
0.036588,
0.007818,
-0.035299,
-0.014702,
0.062584,
0.115200,
0.052230,
0.067036,
-0.086510,
0.004904,
0.007150,
-0.028949,
0.002767,
0.016151,
0.011844,
0.047053,
0.045881,
-0.008944,
0.017123,
-0.001019,
0.000685,
0.011312,
-0.049275,
0.015146,
0.033003,
0.035783,
-0.014779,
0.037625,
-0.007155,
-0.047571,
-0.013604,
-0.013779,
-0.024622,
0.006081,
-0.002568,
0.092552,
0.160660,
0.158360,
0.109450,
-0.050097,
0.010989,
0.091673,
0.275390,
-0.038673,
0.152540,
0.043135,
0.151760,
0.130950,
-0.052006,
0.058781,
0.161240,
0.075293,
0.034904,
0.013460,
-0.028594,
0.043956,
0.061489,
0.004084,
0.035632,
-0.000733,
-0.021441,
-0.063115,
-0.020919,
0.187830,
-0.027010,
-0.200990,
-0.158980,
0.059267,
0.159850,
-0.028542,
-0.136310,
-0.055194,
-0.041482,
0.045271,
0.052020,
0.047418,
0.157950,
-0.002354,
-0.013842,
0.111450,
0.135080,
0.211730,
0.122150,
-0.001494,
-0.026908,
0.005419,
0.001838,
-0.021160,
-0.022536,
-0.012384,
0.025702,
0.003612,
0.032038,
-0.021988,
0.015415,
-0.028474,
0.030174,
0.021154,
-0.019669,
-0.007356,
0.011075,
0.006037,
-0.011596,
-0.008867,
-0.003219,
-0.029866,
-0.021023,
0.044472,
0.017542,
-0.218450,
-0.070949,
-0.123820,
-0.078955,
-0.086545,
0.039748,
0.009018,
0.011032,
-0.051147,
-0.240740,
0.047664,
0.031586,
0.050657,
-0.005879,
0.003710,
0.027587,
0.074151,
-0.046349,
0.093294,
-0.086724,
0.032759,
0.099811,
0.152250,
0.075860,
0.039836,
0.046334,
0.049317,
0.032651,
-0.011153,
0.057623,
-0.006024,
-0.054176,
-0.015474,
0.015017,
0.103670,
0.008173,
-0.008054,
0.001029,
-0.009197,
-0.038314,
-0.000292,
-0.003387,
0.000808,
-0.054348,
-0.034722,
0.032799,
0.010243,
0.057500,
0.015441,
0.051000,
0.016351,
0.096503,
0.036056,
0.056002,
-0.055311,
-0.128030,
-0.098780,
-0.010512,
0.142690,
0.056844,
-0.143910,
-0.132580,
-0.220070,
0.055525,
0.093921,
-0.134400,
-0.233480,
-0.064485,
0.072656,
0.036442,
-0.120880,
-0.194410,
-0.058543,
0.065854,
0.041252,
-0.064868,
-0.109360,
-0.057877,
-0.095238,
-0.061628,
-0.025087,
-0.089864,
-0.051647,
0.101940,
0.052465,
-0.026737,
-0.124320,
0.100970,
0.111720,
0.126980,
-0.097559,
-0.235060,
0.000375,
0.207180,
0.262080,
0.076234,
0.056326,
0.035611,
0.034833,
0.018871,
-0.021972,
0.043220,
0.031008,
0.128750,
0.140990,
-0.092874,
-0.033645,
0.063557,
0.130240,
0.103350,
-0.040201,
-0.027095,
0.035952,
0.055907,
0.165100,
0.036642,
-0.014134,
-0.135160,
-0.063450,
0.009926,
0.119360,
0.017322,
-0.049821,
-0.145400,
-0.306450,
0.131870,
0.279680,
0.126950,
0.082582,
0.059032,
0.007829,
0.082435,
0.119870,
0.060610,
0.030132,
0.180790,
0.098657,
-0.021131,
0.014997,
0.000378,
-0.107990,
-0.111750,
-0.117750,
-0.100600,
0.108090,
-0.170500,
-0.099043,
-0.002874,
0.071450,
0.103310,
-0.119940,
0.082047,
0.062881,
0.015586,
-0.032631,
-0.100050,
0.078770,
0.112720,
0.123780,
-0.115950,
-0.092209,
0.075028,
0.113950,
0.067647,
-0.100450,
-0.071747,
0.005067,
-0.093357,
-0.073722,
-0.037932,
-0.161100,
0.045538,
-0.031626,
0.080277,
-0.133090,
0.019680,
-0.174230,
-0.043091,
0.149290,
0.263260,
-0.116020,
-0.268720,
-0.000973,
0.214730,
0.198910,
0.149560,
-0.108370,
0.091564,
0.224000,
0.113600,
0.173220,
-0.231990,
-0.104540,
-0.103230,
0.004992,
0.061667,
-0.011764,
-0.072796,
-0.044365,
-0.087416,
-0.188830,
-0.231750,
-0.097451,
0.017798,
-0.018832,
-0.015434,
-0.104650,
-0.284620,
-0.105360,
-0.022175,
0.071241,
-0.130450,
-0.276430,
-0.073168,
0.134030,
-0.000368,
-0.036890,
-0.034343,
-0.044007,
0.008570,
-0.053455,
-0.228000,
-0.005842,
-0.237530,
-0.202950,
-0.105210,
0.175820,
0.226260,
0.185800,
0.136590,
-0.100020,
0.080857,
0.125060,
0.175130,
0.079241,
0.079452,
0.188250,
0.059128,
-0.092696,
-0.085854,
0.045873,
0.026985,
-0.065931,
-0.194880,
-0.148140,
-0.207010,
0.018497,
-0.217130,
-0.106390,
-0.242950,
0.033365,
-0.022014,
-0.037441,
0.101710,
0.067733,
0.004711,
-0.100060,
-0.076454,
0.125330,
0.061371,
0.004926,
-0.015364,
-0.005814,
0.047430,
0.010131,
0.062566,
0.045439,
0.015817,
-0.112250,
-0.096602,
-0.112370,
-0.003986,
-0.077991,
-0.009677,
0.088837,
-0.136870,
-0.132890,
-0.139530,
-0.115220,
-0.214820,
-0.136690,
-0.040118,
0.064298,
0.110800,
-0.085027,
-0.266070,
-0.143320,
0.107360,
0.210570,
0.039554,
0.028458,
0.039974,
0.070320,
0.097035,
0.171940,
-0.058539,
0.008530,
-0.027451,
0.127420,
0.059494,
0.025277,
0.076136,
0.116770,
0.006863,
-0.083429,
-0.044071,
0.037167,
0.103340,
0.130910,
-0.015301,
-0.076678,
-0.048275,
-0.127730,
0.076921,
0.106380,
-0.202270,
-0.169680,
-0.002145,
0.063698,
-0.038115,
-0.069642,
0.042742,
-0.030737,
0.018779,
-0.056032,
0.038921,
0.141160,
0.186520,
0.103330,
0.036537,
0.066604,
0.056349,
0.103290,
0.003249,
0.019203,
0.084885,
0.016847,
0.094220,
0.019959,
-0.001192,
0.018566,
-0.139560,
-0.193700,
-0.133070,
-0.040049,
0.133570,
0.070274,
-0.049854,
-0.023306,
-0.088022,
0.008118,
0.006386,
-0.033457,
0.023160,
0.001732,
0.009616,
0.023774,
0.012476,
0.016329,
-0.004192,
-0.037856,
0.008108,
0.005203,
0.029748,
-0.013844,
-0.006276,
0.013872,
0.008368,
-0.004682,
-0.017311,
-0.029606,
0.018547,
0.028931,
0.013835,
0.010369,
-0.042040,
-0.020140,
0.043878,
-0.041673,
-0.099748,
0.093676,
0.020810,
-0.002575,
-0.045568,
0.005068,
0.099459,
0.018886,
-0.160770,
-0.137160,
-0.237530,
-0.050993,
0.072180,
-0.122260,
-0.135410,
-0.204670,
-0.169430,
-0.078529,
-0.014387,
-0.080792,
-0.127540,
-0.164230,
-0.144210,
0.019119,
-0.076312,
-0.073615,
-0.076087,
-0.136110,
-0.102260,
-0.181710,
-0.114580,
0.026978,
-0.011842,
-0.095894,
0.016094,
0.088331,
-0.039634,
-0.020543,
0.011883,
0.016524,
0.147820,
-0.053490,
0.016925,
-0.007594,
-0.007040,
0.080190,
-0.118580,
-0.270920,
-0.054784,
-0.152600,
-0.059166,
0.066668,
-0.093324,
-0.130010,
-0.017844,
0.074331,
0.005276,
-0.169510,
-0.053724,
0.207870,
0.429860,
-0.116620,
-0.260480,
-0.070486,
0.107940,
0.254330,
-0.011642,
-0.023039,
0.003326,
0.091868,
0.154160,
-0.024065,
-0.029764,
-0.019499,
-0.032243,
0.029357,
-0.028973,
-0.016275,
0.032780,
0.032809,
-0.004748,
-0.005741,
0.019358,
0.019636,
0.032994,
0.017530,
-0.000760,
-0.020459,
0.024967,
0.000818,
-0.001192,
-0.007219,
0.018922,
-0.012732,
-0.021738,
-0.007493,
-0.307120,
-0.263750,
-0.066719,
0.048178,
0.051989,
-0.142580,
-0.174570,
-0.052620,
0.030687,
0.154720,
0.126340,
0.048125,
0.024473,
0.109160,
0.095003,
0.112390,
0.021548,
-0.036095,
0.062296,
0.021471,
0.116860,
0.131990,
0.079880,
0.001066,
0.037337,
-0.016177,
-0.009924,
0.054258,
0.034448,
0.154680,
0.023270,
0.047852,
-0.117930,
-0.101710,
-0.000801,
0.093382,
0.068191,
0.093674,
0.001018,
-0.004493,
0.008868,
0.074272,
0.119580,
0.021452,
-0.050070,
0.002635,
0.072846,
0.045306,
-0.044010,
-0.032007,
-0.069223,
-0.165830,
-0.163900,
-0.183440,
-0.139310,
0.143500,
-0.016015,
-0.032879,
-0.071927,
-0.045911,
0.067553,
-0.108090,
-0.018276,
0.089541,
0.072789,
-0.119930,
-0.066934,
0.032301,
0.143310,
0.175560,
-0.091157,
0.024209,
0.152290,
0.172010,
0.213320,
-0.137770,
-0.236380,
-0.239050,
-0.052723,
0.080521,
-0.166970,
-0.198110,
-0.181380,
0.175240,
0.150280,
-0.023796,
-0.060363,
0.040685,
0.172690,
0.143970,
0.135640,
-0.045561,
-0.120900,
-0.020468,
0.020344,
-0.052097,
-0.056364,
-0.027402,
0.049396,
-0.114020,
-0.023983,
-0.107030,
-0.103210,
-0.018888,
0.079391,
-0.108950,
-0.196040,
-0.022771,
0.159270,
0.213420,
-0.086691,
-0.070725,
-0.018921,
0.093201,
0.175440,
-0.036378,
-0.218200,
-0.176900,
0.202640,
0.101500,
-0.086629,
-0.033060,
-0.036439,
-0.040856,
0.059360,
-0.001194,
0.014280,
0.067684,
-0.011193,
-0.093106,
-0.120890,
-0.036981,
0.095944,
-0.055403,
-0.151730,
-0.090017,
-0.087523,
0.045261,
-0.026847,
-0.016429,
0.017853,
-0.003439,
0.093274,
0.020067,
0.000528,
0.012321,
0.038183,
0.016778,
-0.015075,
0.058181,
0.001517,
0.030860,
0.062459,
0.047016,
-0.018087,
0.076255,
0.046514,
0.016583,
-0.014915,
-0.003973,
0.023149,
0.055497,
0.047415,
0.011989,
-0.015555,
0.021431,
0.014260,
0.057200,
-0.006562,
0.027349,
0.030914,
0.046179,
0.009694,
0.005983,
-0.029028,
-0.016413,
-0.031338,
0.087626,
0.056198,
0.127170,
0.048943,
-0.010086,
0.183480,
0.063781,
0.082148,
0.059609,
0.013295,
0.157850,
0.051635,
-0.039088,
0.119980,
-0.025005,
0.086046,
-0.060070,
-0.056028,
0.097532,
-0.061549,
-0.027506,
-0.105750,
-0.000638,
-0.068635,
0.043938,
0.126070,
0.097893,
0.085552,
-0.082909,
0.002951,
0.078597,
-0.040235,
0.110210,
-0.093273,
-0.063108,
-0.023232,
-0.021851,
-0.021212,
-0.052427,
-0.112150,
-0.052075,
0.029984,
0.031730,
0.107080,
0.087930,
0.089231,
0.112350,
0.049096,
-0.017156,
0.018800,
0.003653,
0.030902,
-0.021998,
-0.007142,
0.014521,
0.016670,
0.026900,
0.007167,
-0.026739,
0.007175,
-0.004467,
-0.009486,
0.011949,
-0.008248,
-0.022938,
-0.004766,
0.039204,
-0.025517,
-0.032609,
-0.020010,
-0.007098,
-0.011530,
0.009431,
0.135070,
0.052633,
-0.055465,
-0.018877,
0.184850,
-0.038864,
-0.138430,
-0.104680,
-0.144780,
0.038400,
-0.019736,
-0.137820,
-0.014985,
0.031444,
-0.039347,
0.249430,
-0.058818,
0.005984,
-0.100390,
-0.094546,
0.141030,
-0.019848,
0.068818,
-0.023306,
-0.105210,
0.131320,
0.114070,
0.003101,
-0.224770,
-0.194580,
0.146920,
0.169650,
0.100640,
0.008511,
-0.184390,
0.088620,
0.056504,
0.059220,
-0.037001,
-0.072641,
0.151660,
0.182790,
0.018687,
0.017833,
0.028618,
0.131500,
0.083198,
-0.025138,
-0.014397,
-0.043964,
-0.014878,
-0.022502,
0.001081,
-0.002896,
-0.011967,
-0.026058,
-0.010974,
0.011540,
0.014671,
0.035154,
-0.022772,
-0.039308,
0.022760,
-0.014760,
-0.006752,
-0.031464,
0.004222,
0.020881,
0.004722,
-0.020985,
0.014395,
-0.036127,
0.009380,
0.025501,
0.041345,
0.113490,
0.162010,
0.211670,
0.062650,
-0.004899,
0.092581,
0.013897,
-0.012350,
0.005004,
0.003948,
0.034379,
-0.009655,
-0.039821,
0.054780,
0.035020,
-0.011702,
0.077194,
0.042616,
-0.012512,
0.038854,
-0.009779,
0.002220,
-0.004263,
-0.018441,
0.074728,
0.027132,
-0.074146,
-0.013200,
-0.042039,
0.045398,
-0.020467,
0.016214,
0.008208,
0.061668,
0.040230,
0.027988,
0.006268,
0.066616,
0.066204,
0.012304,
-0.051509,
-0.076000,
-0.010907,
0.050531,
0.012331,
-0.034062,
-0.047781,
-0.052618,
-0.035827,
-0.072184,
0.103300,
0.107240,
0.092601,
0.043380,
0.045589,
-0.098599,
0.032481,
-0.009665,
-0.006732,
0.060415,
0.006795,
-0.021648,
-0.120200,
-0.057912,
-0.090113,
-0.037160,
-0.063789,
-0.113900,
-0.078125,
0.025892,
-0.094725,
-0.053541,
-0.094771,
-0.036755,
-0.007652,
-0.007335,
0.107870,
0.097096,
0.016155,
-0.109380,
0.027878,
0.074925,
0.108890,
-0.046395,
-0.019176,
-0.036995,
-0.000413,
-0.088546,
-0.171830,
-0.111960,
-0.070959,
-0.082227,
-0.035954,
-0.059212,
-0.156280,
-0.035207,
-0.038497,
-0.060128,
0.013602,
-0.013801,
-0.166310,
0.019902,
0.103070,
0.108930,
-0.045693,
-0.077826,
0.044912,
0.132510,
0.104870,
-0.044062,
-0.096930,
0.036742,
0.152200,
0.105760,
-0.003914,
-0.011239,
-0.049280,
0.083925,
0.113670,
-0.063885,
0.005001,
0.056547,
0.050997,
0.171140,
0.087078,
-0.119190,
-0.086821,
-0.003751,
0.020456,
0.013086,
-0.034651,
-0.104760,
-0.095081,
0.077803,
0.104770,
0.039176,
-0.123140,
-0.177310,
-0.055798,
0.070829,
-0.097499,
-0.060358,
-0.037427,
0.161660,
0.041097,
0.035839,
-0.106190,
-0.119250,
-0.068388,
-0.070802,
0.017747,
0.052149,
0.054530,
0.028718,
0.090750,
0.099349,
0.109950,
0.090490,
0.127680,
0.095516,
-0.022557,
-0.116860,
-0.008421,
0.041732,
0.052344,
-0.230660,
-0.144310,
-0.027826,
0.071889,
-0.012008,
-0.073393,
-0.114590,
-0.104840,
-0.101120,
-0.076620,
-0.009722,
0.159990,
0.163950,
0.043605,
-0.203570,
-0.007571,
0.193860,
0.206660,
0.168730,
-0.110050,
-0.100430,
0.025142,
-0.032178,
-0.050430,
-0.074297,
0.049474,
0.133890,
0.136160,
0.132790,
0.004682,
-0.075951,
-0.007577,
0.130930,
0.230740,
-0.052637,
-0.037298,
-0.035706,
0.086228,
0.038349,
-0.020770,
-0.047248,
0.022857,
-0.000208,
-0.002519,
-0.026997,
-0.017588,
0.059757,
-0.005017,
0.136950,
0.024350,
0.019315,
0.049726,
-0.099257,
0.084717,
-0.001768,
-0.079281,
-0.030713,
0.053234,
0.024882,
0.086527,
-0.072971,
-0.073831,
-0.032922,
-0.139840,
-0.048664,
0.062195,
0.018417,
-0.034915,
-0.024359,
-0.117950,
0.110710,
-0.116480,
-0.164900,
-0.056550,
-0.009498,
0.064675,
-0.076369,
-0.021942,
0.035320,
0.101070,
0.114640,
0.090066,
0.091473,
0.145370,
0.271210,
-0.146120,
-0.052308,
-0.006616,
-0.082090,
0.135390,
-0.158650,
-0.056535,
-0.024916,
-0.014432,
0.072042,
-0.041466,
-0.091556,
-0.078530,
-0.055707,
0.131370,
-0.037563,
-0.012754,
-0.068935,
-0.009782,
0.208480,
0.024002,
0.196870,
0.108080,
0.129670,
0.146330,
-0.073559,
-0.130350,
-0.105720,
0.009676,
0.073870,
-0.031346,
-0.116140,
-0.130020,
-0.133750,
0.024059,
-0.086623,
-0.150200,
-0.103680,
-0.125000,
-0.019419,
-0.091782,
-0.006924,
-0.051486,
0.051982,
0.148110,
0.012151,
-0.057573,
-0.152240,
0.006667,
0.034594,
0.157580,
0.157620,
0.034423,
-0.044447,
-0.105230,
0.093704,
-0.029509,
-0.089433,
-0.080733,
0.034647,
0.027405,
-0.074028,
-0.105260,
-0.061054,
0.014295,
0.022491,
-0.072335,
-0.067263,
-0.119920,
0.140410,
-0.164400,
-0.063900,
-0.021444,
0.080599,
0.211530,
-0.194450,
-0.050804,
-0.049917,
-0.013181,
-0.080702,
-0.168770,
0.057060,
0.208710,
0.137440,
-0.016504,
-0.186740,
0.090031,
0.161900,
0.075495,
0.019906,
-0.074794,
0.017573,
0.052627,
-0.105050,
-0.131290,
-0.225510,
-0.110430,
-0.085370,
-0.102840,
-0.124040,
-0.009660,
0.014964,
0.020452,
0.020931,
0.019382,
-0.039257,
-0.030333,
0.010085,
0.007701,
0.049635,
0.038189,
0.013171,
-0.009982,
-0.019030,
-0.017768,
-0.022425,
-0.006431,
0.010562,
0.013751,
0.013794,
0.011649,
0.009402,
0.040498,
0.014993,
0.014148,
0.053481,
0.021967,
-0.031401,
-0.095907,
-0.062514,
0.008330,
0.007252,
-0.006815,
-0.191250,
0.051296,
-0.048028,
0.061754,
0.013635,
0.083361,
0.041934,
0.067122,
-0.049711,
0.038017,
0.116260,
0.071810,
0.162520,
0.105900,
0.210290,
0.155520,
0.159720,
0.177500,
-0.065719,
-0.030672,
0.019028,
0.140600,
0.047174,
-0.089238,
-0.196300,
-0.111160,
0.159630,
-0.026825,
-0.128470,
-0.157500,
-0.143600,
0.156160,
-0.006014,
-0.118120,
-0.105480,
-0.027641,
0.027654,
0.017543,
0.076428,
0.026759,
0.033798,
0.010802,
0.023003,
-0.057546,
-0.000650,
0.017763,
0.023470,
-0.133330,
-0.121370,
-0.117580,
-0.127710,
-0.018371,
-0.081058,
0.007281,
-0.129650,
-0.243330,
-0.187880,
-0.065205,
0.063182,
-0.251500,
-0.263430,
-0.148360,
-0.043850,
-0.092919,
-0.189050,
-0.130830,
-0.157720,
0.024622,
0.004713,
-0.007491,
0.018969,
-0.010393,
-0.004978,
0.008595,
-0.018520,
0.030946,
-0.003435,
0.006736,
-0.010688,
0.013091,
0.047508,
-0.027344,
-0.015003,
0.011315,
0.022949,
-0.027469,
-0.012531,
0.004054,
-0.029551,
-0.028673,
0.016385,
0.015537,
-0.056741,
-0.088827,
-0.046680,
0.018313,
0.042516,
-0.030811,
-0.043250,
0.087220,
0.033228,
0.027375,
-0.005341,
-0.046827,
0.036608,
-0.014185,
-0.067742,
-0.292170,
-0.077663,
0.021031,
0.054498,
-0.032534,
-0.007472,
-0.031847,
0.014005,
0.141850,
0.037816,
0.078390,
-0.007918,
-0.187910,
-0.171410,
0.143850,
-0.001314,
-0.063722,
-0.151180,
-0.035193,
0.119480,
-0.100350,
-0.078003,
-0.051287,
-0.040977,
0.075563,
-0.022190,
-0.069526,
-0.011644,
-0.039094,
0.063167,
0.073203,
-0.088229,
-0.077971,
-0.021449,
0.092545,
0.074103,
0.052925,
0.106990,
0.221370,
0.245600,
0.007063,
-0.172120,
-0.152420,
-0.088508,
0.143940,
0.019764,
-0.237800,
-0.292150,
-0.143530,
-0.067904,
0.035466,
-0.208110,
-0.206440,
-0.166370,
-0.113710,
-0.036022,
-0.208480,
-0.218660,
-0.152000,
-0.155950,
-0.022784,
-0.089851,
-0.096786,
-0.147820,
-0.127880,
-0.184330,
-0.126850,
-0.055941,
0.041005,
-0.139350,
0.060410,
-0.117160,
-0.104090,
0.050761,
0.009033,
0.049347,
0.064856,
0.094697,
0.045055,
0.093065,
0.008501,
0.181380,
0.140460,
0.122640,
0.072759,
-0.074931,
0.003188,
-0.075361,
0.007811,
-0.075343,
-0.147400,
-0.012140,
-0.166600,
-0.117780,
-0.020826,
0.190230,
0.016880,
-0.041529,
0.014805,
-0.023539,
-0.085168,
-0.044284,
-0.008077,
0.065370,
-0.038201,
-0.071674,
0.077641,
-0.000247,
0.088916,
0.066641,
-0.044426,
-0.002217,
-0.000874,
0.118610,
0.081869,
0.046822,
0.024678,
0.020904,
0.089232,
0.132210,
0.113900,
0.046238,
0.071353,
0.064644,
0.057502,
0.048494,
0.091370,
-0.021904,
-0.024447,
0.011238,
-0.025235,
0.002527,
-0.009780,
-0.106960,
-0.035183,
-0.023783,
-0.024930,
-0.024172,
-0.043025,
-0.044346,
-0.032986,
-0.062093,
-0.007211,
-0.066745,
-0.022140,
0.012265,
0.007569,
0.018866,
-0.025763,
-0.076206,
-0.029839,
-0.017004,
-0.016091,
-0.016243,
-0.005393,
0.014159,
-0.009834,
0.027356,
-0.031551,
0.003282,
-0.185870,
-0.031660,
-0.092678,
-0.160470,
-0.044312,
-0.031959,
0.037475,
-0.070368,
-0.058546,
0.073445,
-0.132360,
-0.025714,
-0.086554,
-0.056562,
0.019436,
-0.056226,
-0.083421,
-0.145590,
-0.017417,
0.045608,
-0.073052,
-0.004317,
0.051184,
-0.033231,
0.028068,
0.154360,
0.020038,
0.022323,
0.027829,
-0.002930,
0.213360,
-0.045586,
-0.028760,
-0.038805,
-0.038438,
-0.006406,
0.014781,
0.008977,
-0.052047,
0.020587,
0.011038,
0.049950,
-0.051408,
-0.048790,
-0.008280,
-0.059876,
-0.142070,
-0.021300,
-0.094919,
-0.053232,
0.022127,
0.081805,
0.034310,
0.071652,
0.063910,
-0.023606,
-0.020543,
0.003528,
0.060799,
0.006600,
0.031194,
-0.017434,
-0.033942,
-0.064483,
-0.040852,
-0.000641,
0.004563,
0.019102,
0.042303,
0.019246,
0.010972,
-0.015460,
-0.008049,
0.014600,
0.044563,
-0.089353,
-0.058985,
-0.019389,
-0.067116,
-0.029752,
-0.054397,
0.061257,
-0.037956,
0.025391,
0.116920,
0.100820,
0.061272,
0.034462,
0.105820,
-0.006633,
0.173570,
0.042816,
0.011393,
0.091318,
0.059338,
0.040433,
0.041840,
-0.011130,
0.059309,
0.067002,
0.043490,
0.118250,
0.059032,
0.114910,
-0.015961,
-0.129570,
-0.095753,
0.009174,
-0.042618,
-0.319790,
-0.122690,
-0.122680,
-0.110330,
-0.021311,
-0.040072,
-0.084295,
-0.121810,
-0.196490,
-0.152610,
-0.035319,
-0.101510,
-0.222380,
-0.143440,
-0.173120,
-0.120530,
-0.030147,
0.023751,
-0.008106,
0.008517,
-0.042985,
0.017895,
-0.016227,
-0.017658,
-0.020279,
0.013449,
-0.020640,
0.017493,
-0.012822,
-0.007303,
0.028961,
0.020686,
-0.035481,
0.021130,
0.002098,
0.029585,
0.024358,
-0.018728,
-0.023502,
-0.002200,
0.018154,
-0.002230,
-0.050394,
0.071511,
0.032738,
-0.005980,
-0.011481,
0.014393,
-0.043438,
0.022146,
-0.048811,
-0.059509,
0.025221,
0.089927,
-0.052682,
-0.048262,
0.083120,
0.060611,
0.080036,
0.055654,
0.067881,
0.102640,
0.101440,
0.099140,
-0.006465,
-0.007974,
-0.065602,
-0.022218,
0.004773,
-0.057256,
0.023316,
-0.021031,
0.002655,
-0.019842,
0.046581,
-0.046423,
-0.032430,
-0.055575,
-0.066801,
-0.038029,
-0.035859,
0.004122,
0.043454,
-0.028260,
0.005476,
-0.069592,
-0.020872,
-0.013793,
0.027291,
0.046523,
0.060441,
-0.105330,
-0.012005,
0.001565,
-0.019632,
-0.101020,
-0.112010,
-0.117800,
-0.097952,
-0.067137,
-0.077268,
-0.122180,
-0.105340,
-0.092956,
0.008144,
-0.111530,
-0.063338,
-0.119760,
-0.037361,
-0.008253,
-0.121630,
-0.104020,
-0.143670,
-0.012305,
-0.042098,
-0.141790,
-0.168600,
-0.179280,
-0.074790,
-0.018229,
-0.036575,
-0.141200,
-0.076428,
-0.103450,
-0.039201,
-0.014864,
-0.127000,
-0.095639,
0.138990,
0.083990,
-0.259410,
-0.010285,
0.026905,
0.175170,
0.120300,
0.047362,
0.133950,
-0.017624,
0.103700,
0.052086,
0.069774,
0.056465,
0.030754,
0.051227,
0.176460,
0.167630,
-0.083359,
-0.138320,
-0.089621,
-0.060048,
-0.073422,
0.145500,
-0.102070,
-0.102370,
-0.125910,
-0.162340,
0.134270,
0.054141,
0.020549,
-0.029712,
0.004350,
0.209410,
-0.024202,
0.042177,
0.165610,
0.268220,
0.122780,
-0.105880,
0.022464,
-0.013134,
-0.098908,
-0.130930,
0.017572,
0.069837,
0.031474,
-0.099939,
0.118720,
0.044993,
-0.131130,
-0.006671,
-0.138690,
0.059577,
0.100370,
-0.065602,
0.024950,
0.002085,
0.024104,
-0.198900,
-0.200440,
-0.099322,
-0.054314,
-0.080939,
-0.122940,
-0.060216,
0.068461,
-0.039272,
0.024808,
-0.064032,
-0.079140,
0.058384,
0.100350,
0.099751,
-0.063742,
-0.049904,
0.035252,
0.024523,
0.134970,
0.047486,
0.044051,
0.035563,
-0.012108,
0.033749,
-0.099397,
-0.036561,
-0.021778,
-0.095386,
0.012962,
-0.042451,
0.041583,
0.046346,
0.178290,
-0.106580,
-0.177300,
-0.135030,
-0.175680,
-0.011095,
-0.095137,
-0.168930,
0.098293,
0.047806,
-0.112920,
-0.081059,
-0.026088,
0.109100,
-0.024259,
-0.205170,
-0.034381,
-0.000427,
0.057418,
-0.026634,
-0.039529,
-0.039800,
0.075659,
0.033853,
-0.190720,
-0.085899,
-0.060174,
0.042393,
-0.091932,
-0.133460,
-0.186870,
-0.036543,
-0.366470,
-0.213710,
0.014264,
-0.221220,
-0.008792,
-0.395810,
-0.232100,
-0.145640,
-0.212220,
-0.116620,
-0.392980,
-0.332950,
-0.281490,
-0.240320,
0.072684,
-0.136610,
-0.056297,
0.150480,
0.027723,
-0.127220,
-0.128550,
-0.068786,
0.109880,
-0.042910,
-0.409420,
-0.150900,
-0.183050,
-0.157150,
-0.118430,
-0.187380,
-0.120190,
-0.154590,
-0.216970,
-0.268090,
0.013181,
-0.116860,
-0.219120,
-0.133060,
-0.124680,
0.062486,
0.085738,
0.031510,
0.066603,
0.071789,
0.142380,
-0.012453,
-0.015804,
0.074606,
0.034162,
0.211690,
0.041299,
0.016945,
0.114070,
0.032282,
0.097343,
0.026817,
0.093893,
0.133380,
0.031633,
0.114500,
0.124370,
-0.048196,
0.075769,
0.237420,
0.114170,
0.090652,
0.063111,
0.039383,
0.103600,
-0.113650,
-0.091056,
0.092958,
0.078556,
0.029169,
-0.084178,
-0.099770,
0.031296,
0.010114,
-0.066067,
-0.210750,
-0.226830,
-0.067944,
-0.009089,
-0.307340,
-0.126840,
-0.356980,
-0.219980,
-0.052577,
-0.220800,
-0.096400,
-0.052568,
0.093514,
0.119400,
0.010769,
-0.176150,
-0.077908,
-0.012306,
-0.017031,
-0.011112,
-0.072844,
-0.046743,
0.055993,
0.179690,
0.054446,
-0.047791,
-0.100540,
-0.026591,
0.034257,
-0.155340,
-0.073430,
-0.093199,
0.018806,
0.008989,
-0.200870,
-0.034115,
-0.013877,
0.000059,
0.054317,
-0.020342,
0.015835,
-0.081414,
-0.098793,
-0.098337,
-0.116860,
0.063392,
0.040151,
0.047330,
-0.021251,
-0.007842,
0.104680,
0.039031,
0.033429,
0.129710,
0.047755,
0.087571,
0.129940,
0.115830,
0.141560,
0.130190,
-0.057209,
-0.060749,
-0.019390,
-0.000692,
-0.028809,
-0.022692,
-0.014846,
-0.042607,
-0.029090,
-0.026241,
-0.020830,
-0.014181,
-0.026852,
-0.040648,
0.029066,
-0.018981,
-0.017444,
-0.048517,
0.017775,
0.033402,
-0.053113,
-0.038011,
-0.034567,
-0.008739,
-0.014158,
0.049138,
0.039562,
-0.093224,
0.058057,
-0.086968,
0.020272,
-0.138110,
0.006252,
-0.086404,
-0.159770,
-0.060770,
-0.010015,
-0.065548,
-0.122230,
-0.106760,
-0.115350,
-0.095312,
-0.110570,
-0.127600,
0.021785,
-0.013643,
0.051236,
0.057710,
0.038033,
0.025787,
0.190860,
0.024666,
-0.112560,
-0.140990,
-0.020494,
0.112110,
0.066475,
-0.045399,
0.016202,
-0.017977,
0.136230,
0.104910,
0.184630,
0.187460,
0.121850,
-0.012622,
0.029925,
-0.041431,
-0.024315,
0.133750,
-0.019256,
-0.019224,
-0.048224,
-0.047085,
0.051020,
-0.000890,
0.072375,
0.091586,
-0.017545,
0.056571,
-0.086964,
0.011053,
0.055684,
0.030338,
0.215960,
-0.034966,
0.070585,
0.073838,
0.168360,
0.168990,
0.064069,
0.058333,
0.010319,
0.096859,
0.073272,
0.092982,
0.128430,
0.076762,
0.049532,
0.068057,
-0.037863,
-0.028577,
0.021118,
-0.021642,
-0.004379,
-0.009514,
-0.019059,
-0.013169,
0.000413,
-0.024817,
-0.005128,
0.018979,
-0.005525,
-0.046469,
0.023034,
-0.025526,
-0.018291,
0.020766,
0.004073,
-0.022381,
0.023850,
-0.022024,
0.027298,
0.032069,
-0.022092,
0.002096,
0.008257,
0.074217,
0.071607,
0.114400,
0.063739,
0.142850,
0.124100,
0.107280,
-0.096046,
0.025829,
-0.047705,
0.060477,
0.163780,
0.005566,
-0.063174,
-0.165890,
-0.072977,
0.044152,
-0.001645,
-0.009874,
0.014235,
0.033499,
0.040375,
0.108470,
-0.111440,
-0.077626,
-0.084189,
-0.009721,
-0.064217,
0.034967,
0.044947,
-0.216500,
-0.094581,
-0.081250,
0.016508,
-0.056031,
-0.159120,
-0.025075,
0.011599,
0.036039,
0.014741,
-0.149310,
-0.074927,
0.098268,
-0.009690,
0.019915,
-0.097943,
-0.099540,
0.005698,
0.133610,
0.099974,
-0.073062,
-0.170300,
0.000118,
0.083218,
0.097161,
0.011366,
0.028269,
0.120060,
0.056929,
0.051510,
0.067005,
0.036201,
0.014879,
0.034765,
0.062295,
0.113900,
-0.034708,
-0.116800,
-0.142810,
-0.129990,
-0.163740,
-0.156430,
-0.195170,
0.118410,
0.032256,
-0.034886,
-0.040954,
0.119160,
0.113300,
0.119500,
0.031709,
0.026043,
0.220470,
-0.046898,
0.040053,
-0.095950,
-0.067822,
0.006470,
-0.143340,
-0.103350,
0.016018,
-0.020786,
-0.038138,
-0.052381,
-0.170260,
-0.136300,
-0.108160,
-0.067333,
0.215160,
0.149340,
0.088180,
0.108640,
0.123850,
0.157570,
0.182840,
0.177470,
0.300950,
0.014154,
0.025025,
0.104350,
0.298640,
0.370650,
0.047978,
0.111520,
0.077765,
0.077039,
0.026152,
0.078261,
0.161190,
0.257980,
0.110230,
0.186640,
0.141640,
0.070749,
-0.017601,
0.013675,
-0.043782,
0.004698,
0.031236,
0.039861,
-0.005815,
0.024954,
-0.073799,
0.038320,
-0.004106,
0.009296,
-0.014499,
-0.031582,
-0.061994,
-0.060487,
-0.080725,
-0.043446,
-0.157520,
-0.135540,
-0.125320,
-0.092740,
-0.106680,
-0.135740,
0.017393,
0.014117,
-0.027977,
0.041115,
0.005625,
0.050728,
-0.055626,
-0.021048,
0.027462,
0.024284,
-0.008963,
0.024099,
0.020119,
0.007095,
0.025000,
-0.049303,
0.011966,
0.022135,
0.019769,
0.051913,
0.006561,
0.004810,
0.009430,
0.066985,
-0.001684,
-0.063652,
-0.120890,
0.006538,
0.082192,
0.040650,
0.046304,
-0.105710,
-0.004533,
-0.074628,
-0.109680,
0.196360,
-0.032456,
-0.002478,
-0.013435,
-0.017411,
0.125320,
0.166510,
0.063531,
0.129400,
0.098763,
0.232940,
0.321010,
0.261340,
0.261810,
0.253760,
0.002541,
-0.090466,
-0.088350,
0.074799,
0.108840,
0.013604,
-0.027167,
-0.075107,
-0.019259,
0.069023,
0.055235,
-0.155220,
-0.041868,
-0.002706,
0.033079,
0.017645,
-0.054712,
-0.133580,
-0.007107,
-0.076294,
0.014838,
-0.009811,
-0.163280,
-0.149530,
-0.145370,
0.011101,
-0.019325,
-0.034845,
0.020497,
0.041598,
-0.014752,
-0.009142,
-0.030575,
-0.041169,
-0.004231,
0.008125,
0.026207,
-0.027451,
-0.004995,
0.019588,
-0.014493,
-0.038651,
0.000664,
0.011714,
-0.048461,
0.023600,
-0.014411,
-0.009413,
-0.036657,
0.005598,
-0.043048,
0.146380,
0.005323,
-0.131750,
-0.111860,
-0.145670,
-0.110250,
0.100520,
-0.096267,
-0.087558,
-0.202100,
-0.121360,
-0.174310,
-0.079039,
-0.256770,
-0.166350,
-0.197120,
-0.020389,
-0.108730,
-0.295930,
-0.107870,
-0.257090,
-0.090968,
0.037440,
-0.132810,
-0.002820,
0.013748,
-0.005183,
-0.031040,
-0.023446,
-0.026116,
0.014078,
-0.026419,
0.013221,
0.015004,
-0.006360,
0.023343,
0.009286,
-0.014697,
-0.043614,
-0.016702,
0.016058,
0.022857,
-0.015021,
0.016745,
0.010215,
0.016975,
-0.022457,
-0.027852,
0.011137,
-0.019555,
0.011537,
-0.040174,
-0.017553,
-0.034818,
0.020087,
-0.032117,
-0.021711,
0.022767,
0.011316,
0.003267,
-0.022006,
-0.002156,
-0.018455,
0.020117,
0.023091,
-0.035158,
-0.010883,
0.019172,
-0.011976,
-0.011185,
0.010715,
0.024442,
0.019204,
-0.022657,
-0.000782,
-0.016085,
-0.002715,
-0.053330,
-0.009323,
-0.015853,
-0.020378,
0.009776,
-0.014749,
-0.031696,
0.039808,
0.001033,
0.033857,
0.009395,
-0.011375,
-0.007023,
-0.001640,
-0.032617,
-0.026636,
-0.045724,
-0.006914,
-0.028845,
0.014912,
-0.016245,
-0.039859,
-0.028430,
0.006099,
0.022381,
-0.018500,
0.024116,
-0.037926,
0.028725,
-0.021575,
0.007082,
-0.031305,
-0.025847,
0.022216,
0.037758,
0.006731,
-0.023590,
0.016600,
-0.015598,
-0.040090,
-0.027864,
-0.016941,
-0.031396,
0.009569,
-0.018808,
0.001657,
-0.037270,
-0.028593,
0.039738,
0.021514,
0.031293,
-0.029932,
-0.026425,
-0.029815,
-0.013261,
-0.020951,
-0.015705,
0.026189,
-0.023556,
-0.013769,
-0.025665,
-0.014284,
-0.018609,
0.002131,
-0.015167,
-0.028529,
-0.013960,
-0.020347,
-0.006741,
-0.045890,
-0.017396,
-0.048204,
-0.027495,
-0.034102,
0.010700,
0.001067,
0.000496,
-0.027526,
0.016611,
0.000277,
-0.036765,
-0.006494,
-0.027226,
0.002280,
-0.034586,
-0.007859,
-0.004942,
-0.001632,
-0.016905,
-0.033233,
-0.006497,
0.024463,
0.016606,
-0.014962,
0.017712,
-0.027091,
-0.051625,
-0.031429,
0.003302,
-0.017783,
0.010614,
0.018616,
-0.030707,
-0.031013,
0.028237,
0.029488,
0.014794,
-0.012365,
-0.026268,
0.020938,
0.015165,
-0.034065,
0.022917,
-0.002763,
0.000242,
-0.016491,
0.029378,
0.027144,
0.006549,
-0.028137,
-0.027274,
0.010962,
0.017934,
0.017700,
-0.003969,
0.004051,
-0.016569,
-0.015884,
-0.001651,
-0.028745,
0.011345,
-0.026145,
0.033377,
-0.026235,
-0.033391,
-0.001559,
0.015217,
-0.030472,
-0.017799,
-0.041434,
-0.014920,
-0.009036,
0.010536,
-0.019329,
-0.023474,
-0.001008,
0.002431,
0.014188,
-0.028921,
0.021968,
-0.000217,
-0.034268,
0.002787,
0.004636,
-0.018227,
-0.007326,
-0.024510,
-0.029701,
-0.042794,
-0.033575,
0.002559,
-0.032961,
0.007025,
-0.011160,
-0.010340,
-0.006946,
0.014450,
-0.047188,
-0.039386,
-0.037234,
-0.018531,
0.021541,
0.013964,
-0.040250,
0.029327,
-0.011997,
0.011140,
0.000112,
-0.006399,
-0.012295,
-0.022443,
-0.004550,
0.009974,
0.009290,
0.006316,
-0.023958,
-0.039414,
0.024863,
0.017577,
0.013132,
-0.025455,
-0.040110,
-0.034515,
0.016712,
-0.009787,
0.030223,
-0.021975,
-0.042404,
-0.006455,
-0.020837,
0.029094,
0.006568,
-0.033909,
-0.021037,
0.003436,
-0.038134,
-0.010112,
-0.003638,
0.001189,
-0.008405,
-0.011115,
-0.023790,
0.002974,
0.000046,
-0.011778,
-0.012590,
0.007346,
-0.016975,
0.014010,
0.019497,
-0.036720,
0.009358,
0.005129,
-0.025293,
-0.003368,
0.022219,
-0.020791,
-0.005972,
0.004350,
0.020826,
-0.035807,
-0.007870,
-0.001619,
0.023797,
-0.011362,
-0.000721,
-0.044236,
-0.010495,
0.018389,
0.006175,
-0.003677,
0.004089,
-0.029949,
0.017328,
0.001920,
0.008027,
0.019616,
0.003874,
-0.035411,
0.018528,
-0.041773,
-0.023225,
-0.030200,
-0.020625,
-0.020349,
-0.025301,
-0.051587,
-0.018626,
-0.053954,
-0.035319,
-0.024686,
-0.001579,
-0.002766,
-0.019260,
0.029013,
-0.015076,
-0.039325,
-0.015346,
0.021398,
0.004137,
0.007929,
0.038505,
-0.014484,
-0.030455,
-0.009821,
-0.021245,
0.022195,
-0.012639,
-0.010418,
-0.035082,
-0.020400,
0.001495,
0.001046,
-0.009952,
-0.027125,
0.010428,
-0.005008,
0.021243,
0.002134,
-0.019145,
0.013570,
-0.010580,
-0.009425,
0.023255,
0.005377,
-0.035362,
-0.029278,
-0.016255,
-0.038467,
-0.053840,
-0.011226,
0.016948,
0.021152,
-0.031778,
-0.003174,
-0.014784,
0.015542,
0.028084,
-0.013392,
0.020231,
-0.036836,
0.003997,
-0.003339,
-0.013937,
-0.033290,
-0.039986,
-0.020708,
0.001640,
-0.024103,
0.014905,
-0.034609,
0.017378,
-0.001561,
-0.021446,
0.032036,
-0.037282,
-0.039923,
-0.001984,
0.016278,
-0.034657,
0.031437,
-0.024785,
0.027456,
0.012438,
0.030507,
-0.034995,
0.001912,
-0.048632,
-0.029444,
-0.022126,
-0.024961,
-0.034322,
-0.047425,
-0.036440,
-0.034948,
0.023984,
-0.025114,
-0.007696,
-0.034004,
-0.037721,
-0.000011,
0.004241,
-0.009139,
0.010920,
0.000641,
-0.002227,
-0.019577,
-0.008706,
-0.004322,
-0.039574,
0.010148,
-0.015013,
0.018202,
-0.032313,
-0.038926,
0.029072,
-0.021045,
0.021621,
0.008275,
0.012989,
-0.002909,
-0.008321,
-0.002854,
-0.005870,
0.000852,
-0.019130,
-0.041099,
0.009099,
-0.039881,
-0.041967,
0.016039,
-0.021211,
-0.011047,
-0.043080,
0.016263,
-0.036449,
0.000960,
0.024545,
-0.003566,
-0.002640,
0.003588,
-0.033594,
-0.044131,
-0.024566,
-0.025965,
0.014849,
0.017927,
-0.028778,
-0.002149,
-0.045275,
-0.013867,
-0.009687,
-0.031012,
-0.001756,
-0.027450,
0.001286,
0.008519,
-0.028720,
-0.019548,
-0.046394,
-0.028352,
0.002170,
0.003757,
-0.003242,
0.017737,
-0.024051,
0.000978,
0.001326,
-0.034564,
-0.028087,
0.008083,
-0.032599,
-0.000815,
-0.025412,
0.014667,
-0.008324,
-0.000615,
0.023043,
-0.035868,
0.013845,
0.016738,
-0.007003,
-0.015493,
-0.038747,
-0.008175,
-0.024774,
-0.030876,
0.015128,
-0.027366,
0.008319,
0.000562,
-0.012513,
-0.015522,
-0.000831,
0.018403,
-0.004524,
0.005286,
0.031237,
-0.000788,
0.025982,
0.033977,
0.014736,
-0.000716,
-0.019858,
-0.015529,
-0.003685,
0.019049,
-0.020349,
0.040386,
-0.020238,
0.021645,
0.008948,
-0.035074,
0.008506,
0.024513,
-0.022980,
-0.027393,
0.004498,
-0.012061,
-0.030963,
0.030553,
0.028829,
-0.007952,
0.010434,
-0.005219,
-0.043234,
-0.000058,
0.013787,
0.025011,
-0.022672,
-0.029103,
-0.038933,
-0.036785,
-0.019029,
0.000400,
0.005032,
0.007386,
-0.036577,
-0.030258,
0.008521,
-0.002397,
-0.020264,
-0.010689,
0.011210,
0.003498,
-0.031813,
0.009773,
0.018680,
-0.013125,
-0.030757,
0.022985,
-0.010859,
-0.004255,
0.007882,
-0.001492,
-0.045743,
-0.033119,
-0.039211,
-0.020414,
-0.006250,
0.001723,
0.006960,
-0.022529,
-0.004429,
-0.036695,
0.005415,
-0.017454,
0.021289,
-0.037499,
-0.027904,
-0.036041,
-0.027348,
0.011565,
-0.031641,
-0.032827,
-0.019527,
-0.044259,
0.007618,
0.021562,
0.018038,
0.010321,
0.021060,
-0.019791,
0.018501,
0.011459,
-0.040356,
0.002602,
-0.033112,
-0.018337,
0.002820,
-0.025032,
-0.033799,
0.015132,
-0.017887,
-0.036774,
0.012421,
-0.018490,
-0.025041,
0.018516,
0.004593,
-0.007172,
0.000302,
-0.034534,
-0.006667,
0.002011,
-0.009048,
0.005737,
-0.031984,
-0.008227,
0.010152,
0.010045,
-0.000028,
0.009271,
0.002284,
-0.003301,
0.019453,
0.013024,
0.011166,
0.020546,
-0.026028,
-0.027236,
-0.017588,
-0.032766,
-0.014064,
0.008250,
0.022544,
-0.036170,
0.015538,
-0.000438,
-0.036008,
0.000151,
-0.006927,
-0.021051,
-0.038546,
-0.024207,
0.002212,
0.003969,
-0.032409,
-0.032649,
-0.020035,
-0.009480,
-0.029226,
-0.032348,
-0.006924,
-0.014889,
-0.002542,
0.000439,
0.022026,
-0.016314,
-0.024903,
-0.037722,
0.002720,
0.016044,
-0.025935,
0.022941,
-0.029235,
0.000879,
-0.040941,
-0.021105,
0.013372,
0.021952,
-0.008694,
-0.022227,
-0.020526,
-0.038382,
-0.007739,
0.023119,
-0.019396,
-0.007740,
0.018925,
0.009401,
0.002764,
0.008153,
0.039837,
0.001101,
0.006673,
0.015742,
-0.035423,
0.000201,
0.026949,
0.013829,
0.021371,
-0.026993,
0.001824,
-0.034173,
0.007265,
-0.006255,
0.019699,
-0.019505,
0.000675,
0.006052,
0.005449,
-0.024524,
-0.029011,
-0.017841,
0.007814,
0.031428,
0.027909,
-0.037046,
0.008644,
0.008071,
0.015152,
-0.039722,
-0.017310,
-0.033647,
0.028516,
0.015861,
0.007663,
-0.006636,
-0.053493,
-0.039231,
-0.038923,
-0.014254,
-0.007902,
-0.018670,
-0.021157,
0.040838,
-0.026884,
0.013169,
0.013109,
-0.017921,
-0.031006,
0.013819,
-0.037894,
-0.045870,
-0.027552,
-0.003010,
-0.026423,
-0.043859,
-0.022667,
-0.029643,
-0.025822,
-0.047645,
-0.010076,
-0.003686,
-0.007520,
-0.035782,
-0.001570,
0.007320,
-0.031793,
-0.039597,
0.024047,
0.001948,
-0.022830,
-0.005322,
-0.004840,
0.004268,
0.001488,
-0.040604,
-0.037594,
0.020503,
0.025054,
0.018633,
0.024346,
0.025159,
-0.007047,
-0.000273,
-0.009178,
-0.010243,
0.000806,
0.028462,
0.019176,
0.011888,
-0.010539,
0.011853,
0.027671,
0.005133,
-0.032343,
-0.036390,
-0.035665,
-0.023919,
0.015226,
0.001471,
-0.036263,
0.025369,
-0.009286,
-0.022453,
-0.031517,
-0.030370,
-0.008571,
0.004497,
-0.010924,
0.009883,
-0.031035,
-0.015304,
0.012615,
0.022969,
0.015983,
-0.037824,
0.024454,
-0.037953,
-0.009242,
-0.006401,
-0.027203,
-0.030628,
-0.008242,
0.014381,
-0.416250,
-0.223330,
-0.102130,
-0.204690,
-0.246160,
-0.093268,
0.004681,
-0.005262,
0.038741,
-0.018663,
-0.209890,
0.024283,
-0.078840,
0.032201,
-0.041743,
-0.157860,
-0.011568,
0.036968,
0.060267,
0.003656,
-0.206880,
-0.025540,
0.079640,
0.117210,
0.075617,
0.017029,
-0.022756,
0.006132,
0.019115,
0.023208,
0.017996,
0.023033,
-0.005925,
-0.012931,
0.025282,
0.003036,
0.044700,
-0.015550,
0.034511,
0.007195,
-0.017486,
-0.003807,
0.027081,
-0.023932,
0.007878,
0.024140,
0.027202,
0.006467,
0.000420,
0.013238,
-0.029643,
0.026755,
0.032158,
0.070613,
-0.035375,
0.031973,
0.034533,
0.030862,
0.013324,
-0.007670,
-0.027942,
0.038270,
-0.011387,
0.016239,
0.099832,
-0.040974,
0.128980,
0.036708,
0.069741,
0.094494,
-0.002732,
0.183510,
0.197850,
0.186300,
0.078057,
0.003924,
-0.009193,
-0.007357,
-0.029264,
-0.008839,
-0.001585,
-0.057818,
-0.057592,
0.090298,
0.018396,
0.017779,
0.035734,
0.044142,
0.003756,
-0.018889,
0.029613,
-0.064963,
-0.029988,
0.056494,
0.058264,
0.032542,
0.048497,
-0.024020,
-0.002208,
-0.047479,
-0.176860,
-0.068892,
-0.067532,
-0.051406,
-0.188410,
-0.020543,
-0.042614,
-0.059137,
0.039518,
-0.073500,
-0.092463,
-0.036256,
-0.129450,
0.033079,
0.024159,
-0.140240,
0.012721,
0.018629,
0.029774,
-0.200670,
-0.037902,
0.045750,
0.022063,
-0.045463,
-0.074971,
-0.338790,
-0.172410,
-0.061269,
-0.170650,
-0.162880,
-0.159190,
-0.062336,
0.003099,
-0.071722,
-0.023259,
-0.117930,
-0.269430,
-0.257420,
-0.259430,
-0.303790,
-0.153530,
-0.171050,
-0.261050,
-0.131180,
-0.033593,
-0.120880,
0.052861,
-0.015818,
0.129440,
0.068351,
-0.029058,
-0.017701,
0.100700,
0.052996,
0.050362,
0.082376,
0.043640,
0.144940,
0.235690,
0.186160,
0.213970,
-0.021839,
-0.039796,
0.024399,
-0.021507,
0.059659,
-0.111500,
-0.110640,
-0.116670,
-0.110160,
0.165900,
0.040443,
-0.023648,
0.096425,
-0.119740,
-0.012406,
0.061639,
-0.160020,
0.020024,
-0.137010,
0.023156,
0.007673,
0.027482,
0.023530,
-0.155910,
-0.084280,
-0.047727,
-0.033892,
-0.144880,
-0.202220,
0.141600,
0.026565,
-0.003320,
-0.091359,
-0.333880,
-0.101940,
-0.006372,
-0.109610,
-0.156220,
-0.174560,
-0.086109,
-0.007029,
0.024786,
0.107610,
0.098664,
-0.009358,
0.055518,
0.108300,
0.085177,
0.004853,
-0.023258,
0.130670,
0.083701,
-0.007549,
0.049033,
-0.046121,
0.036602,
-0.031543,
-0.055224,
0.079018,
-0.103980,
0.087811,
0.077714,
0.028748,
0.080204,
-0.112810,
-0.037852,
0.056780,
0.096388,
0.017155,
-0.111860,
0.014161,
0.004087,
0.052353,
-0.000556,
0.074028,
0.024326,
-0.126220,
-0.001397,
-0.116070,
0.046110,
-0.023170,
-0.150980,
-0.045456,
-0.056851,
0.000672,
0.011100,
-0.015237,
-0.031281,
-0.047792,
0.034125,
-0.071027,
-0.253870,
-0.072487,
-0.227520,
0.054069,
0.010876,
-0.142420,
-0.021693,
-0.304240,
0.079229,
-0.024083,
-0.014068,
-0.051564,
-0.042456,
0.066952,
-0.011395,
-0.071119,
0.078168,
0.088909,
-0.098553,
-0.127900,
-0.243810,
-0.225460,
-0.237950,
-0.071688,
0.137610,
0.187130,
0.387120,
0.288020,
-0.054115,
0.046220,
0.168150,
0.046365,
-0.037037,
-0.179370,
0.054380,
0.036487,
0.043309,
0.033862,
-0.141180,
0.028371,
0.020919,
0.000071,
-0.162170,
-0.361490,
-0.241720,
-0.125770,
-0.223610,
-0.294170,
0.121130,
0.012855,
0.059628,
0.169740,
0.160560,
-0.030237,
-0.000309,
-0.005594,
0.092177,
0.061010,
0.005372,
0.079623,
0.057863,
0.017376,
0.120490,
-0.020947,
0.044151,
-0.013707,
-0.095165,
0.076988,
-0.006110,
0.011980,
-0.106490,
-0.007886,
0.011086,
-0.259190,
-0.354000,
-0.197330,
0.025615,
-0.040703,
-0.143530,
-0.075795,
-0.048942,
0.057016,
-0.056087,
0.036143,
-0.069580,
0.040272,
0.123100,
-0.144220,
-0.011038,
0.100160,
-0.054113,
-0.024306,
0.022140,
0.074399,
0.044635,
-0.097190,
-0.116920,
-0.049962,
-0.134770,
-0.218700,
-0.110340,
-0.096391,
0.045515,
-0.106140,
-0.076931,
-0.027073,
-0.086595,
-0.061827,
-0.097139,
-0.024631,
-0.159540,
0.029054,
0.161350,
-0.124200,
0.019082,
-0.008633,
0.136160,
-0.030632,
-0.110160,
-0.065028,
-0.002146,
-0.054374,
-0.093522,
0.105100,
0.169030,
0.232040,
0.186610,
0.091805,
0.095165,
0.180020,
0.152300,
0.155860,
0.084008,
0.146000,
0.041135,
0.040182,
0.040494,
0.095154,
0.003120,
-0.073872,
-0.057789,
-0.052484,
0.002309,
0.081752,
0.061703,
0.038898,
0.076228,
0.146240,
0.029248,
-0.010570,
-0.017576,
0.038424,
-0.028162,
-0.025815,
-0.005770,
-0.017040,
-0.024460,
-0.045439,
-0.022596,
-0.011755,
-0.057993,
-0.009812,
0.046799,
0.028430,
0.005967,
-0.021846,
0.017600,
0.006279,
0.024364,
-0.011789,
0.044697,
0.029329,
-0.071091,
0.114350,
0.086611,
0.123860,
-0.013297,
0.039631,
0.156920,
0.101420,
0.169440,
0.008843,
0.122970,
0.118570,
-0.000527,
0.011614,
-0.037777,
0.130910,
0.087699,
-0.022143,
-0.054850,
0.012627,
-0.041230,
0.106470,
-0.039712,
-0.132370,
-0.080838,
-0.188670,
-0.112080,
0.017500,
-0.135510,
-0.093737,
-0.034617,
-0.027099,
-0.105840,
-0.139110,
-0.008248,
-0.047002,
0.054761,
-0.021786,
-0.009814,
-0.037421,
-0.008903,
0.100930,
0.015039,
0.054766,
0.064190,
-0.084200,
0.159870,
0.069344,
0.092261,
0.024818,
0.014362,
-0.035882,
0.025096,
0.031045,
0.080218,
0.084887,
0.091525,
0.081252,
-0.030586,
0.122660,
-0.001219,
-0.100470,
0.042425,
-0.076876,
0.147620,
0.036572,
-0.088844,
-0.057648,
0.021562,
0.012028,
0.053608,
-0.137070,
-0.186330,
-0.005074,
-0.041829,
-0.069389,
0.034219,
-0.023356,
0.003447,
-0.018142,
0.006313,
0.030915,
0.042034,
-0.014273,
-0.009636,
0.017069,
0.006231,
0.001358,
-0.002472,
-0.019111,
0.041468,
-0.038691,
0.019972,
0.010615,
0.019530,
0.010498,
-0.026124,
-0.028660,
-0.035057,
0.013801,
-0.017619,
-0.207980,
-0.085379,
-0.053553,
0.038517,
0.085473,
-0.019065,
0.046182,
0.122680,
0.199560,
0.133250,
-0.050088,
-0.058254,
-0.024566,
0.126150,
0.072225,
-0.044440,
0.097181,
-0.043920,
-0.005227,
-0.047883,
-0.024558,
0.098576,
0.186570,
0.119220,
0.066865,
0.057436,
0.179110,
0.190250,
0.188180,
0.136860,
-0.038263,
-0.035315,
0.023553,
0.015795,
0.097336,
-0.017336,
-0.007928,
0.122050,
0.060829,
0.005541,
-0.039123,
-0.045086,
0.054768,
-0.021959,
-0.010334,
-0.002825,
-0.077665,
-0.010084,
-0.085226,
-0.032317,
-0.114940,
-0.268740,
-0.416460,
-0.280420,
-0.213030,
-0.033783,
-0.122760,
-0.117020,
-0.150610,
-0.100330,
0.009923,
0.007945,
-0.012028,
-0.024849,
-0.085060,
0.137690,
0.158710,
0.075154,
0.068051,
0.010527,
0.120260,
0.141850,
0.212820,
0.062210,
-0.002851,
-0.351970,
-0.272010,
-0.254330,
-0.218610,
-0.300010,
-0.062508,
-0.076864,
-0.101680,
0.053833,
-0.032942,
0.004472,
0.140220,
0.105120,
0.065325,
-0.023030,
0.006587,
0.088924,
0.036161,
0.000529,
-0.060911,
-0.015480,
-0.042423,
-0.077024,
-0.180980,
-0.123850,
-0.180610,
-0.095026,
0.027287,
0.040568,
0.003300,
0.112580,
0.083937,
-0.046284,
0.007954,
0.045187,
0.016638,
0.058304,
-0.247900,
-0.090594,
0.157920,
0.045826,
0.034967,
-0.038914,
0.088161,
0.150890,
-0.067252,
0.070494,
-0.057599,
0.010857,
0.023605,
0.128720,
0.016063,
-0.030074,
-0.015679,
0.018913,
0.062711,
0.072086,
0.076529,
0.033875,
0.002866,
0.099827,
0.075297,
0.019796,
0.001507,
0.000959,
0.100760,
0.120220,
0.138020,
0.045070,
0.025072,
0.106810,
0.088896,
0.063702,
0.016368,
0.060790,
0.013476,
0.012250,
-0.024500,
-0.063749,
-0.030594,
0.014276,
-0.017886,
-0.003511,
-0.057633,
-0.013263,
-0.022709,
0.038995,
-0.066696,
-0.018072,
-0.014093,
-0.030008,
-0.013076,
-0.062985,
-0.005999,
-0.029622,
-0.014189,
0.055039,
-0.042433,
-0.034645,
-0.026037,
0.117920,
0.168580,
0.098673,
0.085908,
0.136140,
0.054675,
0.017626,
0.080329,
-0.034111,
0.056428,
0.003999,
0.037272,
0.111210,
0.052750,
-0.080599,
0.037549,
0.039550,
0.031284,
-0.033157,
-0.089087,
0.058277,
0.018281,
0.010155,
-0.081203,
-0.112390,
-0.345260,
-0.152300,
-0.162660,
-0.064088,
0.010758,
-0.214500,
-0.165580,
-0.119780,
-0.106250,
0.068663,
-0.060734,
-0.055648,
0.066980,
-0.033730,
0.000455,
-0.068897,
-0.152010,
-0.032018,
-0.006057,
0.110610,
-0.142930,
-0.063852,
0.025443,
0.098531,
0.014993,
-0.054740,
-0.029021,
0.015503,
0.011305,
-0.021891,
0.002247,
-0.046104,
0.021196,
-0.025685,
-0.023868,
0.023200,
0.043256,
0.038850,
0.010301,
0.062574,
0.011787,
0.031613,
-0.040444,
0.054428,
0.017391,
0.008193,
-0.038069,
-0.016697,
0.026684,
0.028211,
-0.038086,
-0.063190,
-0.068714,
-0.234140,
-0.259440,
-0.109240,
-0.121980,
-0.111200,
-0.179680,
-0.340790,
-0.167760,
-0.152990,
-0.156020,
-0.121470,
-0.233190,
-0.078939,
0.048101,
0.034363,
-0.107550,
-0.050270,
-0.078392,
-0.029866,
0.021292,
-0.033931,
-0.315350,
-0.033960,
-0.010226,
-0.031607,
0.006411,
-0.002587,
-0.006064,
-0.025954,
-0.008276,
-0.013000,
-0.020205,
0.013689,
-0.033841,
0.027474,
-0.042046,
-0.008505,
-0.025461,
-0.018010,
0.010828,
-0.016950,
-0.038143,
0.003076,
-0.022757,
0.011072,
-0.020110,
0.030723,
-0.005761,
0.016826,
-0.024030,
-0.037706,
-0.024812,
0.001019,
-0.005131,
-0.025696,
-0.041344,
-0.000729,
0.013851,
-0.021144,
0.009549,
-0.037453,
-0.023052,
0.029350,
0.004416,
0.041702,
-0.011592,
-0.005414,
0.009428,
0.023126,
-0.005311,
-0.012046,
-0.009021,
-0.009294,
0.007876,
-0.033521,
0.028046,
-0.008446,
-0.036951,
-0.012337,
-0.025386,
0.012399,
-0.012415,
0.000188,
-0.014513,
0.017264,
-0.002972,
0.019958,
-0.021710,
0.024402,
0.025243,
-0.013449,
0.001727,
0.015136,
0.012805,
0.026498,
0.020689,
-0.026089,
-0.009749,
0.011005,
0.016223,
0.024914,
-0.027338,
0.028922,
-0.015058,
0.013005,
-0.006454,
-0.022035,
-0.021712,
-0.031282,
-0.001029,
-0.030897,
-0.024173,
-0.017605,
-0.006357,
0.008721,
-0.004102,
-0.009617,
-0.008064,
-0.041275,
0.024435,
0.011267,
0.001537,
0.012209,
-0.015584,
0.020714,
-0.013194,
0.018745,
0.004899,
-0.004510,
-0.021311,
-0.041935,
0.001531,
0.004592,
0.006916,
-0.008422,
-0.024258,
-0.030481,
-0.029790,
-0.010817,
0.030688,
0.003120,
-0.036380,
-0.014053,
0.015180,
-0.008204,
0.007809,
0.003220,
0.027854,
0.011398,
0.003613,
-0.037623,
0.024770,
-0.038893,
-0.000593,
0.030000,
-0.010412,
-0.015012,
-0.025871,
-0.008152,
-0.025632,
-0.017608,
0.003385,
-0.009042,
-0.027419,
-0.030426,
-0.009856,
0.009599,
0.041238,
0.027253,
0.023026,
0.002674,
-0.021876,
0.029073,
-0.019165,
0.024256,
-0.025106,
0.010015,
-0.031771,
-0.027712,
0.012273,
0.002684,
-0.014087,
-0.045016,
-0.019862,
-0.011439,
0.001112,
0.031742,
-0.019983,
0.021995,
-0.022796,
-0.008970,
-0.004070,
0.025325,
-0.007629,
-0.000151,
-0.024559,
-0.030330,
-0.031173,
0.006497,
-0.014282,
0.001484,
-0.008823,
-0.033249,
-0.012380,
0.002716,
0.023675,
-0.012634,
0.005526,
0.022517,
-0.029946,
0.006640,
-0.035977,
-0.009632,
-0.031812,
-0.002761,
-0.032698,
-0.036044,
0.023498,
-0.012583,
0.014950,
0.001288,
-0.027804,
0.015599,
-0.028734,
-0.011352,
0.022724,
-0.030411,
-0.010432,
0.008362,
-0.030244,
-0.019183,
-0.039195,
-0.012328,
-0.006649,
0.015378,
-0.024472,
-0.001095,
0.008362,
-0.013318,
-0.011479,
0.040175,
0.039387,
-0.008230,
-0.005328,
-0.014532,
-0.009572,
-0.021682,
0.025018,
-0.028322,
-0.031711,
-0.036817,
0.023459,
0.018687,
-0.023463,
-0.003835,
-0.001637,
-0.011695,
-0.011291,
0.014771,
0.011387,
0.008577,
0.009291,
-0.027673,
0.025310,
0.023801,
-0.018844,
0.004615,
0.000111,
-0.034189,
-0.030687,
-0.015593,
-0.005126,
0.009180,
0.014569,
-0.027594,
-0.024509,
0.008578,
0.014118,
-0.030034,
-0.037402,
-0.020344,
-0.040421,
-0.019694,
-0.034441,
0.002772,
-0.020633,
-0.023420,
0.021105,
-0.026709,
0.006050,
0.010165,
0.020655,
-0.045427,
-0.030149,
0.006305,
0.018269,
0.028561,
0.021245,
0.016562,
0.034115,
-0.013849,
0.025399,
0.025446,
-0.009974,
-0.030595,
0.003675,
-0.009634,
0.028413,
-0.002117,
-0.037822,
-0.005088,
0.011800,
0.028208,
-0.016054,
-0.009640,
0.006014,
0.029112,
-0.021798,
-0.036828,
-0.036760,
0.024058,
-0.018075,
-0.009200,
0.029433,
0.016789,
-0.036829,
0.024428,
-0.025733,
-0.025274,
-0.019451,
-0.013502,
-0.013086,
-0.003098,
-0.001458,
-0.029814,
-0.015161,
-0.033190,
0.011718,
-0.009432,
0.016950,
0.003863,
-0.038854,
0.023699,
0.011408,
-0.012931,
-0.041605,
-0.019043,
0.022373,
-0.023488,
0.014622,
-0.013936,
-0.034335,
0.003796,
-0.014330,
-0.019437,
0.015527,
0.020263,
-0.003229,
0.021491,
-0.035753,
0.004008,
-0.024349,
-0.039997,
0.020137,
0.003149,
0.010736,
-0.000767,
-0.023064,
-0.025970,
0.030873,
-0.025190,
-0.020420,
0.016859,
-0.000181,
-0.020952,
0.023553,
0.001667,
-0.027829,
0.010788,
0.018543,
0.033248,
-0.017976,
-0.011931,
-0.004421,
0.011055,
-0.033138,
0.030565,
0.015395,
-0.030428,
0.007664,
0.010941,
0.023639,
0.018363,
-0.030570,
-0.031024,
0.026263,
-0.031978,
0.003149,
-0.027052,
0.013947,
0.028473,
0.004621,
0.002380,
-0.008956,
0.010221,
-0.005987,
-0.037722,
0.024762,
-0.034050,
-0.004020,
-0.023871,
0.010703,
0.015484,
-0.036272,
0.028834,
0.021273,
-0.001425,
0.026639,
0.007470,
-0.000311,
-0.015547,
0.021850,
0.017460,
-0.002786,
-0.027459,
-0.023591,
-0.029638,
0.033286,
0.024295,
-0.023966,
-0.033722,
-0.029519,
-0.001237,
0.006396,
0.013296,
-0.008852,
0.011997,
-0.005721,
-0.011174,
0.040244,
0.019612,
0.022989,
0.014646,
-0.008577,
0.038670,
-0.006774,
0.023461,
-0.026187,
-0.024503,
0.008333,
-0.047722,
0.015234,
-0.019753,
0.001497,
0.014702,
-0.003788,
0.024979,
-0.031696,
0.020426,
-0.000125,
-0.022426,
-0.016337,
-0.038895,
-0.029872,
0.009744,
0.000876,
0.020608,
-0.026287,
0.024125,
-0.018149,
0.027604,
-0.037070,
0.001455,
-0.005226,
-0.001049,
0.011304,
-0.012628,
0.002001,
-0.026434,
-0.030825,
-0.005440,
-0.016402,
0.017929,
-0.005501,
-0.010650,
-0.004240,
-0.006429,
0.007366,
0.008128,
0.008540,
0.010943,
-0.029704,
-0.020454,
-0.002373,
0.022843,
-0.044775,
-0.003724,
0.008773,
-0.019881,
0.021531,
0.026493,
-0.025243,
0.007698,
-0.035855,
0.017815,
-0.037316,
-0.027345,
-0.009378,
-0.020961,
-0.018491,
0.012107,
-0.035724,
0.010176,
-0.029782,
-0.030441,
0.019337,
-0.024403,
-0.033559,
-0.040103,
0.038799,
-0.009357,
0.018738,
-0.025056,
-0.032798,
-0.026659,
0.008778,
-0.019374,
0.012851,
-0.000319,
-0.018504,
0.019171,
0.039685,
-0.033204,
-0.021025,
0.016302,
0.029348,
-0.025269,
-0.008694,
0.031875,
0.006321,
-0.016140,
-0.031134,
0.004495,
0.003855,
0.005610,
0.016976,
-0.014795,
-0.034115,
-0.037748,
-0.044936,
-0.034924,
-0.037396,
0.016260,
-0.025546,
0.017373,
0.001459,
-0.015206,
0.016610,
-0.002044,
0.003163,
-0.020915,
0.003000,
-0.004549,
0.012046,
0.002616,
-0.010367,
0.015245,
-0.004970,
-0.028399,
-0.022083,
0.004826,
-0.007914,
-0.022179,
-0.021903,
0.016678,
0.003280,
-0.004384,
-0.039333,
-0.020960,
-0.038677,
0.023014,
-0.029954,
-0.037805,
0.012968,
0.024625,
-0.022554,
-0.039049,
-0.009077,
0.018941,
0.000425,
0.027301,
-0.005721,
0.006719,
-0.001323,
-0.023381,
0.014437,
0.022848,
-0.033183,
0.015983,
-0.034829,
-0.024528,
-0.010183,
0.023706,
-0.038206,
-0.020991,
-0.039393,
0.012158,
-0.017044,
0.010486,
0.020869,
-0.039382,
0.011478,
-0.018505,
-0.007697,
-0.028934,
0.003064,
0.015464,
0.018036,
-0.042293,
-0.028328,
-0.002348,
0.018641,
-0.000442,
-0.012118,
0.017472,
0.003404,
-0.011261,
-0.013161,
0.025208,
-0.005587,
-0.014295,
-0.022586,
-0.030358,
-0.003108,
-0.035732,
0.018028,
0.001525,
-0.035304,
0.023399,
-0.007905,
-0.036165,
-0.025488,
-0.016690,
-0.010999,
-0.028768,
-0.015677,
0.016110,
0.005410,
0.007756,
-0.000938,
0.029165,
0.001537,
0.018938,
0.017417,
-0.012275,
-0.022267,
-0.010251,
-0.019329,
-0.008729,
-0.002111,
-0.035005,
-0.046634,
0.003194,
0.008808,
-0.002800,
0.023412,
-0.038904,
-0.024191,
0.012480,
-0.008600,
0.016984,
-0.011310,
-0.016635,
-0.017828,
-0.040841,
-0.035751,
-0.020724,
0.009281,
0.007302,
-0.003639,
-0.046011,
-0.002338,
0.022639,
-0.027555,
-0.022974,
0.009203,
0.004340,
-0.025192,
0.010973,
0.001948,
-0.005234,
-0.024551,
-0.045217,
-0.043477,
0.000466,
0.023469,
-0.005652,
0.007421,
0.010467,
-0.033491,
-0.015919,
-0.029964,
-0.021617,
0.029326,
-0.000625,
0.005724,
-0.004035,
0.015452,
-0.001215,
0.022823,
-0.023964,
-0.037909,
-0.022746,
0.005426,
-0.017879,
-0.011019,
-0.000414,
-0.020535,
0.001019,
-0.008643,
-0.034804,
-0.028274,
-0.036239,
-0.003445,
-0.024792,
0.001031,
0.019265,
0.004370,
-0.020995,
-0.004018,
0.005787,
-0.020010,
0.001094,
0.021296,
-0.024833,
-0.035940,
-0.016764,
0.022197,
-0.019139,
0.024924,
-0.025933,
0.020233,
0.008953,
-0.022230,
0.025007,
-0.022319,
0.029824,
-0.020927,
-0.011811,
0.014665,
-0.019349,
-0.027871,
0.022459,
-0.031292,
-0.003708,
0.018352,
-0.007312,
0.003087,
-0.047240,
-0.010930,
0.010986,
0.003233,
0.002832,
-0.010833,
0.003981,
0.026611,
-0.040537,
0.023370,
0.029090,
0.023853,
0.019905,
-0.034306,
0.024725,
0.017769,
-0.004128,
-0.005597,
-0.023219,
0.002675,
-0.021352,
-0.026652,
-0.040827,
0.019365,
0.036211,
-0.021537,
0.030394,
0.030260,
-0.022307,
-0.027206,
0.014171,
0.023720,
-0.022963,
-0.002136,
0.016002,
0.003248,
-0.017184,
-0.017944,
-0.011988,
-0.039371,
0.002533,
-0.043042,
-0.023058,
-0.037353,
-0.002599,
0.028904,
-0.035792,
-0.038271,
0.006988,
-0.017218,
0.005938,
-0.011041,
0.001651,
-0.003708,
-0.034423,
0.001279,
-0.031751,
0.003841,
-0.032493,
0.000646,
-0.016721,
0.018301,
0.009605,
0.020491,
0.013520,
-0.071325,
-0.036531,
0.061537,
-0.008730,
-0.056227,
0.056576,
0.011919,
0.055942,
0.043733,
-0.016506,
0.014822,
0.026970,
0.075956,
-0.128900,
-0.038319,
0.016517,
0.134280,
0.055464,
-0.185120,
0.021914,
0.136380,
0.031768,
0.098026,
-0.123060,
0.005310,
0.015247,
0.025780,
0.010770,
0.001324,
0.031140,
-0.016147,
-0.021400,
0.035594,
-0.014319,
-0.013198,
0.011742,
-0.015259,
0.005465,
-0.029462,
0.039105,
0.004665,
-0.011217,
-0.000525,
0.010384,
0.011045,
0.063321,
0.010789,
-0.035709,
0.012102,
-0.114580,
-0.094462,
-0.100710,
-0.080045,
-0.034473,
-0.162650,
-0.111850,
-0.091579,
-0.142970,
0.032354,
0.039021,
0.019776,
0.162240,
0.083412,
0.109770,
0.074060,
0.059324,
0.029512,
0.057562,
0.210530,
0.044855,
0.089012,
0.136520,
0.123480,
0.233730,
0.006343,
0.027624,
0.008178,
-0.055074,
-0.058043,
-0.009226,
-0.006293,
0.043425,
0.035972,
-0.003671,
-0.019075,
-0.016042,
0.003059,
-0.005805,
0.008282,
-0.005705,
-0.028517,
-0.029449,
-0.008354,
-0.080505,
-0.075327,
-0.013028,
0.026641,
0.048430,
-0.015923,
0.050986,
-0.007972,
0.036137,
0.035600,
0.030766,
-0.067181,
-0.066790,
-0.069075,
-0.060835,
-0.049219,
-0.081631,
-0.075767,
-0.158730,
-0.102900,
0.036020,
-0.042113,
-0.017224,
-0.045627,
-0.021264,
0.068816,
0.045290,
0.089132,
0.087519,
0.059394,
-0.073401,
0.079446,
0.053376,
0.005766,
-0.062115,
0.000427,
-0.041881,
0.012802,
0.087802,
-0.001311,
0.034254,
-0.057290,
-0.011366,
-0.009587,
-0.035651,
-0.092952,
-0.034537,
0.035551,
0.021968,
0.016062,
0.047668,
-0.035719,
0.051304,
0.065353,
-0.013358,
0.075271,
-0.068186,
-0.018572,
0.001995,
0.026154,
0.052310,
-0.061654,
-0.015797,
0.040172,
0.037311,
-0.024751,
-0.040570,
0.041009,
0.009750,
0.052672,
-0.003757,
0.031594,
0.062626,
0.057625,
0.075311,
0.052802,
-0.059587,
0.027900,
0.085007,
0.087980,
-0.005296,
0.039120,
0.048075,
-0.099743,
-0.024922,
-0.013931,
0.016124,
0.083985,
-0.024578,
-0.129740,
-0.048146,
0.074018,
0.091254,
-0.023260,
0.020272,
0.013424,
0.025548,
0.118420,
-0.045715,
-0.039126,
-0.065325,
0.044384,
0.070174,
-0.033902,
0.064320,
0.036452,
0.006894,
-0.040972,
-0.190110,
-0.118200,
-0.102430,
-0.150450,
-0.087765,
-0.129530,
-0.074487,
-0.037852,
-0.141310,
-0.139230,
-0.056509,
-0.122170,
-0.016081,
-0.129500,
-0.017506,
0.065584,
-0.000633,
-0.025689,
-0.131730,
-0.061865,
-0.097292,
0.000434,
-0.051973,
0.040743,
-0.056532,
0.054368,
0.093940,
0.026565,
-0.035324,
0.048766,
0.048643,
0.038798,
0.010154,
-0.054348,
0.040060,
-0.006980,
0.054522,
-0.019505,
-0.041702,
0.050932,
0.061004,
0.103840,
-0.087609,
0.006597,
0.212870,
0.204730,
0.152530,
-0.008150,
0.019004,
0.048836,
0.107820,
0.017249,
-0.023800,
0.040341,
0.122700,
0.128240,
0.098368,
-0.042008,
-0.003158,
0.117070,
0.085548,
0.201160,
0.109110,
-0.067620,
0.082513,
0.018120,
0.144530,
-0.017162,
-0.221620,
0.090061,
0.108840,
0.092338,
0.086544,
-0.076177,
-0.042551,
0.013115,
-0.052630,
-0.008017,
0.028314,
0.179540,
0.106040,
0.115920,
-0.056918,
0.042351,
0.144070,
0.045848,
0.022723,
-0.040080,
0.014220,
0.031695,
0.049917,
0.171350,
-0.002899,
0.072786,
0.112210,
0.159560,
0.132050,
0.080264,
0.017001,
0.081347,
-0.008447,
0.042250,
0.058063,
-0.007502,
0.076503,
0.015142,
-0.001555,
0.082148,
0.076659,
0.052973,
-0.040476,
0.047810,
-0.004463,
0.145280,
-0.000175,
0.048275,
0.031553,
0.126350,
0.026235,
-0.066122,
-0.091800,
-0.012767,
0.204090,
-0.107450,
-0.016516,
0.070075,
-0.011753,
0.096671,
-0.115110,
0.003401,
0.143950,
0.134750,
0.114310,
-0.036307,
0.011590,
0.131570,
0.041781,
-0.000340,
-0.067051,
-0.023363,
-0.036768,
0.008520,
-0.005090,
0.012772,
-0.016746,
-0.025827,
-0.059804,
-0.056024,
0.067071,
0.105070,
0.106490,
0.025326,
0.050320,
-0.005026,
0.067940,
0.005701,
0.005858,
-0.004777,
-0.025589,
0.007575,
0.011184,
0.019600,
0.082257,
0.031876,
0.074102,
0.072754,
0.008333,
0.058252,
-0.006401,
0.068319,
0.167040,
0.074087,
0.126980,
-0.036885,
-0.056645,
-0.127290,
-0.178890,
-0.059769,
-0.146680,
-0.054830,
-0.114970,
-0.036382,
-0.071361,
-0.190840,
-0.165140,
-0.138010,
-0.115520,
-0.102260,
-0.117560,
-0.128000,
-0.063479,
-0.047095,
-0.049233,
-0.148500,
-0.178960,
-0.125970,
-0.104360,
-0.096214,
0.013292,
-0.001079,
0.023264,
0.015459,
0.018611,
-0.016085,
-0.030141,
-0.030954,
0.011861,
-0.039198,
0.017553,
-0.036861,
-0.019684,
-0.048310,
-0.003143,
-0.045783,
-0.028129,
-0.033680,
-0.023115,
-0.024057,
0.006048,
0.011804,
-0.007026,
0.027917,
0.028346,
-0.068916,
-0.050691,
-0.000986,
0.021311,
0.032201,
-0.037590,
-0.038673,
-0.053301,
-0.172510,
-0.009116,
0.009402,
0.025902,
-0.062058,
-0.217560,
-0.050258,
0.054649,
0.002006,
0.018297,
0.001797,
0.051681,
0.106680,
0.095607,
0.132880,
0.085956,
0.079423,
0.043407,
0.016578,
0.069198,
0.018738,
0.071960,
0.047385,
-0.055006,
-0.003595,
-0.001034,
-0.037809,
0.056277,
0.037854,
0.052981,
0.003807,
-0.030273,
0.042400,
0.035456,
0.004211,
-0.051688,
0.002047,
-0.025292,
-0.072634,
-0.139060,
-0.072760,
-0.108720,
0.118300,
0.108110,
0.083308,
0.060984,
0.117390,
0.074226,
0.127270,
0.038542,
0.060893,
0.051680,
0.099202,
0.125460,
-0.003739,
0.110240,
0.083922,
0.135100,
0.105710,
0.019028,
0.067482,
0.060424,
0.207030,
0.176480,
0.170890,
0.039148,
-0.021883,
-0.028623,
-0.008664,
-0.048216,
-0.018982,
0.019405,
0.030211,
0.041503,
-0.019294,
-0.026504,
-0.002825,
0.028593,
-0.045988,
-0.007478,
0.018612,
0.014068,
-0.027097,
0.012749,
-0.007770,
-0.009560,
0.015288,
0.007762,
0.024298,
0.012795,
0.004516,
0.051497,
-0.025585,
-0.149630,
-0.199580,
-0.212480,
-0.119620,
-0.031773,
-0.117160,
-0.098805,
-0.107060,
-0.069879,
0.089299,
0.021284,
-0.020118,
-0.033054,
-0.090405,
0.107530,
0.127090,
0.014265,
-0.016781,
0.050144,
-0.142460,
-0.124660,
-0.096309,
-0.083157,
-0.090960,
0.031953,
0.001415,
0.110110,
0.055278,
-0.033111,
-0.010910,
-0.057142,
-0.064721,
-0.003421,
0.003667,
0.012806,
0.118850,
0.000644,
-0.063132,
0.011065,
0.016241,
0.090747,
-0.109460,
-0.114000,
-0.043415,
0.046055,
-0.007247,
-0.088518,
-0.066023,
-0.105430,
-0.051533,
-0.015298,
0.032937,
-0.005284,
-0.016067,
-0.058180,
-0.002729,
0.042433,
-0.022965,
0.009241,
-0.039703,
0.047982,
-0.038245,
0.002153,
0.027708,
0.022540,
0.030011,
0.013463,
-0.057057,
0.004802,
-0.024628,
0.042599,
0.051918,
-0.020744,
-0.122270,
0.010324,
-0.032242,
0.119260,
0.132860,
-0.019387,
-0.093344,
0.075380,
0.162130,
0.144580,
0.059171,
-0.083076,
0.001987,
-0.009724,
0.096874,
-0.017657,
-0.015421,
0.015634,
-0.026308,
-0.059101,
-0.138740,
-0.046973,
0.047906,
0.081911,
0.086542,
-0.029546,
0.007276,
0.050640,
0.091283,
0.033487,
0.096578,
0.099624,
-0.081345,
-0.029915,
0.067385,
0.081925,
-0.018515,
-0.040445,
-0.028003,
0.128650,
0.023751,
0.100660,
0.113310,
0.015652,
0.090683,
0.101330,
-0.076543,
0.018842,
0.035531,
0.016218,
0.024010,
-0.175110,
-0.292800,
-0.390950,
-0.201570,
-0.193430,
-0.222280,
-0.452530,
-0.486500,
-0.292740,
-0.152010,
-0.155280,
-0.348230,
-0.264330,
-0.284480,
-0.215760,
-0.081446,
-0.151050,
-0.175520,
-0.137520,
-0.095425,
-0.026284,
-0.119900,
-0.233910,
-0.163590,
-0.065474,
-0.000882,
0.009285,
-0.035282,
-0.008930,
0.003077,
-0.047628,
-0.026802,
-0.019033,
-0.007444,
0.036779,
-0.042467,
0.017581,
-0.013900,
-0.025000,
0.076896,
0.025713,
-0.028648,
-0.053860,
0.002622,
0.029803,
0.013363,
-0.038832,
0.008659,
0.031516,
0.069218,
0.039115,
0.137320,
0.127050,
0.018863,
-0.042857,
-0.184690,
0.053220,
-0.096551,
-0.058972,
-0.085768,
-0.047458,
-0.011925,
0.012652,
-0.053685,
-0.162870,
-0.072340,
0.077863,
0.069237,
0.049831,
-0.040724,
-0.017800,
-0.089132,
0.020542,
-0.028029,
-0.029715,
0.147120,
0.224370,
0.114420,
0.111550,
0.082267,
0.100430,
0.032064,
0.068046,
0.080590,
0.019156,
0.055560,
0.053989,
0.050787,
0.113390,
0.068458,
0.031263,
-0.009001,
0.012248,
0.012787,
-0.012830,
0.039889,
0.037185,
-0.074133,
-0.026081,
0.055144,
-0.003699,
0.026646,
-0.020080,
-0.017906,
-0.003495,
-0.001569,
0.032889,
0.011050,
0.026693,
0.022475,
0.032998,
-0.013253,
-0.039014,
-0.008512,
-0.051187,
-0.028326,
0.032904,
0.003235,
0.049347,
-0.011185,
-0.008525,
-0.003758,
0.034764,
-0.009474,
0.030353,
0.101710,
-0.023805,
0.012670,
-0.025362,
-0.125310,
0.075091,
0.006661,
0.056053,
0.032493,
0.035924,
-0.001436,
-0.030412,
-0.129040,
-0.150640,
-0.088576,
-0.065524,
-0.102850,
-0.091039,
-0.031138,
-0.105180,
-0.039738,
-0.002459,
0.070093,
-0.026700,
-0.051707,
0.067909,
-0.027185,
-0.062343,
-0.035975,
-0.178580,
0.126160,
0.015959,
0.020474,
-0.135680,
-0.326750,
-0.042240,
-0.007225,
-0.048791,
-0.041047,
0.034515,
-0.144940,
-0.028163,
-0.086736,
-0.063772,
0.005605,
-0.207350,
-0.241350,
-0.137550,
-0.097820,
-0.114100,
0.027921,
-0.006412,
0.021313,
-0.034191,
-0.038869,
-0.013746,
0.013421,
-0.015259,
-0.032367,
-0.014580,
0.007234,
0.013948,
-0.040939,
0.018813,
0.017067,
0.013432,
-0.005384,
0.029182,
-0.013152,
-0.015277,
-0.033681,
0.020042,
-0.006103,
0.005131,
0.023623,
-0.116840,
-0.052235,
0.024378,
-0.012784,
-0.124030,
-0.001638,
-0.050559,
-0.177680,
-0.030988,
-0.137130,
0.072645,
-0.006695,
-0.097358,
-0.033028,
-0.051353,
0.024391,
0.080635,
-0.031184,
-0.096451,
-0.056300,
0.102930,
0.053549,
-0.056907,
-0.020441,
0.151200,
0.039931,
0.054778,
-0.035583,
-0.000346,
0.024558,
-0.027008,
-0.021361,
-0.002191,
-0.006436,
0.011895,
-0.004161,
-0.016724,
-0.045394,
-0.060522,
-0.060452,
0.020529,
0.042752,
-0.017811,
0.066447,
0.045078,
-0.005363,
-0.041183,
-0.084990,
-0.051065,
-0.020221,
0.140080,
0.068360,
0.051892,
0.005636,
0.107870,
-0.006077,
-0.046259,
-0.065490,
-0.098878,
-0.010672,
0.006690,
-0.134400,
-0.019681,
0.045998,
0.008848,
0.092872,
0.061416,
0.029215,
0.054930,
0.015318,
0.021318,
0.084704,
0.013488,
0.034525,
-0.075114,
0.206650,
-0.015960,
-0.104570,
-0.000041,
0.130990,
0.016988,
-0.126670,
-0.249240,
-0.172110,
-0.079017,
-0.071547,
-0.029193,
-0.042226,
-0.155630,
-0.112250,
0.004950,
-0.129800,
0.072090,
0.016299,
-0.074989,
-0.017320,
-0.122850,
-0.006394,
-0.008692,
-0.012499,
0.155050,
-0.035411,
0.041851,
0.071431,
0.183870,
0.012497,
-0.120740,
-0.095514,
-0.097510,
0.090965,
0.092359,
-0.057010,
0.111770,
-0.097386,
0.154200,
-0.014874,
0.016816,
0.102960,
-0.085593,
0.129460,
-0.009642,
0.044502,
0.039382,
-0.107500,
0.088356,
0.149440,
-0.010284,
-0.006910,
0.109550,
0.143570,
0.016036,
-0.118700,
-0.000383,
0.047188,
0.042285,
0.085080,
0.013621,
-0.107190,
-0.013690,
-0.057658,
0.131900,
0.118490,
0.139580,
0.040431,
-0.072442,
-0.085139,
-0.044254,
-0.043104,
-0.123040,
-0.113780,
-0.181290,
-0.047554,
-0.073539,
0.142310,
0.088644,
0.058660,
0.060445,
0.013482,
0.101320,
0.094584,
0.096804,
0.051602,
-0.037940,
0.147690,
-0.004391,
0.125690,
0.058231,
0.001361,
0.104190,
-0.099413,
0.096142,
0.017350,
0.085749,
0.067549,
0.018984,
0.036711,
-0.093113,
-0.067919,
-0.112520,
0.069530,
-0.208700,
-0.190470,
0.047934,
-0.165690,
0.090776,
-0.022803,
-0.103800,
0.037830,
0.022561,
0.255670,
-0.004635,
0.004883,
0.155440,
0.026505,
-0.004057,
-0.006881,
0.056690,
0.054203,
-0.182130,
-0.110940,
-0.166020,
-0.250500,
-0.193530,
-0.179580,
-0.074326,
-0.198530,
-0.220450,
-0.140410,
-0.060999,
-0.083185,
-0.119000,
-0.319240,
-0.048176,
0.042464,
-0.224260,
-0.115360,
-0.189620,
-0.044303,
-0.085069,
-0.219380,
0.052796,
0.044911,
-0.040747,
-0.069891,
-0.123330,
0.069921,
0.008903,
0.067076,
0.075980,
0.028049,
0.031725,
0.144960,
0.127720,
0.089554,
-0.079390,
-0.148350,
-0.018068,
0.012825,
-0.135410,
-0.111900,
-0.000230,
-0.022713,
-0.061512,
-0.245540,
-0.310440,
-0.071001,
-0.032025,
0.131680,
-0.075175,
-0.186080,
-0.131410,
0.010790,
-0.010479,
0.011074,
0.020636,
0.219620,
0.017260,
0.078866,
-0.027496,
-0.144320,
0.201640,
0.103180,
0.046183,
0.082637,
-0.127590,
0.034006,
0.075231,
0.075574,
0.049999,
-0.075620,
0.054411,
0.027472,
0.004028,
0.036745,
0.028268,
-0.090279,
-0.025705,
0.071984,
0.145140,
0.137510,
-0.124720,
-0.104080,
0.021923,
-0.102370,
-0.116760,
-0.079317,
-0.161830,
-0.004399,
0.058942,
0.062577,
-0.095508,
-0.291330,
-0.165910,
-0.063428,
0.016731,
-0.059714,
-0.201580,
-0.066014,
-0.118970,
-0.113280,
0.003856,
0.020634,
0.145760,
0.107740,
0.003685,
-0.018057,
0.021198,
0.090172,
0.079956,
-0.071201,
-0.029397,
0.004285,
0.110990,
0.061661,
-0.030829,
0.041155,
0.081554,
0.005170,
-0.083162,
-0.026016,
0.107760,
0.105340,
-0.086763,
-0.140580,
-0.097503,
-0.028617,
-0.064472,
-0.118660,
-0.085875,
-0.013696,
0.082057,
-0.060946,
-0.136780,
-0.083979,
-0.098337,
0.023765,
-0.015332,
0.083851,
0.064454,
0.068071,
-0.030611,
0.019006,
0.003365,
0.001943,
-0.079221,
0.040696,
0.076380,
0.036685,
0.034026,
0.102720,
-0.049709,
-0.067346,
-0.039601,
-0.057754,
-0.012238,
-0.041815,
-0.028719,
-0.065589,
-0.063098,
-0.042350,
-0.056193,
-0.047699,
-0.007265,
-0.005162,
-0.032366,
-0.059018,
0.009321,
0.000733,
0.029260,
-0.000036,
-0.050810,
-0.040292,
-0.025667,
0.001251,
0.029824,
0.188370,
0.108090,
0.219400,
0.041922,
0.005168,
-0.110910,
-0.105700,
-0.061247,
-0.067478,
-0.103130,
-0.166560,
-0.074735,
-0.081308,
-0.134020,
-0.011286,
0.036884,
-0.080371,
-0.051622,
-0.082001,
-0.043147,
-0.041079,
-0.099502,
-0.159980,
-0.100560,
-0.019243,
0.081654,
0.088752,
0.077601,
0.038382,
-0.021085,
-0.021441,
0.056416,
-0.034490,
0.052723,
0.060156,
0.105800,
0.060355,
0.046517,
0.126720,
-0.044287,
-0.006428,
0.010727,
0.093834,
0.099291,
0.130290,
-0.063200,
-0.067935,
-0.042891,
0.009628,
0.124350,
0.176880,
0.147590,
0.093052,
-0.042905,
-0.026716,
0.102330,
-0.030773,
-0.074928,
-0.099994,
0.042170,
-0.024705,
0.010272,
0.015064,
-0.000386,
-0.154030,
0.091464,
0.010428,
0.014403,
0.089392,
-0.140210,
-0.045111,
-0.096372,
-0.242140,
-0.075369,
-0.070639,
0.037787,
0.023696,
0.019737,
-0.017862,
-0.018076,
0.000947,
-0.001837,
0.025663,
0.013005,
-0.000768,
-0.008588,
-0.016065,
-0.031231,
0.022294,
-0.000765,
-0.009747,
-0.026862,
0.009463,
0.029986,
0.006625,
0.008426,
0.032748,
-0.024977,
0.013170,
0.011540,
0.185350,
0.040294,
0.062397,
-0.024353,
-0.021972,
-0.060250,
0.036632,
0.033080,
-0.125360,
-0.238970,
-0.097905,
-0.014172,
0.074068,
0.054418,
-0.076738,
-0.099739,
-0.002518,
0.092390,
0.068158,
-0.053084,
0.002534,
-0.058323,
0.023003,
-0.019725,
-0.069838,
-0.128110,
-0.173690,
-0.226630,
-0.047681,
-0.245110,
-0.082063,
-0.098045,
-0.167400,
0.015375,
-0.236870,
-0.037957,
-0.071529,
-0.178380,
-0.145570,
-0.339910,
-0.028862,
-0.088951,
-0.025405,
-0.026168,
-0.153930,
-0.130630,
-0.072064,
0.072563,
-0.002870,
-0.013094,
0.018542,
0.091641,
-0.034054,
-0.106520,
0.050031,
0.034297,
0.090135,
-0.005085,
0.030753,
0.016642,
-0.005149,
0.066723,
-0.014888,
-0.029820,
0.004576,
0.007533,
0.151660,
0.040766,
0.031234,
0.131370,
0.019977,
-0.013211,
0.016454,
0.073389,
0.191910,
0.156700,
0.015244,
-0.105930,
-0.153100,
0.113500,
0.103180,
-0.006259,
-0.084835,
-0.161350,
-0.004772,
0.038416,
-0.187760,
-0.139690,
-0.057149,
0.165790,
-0.155310,
-0.117070,
0.056496,
0.037565,
-0.063691,
-0.048929,
-0.068163,
0.050074,
0.055364,
-0.006639,
0.041599,
-0.058532,
-0.068975,
-0.001580,
-0.077876,
-0.094043,
0.109160,
-0.037534,
0.068817,
0.038119,
-0.013152,
0.152310,
0.291320,
0.120170,
0.071949,
0.045051,
-0.019375,
0.252740,
0.165430,
0.095721,
-0.004328,
-0.005542,
-0.132650,
0.008712,
-0.161500,
0.026909,
0.010702,
-0.051093,
0.067854,
0.021267,
0.108930,
0.117580,
0.113520,
0.088817,
0.050150,
0.096073,
0.046199,
0.008798,
-0.013296,
-0.039656,
0.017813,
0.063255,
0.047826,
0.082575,
0.074725,
0.049495,
0.002871,
0.077913,
0.035470,
0.046214,
0.039348,
0.019988,
-0.003774,
0.006683,
0.017094,
0.035177,
-0.003679,
-0.000075,
0.010179,
-0.035660,
-0.029474,
-0.012144,
-0.000002,
-0.088367,
-0.050367,
-0.009042,
0.043907,
-0.001587,
-0.035418,
-0.063397,
0.016491,
-0.025729,
0.029902,
0.004375,
0.017694,
-0.141900,
-0.427360,
-0.236880,
-0.156780,
-0.224810,
-0.021716,
-0.306830,
-0.273330,
-0.165860,
-0.122410,
0.019661,
-0.085153,
-0.160670,
-0.123530,
-0.133120,
-0.038815,
0.058384,
0.105970,
0.106010,
-0.016386,
0.009349,
0.227340,
0.227110,
0.132990,
0.050925,
0.204520,
0.045100,
0.037917,
0.255930,
0.115540,
0.162400,
0.115320,
0.056347,
0.050573,
0.070337,
0.162910,
-0.027606,
0.050151,
0.001056,
-0.027500,
0.069716,
0.081800,
-0.055620,
-0.101490,
-0.070398,
0.072081,
0.050480,
0.013407,
0.021798,
-0.156160,
-0.034757,
0.024492,
-0.004000,
0.010485,
0.020414,
0.009087,
-0.031558,
0.001218,
-0.008952,
0.019047,
-0.028796,
-0.033562,
0.005805,
-0.023820,
-0.019950,
-0.002550,
-0.011261,
-0.009549,
-0.025158,
-0.031390,
0.019622,
0.031368,
-0.029450,
0.007053,
0.010815,
0.050927,
0.021648,
0.104420,
0.060760,
0.179990,
0.087021,
0.089201,
0.060986,
-0.127960,
-0.014484,
-0.124880,
-0.084238,
0.086703,
-0.027423,
-0.038174,
-0.153760,
-0.106820,
0.012803,
-0.001979,
-0.074051,
0.012677,
-0.047331,
0.006397,
-0.008341,
-0.048034,
-0.028548,
-0.133540,
-0.134090,
-0.091733,
0.070058,
0.005445,
-0.117280,
-0.122300,
-0.182620,
-0.072918,
0.069663,
-0.080894,
0.027374,
-0.074577,
-0.143760,
0.035299,
0.054345,
-0.016714,
0.038427,
-0.008592,
0.007084,
0.106900,
0.046604,
-0.060396,
-0.116750,
-0.031584,
-0.009950,
0.012946,
-0.020321,
0.000679,
-0.023201,
0.006668,
0.025043,
-0.024586,
0.007429,
-0.027631,
-0.006107,
-0.015339,
-0.016037,
0.009916,
0.005928,
-0.008709,
-0.014000,
-0.004475,
0.011399,
-0.032015,
0.010385,
0.010003,
-0.020908,
0.022672,
0.009930,
0.010327,
-0.101100,
-0.077098,
0.015523,
-0.074716,
-0.125510,
0.016853,
0.111360,
0.164900,
0.088150,
0.133200,
0.106170,
0.056214,
0.086717,
-0.046653,
0.026996,
-0.009535,
-0.078997,
-0.079117,
-0.125750,
-0.024870,
-0.148780,
-0.170100,
-0.116090,
0.014650,
-0.004893,
-0.033780,
-0.034876,
-0.004941,
0.005718,
-0.000520,
0.003364,
-0.015278,
0.016526,
-0.029390,
-0.021452,
-0.036054,
-0.003620,
-0.037844,
0.030630,
0.010740,
-0.004291,
-0.022864,
0.022143,
-0.019850,
-0.021904,
0.032848,
-0.003597,
0.018056,
-0.011804,
0.057056,
0.014109,
0.015263,
0.026620,
-0.052700,
0.019185,
0.066862,
0.078921,
0.071156,
-0.052754,
-0.075606,
-0.035391,
-0.065627,
0.051101,
0.049517,
-0.024415,
-0.109110,
-0.029191,
0.068324,
-0.060053,
-0.037142,
0.062789,
0.067499,
0.081606,
-0.116990,
-0.159310,
-0.109110,
-0.114670,
-0.066258,
-0.130420,
-0.112360,
-0.091149,
-0.145280,
-0.139130,
-0.078917,
-0.202380,
-0.081905,
-0.117370,
-0.101280,
-0.074024,
-0.238410,
-0.157690,
-0.124310,
-0.031276,
0.052765,
0.082722,
-0.049285,
0.004205,
-0.080923,
-0.020218,
-0.113750,
-0.097214,
0.015995,
0.058194,
-0.110120,
-0.119930,
0.017267,
-0.094567,
-0.012633,
0.020674,
0.021283,
-0.042748,
-0.013928,
-0.026030,
0.090632,
-0.039141,
0.006721,
-0.028572,
-0.012193,
0.022014,
0.028421,
0.123760,
0.089481,
0.067038,
-0.067771,
-0.012038,
0.032042,
-0.009572,
-0.043127,
-0.141560,
0.040347,
-0.064916,
-0.028810,
-0.108580,
0.034138,
0.042255,
-0.020105,
0.078983,
0.037254,
0.016652,
-0.004406,
-0.030777,
-0.122460,
-0.154830,
-0.078757,
-0.060372,
-0.164610,
0.004343,
-0.093022,
-0.113790,
-0.016992,
0.015803,
0.020571,
0.112320,
0.008491,
-0.057588,
0.032382,
0.097588,
0.055216,
-0.102000,
-0.075112,
0.022397,
-0.080401,
-0.073942,
-0.130380,
-0.098164,
0.025343,
-0.004437,
-0.048611,
-0.144720,
-0.125440,
-0.043634,
0.111670,
-0.110810,
-0.084949,
0.017301,
0.009798,
-0.097005,
-0.029126,
-0.020874,
-0.044463,
0.004441,
-0.125620,
-0.153050,
-0.148170,
-0.079928,
-0.081853,
-0.176150,
-0.180600,
-0.000437,
0.101660,
0.052699,
-0.022031,
-0.031719,
-0.069220,
-0.038691,
0.006278,
0.052642,
0.028735,
-0.052957,
-0.079958,
-0.211470,
-0.033828,
-0.027465,
0.015622,
-0.095711,
-0.074441,
-0.010492,
0.022528,
-0.001528,
-0.057389,
0.074240,
-0.010438,
-0.017731,
-0.020887,
0.059249,
0.032136,
0.069539,
0.002145,
-0.114920,
0.033253,
0.023205,
0.052459,
-0.067048,
-0.150860,
-0.102540,
-0.072333,
-0.113330,
0.025626,
-0.093693,
-0.066580,
-0.056582,
-0.062701,
-0.095489,
-0.091117,
-0.090664,
-0.059134,
-0.078950,
-0.113660,
0.043830,
0.007968,
-0.045475,
-0.110230,
-0.078380,
-0.005666,
0.011994,
-0.112940,
-0.125830,
-0.077529,
-0.111950,
0.016279,
-0.142800,
-0.057080,
-0.187560,
-0.114850,
-0.161450,
-0.098541,
-0.029835,
-0.092641,
0.066192,
0.018847,
-0.018422,
0.017441,
0.025579,
0.062957,
0.049988,
0.078829,
0.062809,
0.063360,
-0.028260,
0.010158,
-0.062092,
0.038961,
0.000011,
-0.033551,
0.024639,
0.062927,
0.025634,
0.048596,
-0.088712,
-0.012827,
-0.157520,
-0.156670,
-0.101430,
-0.097464,
-0.047410,
-0.123310,
-0.152040,
-0.088782,
-0.003590,
0.072386,
-0.006825,
-0.104980,
0.051593,
0.082755,
0.186830,
0.104020,
0.125630,
0.161200,
-0.047542,
-0.045304,
0.031828,
0.020885,
-0.044688,
0.038180,
-0.030359,
-0.024467,
0.056442,
0.086534,
0.121990,
0.085368,
0.007936,
-0.099662,
-0.043437,
-0.133910,
-0.134780,
-0.057259,
-0.204420,
-0.136730,
0.105250,
0.077329,
0.199760,
0.079096,
0.213230,
0.104390,
0.147800,
0.060015,
0.004180,
0.045871,
0.106830,
0.151050,
0.002870,
-0.020869,
0.104120,
0.084722,
0.026427,
-0.037773,
-0.066730,
0.030427,
0.155860,
-0.031134,
-0.001836,
-0.063985,
-0.002417,
0.095251,
-0.035854,
0.016166,
-0.006308,
0.052198,
0.014572,
-0.019887,
0.025908,
0.024356,
-0.031343,
-0.026245,
0.024473,
-0.039396,
-0.038385,
-0.005264,
0.005909,
-0.036765,
0.008503,
-0.029881,
0.029829,
0.000858,
-0.006292,
-0.021859,
0.002466,
0.019023,
-0.033595,
0.027853,
-0.009878,
-0.027616,
0.007321,
0.079743,
-0.013585,
-0.004004,
-0.034480,
-0.033032,
-0.092142,
-0.008516,
0.054244,
0.023795,
-0.045802,
0.022161,
0.085453,
0.047372,
-0.022710,
0.078711,
-0.043826,
-0.042477,
-0.041431,
-0.013519,
0.137020,
-0.036025,
-0.020502,
-0.022774,
-0.120370,
0.066031,
0.028381,
-0.041327,
-0.043111,
0.065424,
-0.061849,
0.043501,
0.059407,
0.036271,
0.052991,
-0.003944,
-0.028763,
0.051051,
0.039245,
-0.063202,
-0.019078,
-0.093750,
-0.029449,
0.006471,
-0.064240,
-0.004442,
0.066382,
-0.009008,
0.045530,
0.016578,
0.010306,
0.041108,
0.074335,
0.121150,
0.221950,
0.021895,
0.042678,
0.168240,
0.131530,
0.127470,
0.067317,
-0.137730,
0.012763,
0.012389,
-0.059151,
0.010813,
0.044472,
-0.124400,
-0.097397,
-0.094747,
-0.103450,
0.163770,
0.023717,
0.138380,
0.150050,
0.098882,
-0.024312,
0.015056,
0.006815,
0.016160,
0.011678,
-0.017427,
0.028318,
-0.022385,
-0.007707,
0.035138,
-0.033690,
0.005168,
-0.009163,
0.029063,
0.001243,
0.032713,
-0.010528,
0.023450,
-0.022441,
-0.010052,
0.012245,
-0.011248,
-0.021597,
0.024513,
0.011426,
-0.171110,
-0.197900,
-0.203010,
-0.111550,
-0.126310,
-0.052368,
-0.159720,
-0.008707,
0.005352,
-0.074164,
0.171090,
0.051187,
0.022008,
-0.024500,
0.086336,
0.035476,
-0.040141,
-0.016729,
0.001422,
0.095725,
0.055288,
0.010733,
-0.081606,
-0.098388,
-0.018723,
-0.060944,
0.051037,
0.108900,
0.025276,
0.029653,
0.011459,
0.047287,
0.072286,
0.092621,
0.081690,
0.003984,
-0.001565,
0.056051,
-0.005733,
0.091629,
-0.023710,
-0.106780,
-0.062404,
0.038715,
0.080755,
-0.058273,
-0.025044,
-0.068469,
0.024226,
-0.003592,
-0.113120,
-0.156450,
-0.069626,
-0.051340,
-0.020758,
-0.094069,
-0.072891,
0.057400,
-0.032302,
0.043321,
-0.067389,
-0.100230,
0.004589,
0.029693,
-0.009172,
-0.127010,
-0.092221,
-0.050062,
-0.035981,
-0.015057,
-0.026093,
0.030737,
-0.061071,
-0.044689,
0.124860,
0.009316,
-0.164030,
-0.157530,
-0.074857,
-0.090481,
-0.185690,
-0.212250,
-0.164360,
-0.050158,
-0.187470,
0.000168,
-0.068460,
-0.060735,
-0.098398,
-0.063033,
0.163680,
0.148610,
0.129700,
0.130010,
0.092573,
-0.255520,
-0.001934,
0.150320,
0.111430,
0.054017,
-0.005564,
-0.040363,
0.015530,
-0.044176,
0.107390,
0.034613,
-0.030600,
0.069134,
0.169750,
0.124770,
0.089020,
0.079986,
0.097565,
0.112120,
0.041785,
-0.095373,
-0.163880,
-0.009805,
-0.056659,
-0.196500,
0.016147,
0.031814,
0.121870,
0.035282,
0.087627,
-0.078746,
-0.041069,
-0.011665,
-0.069257,
-0.102190,
0.018851,
-0.043047,
0.063772,
-0.019096,
0.003815,
0.018348,
0.018606,
0.011684,
-0.010896,
-0.040098,
-0.087691,
-0.040244,
-0.057510,
-0.006595,
-0.087173,
-0.062604,
-0.051797,
-0.039757,
-0.118100,
-0.163000,
-0.030703,
0.024936,
0.023204,
0.012699,
0.023996,
-0.026382,
-0.011216,
0.013688,
0.025032,
-0.013469,
0.002704,
-0.038545,
0.005469,
0.006805,
-0.012527,
-0.023390,
0.009440,
-0.034797,
-0.017825,
-0.025401,
0.036614,
-0.000016,
-0.008701,
0.002489,
-0.007839,
-0.005172,
0.053951,
0.157740,
-0.118060,
-0.030868,
-0.008637,
-0.005455,
0.075512,
-0.124130,
-0.083909,
-0.049958,
-0.058197,
-0.077500,
-0.083090,
-0.087820,
-0.078645,
-0.152980,
-0.023125,
-0.101890,
0.093837,
0.038324,
-0.044207,
0.160550,
-0.108520,
-0.046756,
0.081037,
-0.045275,
0.041645,
0.090239,
-0.012587,
0.003693,
0.048363,
0.044430,
-0.004770,
-0.075545,
0.004715,
0.053412,
0.118720,
-0.064738,
0.048329,
0.030696,
0.031787,
-0.057434,
-0.112930,
-0.187140,
0.139210,
-0.054586,
-0.039571,
0.083662,
0.063251,
0.009969,
0.012728,
0.022189,
0.010980,
-0.031289,
0.024108,
0.024469,
0.003512,
0.006629,
0.005192,
-0.003700,
-0.013628,
-0.015020,
-0.022240,
0.010709,
-0.027911,
-0.014454,
0.023621,
-0.035382,
-0.019270,
-0.011475,
0.026394,
0.013122,
-0.035647,
0.006806,
-0.059462,
-0.099352,
-0.150300,
-0.149000,
0.003256,
-0.170240,
-0.165300,
-0.176980,
-0.171690,
-0.114830,
-0.085551,
-0.184650,
-0.080160,
-0.106580,
-0.240930,
0.085200,
-0.003218,
-0.041669,
0.009407,
0.082880,
0.011528,
0.042292,
0.006393,
0.160370,
0.117210,
# 79 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(fc1_weight2);
# 77 "my_net/src/my_net.cpp"

 const half fc2_weight[10080] = {

# 1 "my_net/src/./weight/fc2_weight.dat" 1
0.047546,
0.016302,
0.052349,
0.020704,
0.069430,
-0.081268,
-0.034816,
-0.026040,
-0.115250,
-0.200380,
-0.084553,
-0.005471,
-0.060610,
0.013894,
-0.180190,
0.037433,
0.039096,
0.032775,
-0.063864,
-0.045723,
-0.004450,
0.067508,
0.042600,
0.052421,
0.006518,
0.040784,
0.080750,
0.043396,
-0.260650,
-0.099522,
-0.090797,
0.052044,
-0.085491,
0.009102,
-0.041357,
-0.062121,
-0.047527,
-0.032754,
0.096753,
-0.117040,
0.038187,
-0.080687,
-0.067932,
0.030953,
0.034343,
0.027293,
0.012287,
0.027251,
-0.140270,
0.002245,
-0.003007,
-0.182710,
-0.027429,
-0.098295,
0.018409,
-0.058933,
-0.047104,
-0.226770,
-0.154120,
0.003560,
0.069527,
-0.021195,
-0.024182,
0.004771,
0.059367,
-0.133950,
-0.116500,
0.063867,
0.096739,
-0.041707,
0.011170,
-0.075262,
0.030971,
0.038190,
-0.100290,
-0.021745,
-0.106360,
0.093258,
-0.059546,
-0.012388,
-0.024290,
-0.083400,
0.067209,
-0.074629,
0.057024,
0.049075,
0.001204,
0.038644,
0.101640,
0.018365,
-0.051660,
0.078966,
-0.092206,
-0.006982,
0.029583,
-0.067524,
-0.055724,
-0.111110,
0.006150,
-0.082000,
0.019168,
-0.040809,
-0.073211,
-0.084614,
-0.102170,
-0.049333,
0.044677,
-0.106670,
-0.073340,
-0.051333,
-0.102980,
0.080873,
0.006131,
0.030307,
0.042638,
-0.152480,
0.062249,
-0.018465,
0.044254,
-0.028476,
-0.087690,
-0.024084,
-0.019757,
0.038191,
0.104790,
-0.020243,
-0.010730,
0.193190,
0.009193,
0.020191,
0.087269,
0.010829,
0.122270,
-0.036267,
0.045939,
0.063001,
-0.071109,
0.023760,
0.002533,
0.182080,
0.030357,
-0.023907,
0.127180,
-0.061931,
-0.038377,
-0.024889,
0.027997,
0.079955,
-0.055638,
-0.132600,
0.052632,
0.081391,
0.069916,
0.052146,
-0.031653,
0.144190,
-0.016478,
0.045586,
-0.018015,
-0.118180,
0.006077,
0.015905,
0.014243,
-0.001804,
0.081268,
0.065987,
0.030993,
0.059933,
-0.099945,
0.011759,
-0.066344,
-0.045765,
-0.107660,
0.014166,
-0.057197,
0.221980,
0.012697,
0.015744,
-0.007857,
0.020678,
0.048234,
-0.006862,
-0.002569,
-0.032345,
-0.000641,
-0.294570,
0.063045,
0.052816,
-0.016068,
-0.049455,
-0.063249,
-0.044233,
-0.078368,
-0.041853,
0.000703,
0.003288,
-0.004642,
0.013238,
0.016093,
-0.052721,
-0.121600,
0.011776,
0.045384,
-0.091035,
0.019642,
-0.017686,
-0.083441,
0.132730,
0.040422,
-0.082704,
-0.083328,
-0.073238,
-0.166300,
-0.086128,
-0.023935,
-0.012572,
0.031025,
-0.022126,
0.084300,
-0.043632,
0.046401,
-0.040341,
-0.131740,
-0.008560,
0.109520,
0.016766,
0.092717,
-0.070446,
-0.173070,
0.034753,
0.033485,
0.128890,
0.030947,
0.085197,
0.021707,
-0.026871,
0.006468,
-0.097255,
0.071784,
-0.027094,
0.014187,
0.053691,
-0.036729,
0.014422,
-0.028790,
0.033888,
-0.054820,
-0.017021,
0.008161,
-0.110130,
-0.015392,
0.023600,
0.168750,
-0.081483,
-0.178210,
-0.149480,
0.009651,
0.065733,
-0.097615,
-0.042006,
-0.041845,
0.010780,
-0.021021,
0.036954,
0.195780,
-0.030051,
-0.002425,
0.012886,
0.021063,
-0.104100,
-0.057022,
-0.052568,
-0.203190,
0.003134,
0.087065,
-0.053935,
0.083896,
0.081440,
0.031004,
0.164170,
-0.090214,
-0.026146,
-0.031920,
0.052726,
-0.014503,
-0.050788,
0.068832,
0.010718,
-0.015549,
-0.082183,
-0.112910,
0.109840,
0.120900,
-0.009894,
-0.058947,
0.120780,
-0.070001,
-0.087084,
0.086346,
0.063823,
-0.001178,
0.052432,
0.085544,
0.211770,
0.067703,
-0.049536,
0.020992,
0.107970,
-0.060672,
0.044554,
0.004760,
0.100380,
-0.037910,
-0.049312,
0.084527,
-0.057852,
-0.182440,
0.051642,
0.082518,
0.013350,
-0.301480,
-0.019017,
-0.309190,
0.045797,
-0.023565,
0.052675,
-0.094840,
0.140170,
0.121430,
0.065419,
-0.069124,
0.023790,
0.155640,
-0.003396,
-0.002306,
0.008236,
0.024135,
0.029188,
-0.065149,
0.076668,
-0.023344,
-0.044531,
0.013343,
0.081926,
-0.255930,
0.010519,
0.049468,
0.023745,
-0.128580,
0.013129,
0.010918,
-0.011013,
-0.067682,
0.351590,
-0.010684,
-0.058286,
0.067564,
0.075632,
0.016754,
-0.086462,
0.037310,
-0.014354,
-0.020843,
0.007711,
-0.094907,
-0.074109,
0.087803,
-0.121830,
-0.113780,
0.109830,
-0.054486,
-0.031773,
-0.234090,
0.074842,
-0.169500,
0.078165,
0.037176,
-0.032384,
-0.146550,
-0.278620,
-0.053908,
0.077928,
0.082593,
0.081076,
0.114770,
0.083511,
-0.070764,
-0.070398,
-0.037557,
-0.007943,
0.018125,
-0.084308,
0.031744,
0.007984,
-0.024527,
-0.033013,
-0.009627,
-0.195920,
-0.094551,
-0.106330,
0.154130,
-0.004994,
0.016019,
-0.011178,
0.004270,
0.036321,
-0.034711,
-0.035058,
-0.052743,
-0.033524,
0.080107,
-0.120520,
-0.057330,
0.122330,
0.077808,
0.053429,
0.083520,
0.025013,
0.013837,
0.049699,
0.091113,
-0.165620,
-0.028696,
0.122130,
0.079609,
0.119380,
-0.056573,
-0.042762,
0.142610,
-0.010944,
-0.050965,
-0.061188,
-0.079738,
-0.069912,
0.041496,
0.025796,
-0.053935,
0.013417,
0.033718,
-0.042605,
0.245540,
-0.117810,
-0.131560,
0.063244,
0.139390,
0.020720,
0.108790,
0.134510,
-0.133800,
-0.120080,
-0.029055,
0.038489,
0.075787,
-0.116180,
-0.021655,
0.005590,
-0.017180,
0.008791,
0.064921,
-0.047816,
-0.024888,
-0.056645,
-0.072700,
-0.057430,
0.096223,
0.034257,
-0.004320,
-0.122940,
0.123430,
-0.108260,
0.098197,
-0.098266,
0.038475,
-0.110530,
-0.081819,
0.095206,
0.069687,
-0.108510,
0.071721,
-0.032300,
0.033835,
0.046283,
0.012799,
0.062508,
0.023639,
0.009541,
-0.017037,
-0.211150,
-0.009323,
0.033177,
0.017712,
0.031040,
0.096713,
0.052514,
0.000750,
0.111100,
0.074572,
-0.057809,
0.150850,
0.135730,
0.173510,
0.091214,
-0.077828,
0.010436,
-0.199430,
0.071375,
0.022294,
0.032359,
0.079152,
-0.137840,
-0.087938,
0.026965,
-0.059678,
0.014475,
-0.083470,
-0.100640,
0.011752,
0.025928,
-0.077683,
-0.142540,
0.179250,
-0.135310,
0.071728,
0.068417,
0.037436,
0.067455,
0.029184,
-0.037558,
-0.065634,
-0.132570,
0.055419,
-0.040340,
-0.104400,
0.077822,
-0.012607,
-0.151570,
-0.003799,
-0.105110,
0.033649,
0.036744,
-0.029931,
0.109320,
0.055444,
0.025565,
-0.009015,
-0.019303,
0.087682,
0.035454,
-0.056947,
-0.079342,
0.066935,
-0.040569,
-0.025178,
0.088128,
-0.048317,
0.028054,
0.246520,
-0.069556,
0.014750,
-0.069804,
0.079777,
0.113850,
0.324600,
-0.064756,
0.010068,
-0.060950,
-0.001685,
-0.039314,
0.104190,
0.075061,
-0.044609,
-0.035238,
-0.069041,
0.045653,
0.043121,
-0.040769,
-0.030017,
0.050300,
-0.014666,
-0.025611,
-0.006594,
-0.086330,
-0.012249,
0.063614,
-0.172020,
-0.021633,
-0.096493,
0.014393,
0.107870,
-0.143590,
0.027143,
-0.016846,
-0.017543,
-0.181090,
0.076759,
-0.106900,
-0.013270,
0.228400,
-0.103610,
-0.096482,
0.078222,
0.008401,
0.002406,
0.028837,
-0.041714,
0.072221,
-0.026131,
0.039009,
-0.000084,
-0.041484,
0.071260,
-0.018779,
-0.192140,
-0.055634,
-0.126870,
-0.063841,
0.072114,
0.055916,
-0.169080,
-0.081806,
-0.042421,
0.033839,
0.057472,
-0.093099,
-0.032436,
-0.049804,
-0.013542,
0.035018,
-0.093539,
0.151720,
0.037203,
0.033506,
-0.034254,
-0.030317,
0.077643,
0.002499,
-0.060003,
-0.093644,
0.084809,
0.035943,
-0.127450,
-0.182600,
-0.015913,
0.005188,
-0.080321,
0.042232,
-0.056822,
-0.028897,
-0.096737,
0.090055,
0.078720,
-0.158660,
0.148870,
-0.039360,
0.066183,
-0.086852,
0.055515,
-0.091762,
0.069013,
-0.120610,
0.074906,
0.091799,
0.042710,
0.083590,
-0.027145,
-0.164740,
-0.243800,
0.091032,
-0.059302,
0.070871,
-0.079754,
0.022509,
-0.003943,
-0.021271,
0.076416,
0.076249,
-0.052718,
-0.015506,
-0.065098,
-0.040638,
-0.046694,
0.055507,
-0.018778,
0.072692,
-0.061239,
0.040134,
-0.217100,
-0.008961,
0.058138,
0.075318,
0.035606,
0.007016,
-0.086237,
-0.111680,
0.017519,
-0.039322,
-0.082568,
-0.083884,
0.045198,
0.058689,
0.034158,
-0.085724,
0.024577,
-0.009910,
-0.115600,
0.082876,
-0.002486,
-0.074917,
-0.022126,
0.057089,
0.149830,
0.148860,
-0.065251,
-0.067344,
0.034072,
-0.096778,
0.081005,
-0.041666,
-0.016544,
0.017393,
-0.040586,
-0.052191,
0.084449,
-0.038349,
-0.144120,
0.065797,
-0.064127,
-0.114010,
0.080320,
0.036423,
-0.077148,
-0.006697,
0.157110,
0.084930,
0.042320,
0.119050,
0.054205,
-0.031299,
0.170230,
0.019726,
0.076703,
-0.111320,
0.100220,
-0.139640,
-0.168350,
-0.041329,
-0.002466,
-0.031324,
-0.088809,
-0.256790,
-0.072850,
0.074015,
0.051936,
-0.037432,
0.022486,
0.084610,
0.081014,
0.036653,
-0.033272,
0.026266,
0.039240,
0.122720,
0.071483,
-0.008348,
0.033269,
0.020563,
-0.037901,
0.064070,
-0.032200,
-0.099139,
-0.022881,
0.071782,
-0.104150,
0.030199,
-0.034056,
-0.096669,
-0.025772,
-0.312900,
-0.246600,
-0.108990,
-0.055112,
-0.005049,
0.004279,
-0.144030,
-0.012755,
0.069339,
0.171250,
0.093635,
-0.011089,
-0.023682,
-0.075154,
-0.048753,
0.009097,
0.078401,
0.030820,
-0.050464,
-0.041294,
0.103290,
0.192300,
-0.079782,
-0.054846,
-0.040833,
0.036133,
-0.025553,
-0.092777,
-0.034164,
0.057144,
-0.080936,
-0.110220,
0.064617,
0.052713,
-0.066395,
-0.139190,
0.095406,
0.039271,
0.033518,
-0.036156,
0.154360,
0.010946,
0.000857,
0.041884,
-0.064334,
0.140210,
0.085544,
0.117070,
-0.108830,
-0.014849,
-0.169580,
-0.066464,
0.100550,
-0.094998,
-0.138700,
-0.039106,
-0.127650,
0.010263,
0.042430,
-0.029067,
-0.017342,
-0.119090,
0.161050,
-0.076486,
0.008829,
0.082770,
-0.099185,
-0.156120,
-0.043585,
0.032675,
-0.008230,
-0.013797,
0.044182,
0.007869,
-0.062420,
0.010055,
-0.039490,
-0.062760,
-0.049171,
0.059943,
0.048617,
-0.145960,
-0.109730,
-0.024438,
0.004030,
-0.078621,
0.029004,
-0.001253,
-0.020122,
0.012334,
-0.002438,
0.033976,
-0.008092,
-0.002756,
0.089430,
-0.049413,
-0.017862,
0.067038,
-0.101350,
-0.015394,
0.066967,
-0.009673,
-0.103790,
-0.048559,
-0.151570,
-0.033594,
0.029504,
0.003361,
0.067167,
0.065599,
0.038354,
-0.151280,
-0.061597,
0.020510,
-0.121890,
-0.129400,
-0.016904,
-0.083798,
-0.030310,
0.035358,
-0.054824,
-0.156260,
-0.061413,
0.006676,
-0.046143,
-0.030928,
-0.050156,
-0.053930,
-0.010715,
-0.141020,
0.096407,
-0.046145,
-0.010087,
-0.076445,
-0.015778,
0.047840,
-0.095806,
0.035616,
0.035936,
-0.098770,
0.096949,
-0.028856,
-0.060039,
-0.010120,
-0.209940,
-0.216550,
-0.151140,
-0.027970,
0.070819,
-0.215720,
0.063476,
-0.107200,
0.004699,
-0.011809,
-0.025844,
0.050341,
-0.022962,
-0.079133,
-0.070874,
0.041238,
0.041451,
-0.073999,
0.010440,
-0.043291,
-0.067984,
0.037786,
0.017152,
-0.067572,
-0.070621,
-0.011056,
0.009216,
-0.063404,
0.029377,
0.040364,
-0.030387,
-0.074187,
-0.038096,
0.040167,
0.027768,
-0.042175,
-0.141880,
-0.047975,
-0.037397,
0.028446,
-0.006465,
-0.070472,
-0.038849,
-0.037826,
0.077915,
0.028805,
-0.123090,
0.078168,
0.081371,
0.065085,
0.084532,
-0.045199,
-0.011724,
-0.138690,
-0.028867,
-0.087321,
-0.075766,
-0.050892,
-0.151380,
0.150490,
-0.089619,
-0.068218,
0.058772,
0.178560,
0.003193,
-0.056387,
0.015295,
0.114200,
-0.047345,
0.040630,
-0.096518,
-0.002489,
0.086020,
-0.045529,
-0.031466,
0.035631,
-0.018563,
0.015822,
0.111610,
0.215030,
-0.069200,
-0.157160,
0.084723,
-0.004825,
0.001995,
0.072801,
-0.017178,
0.049751,
0.076887,
-0.014445,
-0.057593,
0.105050,
0.090168,
-0.069296,
-0.093165,
-0.064763,
0.038332,
0.062537,
-0.062051,
0.060840,
0.085560,
-0.006777,
0.039435,
-0.085728,
0.080096,
-0.034035,
0.019944,
0.048368,
-0.017574,
-0.003364,
0.058589,
0.082340,
-0.005515,
-0.087629,
-0.103910,
-0.006094,
0.022404,
0.009446,
-0.063272,
0.029665,
0.005138,
-0.005683,
-0.001288,
0.042497,
-0.033323,
0.020008,
0.079367,
-0.033170,
0.155240,
-0.022297,
-0.065396,
0.030974,
-0.059067,
-0.106450,
0.018711,
0.020983,
-0.005663,
0.029641,
0.036944,
-0.003535,
-0.012502,
0.047956,
-0.115980,
0.150470,
-0.033263,
-0.072149,
0.010817,
0.174690,
-0.028305,
0.077395,
-0.053518,
0.050439,
-0.055135,
-0.092680,
0.002971,
0.063036,
0.128300,
-0.068926,
0.013820,
-0.031182,
0.026652,
0.010986,
-0.017937,
0.040451,
-0.078249,
0.066138,
0.194820,
-0.133820,
-0.071151,
-0.003362,
-0.063459,
0.045641,
-0.018828,
0.060175,
0.033827,
0.090359,
-0.013266,
0.139380,
-0.042386,
0.168220,
0.073805,
-0.019184,
-0.069138,
0.071559,
-0.069142,
0.053758,
-0.121970,
0.053565,
0.067239,
-0.044036,
-0.067082,
0.059556,
-0.012852,
0.033668,
-0.043792,
0.080430,
-0.001998,
0.028236,
-0.004554,
0.113010,
-0.096959,
-0.057219,
-0.063143,
-0.007434,
-0.024439,
-0.036658,
0.058736,
0.038439,
-0.204920,
-0.105980,
-0.024957,
0.148600,
-0.081996,
-0.026491,
0.026792,
0.073492,
-0.063245,
-0.080458,
0.221240,
0.064663,
0.189930,
0.034428,
-0.005107,
0.008683,
0.143710,
-0.000185,
-0.037129,
-0.164440,
-0.109040,
-0.027205,
-0.022457,
-0.061786,
0.047040,
-0.065019,
-0.072468,
-0.006759,
-0.044147,
0.050568,
0.088437,
-0.184180,
0.106000,
0.012947,
-0.020659,
-0.025256,
0.055613,
0.033246,
0.093105,
0.033225,
0.118730,
0.024437,
0.053251,
-0.080792,
0.097397,
-0.050765,
-0.081763,
-0.010871,
0.115270,
0.050254,
0.062068,
-0.050412,
0.056579,
0.204170,
0.013636,
-0.066143,
-0.066933,
0.053940,
0.217760,
-0.040784,
0.085245,
0.109600,
-0.171560,
-0.002564,
0.124940,
-0.082168,
0.021024,
-0.086391,
0.205460,
0.015651,
-0.014172,
0.058544,
0.002172,
0.056082,
-0.076019,
0.114360,
-0.040415,
0.012512,
0.276910,
0.009538,
-0.098868,
0.084152,
0.020077,
-0.147410,
-0.056414,
0.014347,
-0.162290,
0.083998,
-0.050375,
-0.053091,
-0.030189,
-0.280360,
0.032424,
0.007351,
-0.038811,
0.080491,
-0.002939,
-0.071696,
0.050373,
-0.039158,
0.168500,
-0.005220,
0.076260,
0.086772,
-0.005270,
0.007909,
-0.054176,
-0.007252,
-0.067560,
-0.077611,
-0.169200,
0.000481,
0.150790,
0.059077,
0.084585,
-0.016461,
0.018020,
-0.076565,
-0.019562,
0.095961,
0.149700,
-0.119820,
-0.009867,
0.069938,
-0.089328,
-0.015535,
-0.015589,
-0.043084,
0.051428,
0.101510,
-0.063473,
0.024796,
-0.113370,
0.028839,
0.026263,
-0.065012,
-0.015154,
-0.101530,
-0.057491,
0.138780,
-0.044779,
-0.065029,
0.053025,
0.064927,
-0.122140,
-0.065646,
0.069745,
-0.074933,
-0.103010,
-0.059366,
0.035841,
-0.019059,
-0.026288,
-0.143270,
0.152550,
-0.000307,
-0.091118,
0.084886,
0.103510,
-0.038122,
-0.023625,
0.084394,
-0.027821,
0.136970,
0.065880,
0.010666,
0.085181,
-0.051808,
0.007875,
-0.042589,
-0.043288,
0.075915,
0.022438,
0.052784,
-0.041192,
0.139840,
0.005468,
0.047789,
-0.055493,
0.049109,
0.114140,
-0.032401,
-0.000488,
0.076607,
0.231890,
-0.032040,
0.202780,
-0.056576,
-0.242820,
0.162540,
-0.040346,
0.053260,
-0.007276,
-0.054822,
0.024550,
-0.162790,
-0.039989,
0.062741,
-0.081997,
-0.137670,
-0.208270,
0.068871,
-0.080171,
-0.061875,
-0.025007,
0.010731,
-0.030047,
0.054682,
0.005026,
-0.111200,
-0.107020,
0.004663,
0.006741,
-0.002716,
-0.004789,
0.148350,
-0.060219,
0.031528,
-0.010275,
0.022954,
-0.140550,
-0.025989,
-0.029114,
-0.117610,
-0.042037,
0.018263,
-0.110340,
0.060439,
-0.139280,
0.042884,
0.215660,
-0.066012,
-0.073912,
-0.056094,
0.011592,
0.025122,
-0.020714,
0.088115,
-0.036352,
-0.179530,
-0.076773,
0.013256,
0.035034,
0.020535,
-0.125040,
-0.028887,
-0.049535,
-0.080678,
-0.057336,
-0.063598,
-0.000644,
-0.067546,
0.177130,
-0.040708,
0.016698,
-0.043614,
0.051533,
0.014428,
0.060196,
-0.114770,
-0.041477,
0.065076,
-0.009612,
-0.008998,
0.018644,
0.070925,
-0.068089,
-0.196570,
0.078668,
-0.015847,
0.004151,
-0.042815,
-0.036520,
0.002525,
-0.116080,
0.051464,
-0.074004,
0.029315,
-0.009567,
-0.092904,
0.057693,
-0.026324,
0.045458,
0.070913,
-0.041180,
-0.012154,
-0.058541,
0.017396,
0.037129,
0.049565,
-0.079911,
-0.022807,
0.035072,
0.026869,
-0.032276,
-0.177770,
0.071383,
0.068721,
-0.105010,
-0.047895,
-0.132240,
-0.060706,
-0.040745,
0.102600,
0.058242,
0.072117,
-0.009428,
0.012506,
0.026710,
-0.013414,
0.064634,
0.014694,
0.020783,
-0.018552,
-0.070566,
-0.044998,
-0.043656,
0.065172,
-0.114680,
0.110470,
0.114320,
0.090396,
-0.001333,
0.182910,
0.066522,
0.169770,
0.101980,
0.082478,
-0.014877,
0.075497,
0.086237,
0.187420,
-0.002808,
-0.208310,
-0.092312,
-0.204650,
0.012553,
-0.010366,
0.018955,
0.097777,
-0.183930,
0.079781,
-0.003709,
-0.020479,
0.039700,
0.009322,
-0.045648,
0.034589,
-0.090262,
-0.040811,
0.107210,
-0.065508,
-0.141550,
-0.233890,
0.020470,
-0.036430,
-0.029884,
0.007398,
0.025446,
0.076103,
-0.048463,
0.068728,
0.061118,
0.203310,
-0.039423,
0.062040,
-0.167040,
0.057921,
0.000759,
0.031566,
0.057787,
0.064439,
0.027707,
0.066148,
-0.141400,
0.073988,
0.072382,
-0.089079,
-0.077343,
-0.179380,
-0.042039,
-0.055751,
-0.081180,
-0.082112,
0.068830,
-0.065091,
-0.073327,
-0.019767,
0.037584,
0.131070,
-0.024287,
-0.261460,
0.038772,
0.238150,
0.020956,
-0.082383,
-0.079892,
-0.074130,
-0.060817,
0.091957,
0.026693,
-0.010897,
-0.093031,
-0.310960,
0.128040,
0.031529,
-0.037457,
-0.051627,
-0.093067,
-0.003517,
-0.064301,
0.059067,
0.063830,
0.148540,
0.011791,
0.051295,
0.178360,
-0.003797,
0.088582,
-0.029851,
-0.069336,
-0.189080,
-0.128260,
0.037449,
0.011600,
0.055546,
0.094416,
-0.020893,
0.119660,
-0.112740,
0.112260,
-0.017728,
-0.028247,
-0.060505,
-0.043175,
-0.024842,
0.075489,
-0.023707,
-0.001432,
0.129300,
0.170940,
-0.115330,
-0.086939,
0.088783,
0.062928,
0.011733,
0.058363,
0.090754,
-0.029666,
-0.027233,
0.022782,
-0.054001,
0.058281,
-0.083738,
-0.118220,
-0.058712,
-0.035692,
0.001911,
0.063971,
0.085600,
-0.039636,
-0.033768,
-0.007185,
0.121640,
-0.038540,
-0.042805,
0.036875,
-0.073032,
-0.058038,
-0.062177,
-0.034937,
-0.093257,
0.056536,
-0.095443,
-0.053961,
-0.051110,
0.032426,
0.012927,
-0.026259,
-0.024750,
0.156670,
-0.068606,
0.210300,
0.191500,
0.138760,
-0.082127,
-0.159300,
-0.055955,
0.161710,
0.053942,
0.077285,
-0.110990,
-0.092694,
0.041992,
-0.074479,
0.044166,
0.028501,
0.027265,
0.043476,
-0.115010,
0.040351,
0.019790,
0.025955,
0.087453,
0.183660,
-0.034439,
-0.011382,
-0.115690,
-0.049103,
0.102680,
-0.069933,
0.011008,
-0.065431,
0.141480,
-0.108070,
-0.143160,
-0.061118,
-0.029160,
-0.143510,
0.052843,
-0.066821,
0.011521,
0.051481,
-0.032697,
-0.035674,
0.037441,
-0.014563,
-0.001868,
-0.031195,
0.022867,
0.040742,
0.015267,
-0.032090,
-0.043948,
-0.028583,
0.116580,
0.077472,
0.006718,
-0.063911,
0.098173,
-0.080538,
-0.182360,
-0.089161,
0.088949,
-0.050979,
-0.018369,
0.090958,
-0.008436,
0.090222,
-0.062725,
0.153090,
0.045685,
-0.111730,
-0.039665,
-0.039013,
-0.150810,
0.028621,
-0.007418,
-0.066176,
-0.032662,
-0.070594,
-0.077152,
-0.013999,
-0.027697,
-0.002016,
0.079753,
-0.099207,
0.082816,
0.072450,
-0.169650,
0.095384,
0.123110,
0.051251,
-0.013182,
-0.098970,
-0.078494,
-0.088609,
-0.016444,
-0.030106,
0.128470,
-0.068228,
-0.089904,
0.065949,
-0.123500,
0.073455,
-0.020541,
0.049612,
-0.052283,
0.028475,
0.063615,
0.263680,
-0.009437,
-0.084509,
-0.249720,
0.015724,
0.079912,
-0.034997,
0.040713,
-0.025793,
0.000294,
-0.105980,
-0.042822,
0.172630,
0.092614,
0.053107,
0.106050,
-0.130950,
-0.041011,
-0.102870,
0.226690,
-0.047523,
0.075438,
0.063765,
0.017120,
0.117840,
0.035269,
0.099948,
-0.159840,
-0.034836,
-0.064144,
0.081110,
0.015277,
-0.012937,
-0.052995,
0.113290,
0.034096,
0.043689,
-0.028026,
0.069894,
-0.024814,
-0.024834,
-0.105630,
-0.106370,
0.072218,
0.032805,
-0.040560,
0.009892,
-0.025525,
0.103980,
0.038737,
0.104720,
-0.106170,
0.062958,
-0.009850,
0.073040,
-0.008330,
0.102970,
-0.092960,
-0.053680,
-0.032840,
0.081546,
-0.023126,
0.041239,
0.133040,
0.021076,
0.114050,
-0.019962,
-0.052329,
-0.044579,
0.066198,
0.022217,
-0.065812,
0.066305,
0.013014,
0.063408,
0.051658,
0.154580,
0.053173,
0.059616,
-0.089394,
-0.041983,
-0.070417,
0.014457,
0.085246,
0.072134,
0.017120,
-0.023781,
0.001123,
-0.034955,
-0.033726,
0.006882,
-0.017274,
0.037013,
-0.026124,
0.069329,
-0.075855,
0.177750,
-0.047727,
0.052434,
-0.118900,
0.016522,
-0.118630,
-0.056704,
0.094400,
-0.021184,
0.102710,
0.072855,
-0.006679,
0.000232,
-0.194190,
0.062432,
0.070526,
0.015898,
0.084949,
0.014101,
-0.008985,
0.207000,
0.023597,
-0.032542,
-0.057277,
-0.009200,
-0.127980,
0.040171,
0.216380,
0.085542,
-0.008784,
0.056966,
-0.096412,
-0.065397,
-0.064205,
0.180070,
-0.103380,
0.076232,
-0.081339,
0.057231,
0.011352,
0.089058,
0.002431,
0.066549,
-0.042746,
0.077431,
-0.020783,
0.033644,
0.071269,
0.082102,
0.014841,
-0.222740,
0.186000,
-0.052547,
-0.035364,
0.018681,
0.044399,
-0.094956,
0.017057,
0.011471,
-0.018157,
0.089930,
-0.036952,
-0.054337,
-0.040080,
-0.083414,
0.157210,
0.025240,
-0.140450,
-0.052609,
0.016377,
0.024665,
0.029243,
-0.050549,
-0.135380,
-0.034058,
0.028747,
0.088463,
-0.072442,
-0.133740,
-0.020084,
-0.079072,
-0.015516,
-0.018458,
-0.056871,
0.050103,
0.007934,
-0.013542,
-0.018415,
-0.008117,
0.048713,
-0.006780,
-0.058597,
-0.012473,
-0.071994,
0.042294,
0.015818,
-0.019038,
0.020782,
-0.168960,
0.061593,
0.028463,
0.002931,
-0.090763,
0.033093,
-0.022489,
-0.050346,
0.053362,
-0.023920,
0.073489,
-0.036105,
-0.007744,
0.029411,
0.043882,
-0.048413,
-0.048943,
0.071311,
-0.013235,
-0.047218,
-0.011168,
-0.032711,
0.050389,
-0.027374,
-0.056063,
-0.101880,
0.003338,
-0.113570,
-0.032425,
0.011735,
-0.000722,
-0.054420,
0.055101,
-0.082201,
-0.020402,
-0.047033,
-0.093687,
0.040603,
-0.039791,
-0.092677,
0.026842,
0.058369,
0.016863,
-0.027716,
-0.059858,
0.009557,
0.023875,
-0.047320,
-0.086441,
-0.029774,
0.007876,
-0.010789,
-0.018360,
0.028858,
-0.029598,
-0.130240,
-0.030520,
-0.081394,
-0.114490,
-0.142480,
0.026925,
-0.057603,
0.019327,
-0.004275,
-0.049188,
-0.123450,
-0.018916,
-0.088972,
0.009477,
-0.013602,
0.010533,
-0.047864,
0.039270,
0.089875,
-0.001669,
-0.146380,
0.051532,
0.059843,
0.072580,
0.069828,
-0.124600,
-0.048188,
-0.078611,
-0.055137,
-0.066421,
-0.123320,
-0.095512,
-0.068215,
-0.076912,
0.024499,
-0.001850,
-0.048444,
0.047415,
-0.040806,
-0.163550,
-0.051645,
-0.047151,
-0.075877,
-0.034671,
-0.184690,
-0.019570,
-0.002764,
-0.076331,
0.087325,
0.008985,
-0.065404,
-0.017200,
-0.041208,
0.040579,
-0.116060,
-0.072533,
-0.012244,
0.079380,
0.012038,
-0.077791,
-0.073632,
-0.034582,
-0.010821,
-0.025465,
0.078796,
0.033959,
0.030034,
0.029649,
0.035609,
0.033469,
0.003184,
-0.017720,
-0.014426,
-0.073096,
0.022730,
0.037794,
0.116870,
-0.000052,
0.102410,
0.167260,
0.059848,
-0.142120,
0.106190,
0.054593,
-0.088792,
-0.090576,
0.029892,
-0.065345,
0.014012,
0.066520,
0.068582,
0.116830,
-0.147380,
-0.080226,
0.156100,
-0.085138,
-0.176870,
0.098133,
0.091940,
0.069920,
-0.032701,
0.016400,
-0.074192,
-0.064202,
0.077669,
0.005500,
0.025587,
0.140350,
0.045150,
0.102300,
-0.090349,
-0.071663,
-0.029189,
0.107770,
0.093988,
0.041883,
-0.022572,
-0.053696,
-0.042457,
-0.005882,
-0.065325,
-0.024676,
-0.060553,
0.109860,
-0.087849,
-0.037176,
0.079475,
0.132020,
0.067324,
0.019154,
-0.005598,
0.034805,
0.068007,
-0.083017,
0.076363,
-0.226140,
0.045536,
-0.020552,
-0.027869,
0.025984,
0.038609,
0.016444,
-0.010744,
-0.060000,
0.056920,
0.083063,
0.036713,
-0.010950,
-0.039293,
0.016407,
-0.121150,
0.055469,
-0.109270,
0.037519,
-0.021309,
-0.012601,
0.078649,
-0.035126,
0.119320,
0.083911,
0.167880,
-0.192400,
-0.036416,
0.089049,
0.004654,
-0.016941,
0.074060,
-0.018845,
0.093083,
0.074085,
-0.069845,
-0.046845,
-0.072114,
-0.050302,
-0.016384,
0.145230,
0.000306,
0.073387,
-0.041735,
-0.073365,
-0.177200,
0.056658,
-0.010495,
0.022583,
0.129110,
0.174490,
0.054943,
0.078799,
-0.083639,
-0.077242,
0.176850,
-0.098933,
-0.032221,
0.041470,
0.082461,
0.029316,
-0.093049,
-0.011348,
-0.015771,
0.055525,
0.180620,
-0.237870,
0.026783,
0.016907,
-0.097417,
0.060626,
-0.078447,
-0.306500,
0.067588,
0.076992,
-0.165030,
0.072468,
0.101850,
0.020057,
0.055507,
-0.062927,
-0.011904,
0.107920,
-0.001752,
0.072241,
0.028414,
0.111980,
-0.078796,
0.000910,
-0.008802,
0.049752,
-0.049029,
0.163730,
0.009391,
-0.066921,
-0.075309,
0.180320,
0.009582,
-0.087586,
-0.205520,
-0.073732,
-0.081940,
0.019811,
-0.053748,
-0.035194,
0.102930,
0.083004,
0.084901,
0.081885,
-0.064390,
-0.029590,
0.048238,
-0.043518,
0.111890,
0.137800,
0.242010,
-0.151360,
0.018364,
0.006523,
0.071392,
0.156940,
0.082410,
0.004099,
-0.111530,
-0.065607,
-0.081484,
-0.071158,
0.021625,
0.056177,
0.081472,
0.016817,
0.015464,
-0.069722,
-0.195160,
-0.001248,
-0.108340,
0.090200,
0.055419,
-0.038059,
-0.082152,
0.179570,
-0.038680,
0.012920,
-0.098903,
0.090012,
0.025759,
0.072495,
0.002505,
-0.080148,
0.134740,
0.043977,
-0.063183,
-0.096116,
0.043453,
-0.103040,
0.015636,
-0.059376,
-0.069003,
0.102750,
0.024731,
0.007382,
-0.022600,
-0.072322,
-0.065130,
0.000285,
-0.118360,
-0.099545,
0.055986,
-0.007188,
-0.102270,
-0.040736,
-0.077578,
0.152040,
-0.065416,
-0.006384,
-0.102620,
-0.108550,
0.050369,
-0.059494,
-0.062231,
-0.028337,
-0.109070,
0.081182,
0.091236,
0.050869,
-0.073651,
-0.040613,
0.027043,
-0.072120,
-0.224060,
-0.084251,
-0.124790,
-0.220630,
-0.049171,
0.048204,
-0.225370,
0.011526,
-0.170740,
0.067371,
-0.032617,
0.015078,
-0.064411,
0.059315,
0.102560,
-0.091795,
0.087072,
-0.052231,
0.054386,
-0.086053,
-0.023723,
0.063168,
-0.084683,
0.191670,
-0.070363,
-0.067484,
0.029686,
-0.010035,
-0.207600,
-0.008154,
0.171780,
-0.025763,
-0.032210,
-0.074237,
0.033120,
0.063446,
-0.077000,
0.128610,
0.068843,
-0.053473,
0.053158,
-0.187020,
-0.060862,
-0.101340,
-0.100600,
-0.120350,
0.230330,
-0.127750,
0.067107,
-0.002598,
0.030060,
0.040249,
0.049130,
-0.148770,
0.057294,
-0.009545,
0.077223,
-0.048986,
0.035693,
0.051415,
-0.046214,
0.093247,
-0.081059,
-0.016718,
-0.045738,
-0.013999,
0.096627,
-0.039468,
-0.023518,
-0.250930,
0.098919,
-0.011872,
0.087146,
0.067544,
0.096950,
0.018329,
0.001429,
-0.160450,
0.051138,
-0.035762,
0.131940,
-0.142810,
0.091283,
0.033794,
0.033866,
-0.152960,
0.021950,
0.024867,
0.030583,
0.023761,
-0.020850,
0.045739,
0.006293,
0.172160,
0.011301,
-0.256330,
-0.147640,
0.001131,
0.072413,
-0.187340,
0.157720,
-0.098550,
-0.001281,
-0.091462,
-0.065972,
-0.103580,
0.080769,
-0.058787,
-0.053598,
0.033096,
0.029242,
-0.001223,
-0.051522,
0.044675,
0.032104,
-0.059833,
0.035854,
-0.096661,
0.017096,
-0.047186,
0.028547,
-0.062501,
-0.003512,
0.015578,
0.059349,
0.074598,
-0.026865,
-0.098598,
-0.050231,
0.021494,
-0.013638,
-0.072225,
0.048061,
0.068170,
-0.078113,
-0.074080,
-0.022602,
-0.034126,
0.013492,
0.002262,
-0.003449,
-0.016705,
-0.006558,
-0.127090,
-0.014870,
-0.001613,
-0.085235,
0.031734,
-0.100340,
0.026266,
0.054321,
0.078711,
0.085231,
0.069970,
0.001946,
0.051555,
-0.025464,
-0.053200,
-0.029146,
-0.046940,
-0.015655,
-0.086657,
0.075340,
-0.023683,
0.054049,
0.013872,
-0.075091,
0.012645,
0.066867,
0.003793,
0.017319,
0.045705,
0.046609,
-0.112240,
-0.003949,
-0.022527,
-0.081795,
-0.044817,
-0.021215,
0.050632,
0.076881,
-0.017902,
0.085936,
-0.069657,
-0.123120,
0.018046,
-0.028281,
-0.012291,
0.049384,
-0.022198,
-0.007491,
-0.047066,
-0.004023,
-0.089770,
-0.107990,
-0.052311,
-0.037003,
-0.027431,
0.003054,
0.068456,
0.008948,
-0.000034,
-0.047247,
-0.078366,
-0.038846,
-0.041254,
0.063134,
-0.089043,
0.029512,
-0.055594,
-0.023580,
0.026121,
-0.018492,
0.082519,
0.072458,
0.014956,
-0.078139,
-0.115910,
-0.029430,
-0.002296,
0.003869,
0.017751,
-0.014251,
0.003839,
-0.012912,
0.059926,
-0.011160,
-0.009002,
-0.077032,
-0.035691,
0.020803,
0.022967,
-0.064953,
0.055012,
-0.019822,
-0.109110,
-0.026785,
-0.063427,
0.020959,
0.095369,
-0.033002,
0.014145,
-0.079105,
-0.059362,
-0.025240,
0.046653,
-0.073031,
0.000287,
0.031260,
-0.015041,
-0.100150,
-0.078956,
0.037666,
-0.050152,
0.065119,
-0.011976,
-0.072640,
-0.043463,
-0.004425,
0.058091,
-0.008643,
-0.019227,
-0.025632,
-0.006135,
-0.067449,
0.039576,
-0.069025,
0.047031,
0.034171,
0.010142,
-0.026393,
-0.039064,
-0.026636,
-0.015293,
-0.044415,
-0.040107,
-0.078457,
-0.047473,
0.035411,
-0.105940,
-0.103600,
-0.008668,
-0.021828,
-0.077245,
0.020461,
-0.099869,
-0.057649,
0.025012,
0.013823,
-0.102480,
0.009927,
0.032349,
0.084776,
-0.057503,
0.060435,
0.079282,
-0.033410,
-0.005038,
0.038514,
-0.086087,
-0.091502,
0.049862,
0.018778,
-0.018573,
-0.011502,
0.067492,
0.008966,
-0.031844,
0.071071,
-0.089679,
0.042973,
-0.106660,
-0.070978,
-0.004940,
-0.058300,
-0.038572,
-0.018780,
-0.091103,
-0.075624,
0.034210,
0.055461,
-0.138980,
0.076751,
0.067686,
0.066596,
-0.053489,
0.054215,
0.052993,
-0.036109,
-0.049875,
-0.070721,
0.055651,
-0.014218,
-0.084637,
-0.009273,
-0.044777,
-0.004388,
-0.084986,
-0.098868,
-0.025996,
-0.048281,
0.007515,
-0.093245,
-0.074537,
0.073818,
0.024815,
-0.006151,
0.078929,
-0.089140,
-0.070125,
-0.027972,
-0.096188,
-0.049075,
0.079943,
-0.005772,
-0.070300,
0.009644,
0.026681,
0.030581,
0.056289,
-0.075263,
0.077118,
0.127460,
0.106920,
0.053550,
0.060565,
-0.029304,
0.099576,
0.114270,
-0.094562,
-0.056954,
0.026933,
-0.203720,
-0.013325,
-0.008673,
0.026720,
-0.017416,
-0.173940,
0.007367,
-0.058645,
-0.018321,
0.081846,
-0.086507,
0.098535,
0.074779,
0.012954,
-0.028093,
-0.101960,
-0.008085,
0.005592,
0.077711,
-0.012976,
-0.011730,
-0.011847,
-0.035965,
0.046119,
-0.012920,
-0.062709,
0.041703,
0.110810,
0.009128,
0.114350,
0.002473,
-0.140830,
0.031463,
0.176860,
0.079617,
-0.188070,
-0.038446,
-0.050669,
0.081752,
-0.117020,
0.084200,
0.109080,
0.174530,
-0.064002,
-0.186370,
0.004426,
-0.028945,
0.095535,
0.046290,
0.171370,
0.067327,
-0.019825,
0.100350,
-0.007233,
-0.132130,
0.012829,
-0.004214,
0.161830,
0.042961,
-0.037378,
0.146530,
-0.047863,
0.041403,
-0.196270,
0.105530,
-0.012409,
0.000617,
0.049438,
-0.211470,
-0.071930,
-0.105520,
-0.070956,
-0.049376,
-0.039866,
-0.084269,
0.076257,
0.055485,
-0.085250,
0.105720,
-0.053824,
-0.115230,
0.237250,
-0.030299,
0.083331,
-0.000906,
-0.096670,
0.014671,
0.067305,
0.151170,
-0.391370,
-0.033553,
-0.251490,
-0.014629,
0.035157,
-0.034998,
-0.068203,
0.062036,
-0.018538,
-0.019094,
0.068736,
-0.090972,
0.030745,
-0.072895,
-0.120050,
-0.035624,
-0.059046,
0.049570,
-0.022414,
0.032276,
0.011502,
-0.131860,
-0.123070,
0.059972,
0.033811,
-0.092345,
0.092956,
-0.022956,
0.054073,
0.110020,
-0.054207,
-0.134060,
0.033988,
-0.085205,
0.062399,
-0.008139,
0.134230,
0.059731,
-0.001649,
0.017465,
0.042333,
-0.008730,
-0.014934,
0.020315,
-0.149390,
-0.058864,
0.180970,
0.076005,
0.107040,
-0.221440,
0.018071,
-0.068530,
0.064094,
0.023574,
-0.068169,
-0.160300,
0.118170,
0.130710,
-0.127280,
0.254330,
0.006659,
-0.006762,
-0.066907,
-0.097950,
0.112960,
0.014081,
-0.088609,
-0.118300,
-0.103410,
0.053311,
0.118810,
0.055348,
-0.106630,
0.230070,
0.094034,
-0.048420,
-0.000391,
-0.067507,
-0.010085,
0.081384,
0.092513,
-0.018551,
0.090079,
-0.232100,
-0.056530,
0.160960,
-0.063854,
-0.069507,
-0.191570,
-0.009524,
0.115880,
-0.076252,
0.002049,
0.063802,
-0.022931,
0.129620,
0.166110,
0.075837,
-0.093864,
0.075318,
-0.041976,
0.015166,
0.010229,
0.039790,
-0.021423,
0.082940,
0.041750,
-0.032607,
-0.035536,
0.007290,
0.135640,
0.090233,
-0.041206,
-0.033562,
-0.050441,
0.001660,
-0.020735,
0.088190,
-0.148660,
-0.099512,
-0.094984,
-0.045523,
-0.015223,
0.028198,
-0.001529,
-0.065148,
0.012338,
0.077663,
-0.003121,
-0.038065,
-0.016140,
0.089896,
0.008672,
-0.062646,
0.149490,
-0.302570,
-0.084069,
-0.068337,
0.042495,
-0.027832,
-0.041228,
0.005687,
0.070181,
-0.064843,
-0.076825,
0.159070,
-0.157930,
-0.064761,
0.045518,
-0.050475,
-0.013330,
0.121770,
0.073690,
0.043998,
-0.030767,
-0.005837,
0.068243,
0.007088,
-0.002742,
-0.035534,
0.017011,
-0.063827,
-0.077344,
0.070064,
0.115870,
0.005387,
-0.123350,
0.007923,
-0.128230,
0.149760,
0.057625,
-0.008619,
0.066164,
0.026416,
0.007355,
0.074390,
-0.083547,
-0.117910,
-0.252460,
-0.220120,
-0.132420,
0.028617,
0.138800,
0.003496,
-0.143580,
-0.064901,
0.157460,
0.044550,
-0.010527,
-0.065509,
-0.048574,
0.018555,
-0.046843,
-0.080207,
-0.053538,
0.178540,
-0.044850,
-0.038328,
-0.049341,
0.030089,
-0.176000,
0.005071,
0.063044,
0.128200,
0.033322,
-0.091941,
0.075225,
0.079396,
0.097767,
-0.171930,
-0.160510,
0.027882,
-0.009473,
0.157420,
0.047441,
0.011158,
-0.136610,
-0.087789,
0.080891,
0.115360,
0.053405,
0.060216,
-0.060114,
-0.061942,
0.137200,
-0.091748,
0.046977,
0.050975,
-0.072822,
-0.065132,
-0.066443,
0.039568,
-0.225390,
0.058911,
0.042180,
0.079765,
-0.067990,
-0.022040,
-0.051059,
-0.051401,
0.193170,
0.014996,
0.040080,
-0.079269,
-0.112990,
0.134310,
-0.136090,
0.053581,
-0.002769,
-0.063689,
0.013530,
0.024031,
0.029538,
0.019056,
-0.128820,
0.159050,
-0.065479,
-0.083609,
0.068880,
-0.077682,
0.045925,
0.154370,
-0.044927,
-0.014675,
-0.037515,
-0.062011,
-0.088663,
-0.163560,
-0.024816,
-0.027282,
-0.255880,
-0.034264,
-0.089462,
0.003222,
-0.019853,
0.003680,
0.031109,
-0.022148,
-0.108710,
0.062436,
0.006054,
0.036478,
0.072873,
-0.030389,
-0.050598,
-0.032475,
0.105850,
-0.089231,
0.264900,
-0.211400,
-0.092382,
0.062171,
-0.003564,
-0.006731,
0.009916,
0.054075,
0.013130,
0.153130,
0.135150,
-0.047785,
0.120310,
-0.018131,
-0.026669,
-0.044125,
-0.041610,
-0.012952,
-0.147930,
0.026377,
-0.112890,
-0.023578,
0.040351,
0.024634,
0.083188,
-0.156590,
-0.077578,
-0.001889,
0.079538,
0.047101,
0.000376,
0.041370,
-0.014946,
-0.021506,
-0.066675,
-0.089046,
-0.023448,
-0.091459,
0.053468,
0.087092,
-0.004013,
-0.102880,
0.051208,
-0.184150,
-0.052071,
0.056614,
0.026761,
-0.156690,
0.067397,
0.116680,
-0.047935,
-0.022438,
-0.002137,
0.073574,
0.037315,
0.027465,
0.166960,
0.088730,
0.016225,
-0.044334,
0.063005,
0.062578,
0.006491,
0.084930,
-0.060842,
-0.007525,
-0.126740,
0.069675,
0.112030,
-0.112120,
-0.001379,
0.105360,
0.012850,
-0.004646,
0.254130,
-0.065986,
0.019620,
-0.212040,
0.012879,
0.074528,
-0.090044,
0.028583,
-0.069359,
0.039930,
-0.000196,
-0.007553,
0.065390,
-0.041621,
0.016954,
-0.029386,
0.068892,
0.153440,
0.051353,
0.021779,
-0.040618,
-0.071554,
-0.001042,
0.050491,
-0.054431,
0.123450,
-0.034434,
-0.050917,
-0.099819,
0.039057,
0.049601,
-0.009933,
-0.004377,
-0.028153,
0.060255,
0.006140,
-0.015800,
-0.072296,
0.044771,
0.014973,
-0.078282,
0.058932,
0.073356,
0.059476,
0.099249,
0.067961,
-0.161610,
-0.078082,
0.061745,
0.035881,
-0.018833,
0.008154,
-0.057489,
0.084260,
-0.004404,
0.005524,
-0.090812,
0.083907,
-0.107480,
-0.022730,
0.148330,
0.073041,
-0.142170,
0.033087,
0.084395,
-0.034731,
0.019483,
-0.012702,
0.066888,
-0.010284,
0.006978,
0.219550,
0.074252,
0.066366,
-0.087268,
0.067979,
-0.028032,
0.075246,
-0.040638,
-0.007876,
-0.038991,
-0.107880,
-0.000742,
0.189730,
-0.056765,
-0.144800,
0.060000,
-0.023406,
-0.027123,
-0.062232,
-0.018779,
-0.103570,
0.133060,
0.047093,
0.162810,
-0.055155,
0.072486,
0.076517,
0.208980,
0.041368,
-0.027115,
-0.013124,
-0.043233,
-0.079071,
-0.031984,
-0.071647,
0.023472,
0.085799,
-0.007086,
0.054144,
-0.042872,
-0.043778,
0.093334,
0.031389,
0.115910,
-0.065837,
0.017903,
-0.032221,
0.257010,
0.073115,
-0.035634,
0.034558,
0.043059,
0.012563,
0.002068,
0.098904,
0.073398,
0.032047,
-0.073867,
0.135000,
-0.058209,
-0.061792,
0.100480,
-0.031333,
0.097407,
0.034013,
0.053246,
-0.125980,
0.018432,
0.120060,
0.132590,
0.055709,
-0.002562,
0.078290,
0.026117,
0.093712,
0.054242,
-0.151740,
-0.189720,
0.139820,
0.030483,
-0.016442,
0.014176,
0.109510,
0.099354,
-0.035223,
0.032977,
0.072875,
-0.039548,
-0.097044,
-0.129030,
-0.057381,
-0.012991,
0.074925,
-0.094384,
0.214840,
-0.057054,
0.001233,
0.003018,
0.047206,
0.036044,
-0.070902,
-0.108400,
0.138050,
-0.030219,
0.056799,
-0.026400,
0.030681,
-0.059030,
0.040317,
0.012778,
0.017296,
0.044321,
-0.022213,
0.196710,
-0.053425,
0.141120,
-0.106210,
-0.084200,
0.053431,
0.026617,
-0.054503,
0.088581,
-0.007193,
-0.048771,
0.051744,
0.026178,
0.033105,
-0.147700,
0.061319,
0.069969,
0.154910,
0.027052,
-0.044152,
-0.018298,
0.012980,
0.137240,
0.183190,
0.045599,
0.046970,
0.068628,
-0.024860,
-0.089859,
0.009426,
-0.154260,
-0.036218,
0.074888,
-0.212220,
0.142000,
0.028261,
-0.055230,
-0.059693,
-0.011235,
0.014748,
0.016269,
-0.096009,
0.058813,
0.092762,
-0.004663,
-0.037289,
-0.002997,
-0.067813,
0.095220,
0.064965,
-0.049160,
-0.034284,
-0.094161,
-0.195460,
0.137160,
-0.056135,
0.045464,
-0.013033,
-0.070253,
0.214440,
-0.127200,
0.009353,
-0.085157,
-0.001680,
0.059001,
0.089527,
-0.079153,
0.057675,
-0.004644,
0.022823,
0.050769,
-0.047965,
0.068918,
0.157360,
-0.055459,
0.045146,
-0.029612,
-0.060170,
-0.021300,
0.076752,
0.016848,
-0.104590,
-0.103700,
0.051520,
0.128890,
-0.172780,
-0.011237,
0.007992,
-0.055249,
0.088747,
-0.145000,
0.034446,
-0.081395,
-0.005711,
0.045840,
-0.078500,
0.122790,
-0.009559,
-0.051266,
0.076106,
-0.019111,
0.016967,
0.214530,
0.101070,
-0.033969,
-0.018136,
-0.042994,
0.046179,
-0.029718,
-0.167800,
-0.051381,
-0.082704,
0.078003,
0.180860,
-0.026480,
-0.005389,
0.030452,
0.010643,
0.136420,
0.225890,
-0.064773,
-0.041973,
-0.040384,
-0.080920,
-0.048087,
-0.090610,
-0.144110,
-0.013005,
-0.090694,
0.060693,
0.015839,
0.020240,
-0.043212,
-0.057872,
0.019442,
0.084144,
-0.062989,
0.019965,
0.115000,
0.086207,
0.071886,
-0.035305,
-0.073944,
-0.031041,
-0.048479,
0.122170,
0.071797,
0.156980,
-0.083967,
0.022568,
-0.120350,
-0.035967,
0.032375,
-0.052835,
-0.114180,
-0.008084,
-0.054377,
-0.029693,
0.023398,
-0.050244,
-0.085436,
0.083845,
-0.081206,
-0.067961,
0.018718,
0.095124,
0.070538,
-0.003821,
-0.107430,
-0.214040,
0.053032,
-0.136690,
-0.031505,
0.188800,
-0.125020,
0.042470,
0.210340,
0.005565,
0.053806,
0.135960,
-0.103460,
0.029469,
0.015414,
0.066640,
-0.053348,
0.025022,
0.059566,
0.049111,
0.100630,
-0.233800,
-0.109860,
-0.088084,
0.013055,
-0.065492,
-0.011183,
-0.086607,
-0.021043,
-0.048965,
0.012209,
0.160850,
-0.005869,
-0.131880,
0.044930,
0.053488,
0.087396,
0.021045,
0.052590,
0.075173,
-0.049044,
-0.023841,
0.139490,
0.016638,
0.035232,
0.042908,
-0.047642,
-0.045212,
-0.212440,
0.050106,
0.149470,
-0.074446,
-0.059057,
0.102750,
-0.110870,
0.039146,
-0.062728,
-0.037808,
0.076646,
-0.031630,
-0.066875,
0.105080,
0.037354,
-0.031909,
-0.205130,
-0.115660,
-0.280950,
-0.012802,
0.183160,
0.015108,
0.036180,
-0.133600,
0.103520,
-0.016750,
-0.104150,
0.004338,
0.111990,
-0.021609,
0.089945,
0.050460,
0.084927,
0.240180,
0.044050,
-0.042994,
0.089073,
-0.092995,
-0.138450,
0.035433,
0.033303,
0.019212,
-0.086521,
0.020377,
-0.049570,
0.082315,
0.005298,
-0.056074,
0.087470,
0.226900,
-0.007005,
0.118890,
0.176010,
0.042789,
-0.108810,
-0.036068,
0.072222,
0.030849,
0.129680,
0.038665,
0.046167,
0.041702,
0.118650,
0.005397,
0.001846,
0.063535,
0.095161,
-0.013077,
-0.022990,
0.023316,
-0.060924,
0.025332,
0.094465,
0.072908,
-0.029014,
0.032358,
0.018143,
-0.196420,
0.192630,
0.055076,
0.124860,
-0.019119,
-0.160440,
0.241390,
-0.032102,
-0.016107,
-0.058318,
0.065797,
0.002842,
-0.014929,
-0.052917,
0.085287,
-0.065724,
-0.132710,
-0.037000,
-0.111690,
-0.007569,
0.084355,
-0.070368,
-0.073920,
0.067573,
0.061134,
-0.089674,
0.025415,
-0.160010,
-0.106020,
0.020305,
0.024789,
-0.031227,
0.319010,
0.048417,
0.028351,
0.115890,
-0.202920,
0.071353,
-0.086500,
-0.035695,
0.052651,
-0.002820,
0.010660,
-0.088813,
-0.073784,
-0.035768,
-0.075310,
-0.055607,
-0.082535,
-0.097029,
-0.014680,
-0.000568,
-0.035444,
-0.076231,
-0.084599,
0.037260,
-0.026052,
0.076644,
-0.047240,
-0.106510,
-0.020869,
0.031932,
0.000836,
0.008750,
-0.033461,
-0.152730,
-0.163620,
0.059048,
-0.036261,
0.030420,
0.008343,
0.149050,
0.045797,
0.015502,
0.170420,
0.016577,
0.072000,
-0.033755,
0.032597,
0.032997,
-0.008354,
-0.189620,
0.071796,
0.080427,
-0.060314,
-0.021673,
-0.041095,
-0.047034,
0.077647,
0.142220,
-0.088776,
-0.163290,
-0.120260,
-0.003350,
0.017890,
0.176990,
-0.187890,
-0.053197,
-0.017937,
0.095853,
-0.006782,
-0.147210,
-0.106960,
-0.016368,
0.056540,
0.153990,
-0.003741,
-0.071882,
0.073941,
0.089433,
-0.041531,
0.025724,
-0.050830,
-0.096293,
-0.018809,
-0.078294,
0.166870,
0.053260,
0.029092,
-0.083426,
0.018611,
0.022868,
0.103900,
-0.152660,
0.036836,
-0.055374,
-0.019056,
-0.063447,
0.052627,
-0.008971,
0.048902,
-0.005092,
-0.101200,
0.086728,
0.003302,
-0.052232,
-0.262300,
-0.208410,
0.029132,
-0.043708,
0.085939,
0.086265,
0.018658,
-0.042720,
-0.006924,
0.088399,
-0.028581,
-0.022199,
-0.050606,
0.026296,
-0.041584,
-0.016347,
0.062657,
-0.054458,
-0.064827,
-0.057011,
-0.122590,
-0.252110,
-0.077973,
-0.011124,
-0.200770,
0.044943,
-0.046878,
0.032692,
0.007883,
-0.023498,
-0.016152,
-0.168070,
0.045113,
-0.037656,
-0.083884,
0.027335,
-0.057690,
-0.065679,
0.012611,
0.027363,
-0.070842,
-0.028756,
-0.002716,
0.018880,
0.123380,
-0.291380,
-0.034110,
0.092144,
-0.006718,
0.049404,
-0.008328,
0.019051,
0.031099,
-0.036392,
0.058028,
-0.072731,
0.056082,
-0.009923,
0.046847,
0.024045,
-0.120550,
-0.023094,
0.002867,
0.063604,
0.030202,
-0.017058,
-0.050792,
0.007043,
-0.050478,
0.044017,
-0.168630,
-0.001978,
-0.218290,
-0.140310,
-0.077396,
-0.115830,
0.022853,
-0.035684,
0.202120,
-0.018187,
0.078294,
0.118800,
-0.010708,
0.032599,
0.116160,
-0.029437,
0.046741,
-0.061670,
0.029976,
-0.134160,
0.006602,
-0.014796,
0.073820,
0.002255,
0.013937,
-0.037569,
0.046322,
-0.047237,
0.004657,
0.043303,
-0.005672,
0.025914,
-0.002847,
0.039718,
-0.154520,
0.054264,
-0.077995,
-0.032227,
-0.076210,
-0.033528,
-0.010545,
0.150570,
0.015019,
-0.016694,
-0.003058,
0.035338,
-0.132190,
-0.055843,
-0.021330,
-0.028008,
0.017607,
0.027442,
-0.001069,
0.093171,
-0.010577,
-0.049887,
-0.057211,
-0.116990,
0.060683,
-0.000924,
-0.103980,
0.096284,
-0.054628,
0.039477,
-0.040214,
-0.077218,
-0.015403,
0.025097,
-0.026317,
-0.086140,
-0.046473,
-0.130100,
0.011668,
0.023474,
-0.052709,
-0.015155,
0.084165,
0.003605,
0.053160,
-0.188560,
0.033008,
0.049363,
-0.047358,
-0.095525,
-0.068589,
-0.052635,
-0.061138,
-0.028355,
0.080420,
0.058855,
-0.079372,
-0.017346,
-0.004743,
-0.024773,
-0.063700,
0.045078,
-0.082171,
-0.074249,
0.076075,
-0.079419,
-0.014483,
0.020294,
0.020581,
-0.125290,
-0.011954,
-0.012903,
-0.019096,
-0.140950,
-0.087275,
0.065548,
0.005450,
0.034914,
0.050750,
0.075939,
0.014696,
-0.167210,
-0.076423,
-0.033885,
-0.004703,
-0.017175,
0.073999,
-0.031829,
0.047981,
-0.063490,
-0.096356,
-0.085598,
-0.086059,
-0.083548,
0.012027,
-0.074201,
0.058854,
-0.134650,
0.055710,
0.013644,
-0.056036,
0.081773,
-0.006876,
-0.084470,
-0.040459,
-0.058154,
0.043388,
-0.009164,
0.077714,
-0.001639,
-0.056054,
-0.095181,
-0.066708,
-0.026754,
-0.021440,
-0.201390,
0.007043,
0.009713,
-0.056038,
0.011688,
0.048319,
-0.104060,
-0.038684,
-0.157420,
-0.035629,
-0.121900,
-0.015951,
-0.110620,
-0.006980,
-0.028130,
-0.062477,
0.061838,
-0.155980,
-0.072157,
0.075591,
0.023907,
-0.096095,
-0.033648,
0.064471,
-0.029865,
-0.213860,
0.081294,
-0.077376,
0.020130,
-0.048889,
-0.030449,
-0.082189,
-0.052700,
0.024893,
0.055144,
-0.082452,
-0.057639,
0.166170,
-0.050744,
-0.062353,
0.048137,
-0.099100,
0.012937,
0.077245,
-0.048145,
-0.047950,
-0.059370,
-0.045711,
-0.099658,
-0.035439,
-0.063317,
-0.012695,
-0.074961,
0.022875,
0.028282,
-0.028095,
0.033916,
0.016363,
-0.081707,
-0.029022,
-0.007759,
-0.067072,
0.001486,
0.081731,
-0.019505,
-0.025800,
0.025226,
-0.030770,
-0.015580,
0.087003,
-0.130670,
0.048709,
0.073768,
-0.081726,
-0.023310,
0.087879,
0.050594,
0.070203,
-0.157150,
-0.060683,
-0.083191,
-0.018795,
-0.080126,
0.001370,
-0.036973,
0.072068,
0.019838,
0.004854,
-0.042703,
-0.168310,
-0.066285,
-0.142120,
-0.071774,
0.081792,
-0.066561,
-0.014210,
-0.123930,
0.006830,
0.023195,
-0.041279,
-0.070568,
-0.033967,
-0.032070,
0.048793,
0.041989,
-0.080065,
-0.025872,
0.001340,
0.012489,
0.037839,
-0.077890,
0.050023,
0.025044,
0.087843,
-0.038441,
-0.009936,
0.089970,
-0.143370,
0.031487,
-0.026308,
-0.044563,
0.031570,
0.069164,
-0.016006,
-0.170560,
-0.097418,
-0.073302,
-0.036012,
0.035028,
0.067790,
-0.108930,
-0.080210,
0.084692,
0.046640,
0.045563,
-0.005322,
-0.078502,
-0.233970,
0.046513,
-0.051698,
-0.066366,
0.010467,
-0.157760,
0.007686,
-0.002746,
-0.105890,
0.012422,
0.024189,
-0.091087,
0.017344,
-0.049673,
-0.141040,
-0.296330,
-0.052895,
-0.044388,
-0.035832,
0.124060,
-0.082513,
0.099665,
0.063064,
-0.095509,
-0.054091,
-0.040195,
0.057413,
-0.081092,
-0.074886,
0.044248,
0.020037,
-0.068769,
0.042590,
0.046972,
0.070879,
-0.164800,
-0.098126,
-0.362430,
0.102410,
-0.067143,
-0.068593,
-0.029934,
0.006556,
0.067468,
-0.028119,
0.055320,
0.051256,
0.033341,
-0.121790,
-0.068830,
-0.097183,
-0.124120,
-0.056249,
-0.045229,
0.095304,
0.044945,
-0.048195,
0.101910,
0.084059,
-0.174830,
0.068237,
0.138800,
-0.133430,
0.009710,
-0.139120,
0.056646,
-0.029822,
0.009183,
-0.002793,
-0.095484,
0.016046,
0.050552,
-0.135740,
-0.070380,
-0.059656,
-0.076181,
-0.103080,
0.123540,
-0.046567,
-0.230430,
0.070953,
-0.066639,
-0.109140,
-0.083046,
-0.063363,
0.000823,
0.055529,
0.001078,
0.046668,
-0.017504,
0.007258,
-0.000324,
0.065298,
0.119400,
0.027551,
0.040795,
0.025003,
0.045450,
-0.208410,
0.091753,
-0.163640,
-0.033804,
0.060368,
-0.060611,
0.062587,
-0.107670,
-0.131410,
-0.016198,
0.148810,
-0.178470,
0.056095,
-0.025465,
0.046288,
0.023845,
-0.118680,
0.177140,
-0.074576,
0.003884,
0.037510,
0.011407,
-0.089736,
0.012297,
-0.051764,
-0.062892,
-0.056222,
-0.122520,
-0.070872,
-0.023005,
-0.077245,
0.054573,
-0.017333,
-0.022854,
0.043933,
-0.044954,
-0.094578,
-0.011058,
-0.011137,
-0.082777,
-0.027157,
0.033695,
-0.027833,
-0.049165,
-0.009621,
-0.049908,
0.018820,
-0.027799,
-0.031056,
0.012305,
-0.088646,
0.052320,
-0.090294,
0.021644,
0.028818,
-0.075358,
0.059819,
0.028636,
-0.126230,
-0.090978,
-0.117530,
-0.016489,
-0.038419,
-0.066174,
-0.065216,
-0.063371,
-0.062833,
-0.094710,
0.039365,
-0.035077,
0.009399,
-0.075833,
0.042032,
-0.091676,
0.017244,
-0.053364,
0.019883,
0.018828,
0.088596,
-0.070670,
-0.042508,
-0.127170,
-0.081136,
0.019916,
-0.012607,
-0.075490,
0.017465,
0.018919,
0.082388,
0.019761,
-0.044316,
-0.070584,
-0.081071,
-0.018479,
-0.010401,
-0.021266,
0.011006,
0.005728,
-0.044833,
-0.077131,
-0.029818,
0.066152,
-0.003185,
0.058357,
-0.058004,
-0.012661,
-0.050560,
-0.018439,
0.027713,
0.087754,
-0.043746,
-0.131790,
0.082567,
-0.022850,
-0.040263,
-0.063449,
0.026785,
-0.024492,
-0.011147,
0.080942,
-0.066053,
-0.004317,
-0.089871,
-0.030397,
-0.001798,
-0.124000,
-0.112320,
-0.023389,
0.004886,
-0.002910,
-0.046853,
-0.036505,
-0.045470,
-0.005905,
0.046404,
-0.178850,
-0.053073,
-0.073144,
-0.028393,
0.029071,
-0.064406,
0.079032,
-0.063986,
-0.085241,
-0.066419,
-0.129960,
-0.049238,
-0.017468,
-0.060834,
-0.037858,
0.227420,
0.081366,
0.065557,
-0.011967,
-0.024220,
-0.068085,
0.081362,
-0.016936,
-0.136200,
-0.009438,
0.056545,
-0.265410,
-0.114050,
0.115550,
0.088601,
0.070922,
0.048346,
-0.158140,
-0.087489,
0.029577,
0.041293,
0.060273,
0.028323,
-0.004416,
0.010851,
0.049339,
0.022586,
0.073971,
-0.157230,
0.180480,
0.168080,
0.017789,
0.015619,
0.018727,
0.061849,
-0.042258,
-0.025878,
-0.023370,
0.030799,
-0.080589,
0.047197,
0.035358,
-0.091511,
0.068181,
0.005206,
-0.049609,
-0.267830,
0.136910,
-0.079749,
0.126020,
-0.031903,
0.006832,
-0.013320,
-0.081571,
0.190500,
0.004995,
-0.107820,
0.113200,
-0.049512,
-0.059634,
-0.012724,
0.077409,
0.033964,
-0.017190,
-0.230320,
-0.008734,
0.058966,
-0.061158,
-0.051411,
-0.132800,
-0.261320,
-0.092540,
-0.076399,
0.087392,
0.062926,
-0.007864,
0.148190,
0.082985,
0.031939,
0.066869,
-0.108160,
-0.039578,
-0.069129,
0.072515,
0.054221,
-0.064117,
-0.004211,
0.064613,
-0.046773,
0.083034,
-0.100980,
-0.079381,
0.077808,
0.094415,
0.012669,
0.088480,
-0.186920,
0.196680,
-0.014821,
-0.217720,
0.094827,
-0.241940,
0.102250,
-0.092993,
-0.086993,
-0.155500,
-0.046579,
0.020396,
-0.012809,
-0.080276,
0.052357,
-0.039812,
-0.071551,
-0.015921,
-0.074221,
-0.027870,
-0.076387,
-0.031673,
-0.090255,
0.019514,
-0.003378,
-0.082067,
-0.047650,
0.000381,
0.033402,
-0.077749,
-0.101950,
-0.096441,
-0.116860,
0.052371,
0.018031,
-0.143790,
-0.013915,
0.037505,
-0.041388,
0.085703,
0.077518,
-0.012247,
-0.012642,
0.029907,
-0.077908,
-0.056065,
0.018186,
0.030812,
-0.041381,
-0.031516,
-0.055600,
0.137290,
-0.065687,
-0.085816,
0.023845,
0.069289,
-0.043230,
-0.083782,
0.075199,
0.013332,
-0.045643,
0.023255,
-0.062686,
-0.004580,
0.031565,
-0.111290,
-0.019735,
-0.012253,
0.056324,
0.009571,
0.082489,
0.038072,
0.007506,
-0.038064,
-0.090037,
-0.099408,
0.032189,
-0.159620,
-0.112240,
-0.020251,
-0.041332,
-0.031999,
0.075418,
0.038564,
-0.040415,
-0.011648,
-0.041055,
-0.046827,
-0.111960,
-0.019953,
0.091714,
0.046895,
-0.023767,
-0.090005,
0.002305,
0.011956,
0.031252,
0.087398,
-0.065718,
-0.077635,
-0.066625,
-0.092480,
-0.064913,
0.014018,
-0.101020,
0.051571,
0.047111,
0.029012,
-0.014760,
-0.136120,
0.045060,
0.071404,
-0.022816,
-0.017075,
0.027539,
0.072281,
-0.052971,
-0.060584,
0.078755,
-0.032751,
-0.138940,
0.067941,
-0.079620,
0.047143,
-0.120390,
-0.113250,
0.015668,
-0.110540,
-0.029651,
-0.100290,
-0.092993,
0.087174,
-0.024792,
-0.079183,
0.072081,
-0.020182,
-0.074931,
0.012459,
0.114160,
0.006675,
0.092471,
0.138550,
-0.066865,
0.051055,
-0.037656,
0.006732,
0.127730,
0.108910,
0.041303,
0.023944,
0.028405,
0.161270,
0.163150,
0.080343,
0.030500,
-0.089390,
0.026079,
-0.066684,
-0.085926,
-0.056534,
0.042128,
-0.112120,
-0.058099,
-0.071890,
0.115080,
0.061979,
0.014860,
0.042898,
0.033637,
-0.049772,
-0.004823,
-0.074813,
-0.064269,
0.115370,
-0.113500,
-0.092636,
-0.028826,
0.023045,
-0.073308,
-0.011459,
-0.027887,
0.190300,
0.010677,
0.178380,
-0.029883,
0.099258,
0.071514,
-0.064382,
-0.004137,
0.234850,
-0.041652,
-0.215740,
0.077014,
0.039882,
-0.050846,
-0.115480,
-0.043422,
-0.083951,
0.162700,
0.063194,
-0.122500,
0.133610,
-0.031487,
0.072030,
-0.001824,
0.063737,
-0.027241,
0.023046,
-0.055812,
0.042716,
-0.109410,
-0.048124,
0.128040,
-0.106470,
0.035649,
-0.150320,
-0.080426,
-0.044329,
-0.009258,
-0.356110,
-0.040060,
-0.146460,
0.031541,
-0.021024,
-0.027050,
-0.158760,
-0.112360,
0.077817,
0.102190,
-0.034666,
-0.081536,
0.014330,
0.061703,
0.026677,
0.008322,
0.075066,
0.182250,
0.049625,
0.027476,
-0.003067,
0.079803,
-0.002593,
-0.066871,
0.176130,
0.013316,
-0.133620,
-0.028823,
0.025002,
0.015312,
0.123480,
-0.155710,
0.044757,
-0.032009,
-0.024617,
-0.000262,
0.019573,
0.157320,
-0.074528,
0.010885,
-0.058836,
0.118260,
0.140190,
0.093018,
-0.031621,
0.073808,
0.063963,
-0.018135,
0.089869,
0.051894,
0.045818,
-0.038649,
0.002666,
0.168100,
-0.008824,
0.014166,
0.110450,
-0.109310,
0.065251,
0.091414,
0.049341,
0.141740,
0.089461,
-0.063378,
0.018013,
0.018347,
0.002680,
0.050004,
0.073233,
-0.063413,
0.072962,
-0.033741,
0.146350,
0.139620,
0.185030,
-0.107690,
-0.023311,
0.032854,
-0.042388,
-0.048878,
0.053837,
-0.109230,
-0.057538,
0.131960,
0.175820,
0.265860,
0.119260,
0.026477,
-0.149420,
-0.043862,
0.106450,
0.168340,
-0.032870,
0.074730,
0.012979,
0.105030,
-0.057791,
0.025508,
-0.026753,
-0.187120,
0.032472,
-0.070769,
-0.066285,
-0.068925,
0.047083,
0.054882,
0.112490,
0.009101,
-0.037013,
0.144000,
-0.005643,
0.071710,
0.047702,
-0.047400,
0.016958,
0.064846,
0.029636,
-0.000475,
0.023886,
0.163040,
-0.030058,
0.057086,
0.022100,
0.011523,
0.031436,
-0.057632,
0.009713,
0.094796,
-0.049660,
-0.032472,
0.036838,
-0.017809,
0.089755,
0.025196,
0.040138,
-0.095973,
-0.025747,
-0.064563,
0.047767,
-0.022497,
0.034127,
0.050488,
-0.041752,
0.093066,
-0.236630,
0.161250,
-0.164840,
0.058168,
0.031217,
0.001489,
0.179190,
0.069623,
-0.058542,
-0.051957,
-0.016869,
0.012581,
-0.051419,
-0.007404,
-0.050193,
0.083108,
0.015628,
0.058780,
0.044755,
0.012434,
0.074975,
-0.184540,
-0.077315,
-0.056419,
-0.179950,
0.078561,
-0.020918,
0.033848,
-0.154480,
-0.062813,
0.063216,
-0.119360,
0.038214,
-0.010830,
0.011444,
-0.041929,
-0.038000,
0.115310,
-0.088225,
-0.053279,
0.032764,
-0.013999,
0.004910,
-0.002317,
-0.011711,
0.035181,
-0.001640,
-0.012862,
0.082849,
-0.039095,
0.049860,
-0.053843,
0.034386,
0.083591,
0.001134,
-0.079274,
-0.042290,
0.005636,
-0.130140,
0.040791,
0.184900,
-0.103660,
-0.066330,
-0.101730,
-0.045346,
0.019291,
0.044224,
-0.042642,
0.140620,
0.025150,
0.008032,
0.064595,
0.004881,
-0.068707,
0.059520,
0.094226,
-0.005834,
-0.121890,
0.043487,
0.091295,
-0.026676,
-0.006820,
0.077406,
0.036991,
-0.010394,
-0.233900,
0.047062,
0.020350,
0.028268,
0.139060,
0.064075,
0.045395,
-0.089553,
0.003492,
0.062686,
-0.029489,
-0.118610,
-0.078553,
0.163350,
-0.030468,
-0.049001,
-0.099140,
-0.102820,
0.049738,
-0.020699,
-0.046524,
-0.018253,
-0.009154,
-0.059785,
0.019512,
-0.018256,
-0.052379,
0.004477,
-0.031917,
-0.045899,
0.070334,
-0.112540,
-0.077320,
-0.044542,
-0.169920,
0.001288,
-0.182180,
-0.046990,
-0.058814,
-0.027522,
-0.059678,
0.170830,
-0.029892,
0.029745,
0.066649,
-0.083443,
-0.054010,
-0.021558,
-0.023701,
-0.076570,
-0.059627,
-0.104630,
0.016297,
-0.257790,
0.000656,
0.063282,
-0.071421,
-0.008163,
-0.050389,
-0.121810,
-0.053177,
-0.067107,
-0.117420,
-0.078590,
-0.079521,
-0.081691,
0.035593,
0.125160,
-0.028953,
-0.034921,
0.037261,
-0.077342,
-0.035804,
-0.031347,
-0.038220,
-0.054627,
-0.125970,
0.021117,
-0.060489,
0.121810,
0.073459,
0.001151,
0.059515,
0.034037,
-0.096244,
0.082999,
0.137350,
0.012953,
0.067940,
0.074897,
-0.021324,
-0.014853,
-0.139200,
0.120560,
-0.035465,
-0.226120,
0.067540,
-0.081523,
0.034508,
0.009955,
0.033034,
-0.029240,
0.147420,
-0.088368,
0.001429,
-0.005782,
0.025382,
0.041793,
0.071257,
-0.023648,
-0.185770,
-0.047621,
0.014098,
-0.014707,
-0.047311,
0.050530,
-0.063204,
-0.036763,
-0.059986,
0.004447,
0.118490,
-0.002784,
-0.074296,
0.089365,
0.052211,
-0.119800,
-0.118250,
0.186740,
-0.174450,
0.032312,
-0.005016,
0.055217,
-0.136140,
0.004297,
-0.022000,
0.081287,
0.082558,
-0.082835,
0.076571,
0.011548,
-0.075352,
-0.135470,
0.082901,
-0.028825,
0.031304,
-0.062600,
0.092794,
0.070910,
-0.073624,
0.096204,
0.025049,
-0.143650,
-0.120280,
-0.084110,
0.069816,
-0.155280,
-0.109200,
-0.159520,
0.051212,
-0.110770,
0.049451,
-0.241070,
0.008904,
-0.144200,
-0.083317,
0.072815,
0.033279,
-0.067228,
-0.075702,
0.084697,
-0.028791,
-0.088955,
-0.033893,
-0.034580,
-0.041772,
-0.075643,
-0.115150,
-0.084927,
0.025494,
-0.112360,
-0.036072,
-0.085909,
0.003917,
-0.042331,
0.016369,
0.049919,
-0.087635,
0.012724,
-0.022986,
-0.072289,
0.031031,
-0.030535,
-0.040780,
0.010899,
-0.021714,
-0.060986,
0.018558,
-0.028810,
0.049621,
-0.075831,
0.073482,
-0.026684,
0.081823,
-0.021828,
-0.002560,
0.028121,
0.043221,
0.041570,
-0.094439,
0.031251,
0.069659,
-0.043861,
-0.032361,
0.032100,
0.041559,
-0.045107,
0.002544,
-0.095411,
0.047675,
-0.014241,
-0.072453,
-0.087977,
-0.007496,
0.004984,
-0.021767,
0.008468,
-0.060397,
-0.054537,
0.056232,
-0.072829,
0.016830,
-0.019654,
-0.072671,
-0.037230,
0.031935,
0.095548,
0.028458,
-0.022706,
-0.090692,
-0.044669,
-0.030282,
-0.046712,
0.028440,
-0.027816,
-0.080553,
0.010065,
0.036219,
-0.075165,
-0.039997,
0.068735,
-0.055038,
-0.099943,
-0.121040,
-0.079416,
-0.055386,
0.063124,
-0.088937,
0.015015,
-0.047069,
-0.066289,
-0.007461,
-0.056454,
-0.037562,
-0.024827,
-0.073344,
0.063882,
-0.135110,
-0.005681,
0.043719,
0.039604,
0.088054,
-0.057052,
-0.124020,
-0.082516,
-0.012667,
0.018299,
0.023569,
-0.076450,
0.066796,
-0.035068,
-0.051059,
-0.051978,
-0.072079,
-0.090840,
-0.089424,
-0.050550,
-0.031185,
-0.046030,
0.061948,
0.009583,
-0.058582,
-0.077339,
0.020537,
0.029245,
0.003888,
-0.088091,
-0.146390,
0.080714,
-0.058869,
-0.076029,
-0.023337,
0.032904,
0.031879,
0.017219,
-0.058909,
-0.081960,
-0.009645,
0.052101,
0.052088,
0.004216,
-0.008544,
0.011624,
-0.133230,
0.005523,
0.054353,
0.058702,
-0.115450,
0.064043,
-0.003703,
-0.093452,
0.075425,
-0.142460,
0.005164,
-0.053267,
-0.065634,
-0.008209,
0.069938,
0.013360,
0.024438,
-0.084073,
0.040564,
-0.028557,
0.042270,
0.115040,
0.003583,
-0.093980,
-0.147210,
-0.132820,
0.085284,
-0.025650,
0.075110,
0.020104,
-0.146240,
-0.036060,
-0.080401,
-0.066440,
0.003779,
0.035372,
-0.023825,
-0.005999,
-0.013864,
-0.008554,
-0.074230,
0.026288,
0.071264,
0.045918,
0.095560,
-0.070823,
-0.032968,
-0.010135,
-0.053522,
0.091284,
0.001127,
0.027345,
-0.063133,
-0.071626,
-0.019068,
-0.174920,
-0.069858,
0.040801,
0.029676,
-0.113730,
-0.077187,
-0.042693,
0.000161,
0.051915,
-0.077839,
-0.091323,
-0.052410,
-0.085832,
0.005294,
-0.026224,
-0.061007,
0.009609,
0.004277,
-0.014770,
-0.046456,
0.083535,
-0.068847,
-0.072070,
0.075721,
-0.019198,
-0.039744,
0.011585,
-0.072900,
-0.039925,
-0.181060,
-0.062405,
-0.012254,
-0.094665,
0.057105,
-0.057173,
-0.000134,
-0.058026,
0.055429,
0.027838,
-0.004114,
-0.025828,
-0.005671,
0.034476,
0.093160,
0.000960,
-0.009414,
-0.158530,
0.042629,
-0.050405,
0.048196,
0.024772,
0.096839,
-0.042077,
-0.051740,
-0.115090,
-0.046703,
0.060354,
-0.014260,
-0.071334,
0.130540,
-0.222270,
-0.033379,
0.083776,
-0.070945,
0.037779,
0.024171,
-0.092046,
0.058898,
-0.082924,
0.087702,
-0.011430,
-0.036946,
0.102830,
0.024914,
0.213920,
-0.110910,
0.059843,
-0.052236,
-0.003667,
0.050139,
0.013564,
0.000378,
-0.057078,
-0.036991,
0.042753,
-0.034775,
0.051176,
0.092113,
0.107270,
-0.146910,
0.105620,
0.097242,
0.162730,
0.051051,
-0.130020,
-0.252540,
-0.044763,
-0.025976,
0.014974,
0.066003,
-0.122520,
0.024709,
0.062285,
0.107820,
-0.033086,
0.065784,
0.029023,
-0.077381,
0.044840,
0.046208,
-0.043361,
-0.036865,
0.034918,
-0.002420,
-0.009185,
-0.176140,
0.018456,
-0.022614,
0.001410,
0.061755,
0.118040,
-0.103990,
-0.006711,
-0.050102,
0.181740,
0.036115,
-0.137680,
-0.000750,
-0.060159,
-0.244860,
-0.006939,
-0.018906,
-0.007288,
0.011943,
0.011327,
0.087566,
-0.115420,
0.020697,
-0.021147,
0.141340,
0.014544,
-0.038678,
-0.121620,
-0.082392,
-0.122040,
-0.080608,
0.061150,
0.063996,
0.227530,
-0.105930,
0.115780,
-0.052365,
0.034295,
-0.063230,
0.035441,
-0.158340,
0.001502,
-0.032027,
-0.114810,
0.013280,
0.004415,
-0.054469,
-0.055573,
0.021783,
-0.004258,
-0.044912,
0.057681,
0.018313,
-0.051234,
0.003570,
0.063488,
-0.069364,
0.018508,
0.034266,
-0.073973,
-0.033784,
-0.165860,
-0.046182,
0.010797,
0.068607,
0.110040,
0.041178,
-0.033465,
0.053151,
0.078800,
0.107530,
0.065255,
0.087347,
0.027494,
-0.006261,
0.013849,
-0.016926,
0.134020,
-0.020429,
0.035474,
0.015744,
0.147810,
-0.000749,
0.111950,
-0.093527,
-0.012934,
-0.055270,
-0.059262,
-0.022052,
0.013853,
-0.023455,
-0.019575,
-0.005815,
0.134170,
0.124630,
0.040893,
0.069693,
-0.075116,
0.067115,
0.039134,
0.072013,
0.045655,
0.040788,
-0.008242,
-0.019151,
0.205780,
0.005859,
0.061058,
-0.081033,
-0.074036,
0.020893,
0.049545,
-0.005095,
-0.086250,
-0.015673,
0.077559,
-0.008838,
-0.096187,
0.055921,
0.033059,
0.068043,
0.065391,
-0.020383,
-0.084748,
-0.160140,
0.059343,
0.142650,
0.071184,
0.248730,
0.054792,
-0.027831,
0.123270,
0.001535,
0.009608,
0.163630,
-0.101350,
-0.054145,
-0.046794,
-0.007871,
0.068290,
-0.008549,
0.057357,
-0.075456,
-0.087136,
-0.155830,
-0.030880,
-0.022653,
0.006494,
-0.056861,
-0.030633,
0.035633,
0.048700,
0.122420,
-0.203910,
0.203720,
-0.234690,
0.016504,
-0.006675,
0.076330,
-0.063852,
0.038927,
0.045576,
-0.070241,
-0.063110,
-0.074817,
-0.059806,
-0.052030,
0.036534,
0.069510,
-0.076866,
0.166790,
0.168270,
-0.085622,
-0.061670,
0.013596,
-0.001476,
0.058787,
0.205850,
-0.003355,
-0.012383,
0.001325,
-0.117100,
-0.099342,
-0.074342,
0.024978,
-0.014712,
0.236410,
0.003342,
-0.015402,
0.042728,
-0.076135,
0.069124,
0.006111,
0.037958,
0.129920,
0.007999,
0.050821,
0.008933,
0.049319,
-0.197970,
0.045579,
0.095033,
0.021050,
-0.035140,
-0.025756,
-0.057160,
0.003276,
-0.008200,
-0.018115,
-0.043998,
-0.021762,
0.131280,
0.012292,
0.064161,
0.071063,
0.021349,
0.096431,
0.022527,
-0.043355,
-0.041849,
-0.140160,
0.075412,
-0.023057,
0.036306,
0.011429,
-0.001502,
-0.096501,
0.035181,
0.132440,
0.080964,
-0.133340,
-0.009529,
0.071483,
-0.091097,
-0.059739,
0.029882,
0.057406,
-0.049906,
-0.034662,
-0.084955,
0.153200,
0.009500,
-0.040402,
0.004497,
0.043472,
-0.015741,
-0.178160,
0.023826,
-0.300010,
-0.164090,
0.008981,
0.054128,
-0.016833,
0.095984,
-0.152750,
0.063703,
0.058274,
0.052606,
-0.029094,
0.094766,
-0.079609,
0.066209,
-0.046713,
0.042108,
-0.115860,
0.075912,
-0.154560,
-0.029065,
0.061850,
-0.035440,
0.086434,
0.135240,
0.022990,
-0.104920,
0.132840,
-0.173060,
-0.019722,
-0.098524,
-0.034011,
0.054247,
-0.171060,
0.097052,
0.048779,
-0.075120,
0.004811,
0.099278,
-0.054120,
-0.008009,
-0.073032,
-0.007155,
0.136310,
0.003037,
-0.067937,
-0.032409,
-0.079364,
-0.064749,
-0.137360,
-0.030368,
0.041300,
0.036409,
-0.115080,
-0.129390,
0.042926,
0.048834,
0.112480,
0.025218,
0.049985,
-0.055129,
-0.056549,
0.107680,
0.043068,
0.131090,
0.024192,
-0.040754,
0.058428,
-0.038418,
0.046754,
0.058948,
-0.024003,
-0.042595,
0.095131,
0.054667,
-0.071326,
0.078465,
-0.084633,
0.072359,
-0.087936,
0.041927,
0.068367,
0.076575,
-0.077243,
0.024801,
0.008000,
-0.029251,
0.161610,
0.005325,
-0.081195,
-0.111300,
-0.015431,
0.144300,
0.142800,
-0.158520,
-0.024791,
0.001320,
0.046351,
0.082055,
0.085439,
-0.018499,
-0.044003,
-0.015680,
-0.160130,
0.028677,
0.001513,
0.119790,
-0.011708,
-0.052091,
0.008498,
0.087351,
0.002936,
-0.043624,
0.120530,
0.023696,
0.124130,
-0.167100,
-0.210410,
0.144100,
-0.119660,
0.018397,
0.090554,
-0.264630,
-0.135440,
0.121890,
0.016388,
0.054397,
0.261620,
0.037718,
0.026898,
0.032474,
-0.007392,
0.017770,
-0.082646,
-0.023103,
-0.067379,
-0.030245,
-0.174660,
0.077717,
0.126070,
-0.072752,
-0.012641,
0.030274,
-0.026771,
-0.011436,
0.129200,
-0.261440,
-0.062396,
-0.023401,
-0.000738,
0.036096,
0.069685,
-0.036331,
-0.148370,
-0.004191,
0.001811,
0.001785,
-0.075497,
0.085068,
-0.124030,
-0.048004,
0.062668,
-0.086517,
0.052927,
-0.045336,
0.020565,
-0.040226,
-0.122380,
0.045751,
-0.030527,
-0.171170,
-0.013717,
0.007483,
0.210060,
0.018803,
0.126880,
-0.003313,
-0.048448,
0.029394,
-0.136200,
0.048253,
0.055915,
0.073727,
0.214000,
-0.071493,
-0.076627,
0.081880,
-0.135390,
0.069810,
-0.086459,
-0.076952,
-0.021554,
-0.059194,
-0.031228,
0.056018,
0.210210,
-0.178900,
-0.090657,
-0.020871,
-0.030936,
-0.074944,
0.020026,
-0.046294,
-0.074602,
-0.088606,
0.089128,
0.093950,
0.004165,
0.090762,
-0.009622,
-0.179860,
-0.035252,
-0.111340,
0.038767,
0.035111,
0.025658,
-0.038853,
0.075268,
0.109440,
-0.029832,
0.189270,
0.132970,
0.045422,
-0.020252,
0.065117,
-0.081184,
0.078137,
0.085042,
-0.022313,
0.028783,
0.043621,
0.161670,
-0.012723,
-0.020466,
-0.061796,
-0.029656,
-0.036072,
0.120610,
0.050364,
0.141610,
-0.014265,
0.165640,
0.026183,
0.088272,
0.175400,
0.004373,
0.007182,
0.179930,
0.213660,
-0.080913,
0.068562,
-0.102080,
0.002849,
-0.056236,
-0.021010,
-0.023167,
0.066747,
0.097176,
0.028343,
0.009558,
-0.052521,
-0.060535,
0.025898,
0.060945,
-0.092057,
0.044245,
0.208600,
-0.067392,
0.006141,
-0.018912,
0.208400,
0.001449,
0.172620,
-0.100180,
-0.000738,
-0.083693,
0.081913,
-0.019566,
-0.005610,
0.090174,
-0.068345,
0.025285,
-0.011798,
0.021997,
-0.097016,
-0.036182,
-0.052216,
-0.113770,
0.019273,
0.121940,
-0.133920,
-0.031078,
-0.030915,
0.158100,
-0.051939,
-0.088617,
-0.056869,
-0.040034,
-0.161730,
0.121010,
0.014519,
0.040227,
0.091090,
-0.120500,
0.147070,
-0.083874,
-0.019216,
0.186860,
0.084465,
-0.035056,
-0.142660,
-0.004118,
0.038929,
0.073555,
-0.149660,
0.054221,
-0.051874,
-0.072960,
0.009026,
-0.082235,
-0.003557,
-0.053615,
0.049056,
0.126330,
0.064290,
-0.060306,
0.021491,
-0.140180,
0.039209,
0.076388,
0.052585,
0.103500,
-0.091359,
-0.042803,
-0.054204,
-0.024071,
-0.074842,
0.015441,
-0.052144,
-0.016149,
0.159000,
-0.043316,
0.000003,
0.139310,
0.042144,
-0.067772,
0.034185,
-0.051909,
-0.154080,
0.060164,
-0.052611,
-0.023512,
-0.032874,
-0.185640,
-0.056372,
0.093091,
0.133860,
0.014757,
0.134000,
-0.071547,
-0.068344,
0.013703,
0.124290,
-0.037550,
-0.123980,
0.010744,
0.061933,
-0.024680,
0.114900,
-0.071833,
-0.023306,
-0.079290,
0.150670,
0.047908,
-0.080560,
-0.062516,
-0.009913,
0.057639,
0.017551,
0.109710,
-0.187050,
-0.078866,
-0.093060,
0.060504,
0.023985,
-0.025534,
0.208820,
-0.008635,
0.224370,
0.049652,
0.170550,
0.063059,
-0.104530,
0.002368,
0.049990,
0.022140,
0.021589,
0.060683,
0.062906,
-0.117000,
-0.037696,
0.104710,
0.050109,
0.057201,
-0.077300,
0.004878,
0.076795,
-0.012779,
0.053491,
0.114990,
0.090343,
-0.002415,
-0.033101,
-0.021855,
0.023273,
-0.191180,
-0.045650,
-0.015435,
0.027117,
0.217600,
-0.059622,
-0.056566,
0.118070,
-0.034787,
0.058545,
-0.045295,
-0.059944,
0.129470,
-0.001382,
-0.033209,
0.118220,
0.002428,
0.042347,
-0.040130,
-0.085633,
-0.182770,
0.027067,
0.120190,
-0.027673,
-0.004694,
-0.010295,
0.083693,
-0.085740,
0.015215,
0.123950,
0.024520,
-0.019055,
-0.033827,
-0.019272,
-0.009112,
0.213360,
0.041505,
0.079196,
-0.019435,
0.049876,
0.072722,
0.002772,
0.011055,
0.015719,
-0.035214,
-0.058193,
0.154760,
-0.075165,
0.037141,
0.003690,
0.104200,
-0.089542,
-0.041114,
0.055244,
0.085482,
0.004924,
0.095760,
0.034429,
-0.304470,
0.057799,
0.094889,
-0.035186,
0.113170,
0.129450,
0.001120,
0.077471,
-0.013050,
0.067413,
0.015529,
-0.265210,
0.020334,
0.078285,
-0.054875,
-0.027004,
0.065863,
-0.051358,
0.010437,
-0.197060,
-0.034110,
-0.073063,
-0.025492,
0.033531,
0.198910,
-0.069031,
0.003184,
0.062898,
0.085704,
-0.075276,
-0.021881,
0.010676,
0.016151,
-0.070495,
-0.067729,
0.064801,
-0.015687,
-0.011907,
-0.051591,
-0.064599,
-0.005064,
-0.017357,
-0.073314,
-0.078712,
-0.072910,
0.160420,
-0.075248,
0.010618,
0.028692,
-0.032576,
-0.167090,
-0.083080,
0.069826,
-0.062643,
0.126210,
-0.036741,
-0.156050,
-0.126710,
-0.063066,
0.070186,
0.018830,
-0.001520,
-0.058396,
-0.102680,
-0.103450,
0.149700,
0.034171,
0.087793,
0.017864,
-0.005192,
0.012039,
0.126780,
-0.044592,
-0.000539,
-0.223910,
0.043830,
0.047254,
0.017627,
-0.005037,
0.027113,
-0.012013,
0.122240,
0.082330,
-0.196910,
0.032423,
0.039409,
-0.026333,
-0.011735,
0.049185,
-0.052639,
-0.032942,
-0.040358,
-0.102170,
0.098728,
0.126750,
-0.183890,
-0.030034,
-0.037880,
-0.049337,
-0.123200,
0.102460,
0.025292,
0.009291,
0.012788,
0.061881,
0.166940,
0.006027,
0.084083,
-0.132750,
-0.029374,
0.138580,
0.036806,
-0.089493,
-0.112970,
-0.030488,
0.004942,
-0.048321,
0.040935,
0.005913,
-0.036262,
0.151860,
-0.046816,
-0.089911,
-0.079348,
-0.159250,
-0.005401,
0.198180,
-0.091465,
0.070193,
0.190030,
0.073676,
0.190680,
-0.019471,
-0.096729,
0.258980,
-0.035310,
-0.006039,
0.098439,
0.082241,
0.090960,
-0.063494,
0.003595,
-0.001539,
-0.032561,
-0.083815,
0.040626,
-0.081622,
-0.133760,
0.071375,
0.102340,
0.046161,
0.077754,
0.053442,
-0.040973,
0.010839,
0.159260,
-0.093136,
-0.057104,
-0.090772,
0.082365,
0.202740,
0.037367,
-0.070383,
-0.020370,
0.076979,
-0.000005,
0.010554,
-0.017034,
0.049511,
0.276130,
0.118030,
-0.008295,
-0.040158,
-0.013346,
-0.025006,
-0.060740,
0.116030,
0.027313,
0.072634,
0.062471,
0.130870,
-0.007031,
-0.067206,
0.030674,
0.018744,
-0.140230,
0.054845,
-0.012093,
-0.050952,
0.039509,
-0.086603,
0.083588,
0.014466,
-0.064826,
-0.002922,
-0.000804,
0.017406,
0.050715,
-0.007074,
-0.041886,
-0.084769,
-0.136220,
-0.078318,
0.074019,
-0.003264,
-0.065204,
0.091738,
0.023437,
-0.011914,
0.044284,
0.027650,
-0.067758,
-0.049106,
0.030249,
0.235670,
-0.091612,
0.045073,
0.042667,
0.011956,
-0.024046,
-0.185330,
0.268430,
-0.021594,
0.052151,
0.027795,
-0.055532,
0.026258,
-0.097748,
-0.161460,
0.025711,
-0.100470,
0.039993,
0.092259,
-0.021352,
-0.014238,
-0.171260,
0.039596,
-0.009638,
-0.115920,
0.022301,
0.057933,
-0.072064,
-0.239710,
0.118070,
-0.126570,
-0.046830,
-0.104150,
-0.003412,
-0.030702,
0.034432,
-0.037777,
-0.061208,
0.061539,
0.017232,
-0.061920,
0.057092,
-0.001087,
-0.045871,
-0.030417,
-0.054841,
-0.043250,
0.064618,
0.073373,
-0.064840,
0.074874,
0.025599,
-0.146770,
0.058389,
-0.084769,
0.138920,
0.006579,
0.139810,
0.061687,
-0.205850,
0.099224,
0.130070,
0.008640,
-0.001692,
-0.024254,
0.047539,
0.053316,
-0.010209,
0.032954,
0.059394,
0.035916,
-0.074149,
0.095091,
-0.040444,
-0.065237,
-0.093083,
0.137550,
0.168840,
0.053866,
0.008851,
-0.001670,
0.038736,
0.018911,
0.120570,
0.000173,
0.012749,
0.013514,
0.009062,
0.088428,
0.037341,
0.076105,
-0.051397,
0.027916,
-0.127700,
0.041959,
0.064666,
0.040682,
-0.020322,
0.064743,
0.087268,
0.026823,
0.028985,
0.054690,
0.094747,
-0.056537,
-0.097038,
-0.008928,
-0.046791,
0.056269,
0.037434,
-0.194200,
-0.009261,
-0.063131,
-0.072876,
0.075766,
0.068189,
-0.042167,
-0.044066,
-0.082317,
0.073285,
0.235260,
0.074763,
-0.073194,
-0.155010,
-0.048148,
0.130990,
0.214990,
0.033624,
0.019644,
-0.132500,
0.029709,
-0.095093,
-0.015512,
0.042242,
-0.129010,
0.088217,
0.076888,
0.003874,
0.019675,
0.046059,
0.072334,
0.081818,
0.052337,
0.040204,
0.137190,
0.048410,
0.034332,
-0.033776,
0.184660,
-0.039731,
0.057109,
-0.001142,
-0.241120,
0.091887,
0.107660,
-0.114850,
-0.168510,
-0.057794,
-0.054320,
0.025473,
0.042771,
-0.167950,
0.082901,
0.006154,
0.019187,
0.061894,
-0.083137,
-0.080780,
-0.000519,
-0.025230,
-0.026576,
0.021922,
0.085024,
0.064816,
0.000466,
-0.051016,
0.002793,
0.012169,
-0.040663,
-0.119000,
0.053758,
-0.231620,
-0.033023,
0.000546,
0.080836,
-0.053800,
-0.097266,
0.241970,
-0.109310,
0.033240,
-0.094692,
-0.085819,
-0.072378,
-0.000646,
-0.039004,
-0.204310,
0.042630,
0.020581,
-0.075895,
0.044276,
-0.125160,
-0.051484,
-0.007237,
0.020052,
-0.074040,
-0.016069,
-0.050351,
-0.103330,
-0.169900,
-0.066429,
0.010279,
0.002871,
0.207600,
0.029997,
0.066295,
-0.003294,
-0.145130,
0.031526,
0.076770,
-0.024755,
0.074822,
-0.061859,
-0.058267,
0.005496,
0.049443,
0.096066,
0.019303,
-0.147740,
-0.023130,
0.010646,
0.049929,
0.059521,
-0.041984,
-0.071625,
0.002829,
0.015695,
0.129930,
0.062806,
0.061791,
-0.079351,
-0.141630,
-0.038980,
0.012656,
0.082104,
0.098814,
-0.095435,
-0.182280,
-0.045822,
-0.085841,
-0.156230,
0.002631,
-0.008354,
0.031800,
0.062594,
-0.015172,
-0.059625,
0.060800,
0.049446,
0.038747,
-0.025854,
0.033732,
-0.028227,
0.031009,
-0.046772,
0.035341,
0.004854,
-0.094166,
0.033386,
0.203010,
-0.031661,
-0.203450,
0.055923,
-0.153080,
0.032276,
0.100920,
0.146410,
-0.177860,
-0.168910,
-0.086863,
-0.077076,
0.037576,
-0.040994,
0.069291,
-0.024028,
0.050504,
0.088906,
0.071534,
-0.027978,
0.058020,
0.076528,
0.045360,
0.096803,
0.138980,
0.061244,
-0.017791,
-0.311540,
0.136150,
0.113200,
-0.036434,
0.141480,
0.055459,
-0.028066,
-0.084646,
0.049838,
-0.038986,
-0.202580,
-0.095740,
0.053926,
-0.080492,
-0.010763,
-0.084786,
0.009418,
0.032241,
-0.001173,
0.048652,
0.116070,
-0.064150,
-0.022126,
-0.042251,
-0.005818,
0.161670,
-0.075667,
-0.098344,
0.040825,
-0.050015,
-0.090144,
0.007092,
0.012323,
-0.101690,
-0.036038,
0.066633,
-0.258250,
0.204050,
0.041892,
-0.021940,
-0.012843,
0.089286,
-0.014382,
0.007462,
0.046253,
0.060570,
0.066528,
-0.064819,
0.132410,
0.026189,
0.009503,
-0.033521,
0.119210,
-0.077410,
-0.108060,
0.071642,
-0.053079,
0.059356,
-0.090852,
-0.025028,
0.006476,
0.061600,
0.175120,
-0.100650,
-0.128120,
-0.133650,
-0.102160,
0.016293,
0.222530,
0.047494,
-0.208270,
-0.085710,
0.202020,
-0.042666,
0.121820,
-0.041531,
0.148960,
-0.012992,
0.028613,
0.203820,
-0.059983,
-0.077419,
0.014901,
-0.082202,
-0.108180,
0.075989,
0.050814,
-0.032369,
-0.046721,
-0.049076,
0.013861,
0.135770,
-0.057850,
-0.012546,
0.034496,
-0.159240,
0.059130,
-0.158350,
0.005274,
0.023707,
-0.007110,
0.120130,
-0.039279,
-0.067331,
-0.047291,
-0.017924,
-0.135350,
-0.008250,
0.011242,
0.036651,
-0.186770,
0.027324,
0.019137,
-0.045599,
-0.015272,
-0.051872,
-0.089657,
0.003174,
0.000894,
0.025732,
-0.023636,
-0.012647,
0.162370,
-0.106720,
-0.029733,
-0.234940,
0.212780,
0.085672,
-0.190000,
0.039691,
-0.136160,
0.071164,
-0.124370,
0.006738,
-0.053788,
0.075819,
-0.035580,
-0.024350,
-0.013023,
0.064100,
0.082526,
0.021185,
-0.047470,
-0.056564,
-0.063885,
-0.073570,
-0.051262,
0.104580,
-0.112970,
-0.014834,
-0.015383,
-0.133590,
0.034155,
0.042412,
0.072191,
0.003076,
-0.034224,
0.005541,
0.030137,
0.053036,
-0.011675,
0.031655,
0.061231,
0.072685,
-0.037021,
-0.096371,
-0.023831,
0.083465,
0.112540,
-0.037524,
-0.020570,
0.097210,
0.162680,
-0.110310,
0.169540,
-0.266660,
-0.039999,
0.046086,
-0.035350,
0.078782,
0.082983,
0.117540,
-0.018836,
0.053617,
0.082772,
-0.194920,
-0.032585,
0.055156,
0.025142,
-0.023144,
-0.001729,
0.146120,
-0.058597,
-0.036361,
0.114090,
0.129980,
0.053578,
-0.035921,
0.157070,
-0.092142,
-0.063968,
-0.138810,
0.011215,
0.010962,
0.037828,
-0.069592,
-0.025812,
-0.000837,
-0.035621,
0.050949,
0.081781,
-0.058829,
-0.047259,
-0.102620,
-0.040177,
-0.046295,
0.237290,
-0.044642,
-0.078735,
-0.085404,
0.034709,
-0.085350,
0.012180,
-0.048857,
0.012697,
-0.050326,
-0.110970,
-0.015268,
-0.070975,
-0.095616,
0.014016,
0.080799,
-0.043977,
0.071807,
-0.029121,
0.098129,
0.016928,
0.111650,
-0.053554,
-0.055424,
0.096662,
0.075906,
0.018064,
-0.004877,
0.031350,
-0.102400,
-0.058299,
0.026404,
-0.008157,
-0.032941,
0.004988,
-0.028584,
-0.158400,
0.066570,
-0.046765,
-0.055959,
0.068408,
0.019000,
-0.006474,
0.100300,
-0.164990,
-0.115770,
-0.205860,
-0.050180,
0.066224,
0.123240,
-0.023587,
0.124720,
-0.207550,
-0.008533,
-0.072485,
-0.042477,
0.047905,
-0.052078,
0.032305,
-0.062796,
-0.183450,
-0.088366,
0.059634,
0.093557,
-0.010199,
0.157930,
-0.057941,
0.066898,
0.112550,
-0.108370,
-0.064702,
-0.082070,
0.153800,
-0.056193,
0.130900,
-0.061145,
0.023161,
-0.123440,
0.149870,
-0.199130,
-0.010487,
-0.036007,
0.007531,
-0.064937,
-0.023444,
-0.164650,
-0.055853,
-0.086767,
-0.072833,
-0.021525,
-0.056504,
-0.027258,
-0.061230,
-0.039530,
-0.096505,
-0.018244,
0.041954,
-0.040577,
0.085144,
0.022212,
0.025652,
0.077300,
0.139510,
-0.013123,
-0.061447,
-0.177810,
0.037399,
0.068534,
-0.040678,
0.059007,
0.117810,
-0.023663,
0.078515,
-0.085572,
0.016266,
-0.087296,
-0.023487,
-0.276450,
-0.068625,
0.031048,
0.195030,
-0.219380,
0.064558,
0.114440,
-0.081640,
0.133160,
0.054695,
0.061683,
0.023567,
-0.005612,
-0.000461,
-0.011853,
-0.029999,
0.007360,
-0.162730,
-0.023124,
-0.028779,
-0.045854,
0.012055,
0.135110,
0.089988,
-0.035111,
-0.018678,
0.064906,
-0.039533,
-0.054447,
0.075533,
0.026546,
0.033296,
-0.078533,
0.056463,
0.070069,
-0.197670,
0.084093,
-0.019850,
0.001304,
-0.217400,
0.044372,
0.017334,
-0.065246,
0.118400,
0.071782,
-0.059670,
-0.035080,
0.266860,
-0.006256,
-0.120260,
-0.049761,
-0.006607,
-0.136550,
-0.078205,
-0.077174,
-0.048370,
0.051967,
0.075975,
0.035085,
0.131470,
-0.071299,
0.079480,
-0.032338,
-0.103740,
0.119240,
-0.010116,
-0.089316,
-0.085378,
-0.024636,
0.048952,
-0.056734,
-0.025023,
-0.095982,
0.042059,
0.049000,
-0.036714,
0.043082,
0.095711,
0.045192,
-0.074494,
0.013362,
-0.037981,
-0.032620,
-0.079653,
-0.026958,
-0.007482,
-0.052381,
-0.030331,
0.137640,
-0.126830,
0.126360,
0.027471,
-0.080305,
0.039984,
-0.067787,
0.154910,
0.043278,
-0.023615,
-0.085908,
0.209630,
0.045319,
0.037894,
-0.064125,
-0.005894,
-0.012575,
0.012507,
-0.025384,
0.093258,
-0.098711,
0.055926,
-0.023044,
-0.017281,
0.007691,
0.115600,
-0.066761,
-0.062091,
0.183460,
0.080383,
-0.177660,
-0.043573,
-0.134750,
0.023234,
0.103800,
0.101110,
0.011584,
-0.070012,
0.052914,
0.079101,
-0.081800,
-0.108920,
0.043953,
-0.063635,
-0.076771,
-0.007165,
-0.071644,
0.072867,
0.021980,
-0.264200,
-0.047810,
0.055482,
-0.023502,
-0.025554,
0.103240,
-0.041220,
0.039711,
0.043757,
-0.014588,
0.048541,
0.015702,
-0.137110,
-0.004921,
0.014327,
-0.306790,
0.221260,
0.025244,
0.033239,
-0.028851,
-0.004695,
0.168300,
-0.158210,
0.007390,
-0.064416,
-0.058558,
-0.106870,
-0.088480,
-0.020385,
-0.001962,
-0.215840,
0.068120,
0.126140,
0.068508,
0.028668,
0.132370,
-0.030879,
0.021153,
0.057358,
-0.079480,
-0.022057,
0.174220,
-0.184740,
-0.060310,
0.042009,
0.081392,
-0.006004,
0.127040,
-0.090818,
0.041238,
0.076376,
-0.085387,
-0.014074,
0.045300,
-0.037740,
0.018152,
-0.001582,
0.056831,
0.109210,
-0.018544,
-0.037932,
-0.004622,
-0.016256,
-0.079502,
0.088917,
0.037452,
-0.060554,
-0.051779,
0.062078,
0.032678,
-0.052252,
-0.171020,
-0.104230,
-0.003092,
0.022265,
-0.064678,
0.124960,
-0.018255,
-0.095327,
0.045331,
-0.001421,
-0.015167,
-0.120390,
0.047276,
0.032406,
-0.033870,
0.095622,
-0.017293,
0.049371,
-0.046211,
0.076163,
0.114850,
-0.005001,
-0.042288,
0.026367,
0.068425,
-0.061669,
-0.093467,
-0.053066,
-0.029252,
0.066638,
0.157820,
-0.011665,
0.119160,
-0.092372,
-0.100370,
0.009038,
-0.111570,
0.018761,
0.147110,
0.044546,
-0.067617,
0.142640,
0.089476,
-0.026704,
0.162710,
0.050005,
-0.045135,
-0.018963,
-0.017280,
0.196370,
-0.014685,
0.066456,
0.016736,
0.036353,
-0.138690,
0.063407,
-0.001697,
-0.106490,
-0.005450,
-0.003795,
-0.016643,
0.060054,
0.112380,
-0.109830,
0.123060,
-0.133770,
-0.039268,
0.094652,
-0.039738,
-0.038123,
-0.071470,
0.154130,
-0.100290,
0.004794,
0.079142,
-0.032101,
0.033287,
0.014998,
0.070258,
0.006213,
0.140890,
0.254550,
-0.002963,
-0.006741,
0.082126,
-0.035901,
0.063137,
0.021214,
-0.027643,
-0.008237,
0.120040,
0.042587,
0.016881,
-0.069726,
0.063436,
-0.150030,
-0.082674,
-0.018902,
0.069485,
0.066397,
0.078824,
-0.027187,
0.083248,
-0.030427,
0.034535,
-0.023373,
0.066236,
-0.102370,
0.026608,
-0.208440,
-0.029738,
-0.024009,
0.154050,
0.063564,
0.080891,
-0.052264,
-0.045005,
-0.031928,
0.063716,
-0.010784,
-0.008847,
0.082648,
-0.050315,
-0.026218,
0.097458,
-0.100150,
0.014278,
0.134880,
-0.031322,
-0.014838,
-0.015650,
-0.040246,
0.047085,
-0.015114,
-0.012345,
-0.039117,
0.049535,
-0.127850,
0.113230,
-0.076685,
0.146720,
-0.009424,
0.012787,
-0.041150,
0.049425,
-0.064093,
-0.043889,
-0.009269,
-0.075060,
0.002954,
0.160620,
-0.070784,
-0.044974,
-0.050725,
0.138820,
-0.373070,
-0.074178,
-0.060021,
-0.104940,
-0.091475,
0.142210,
0.012671,
0.089061,
0.045742,
0.107520,
0.180390,
0.051022,
0.098498,
-0.066883,
0.009457,
0.032833,
-0.076293,
-0.046889,
-0.080930,
0.015340,
0.042054,
0.231000,
0.066996,
0.036430,
0.023651,
-0.041535,
-0.085077,
-0.232860,
-0.001862,
-0.037175,
0.126460,
-0.078397,
0.089780,
0.066578,
0.018585,
0.066677,
-0.004028,
-0.009057,
0.079574,
-0.025493,
-0.107570,
0.009875,
-0.051730,
0.041655,
-0.161880,
0.137060,
0.268520,
-0.079110,
0.012767,
0.033959,
0.041454,
-0.011242,
0.093562,
0.010578,
0.039961,
0.195250,
-0.167220,
-0.044558,
-0.088692,
-0.091139,
0.076519,
0.101170,
0.034495,
0.014581,
-0.074404,
0.005340,
-0.103450,
0.068735,
0.030145,
-0.119680,
0.065628,
0.001677,
-0.048371,
0.048898,
-0.102650,
0.042383,
-0.181800,
0.099809,
-0.112630,
0.005899,
0.023941,
0.084538,
-0.041440,
-0.014557,
-0.027320,
-0.028465,
-0.154440,
-0.112230,
-0.060767,
0.161380,
0.019522,
-0.005200,
-0.159940,
-0.005204,
-0.034803,
-0.053986,
-0.151510,
0.013156,
-0.076298,
-0.089442,
0.024737,
-0.090593,
0.081802,
-0.139900,
-0.003025,
0.134080,
0.041935,
-0.059044,
-0.099626,
0.037419,
-0.119390,
-0.096736,
-0.025247,
-0.078844,
-0.011288,
0.018207,
-0.079819,
0.026102,
0.006219,
0.142720,
-0.144440,
0.166170,
0.001899,
0.139670,
-0.003926,
-0.003039,
-0.175100,
-0.059696,
-0.047902,
0.100910,
0.095727,
-0.006126,
-0.057543,
0.026878,
0.122440,
-0.077908,
-0.060920,
0.003790,
0.085220,
0.134060,
-0.044572,
0.007407,
-0.070882,
0.013041,
-0.103670,
0.064258,
-0.016628,
-0.044024,
0.066191,
-0.045593,
0.042565,
-0.005882,
0.075473,
0.024083,
-0.094524,
0.082589,
0.098444,
0.020616,
-0.023002,
0.019279,
0.058813,
-0.098696,
0.045875,
0.062844,
-0.101360,
-0.039902,
0.035954,
-0.003745,
0.008537,
-0.020396,
0.015050,
-0.114610,
0.019713,
0.052769,
0.014910,
0.060952,
-0.016347,
-0.099370,
0.011602,
0.138980,
-0.001607,
0.025760,
0.014614,
-0.004023,
0.068147,
-0.026272,
-0.029485,
-0.026459,
-0.054055,
-0.043060,
-0.073506,
0.021889,
-0.021414,
0.013536,
0.068556,
-0.085585,
-0.010874,
0.009342,
-0.046349,
0.087399,
-0.005397,
-0.011455,
-0.000217,
0.041984,
0.018622,
-0.120840,
0.057568,
0.073073,
-0.002746,
-0.049401,
0.054364,
0.070344,
0.156760,
0.053483,
-0.043248,
-0.055590,
-0.164540,
0.079267,
0.026704,
-0.011175,
0.167910,
-0.001859,
-0.035328,
0.050958,
-0.032604,
0.036098,
0.050970,
-0.069837,
0.012791,
0.058772,
0.088230,
0.047162,
-0.036373,
0.047979,
0.065126,
-0.118900,
0.021788,
0.218650,
-0.079454,
0.045524,
0.054475,
-0.062975,
0.021601,
0.046740,
-0.044524,
0.036187,
0.128670,
0.117630,
-0.019628,
0.275850,
0.024793,
-0.062178,
0.081855,
0.083282,
0.019513,
-0.041954,
0.013636,
-0.071077,
0.102440,
-0.092760,
-0.059254,
0.082150,
-0.079814,
0.067830,
-0.073051,
-0.062721,
0.106910,
0.030954,
0.111940,
-0.146230,
-0.101110,
0.012645,
0.092175,
-0.072609,
-0.026369,
-0.126330,
-0.047582,
0.060855,
-0.002655,
0.052923,
0.012149,
-0.204450,
-0.004923,
-0.052771,
-0.239100,
-0.122250,
-0.040884,
-0.085609,
-0.047388,
0.072591,
0.086742,
-0.137990,
0.146210,
0.032039,
-0.059548,
-0.044879,
-0.019790,
-0.179780,
-0.048883,
0.047725,
0.139310,
0.148710,
0.079604,
0.134960,
0.034563,
0.047780,
-0.009728,
0.012073,
-0.049464,
-0.057593,
0.027873,
-0.070713,
-0.035902,
-0.019954,
0.030372,
0.065657,
-0.045352,
-0.092798,
-0.149440,
0.191830,
0.046253,
-0.069232,
0.052552,
-0.084468,
-0.000615,
-0.057503,
0.147500,
0.066028,
-0.369850,
-0.101940,
0.065790,
-0.040257,
-0.023459,
-0.035664,
-0.104570,
0.118660,
0.124120,
-0.037030,
-0.004252,
-0.076751,
0.044360,
-0.007218,
-0.028283,
0.040194,
-0.087972,
0.032143,
0.002485,
-0.030130,
-0.023265,
-0.028870,
-0.029644,
0.075267,
-0.041030,
-0.000793,
0.042927,
-0.054371,
0.034988,
0.165270,
0.050735,
0.153390,
-0.195500,
0.143970,
-0.039075,
0.081755,
0.000983,
-0.183220,
-0.021956,
-0.058255,
-0.090506,
0.077799,
-0.357270,
0.003161,
0.026817,
0.014649,
-0.043954,
-0.064203,
0.023557,
-0.073835,
0.119230,
-0.279630,
0.044503,
0.009298,
0.015820,
-0.015886,
-0.115110,
-0.012332,
0.001107,
0.076971,
-0.254480,
0.215730,
-0.213140,
-0.049217,
-0.174720,
-0.033881,
0.021325,
0.096394,
-0.123510,
0.021286,
0.050695,
0.062792,
0.050294,
0.049213,
-0.038156,
-0.049267,
0.183010,
0.154310,
-0.086968,
-0.074954,
-0.065740,
-0.014378,
0.036447,
0.140500,
0.082003,
-0.087884,
-0.039080,
-0.013475,
0.076531,
0.073370,
-0.039416,
0.019933,
-0.179680,
0.141610,
-0.106630,
0.075659,
0.050352,
-0.051538,
0.145290,
-0.052980,
-0.077451,
0.064182,
-0.022198,
-0.027922,
-0.056396,
-0.029209,
-0.088441,
0.037550,
0.014273,
-0.047482,
0.064905,
-0.018751,
-0.079115,
-0.028186,
-0.045839,
-0.077079,
-0.024030,
0.079958,
-0.034302,
0.156710,
-0.074745,
-0.042544,
0.142810,
0.048663,
0.027176,
0.001981,
-0.052771,
-0.204630,
0.166650,
-0.065303,
0.020151,
-0.086555,
-0.119140,
0.063657,
0.113300,
-0.030492,
-0.008831,
-0.092468,
0.110710,
-0.063493,
0.037511,
-0.054227,
-0.170710,
-0.050614,
0.004366,
-0.012733,
0.012696,
-0.046864,
0.089320,
-0.078066,
0.064075,
-0.037596,
0.028494,
-0.070848,
-0.020246,
-0.130850,
-0.035967,
0.084430,
-0.050472,
-0.029303,
-0.021892,
-0.220040,
-0.070022,
0.040670,
0.003798,
-0.047534,
-0.017674,
0.076164,
-0.039374,
0.000463,
0.015942,
0.167920,
0.016085,
-0.145120,
-0.006162,
-0.025721,
-0.054372,
-0.013518,
0.040293,
0.026755,
0.056710,
0.076342,
0.064983,
-0.028042,
-0.113060,
0.083618,
0.081442,
-0.089995,
0.065340,
0.017379,
-0.030694,
0.073704,
0.001495,
-0.074282,
0.050020,
-0.005248,
-0.051105,
0.045342,
-0.086853,
-0.068470,
0.042847,
-0.058821,
-0.055576,
0.014152,
0.038436,
0.060913,
0.056001,
-0.133480,
0.031961,
0.103220,
-0.059632,
-0.076563,
-0.040805,
0.069212,
-0.078397,
-0.019003,
0.012936,
-0.151810,
-0.124950,
0.057548,
-0.067875,
-0.095985,
-0.068741,
-0.060781,
-0.082184,
-0.065205,
-0.095681,
0.078804,
-0.035939,
-0.054636,
-0.038872,
-0.119730,
-0.011532,
-0.056347,
0.008951,
0.051810,
0.060953,
-0.076867,
0.039573,
0.047449,
0.010253,
-0.052108,
-0.182370,
-0.074498,
-0.043884,
-0.030187,
-0.115180,
-0.011018,
-0.134060,
0.069423,
-0.184710,
0.050751,
0.045559,
-0.031409,
-0.034107,
0.039927,
0.046383,
-0.139890,
-0.018209,
-0.008726,
-0.084453,
0.094693,
-0.105520,
0.037328,
-0.001137,
-0.002729,
0.017870,
-0.116670,
-0.096564,
-0.058459,
-0.061970,
-0.067603,
-0.081943,
-0.093505,
0.075798,
-0.064413,
-0.093849,
0.020292,
-0.041162,
-0.075502,
-0.086354,
-0.034109,
-0.022248,
-0.079111,
0.006946,
-0.023825,
-0.027953,
-0.001634,
0.078273,
-0.030086,
0.016692,
0.011965,
-0.020334,
0.027677,
-0.013118,
-0.039764,
-0.049052,
-0.159270,
-0.079526,
0.018067,
-0.005813,
-0.108210,
-0.005756,
-0.048077,
0.007536,
0.063948,
-0.047637,
-0.000663,
0.072889,
0.021381,
0.061481,
-0.072671,
-0.078534,
-0.017494,
0.019277,
0.081747,
0.062988,
-0.068285,
0.018531,
-0.088468,
0.059922,
0.003536,
-0.059570,
-0.026946,
-0.102660,
-0.040128,
-0.019000,
-0.011025,
-0.094359,
-0.100970,
0.074833,
-0.085250,
-0.036265,
-0.033004,
0.007342,
0.014219,
-0.077733,
-0.148040,
-0.070820,
0.008734,
-0.046264,
0.028139,
-0.075412,
0.069910,
-0.045332,
0.033427,
-0.111900,
0.085162,
0.041818,
0.035285,
-0.131650,
0.002191,
0.054056,
-0.034718,
-0.041002,
0.027205,
-0.045966,
-0.125050,
-0.014870,
0.044589,
-0.081985,
-0.071377,
-0.066902,
0.015991,
0.077304,
0.087051,
0.019066,
0.001046,
-0.102510,
0.087673,
-0.032984,
-0.036608,
-0.083949,
0.083867,
0.022239,
-0.005007,
-0.058893,
0.024619,
-0.010264,
0.021582,
0.080573,
-0.013401,
-0.059770,
0.045301,
0.016074,
0.001899,
0.022853,
-0.092713,
-0.030029,
0.029105,
-0.098910,
-0.034977,
-0.043768,
0.018452,
0.060747,
0.036689,
-0.115720,
0.003476,
0.016984,
0.024347,
-0.064994,
-0.086196,
-0.089088,
-0.029793,
-0.077429,
0.055087,
-0.101260,
0.047186,
-0.072145,
-0.054029,
-0.084178,
-0.116240,
0.013463,
-0.118590,
-0.047147,
0.048248,
0.082814,
-0.073033,
-0.021397,
-0.066568,
-0.014064,
-0.056736,
-0.071209,
0.075557,
-0.051105,
0.033448,
-0.065076,
-0.001879,
-0.078666,
-0.020951,
-0.033546,
-0.058016,
0.097846,
0.052252,
-0.030434,
-0.054312,
0.232390,
-0.033579,
-0.070940,
0.020484,
-0.041073,
-0.164490,
-0.042752,
0.047415,
0.047172,
0.016727,
0.036412,
0.058885,
0.069649,
-0.153650,
0.037392,
-0.019217,
0.067393,
-0.179210,
-0.046876,
-0.004640,
-0.059879,
0.161810,
0.055952,
-0.028510,
0.038900,
-0.098175,
0.009817,
0.069423,
0.030494,
-0.023997,
0.133800,
0.000473,
-0.112570,
0.093388,
0.133760,
0.072421,
0.002740,
0.028398,
0.077677,
-0.080157,
-0.047381,
-0.045808,
-0.186200,
-0.116410,
-0.065728,
-0.073135,
-0.047331,
-0.079910,
-0.083227,
-0.032654,
0.160920,
0.012605,
0.093895,
0.007141,
-0.065350,
0.055243,
-0.154750,
0.088427,
-0.033642,
-0.199290,
0.052841,
-0.085411,
0.061213,
0.078885,
0.079879,
0.042832,
0.085701,
-0.023066,
0.040541,
0.210140,
-0.002352,
-0.116760,
0.080131,
-0.053370,
0.054266,
0.134420,
0.111930,
0.068782,
0.049728,
0.209000,
-0.023481,
0.143460,
-0.172800,
0.035771,
0.061790,
0.006287,
-0.000329,
0.063427,
-0.086895,
-0.022750,
0.025491,
-0.067406,
0.078208,
0.070372,
0.044627,
-0.021374,
0.028079,
0.045138,
-0.141580,
0.043924,
0.015158,
-0.091544,
-0.064584,
0.109080,
-0.018817,
0.046107,
0.039824,
0.048694,
0.037340,
0.018642,
-0.113680,
0.316650,
-0.085486,
0.059459,
0.012947,
0.012031,
-0.034078,
0.019685,
0.080892,
-0.010669,
-0.015728,
-0.069734,
-0.081784,
0.014465,
0.050630,
-0.001015,
0.070596,
0.057422,
-0.009092,
-0.074240,
-0.061035,
-0.071859,
-0.086095,
-0.015888,
0.028694,
-0.088205,
-0.015655,
-0.016607,
0.070699,
0.029063,
-0.081296,
-0.073809,
0.006404,
-0.057649,
-0.025541,
-0.089072,
-0.088193,
-0.066855,
0.073174,
-0.060699,
-0.048807,
-0.053974,
-0.058562,
-0.025147,
0.015279,
0.034221,
0.021869,
0.055230,
-0.068554,
0.006584,
0.035451,
0.014940,
-0.047712,
-0.068849,
0.030906,
-0.029118,
-0.055571,
0.065477,
-0.053249,
-0.038947,
-0.040126,
-0.000925,
-0.009463,
0.008652,
-0.058349,
-0.064967,
0.048688,
-0.061277,
-0.044558,
-0.075005,
0.031511,
-0.021988,
0.020365,
-0.087346,
0.040540,
-0.019907,
-0.036872,
-0.048259,
0.002011,
-0.115670,
0.028277,
0.034027,
-0.003310,
0.010851,
-0.108350,
0.035870,
-0.061626,
0.066365,
0.011402,
-0.010891,
-0.061600,
-0.118940,
-0.072952,
-0.060921,
0.047102,
0.021625,
0.023577,
-0.070939,
0.073735,
-0.021093,
-0.115020,
-0.050688,
0.083195,
-0.044367,
0.047752,
-0.119490,
0.064062,
-0.012249,
-0.014632,
-0.078792,
-0.083112,
0.003081,
-0.059914,
-0.120610,
-0.049580,
-0.082118,
-0.004602,
0.067758,
-0.021625,
-0.073242,
-0.021045,
-0.010386,
-0.020716,
0.014728,
0.084942,
-0.072738,
0.039672,
-0.098578,
-0.037375,
0.074906,
-0.139120,
0.027255,
0.086422,
-0.086145,
0.002237,
0.014899,
-0.065872,
-0.088658,
-0.008419,
-0.071007,
-0.091813,
-0.122850,
0.007648,
0.017816,
0.070553,
0.049688,
0.083092,
0.163880,
0.069182,
-0.030252,
-0.002962,
-0.056565,
0.034498,
-0.046582,
0.066299,
-0.052930,
-0.065216,
0.011761,
0.176480,
-0.074719,
0.081754,
0.088603,
0.120950,
0.022388,
-0.065570,
0.122660,
0.030404,
-0.025325,
-0.047540,
-0.015277,
0.062371,
0.017796,
0.103680,
0.042978,
-0.023861,
-0.040065,
0.121790,
0.063638,
-0.034093,
-0.021351,
0.040462,
-0.136480,
0.028627,
0.025357,
0.191960,
0.051547,
0.175750,
-0.071679,
0.057831,
0.150820,
-0.007830,
-0.105450,
0.043061,
-0.015934,
0.067173,
0.061145,
0.157310,
-0.006668,
0.021032,
0.114580,
0.055322,
-0.031472,
-0.030915,
0.098544,
-0.053894,
-0.066814,
0.046266,
0.005235,
0.060899,
0.019429,
-0.012111,
0.121790,
0.063818,
-0.026272,
-0.012255,
-0.078723,
-0.190460,
0.092531,
-0.023329,
0.050769,
-0.067296,
0.085850,
0.030147,
0.039378,
-0.022290,
0.139130,
-0.061629,
-0.158360,
-0.178880,
0.000953,
-0.019746,
0.104040,
0.073532,
0.208520,
-0.047577,
-0.077163,
-0.265340,
0.012465,
-0.188040,
0.028672,
-0.006061,
-0.175430,
-0.293860,
0.089090,
-0.044376,
0.070925,
-0.033472,
-0.040856,
0.037706,
0.069568,
-0.071839,
0.001549,
0.017948,
0.041076,
-0.034949,
-0.051208,
0.050838,
-0.047642,
-0.038215,
-0.035721,
0.021915,
-0.064639,
0.052567,
-0.065991,
0.046450,
-0.096549,
-0.047743,
-0.035050,
-0.032114,
-0.037678,
-0.036716,
-0.019909,
-0.036039,
-0.050168,
0.006641,
-0.072361,
-0.036022,
-0.067660,
-0.057467,
-0.083858,
-0.120680,
0.005115,
-0.061618,
-0.089925,
-0.100150,
0.020223,
0.036276,
-0.054903,
0.033610,
-0.091121,
-0.028173,
-0.066641,
-0.090775,
0.034892,
-0.005113,
-0.043444,
-0.042265,
-0.009472,
0.057967,
-0.043723,
0.001814,
-0.067968,
0.049947,
0.083101,
-0.041230,
-0.081883,
0.008929,
0.006611,
0.021983,
-0.084437,
0.014668,
0.024013,
0.091114,
0.066886,
0.076917,
0.073056,
-0.022876,
-0.012974,
-0.002538,
0.008917,
-0.049785,
-0.073655,
-0.025630,
-0.065473,
-0.123140,
-0.019569,
-0.075532,
-0.015764,
0.063761,
-0.071768,
-0.016329,
-0.101560,
-0.011964,
-0.022301,
-0.041609,
-0.018336,
0.031085,
-0.031889,
0.023478,
0.004155,
0.020680,
-0.064617,
-0.004852,
0.005483,
-0.028545,
0.023247,
0.029718,
-0.059072,
-0.059198,
0.000816,
-0.060168,
-0.102280,
0.022354,
-0.050893,
-0.076699,
-0.106450,
-0.039008,
0.021714,
-0.095459,
-0.004475,
-0.001889,
0.025888,
-0.087972,
0.091781,
0.040409,
0.076751,
0.050515,
-0.226480,
-0.011974,
0.075874,
-0.098093,
-0.041105,
-0.007607,
-0.015464,
0.007472,
0.053659,
0.033854,
0.005286,
-0.043878,
0.006988,
-0.054636,
0.152300,
0.017083,
-0.123080,
-0.001287,
-0.064798,
-0.078952,
-0.069102,
0.068545,
-0.077188,
-0.008895,
-0.200570,
0.017925,
-0.033119,
-0.038538,
0.065764,
-0.042797,
0.095323,
-0.234180,
0.036033,
-0.135460,
0.026618,
-0.115360,
-0.017912,
-0.185450,
-0.124350,
-0.040423,
-0.021319,
-0.003782,
-0.052199,
-0.067192,
-0.015790,
0.031613,
-0.042660,
0.137810,
-0.092816,
0.121830,
0.067328,
-0.277960,
-0.015153,
-0.109390,
-0.057182,
-0.094371,
0.090745,
-0.036804,
-0.052462,
-0.132730,
-0.088949,
-0.038523,
0.088455,
-0.074320,
0.057660,
0.006221,
-0.006422,
-0.061128,
-0.064819,
-0.112270,
-0.054279,
-0.013215,
-0.110480,
-0.084341,
-0.223000,
-0.074365,
-0.079185,
0.064866,
0.025256,
0.028361,
0.021925,
-0.040045,
0.008211,
0.044402,
0.015407,
0.018302,
0.005621,
0.068314,
0.205160,
0.166850,
0.035826,
0.042428,
-0.078135,
0.033948,
-0.064982,
-0.032009,
-0.028169,
0.011786,
0.074582,
-0.025560,
-0.136490,
-0.050071,
-0.070561,
-0.093141,
0.007650,
-0.128060,
-0.122160,
0.099048,
-0.045390,
-0.136680,
0.041809,
0.177300,
-0.085851,
0.099980,
-0.239900,
0.055697,
-0.048509,
-0.053660,
-0.061663,
0.002145,
0.091354,
0.035675,
-0.049464,
-0.201800,
-0.150480,
0.128990,
0.076903,
-0.046237,
-0.134240,
-0.012631,
-0.030939,
0.133600,
0.020721,
0.055780,
0.019698,
-0.096181,
0.026638,
0.070468,
-0.008165,
0.011558,
0.066386,
-0.021571,
0.041798,
0.105270,
-0.014997,
-0.091511,
-0.019598,
0.075566,
-0.126530,
-0.070034,
-0.031352,
-0.096611,
0.074157,
0.077373,
0.023030,
-0.188410,
0.087987,
-0.144080,
0.136780,
0.050034,
0.045801,
0.071410,
0.043530,
0.010774,
-0.019468,
-0.111430,
-0.026389,
-0.212170,
-0.010517,
0.086119,
0.044207,
-0.105910,
0.031841,
-0.081606,
0.035901,
0.032390,
-0.050525,
-0.083596,
-0.023974,
0.065116,
-0.005881,
0.057590,
-0.088385,
-0.094676,
0.085735,
-0.030223,
0.047540,
-0.039982,
-0.032166,
0.015319,
0.065289,
0.048746,
0.049919,
0.033757,
0.087958,
0.046051,
0.201040,
0.128040,
0.177060,
-0.030709,
0.171150,
0.022048,
0.088065,
-0.058778,
0.024386,
-0.031172,
-0.056442,
-0.006603,
0.115040,
-0.090770,
-0.006090,
-0.049408,
0.002844,
0.092529,
-0.028332,
0.006089,
0.077206,
0.015096,
-0.014094,
0.042296,
-0.061939,
-0.049884,
-0.056586,
0.084673,
0.019547,
0.007340,
0.044827,
-0.154910,
0.107890,
-0.162260,
-0.092153,
-0.019817,
0.041751,
0.097160,
0.123220,
-0.056281,
0.066823,
-0.010710,
-0.006976,
0.057236,
0.078521,
0.000278,
-0.015764,
0.201570,
0.040134,
-0.013977,
0.029016,
0.013639,
-0.203010,
-0.057098,
-0.018917,
-0.012811,
0.094868,
-0.064917,
-0.076762,
0.092986,
-0.061488,
0.002598,
0.024183,
-0.005725,
0.246370,
0.044430,
0.065736,
0.104480,
0.063096,
0.197730,
-0.037851,
-0.004358,
0.123900,
-0.067205,
0.001507,
0.080385,
0.055923,
-0.031361,
-0.089904,
0.013432,
-0.063224,
0.153300,
-0.017739,
0.057624,
0.028373,
-0.071177,
0.078385,
-0.103800,
0.030561,
0.246080,
0.068063,
0.144150,
0.020907,
-0.055863,
-0.126810,
0.017942,
-0.003299,
0.233780,
-0.001494,
-0.034965,
0.079274,
-0.039562,
-0.001729,
-0.030001,
0.081851,
0.080268,
0.059893,
0.061890,
-0.026196,
0.007282,
0.086936,
0.019357,
0.052689,
0.111770,
-0.023620,
-0.044549,
0.175150,
-0.077895,
-0.256510,
-0.042627,
0.214810,
-0.050920,
-0.062022,
-0.035059,
0.019954,
0.059862,
0.107770,
-0.018415,
0.028381,
-0.270320,
-0.023962,
-0.070800,
-0.001271,
-0.061929,
-0.039456,
-0.058676,
-0.059812,
-0.124580,
0.070640,
-0.013690,
0.004379,
0.006694,
0.114530,
-0.088691,
0.119250,
0.010829,
-0.077032,
-0.040312,
0.037729,
0.024362,
0.043405,
0.093514,
-0.068623,
0.136980,
0.073282,
0.076048,
-0.083191,
-0.098759,
0.108350,
-0.060263,
-0.098092,
0.080767,
-0.082733,
-0.060637,
0.166150,
-0.071629,
-0.106370,
0.141550,
-0.044684,
0.135080,
0.080521,
-0.014317,
-0.042260,
-0.041282,
-0.033088,
-0.031491,
0.029511,
0.019973,
-0.052368,
-0.113190,
-0.153670,
0.036869,
0.038929,
0.111230,
0.141000,
-0.046534,
-0.088447,
0.067376,
-0.081218,
0.127150,
0.001428,
0.083919,
0.122350,
-0.021880,
-0.002182,
-0.117840,
0.009364,
-0.060742,
0.003732,
-0.117250,
0.060209,
0.123720,
-0.049218,
0.010460,
-0.037214,
-0.065794,
-0.049830,
0.039068,
0.018782,
0.130580,
0.111140,
-0.006829,
0.176760,
0.001545,
-0.122510,
0.052883,
0.072811,
0.207440,
-0.026631,
-0.023133,
-0.003988,
-0.067024,
-0.044348,
-0.037240,
-0.026953,
-0.019085,
-0.120230,
0.022717,
0.211960,
-0.078812,
-0.009139,
-0.006693,
-0.024500,
0.054447,
-0.012939,
-0.067424,
-0.028784,
-0.065779,
-0.108050,
-0.013060,
0.066561,
-0.017866,
0.012075,
-0.005076,
-0.063628,
-0.073943,
0.141370,
-0.129430,
-0.112650,
-0.132160,
-0.031878,
-0.092881,
-0.002340,
0.047527,
0.044144,
0.084044,
0.007493,
-0.002788,
0.024878,
0.035142,
-0.051000,
-0.032649,
-0.230530,
-0.040545,
0.200440,
0.156560,
0.079861,
0.006964,
0.084353,
-0.018646,
-0.112620,
0.030061,
0.077661,
0.122000,
0.069521,
0.186470,
0.064620,
-0.188990,
0.045951,
-0.029633,
0.047955,
-0.115680,
-0.020726,
-0.003939,
-0.015364,
0.033319,
0.075842,
0.132440,
0.110080,
0.013001,
0.059002,
0.004017,
0.106710,
-0.076772,
0.001977,
-0.009297,
0.085572,
-0.020732,
0.028980,
-0.059992,
0.006620,
0.087558,
-0.008705,
-0.136630,
-0.181220,
0.047158,
-0.041953,
-0.005078,
0.025007,
-0.109070,
-0.024967,
-0.012162,
0.036493,
0.027358,
0.121410,
0.137750,
-0.038473,
-0.048085,
0.029345,
0.112390,
0.016667,
0.209520,
-0.021909,
-0.021627,
0.028789,
-0.039132,
0.066094,
0.045761,
-0.148140,
-0.118130,
0.074676,
-0.003273,
0.135470,
-0.067482,
0.034690,
-0.018551,
-0.056588,
-0.035230,
0.111970,
-0.063250,
0.022329,
-0.003983,
0.013336,
0.000641,
-0.004610,
-0.097420,
0.014860,
-0.070015,
0.022463,
0.069537,
-0.030378,
-0.011462,
-0.012341,
0.051730,
-0.021144,
0.075525,
-0.157380,
0.041876,
0.202620,
0.086639,
-0.020993,
-0.104760,
-0.036976,
-0.065783,
0.018999,
0.079008,
-0.158910,
0.041897,
0.085273,
0.188650,
0.086372,
0.022192,
-0.083132,
-0.007182,
-0.023635,
0.020402,
0.025263,
0.075261,
-0.049570,
-0.038384,
-0.027370,
0.095093,
0.019400,
0.056516,
0.157970,
0.091068,
-0.080980,
0.123830,
-0.127130,
0.070618,
-0.174290,
-0.111620,
0.222870,
0.066935,
-0.054819,
0.152510,
0.062238,
0.010055,
0.111260,
0.087235,
-0.016997,
-0.006623,
0.050749,
0.066184,
0.133940,
-0.073150,
-0.070072,
0.098453,
0.018187,
-0.052073,
0.043033,
-0.011967,
-0.041934,
0.011408,
0.046438,
0.125770,
0.019559,
0.020775,
0.070056,
-0.037850,
-0.166400,
-0.052517,
0.033985,
-0.152080,
-0.011653,
0.110360,
0.047342,
0.017793,
-0.195380,
0.175100,
0.074142,
-0.081020,
0.032948,
-0.065477,
0.077067,
0.159260,
0.000293,
-0.029784,
0.011186,
-0.121210,
-0.245070,
0.233190,
0.115090,
0.049145,
0.014437,
-0.084738,
0.076913,
-0.050884,
-0.071275,
-0.083212,
0.058790,
0.058772,
0.059996,
0.025114,
-0.036423,
0.026094,
0.009362,
0.126180,
0.017447,
0.183950,
0.070230,
0.041688,
-0.049174,
0.095189,
0.075823,
-0.120320,
-0.218730,
-0.071338,
-0.018401,
-0.039073,
-0.020416,
0.050047,
-0.032593,
-0.021275,
0.061749,
-0.033717,
-0.033172,
0.069523,
-0.070005,
0.024779,
0.054524,
-0.014576,
-0.219810,
0.002535,
0.197870,
0.023423,
0.129130,
-0.012879,
0.089574,
-0.079604,
-0.045525,
-0.020304,
0.137730,
-0.037391,
0.078545,
0.067067,
0.025445,
0.085694,
0.001424,
-0.088721,
0.072579,
0.033741,
-0.165650,
-0.002368,
0.012037,
0.047550,
-0.030383,
0.024266,
-0.108200,
0.095434,
0.142170,
-0.175250,
0.186730,
-0.032318,
0.006234,
0.014950,
0.027284,
-0.039369,
0.098001,
-0.038039,
0.068272,
0.066883,
-0.026355,
-0.018217,
-0.150110,
0.010891,
0.078408,
-0.083875,
-0.006006,
-0.094161,
0.062399,
-0.082938,
-0.285950,
-0.059750,
-0.026776,
-0.247210,
-0.017444,
0.001321,
0.164860,
-0.008340,
-0.102570,
0.099054,
0.087858,
-0.044872,
-0.047956,
-0.010042,
-0.006052,
-0.027794,
-0.031072,
0.015807,
-0.052577,
-0.078090,
-0.080940,
0.063766,
-0.073315,
-0.131140,
0.066633,
-0.047786,
0.004972,
0.016725,
-0.050144,
0.015283,
-0.102860,
0.026273,
-0.059044,
0.063856,
-0.096132,
-0.043626,
0.033203,
0.150310,
-0.070351,
0.030216,
-0.031999,
-0.170070,
-0.079393,
0.088499,
-0.041426,
0.055419,
-0.025350,
-0.106240,
0.042246,
-0.186370,
-0.071602,
-0.033263,
0.073784,
0.063838,
-0.016414,
0.000656,
0.045809,
0.081261,
-0.048382,
-0.056939,
0.029426,
-0.020550,
-0.022534,
-0.003706,
-0.104850,
0.001988,
0.026442,
-0.006923,
0.023864,
-0.142320,
0.013753,
-0.161370,
-0.146720,
-0.095839,
-0.025269,
0.091162,
-0.077202,
0.078675,
0.032306,
0.024728,
0.148050,
0.089899,
-0.026469,
-0.064925,
-0.029008,
0.052052,
-0.010762,
0.001063,
0.015306,
0.068430,
0.119880,
-0.053876,
0.061077,
-0.100000,
0.063017,
-0.030879,
-0.116940,
-0.057051,
-0.104180,
0.140970,
-0.168000,
-0.007782,
-0.094436,
0.246550,
0.057977,
-0.014494,
-0.061908,
-0.012791,
0.093590,
0.033956,
-0.026944,
-0.042657,
-0.040677,
0.078010,
-0.039070,
0.038080,
0.002020,
0.209440,
0.054799,
0.042271,
0.099055,
0.026354,
0.069845,
0.008795,
0.092287,
0.060524,
0.029326,
0.129560,
0.106520,
0.080363,
-0.059586,
0.040765,
0.031852,
-0.033745,
-0.018893,
0.055839,
0.214530,
-0.068692,
-0.087889,
0.078730,
0.008937,
0.007474,
-0.044400,
0.029702,
0.079809,
-0.196960,
-0.059095,
0.059188,
0.080528,
-0.111300,
0.011938,
0.008896,
-0.008906,
0.058314,
-0.021504,
0.051027,
-0.007467,
0.058051,
-0.074185,
0.095225,
0.252880,
-0.016494,
-0.015443,
-0.095854,
-0.028170,
0.050488,
0.162440,
0.094168,
-0.062435,
-0.018356,
-0.059160,
-0.017768,
-0.036226,
0.026861,
0.129400,
-0.026663,
-0.020592,
-0.068236,
0.002654,
-0.060253,
0.043424,
0.028413,
-0.053668,
-0.000636,
-0.036171,
0.021099,
0.016112,
-0.081550,
-0.113410,
-0.018056,
0.183940,
-0.102260,
-0.063594,
-0.007246,
0.097253,
-0.208550,
0.136530,
0.010175,
-0.057217,
0.001985,
-0.027695,
0.006826,
0.044296,
0.050189,
-0.010514,
-0.093837,
0.077394,
-0.040178,
0.070871,
-0.033123,
0.065452,
-0.036570,
0.124220,
0.178000,
-0.073481,
-0.017518,
0.012679,
-0.126270,
-0.041321,
-0.081642,
-0.059388,
-0.128340,
-0.051139,
-0.037442,
-0.071869,
0.067571,
0.148740,
0.140830,
0.002959,
-0.037338,
-0.050420,
-0.019261,
0.145570,
-0.024359,
0.028131,
-0.202380,
-0.077986,
-0.236960,
-0.000602,
-0.031052,
0.034023,
-0.095617,
-0.029498,
-0.049681,
0.030888,
0.069077,
0.176320,
-0.001078,
-0.190550,
0.027434,
0.142040,
-0.067029,
-0.044918,
-0.019865,
-0.005989,
-0.067182,
-0.165310,
-0.032913,
0.064997,
0.010342,
0.009937,
-0.074177,
0.123890,
0.126130,
-0.014280,
0.158420,
-0.024787,
-0.083289,
-0.109430,
0.012177,
-0.059145,
-0.021248,
-0.001066,
-0.022895,
-0.052099,
-0.015003,
0.009564,
0.043773,
0.039216,
0.053752,
-0.134120,
-0.111140,
0.082290,
0.117580,
-0.079551,
-0.127390,
-0.157070,
-0.057895,
-0.038709,
-0.244260,
-0.043751,
-0.177850,
-0.067297,
-0.051771,
0.054962,
0.031337,
0.068408,
0.079664,
-0.051470,
-0.075642,
0.059349,
-0.109260,
0.047083,
-0.081953,
-0.165410,
0.003336,
-0.112510,
0.025314,
-0.127430,
0.054046,
0.125660,
-0.149040,
-0.056863,
0.055923,
-0.004418,
0.170940,
0.084086,
-0.055694,
-0.031994,
0.024908,
0.106850,
0.081185,
0.052929,
0.105450,
0.013305,
0.186120,
-0.038349,
-0.044445,
-0.038887,
-0.055730,
-0.034661,
-0.022453,
0.142140,
0.067252,
-0.072539,
-0.138730,
-0.098108,
0.088469,
-0.082376,
0.156910,
-0.038023,
0.119150,
-0.053227,
0.062182,
0.076549,
-0.053925,
-0.102270,
0.067940,
0.045822,
-0.013718,
0.039233,
-0.038084,
-0.114530,
-0.018566,
-0.022393,
-0.033871,
-0.044881,
-0.091941,
0.052977,
-0.060150,
-0.125530,
-0.000894,
-0.198380,
-0.072738,
0.084621,
-0.059640,
0.011805,
-0.029914,
-0.176160,
-0.083290,
0.005050,
0.042700,
0.055854,
-0.042057,
-0.028648,
0.087318,
0.010855,
-0.017224,
0.090333,
0.064452,
-0.053411,
-0.010848,
-0.033016,
-0.065538,
-0.066095,
-0.132900,
0.038434,
0.086906,
0.071064,
-0.013001,
-0.013542,
0.018011,
-0.044891,
-0.061798,
0.063076,
0.074247,
-0.010726,
-0.088031,
0.087112,
0.041155,
0.012395,
-0.167860,
-0.010762,
-0.089895,
-0.005469,
0.080305,
0.064454,
-0.125470,
0.036241,
-0.130100,
0.054604,
0.166410,
-0.046485,
-0.002053,
-0.055410,
-0.007252,
-0.068136,
0.071680,
0.009245,
-0.086757,
-0.068034,
-0.041977,
0.061695,
-0.066381,
0.035806,
-0.017731,
0.024104,
-0.026017,
-0.046516,
-0.106780,
0.000896,
-0.051909,
-0.005089,
0.080674,
-0.122460,
-0.031448,
-0.098492,
-0.030506,
0.033221,
-0.059193,
-0.132500,
0.036801,
0.035390,
-0.080921,
-0.051848,
-0.095000,
0.021205,
0.096535,
0.063992,
-0.003100,
-0.056644,
0.064537,
-0.002068,
-0.082315,
0.065348,
-0.120630,
0.048892,
-0.031210,
-0.025611,
-0.095629,
0.133400,
0.025930,
-0.042299,
-0.148840,
-0.054376,
0.061133,
-0.048341,
0.005728,
-0.075548,
-0.052131,
0.033472,
0.020679,
-0.085439,
0.074927,
0.017245,
0.030179,
0.030578,
-0.020427,
-0.085818,
0.034084,
-0.057431,
0.034289,
-0.002153,
-0.013537,
-0.088576,
0.021489,
0.029120,
-0.001374,
-0.084412,
0.061404,
-0.105490,
-0.086771,
-0.012019,
-0.056125,
0.086969,
0.058493,
-0.099613,
-0.035866,
0.008499,
-0.039035,
-0.092707,
0.024746,
0.076258,
0.001817,
-0.046660,
0.021890,
-0.044312,
-0.033064,
-0.074890,
0.034285,
-0.064016,
-0.071899,
-0.012332,
0.086096,
-0.088906,
-0.001382,
0.023546,
0.058770,
-0.079349,
-0.048748,
0.042676,
-0.083690,
0.014896,
-0.073642,
-0.073959,
-0.025099,
0.029228,
-0.063814,
0.065989,
-0.001794,
0.015253,
-0.087840,
0.083367,
-0.071226,
0.006521,
-0.060348,
0.043323,
-0.009600,
-0.049365,
0.071025,
-0.017851,
-0.100900,
-0.069913,
0.063070,
-0.128090,
0.002760,
0.019367,
-0.053095,
-0.045362,
-0.060449,
-0.060188,
0.005562,
0.051290,
0.054452,
0.066807,
-0.014015,
-0.060434,
-0.078496,
0.057026,
0.068102,
-0.110900,
-0.148760,
-0.043860,
0.074161,
-0.057512,
-0.074074,
0.020930,
-0.074860,
0.074018,
0.035912,
-0.092306,
-0.036436,
-0.080323,
0.015766,
0.037891,
0.011940,
0.010412,
-0.016532,
-0.048796,
-0.066924,
-0.029621,
-0.044741,
-0.034417,
0.077316,
0.017780,
0.016521,
-0.072386,
0.006975,
0.047243,
0.080892,
-0.080154,
-0.068608,
-0.063773,
0.016251,
-0.023775,
-0.067103,
-0.073577,
-0.055088,
0.022659,
-0.047990,
-0.018001,
-0.018020,
0.034649,
-0.089875,
0.096760,
-0.043693,
-0.004530,
0.126970,
0.079320,
0.046713,
0.097968,
-0.016150,
-0.022827,
-0.040856,
-0.050409,
0.014485,
-0.003933,
0.022782,
0.046600,
0.059620,
-0.079907,
0.068506,
-0.019394,
-0.136240,
-0.036634,
0.073361,
-0.002195,
0.088388,
-0.075473,
0.089723,
-0.013235,
-0.010872,
0.082104,
0.076430,
-0.050906,
-0.004365,
-0.120660,
-0.058081,
0.072119,
0.048047,
0.025901,
-0.066247,
0.066177,
-0.080809,
-0.007654,
-0.034561,
-0.079255,
0.007611,
-0.001877,
0.094868,
-0.054241,
0.116490,
-0.017119,
-0.077570,
0.112460,
-0.038361,
0.106310,
0.041585,
-0.053640,
0.027385,
0.077713,
0.020135,
0.057517,
0.031277,
0.085648,
-0.083482,
-0.016750,
0.002603,
-0.065300,
-0.031170,
-0.014977,
-0.031320,
-0.026236,
0.001501,
-0.010306,
0.000833,
-0.188390,
-0.006024,
-0.070027,
0.007564,
-0.236990,
-0.153820,
0.088172,
-0.075755,
-0.029138,
-0.124510,
-0.008463,
0.048075,
-0.078011,
-0.036092,
0.093553,
-0.041797,
0.102920,
-0.122650,
-0.017245,
-0.047809,
-0.078482,
-0.169830,
-0.077412,
0.075686,
-0.067471,
0.033778,
0.007553,
0.014435,
-0.051569,
0.065725,
0.096875,
0.165700,
-0.044882,
-0.079556,
-0.022852,
0.030949,
0.066954,
0.076662,
0.028001,
-0.092414,
0.089925,
-0.057641,
0.010806,
-0.038944,
0.033113,
-0.061993,
0.097546,
0.088935,
0.070812,
-0.083294,
-0.022415,
0.125820,
-0.046172,
0.045231,
0.090936,
-0.048420,
0.089505,
0.081591,
0.025518,
0.057304,
-0.120550,
-0.036008,
0.088949,
0.038665,
0.136190,
-0.058948,
0.042208,
0.110730,
-0.008510,
0.160850,
-0.010156,
-0.080246,
-0.036598,
-0.009892,
-0.023721,
-0.017658,
0.063959,
-0.076017,
-0.051039,
0.072358,
0.083201,
-0.063596,
0.095280,
0.103630,
-0.190440,
0.233730,
-0.027005,
-0.008942,
-0.001426,
-0.023122,
-0.091229,
0.049346,
0.003557,
0.089923,
0.011951,
-0.062753,
0.059256,
-0.021725,
0.059788,
-0.052061,
-0.155150,
-0.027908,
0.038500,
0.011244,
-0.084240,
0.037736,
-0.027327,
0.068568,
0.074441,
-0.041712,
-0.100900,
0.019331,
0.004286,
0.023869,
0.095555,
0.125650,
-0.154960,
-0.038667,
-0.134450,
0.091040,
-0.007876,
-0.110060,
0.107870,
0.075948,
-0.248010,
-0.108300,
-0.038033,
0.051114,
-0.028350,
0.079306,
-0.037257,
-0.072688,
-0.055165,
0.023462,
0.163210,
0.036652,
-0.136280,
-0.085971,
0.034114,
0.016345,
-0.031862,
0.072245,
0.151810,
-0.017124,
0.080694,
-0.119220,
0.058109,
-0.223780,
0.018831,
0.099053,
-0.055653,
-0.221330,
# 82 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(fc2_weight);
# 80 "my_net/src/my_net.cpp"

 const half fc3_weight[840] = {

# 1 "my_net/src/./weight/fc3_weight.dat" 1
-0.049354,
-0.044658,
0.039684,
0.066128,
0.104180,
-0.081754,
-0.135540,
-0.083877,
0.069753,
0.096816,
-0.161430,
0.002573,
-0.118850,
-0.232250,
-0.018595,
-0.050113,
-0.057539,
-0.029185,
-0.245180,
-0.168670,
-0.074761,
-0.063205,
0.022821,
-0.049861,
0.123020,
-0.377610,
-0.008107,
0.039509,
0.037094,
0.107840,
0.054576,
-0.062727,
-0.104320,
0.002971,
0.086259,
-0.039757,
-0.183370,
0.032392,
-0.266590,
0.116480,
-0.080598,
-0.185610,
-0.043115,
-0.042468,
-0.145660,
0.121070,
-0.116060,
-0.030665,
0.120400,
-0.065076,
-0.235900,
0.100480,
-0.020004,
0.017135,
-0.094496,
-0.190820,
-0.079747,
-0.094522,
0.004584,
0.053520,
0.014260,
0.089653,
0.013476,
0.163890,
-0.109640,
0.038325,
-0.020212,
0.170340,
-0.000198,
0.059372,
0.067753,
-0.122640,
0.112930,
-0.082013,
-0.151100,
-0.135920,
0.081154,
-0.204810,
-0.013617,
-0.131870,
0.031786,
-0.116360,
-0.026129,
-0.050700,
-0.004713,
-0.028030,
-0.087371,
-0.192700,
0.135750,
-0.204410,
0.089343,
-0.220340,
0.093017,
0.142830,
-0.209560,
0.007598,
0.165380,
0.118280,
0.007767,
-0.176780,
-0.122640,
-0.196350,
-0.190970,
-0.042574,
-0.101150,
-0.081267,
0.074100,
-0.147860,
-0.105210,
-0.105080,
0.084375,
0.082470,
0.034315,
-0.230820,
-0.024613,
-0.274580,
-0.011203,
-0.134310,
-0.135380,
-0.030286,
-0.095233,
-0.006463,
0.028048,
0.107720,
0.120310,
-0.224320,
-0.053521,
0.017259,
-0.118180,
-0.153440,
0.123400,
-0.010995,
0.034496,
-0.016053,
-0.184960,
-0.174190,
0.058287,
0.136970,
-0.367850,
-0.152300,
-0.065319,
-0.270700,
-0.065857,
-0.061399,
0.205350,
0.101820,
-0.221730,
-0.059620,
0.079839,
0.109650,
0.035887,
-0.134450,
-0.079333,
-0.093558,
-0.036373,
0.213870,
0.000821,
-0.263440,
0.025276,
0.001561,
-0.189270,
-0.131080,
0.078979,
-0.176270,
-0.052423,
0.064104,
-0.142730,
0.005877,
0.005083,
-0.152350,
-0.093684,
0.213640,
-0.100950,
0.020622,
-0.087772,
-0.203880,
0.064277,
-0.080416,
0.060776,
-0.276680,
-0.162450,
0.024512,
-0.172870,
0.075702,
0.000699,
-0.078529,
0.104340,
0.037490,
-0.003166,
-0.096445,
-0.050186,
0.052785,
0.017082,
0.175670,
-0.109460,
-0.068122,
-0.007437,
0.010834,
0.125400,
-0.017442,
-0.079274,
0.163410,
0.007114,
0.080256,
-0.208330,
-0.006060,
0.070673,
-0.028460,
0.067914,
0.203160,
-0.020153,
0.094216,
-0.042596,
0.073139,
0.135030,
0.215690,
-0.082139,
0.118520,
0.014021,
-0.069261,
-0.061106,
0.081626,
0.171360,
-0.030889,
0.073630,
-0.087566,
-0.062083,
0.126640,
-0.162980,
0.116050,
0.121610,
0.088967,
-0.008764,
0.056025,
-0.103980,
-0.113640,
-0.025709,
0.071230,
0.016423,
-0.003088,
0.013811,
0.108760,
0.111900,
-0.126470,
0.039873,
-0.047565,
-0.192470,
-0.132620,
-0.088764,
-0.151250,
-0.140900,
-0.031127,
0.056979,
0.069412,
-0.011487,
-0.139630,
-0.091524,
-0.102440,
0.119860,
-0.022446,
-0.150270,
0.013153,
-0.020225,
-0.030973,
-0.110190,
-0.061628,
0.028427,
0.065247,
0.057145,
0.142200,
0.003104,
0.029508,
0.085665,
0.016758,
0.019182,
-0.046582,
-0.081729,
0.175710,
-0.150810,
-0.223030,
0.110050,
-0.064339,
-0.007736,
-0.135260,
0.000347,
0.017034,
0.156810,
-0.113410,
0.126010,
-0.020832,
-0.047079,
0.042799,
0.057863,
0.074505,
0.011760,
-0.073943,
0.139870,
0.037972,
-0.015846,
-0.069244,
-0.144870,
-0.011411,
-0.047686,
-0.141810,
0.057841,
0.051563,
0.086282,
-0.067226,
-0.028072,
0.080410,
-0.215570,
0.119780,
-0.153850,
-0.191060,
0.007529,
-0.029537,
0.043975,
-0.041937,
-0.091867,
0.059201,
-0.046841,
-0.037007,
0.005166,
0.027186,
-0.077711,
-0.061101,
-0.078273,
0.140700,
0.118070,
-0.129480,
-0.214580,
0.103470,
-0.033614,
-0.031632,
-0.120870,
0.153440,
0.047801,
0.094527,
-0.136780,
0.050736,
-0.108440,
-0.147090,
0.088798,
-0.129620,
-0.027809,
-0.089778,
0.086507,
-0.010998,
-0.107770,
-0.071146,
0.067226,
-0.022614,
-0.040994,
0.088750,
0.009911,
-0.139180,
-0.001862,
0.053500,
-0.145560,
-0.266130,
0.006359,
0.086984,
0.082978,
-0.101890,
0.050284,
0.202210,
0.001040,
-0.246090,
-0.022370,
-0.046498,
-0.121820,
-0.031922,
-0.091527,
0.008816,
0.004068,
-0.258490,
-0.061877,
-0.131850,
0.044753,
0.050614,
0.090965,
-0.140650,
-0.305090,
-0.070874,
0.160470,
0.174190,
-0.003418,
0.012555,
-0.149870,
-0.124010,
0.095096,
-0.011340,
-0.090210,
-0.012732,
-0.015357,
0.046609,
0.162730,
0.037693,
0.109750,
-0.216190,
-0.120250,
-0.047645,
-0.033499,
-0.006140,
-0.041187,
-0.249580,
0.077158,
0.165020,
-0.177430,
0.065534,
0.068406,
0.112650,
-0.025896,
0.218030,
-0.128720,
0.209280,
-0.089382,
-0.120910,
-0.019282,
-0.121190,
-0.111310,
0.107120,
0.059566,
-0.119710,
0.005861,
-0.225800,
0.091045,
-0.171790,
-0.135310,
-0.062615,
-0.049245,
-0.128570,
-0.172190,
-0.014857,
-0.214070,
0.139290,
0.077700,
0.086469,
-0.013088,
0.137340,
0.052545,
-0.060947,
0.118160,
0.024557,
0.011591,
-0.085441,
0.006611,
-0.147390,
-0.058861,
-0.033320,
0.077786,
-0.107010,
-0.043687,
-0.054683,
-0.140300,
-0.046338,
0.183410,
-0.080076,
0.120670,
-0.124580,
-0.025854,
-0.053666,
-0.071261,
0.026580,
0.118070,
-0.108460,
0.076633,
-0.109160,
-0.183000,
-0.070974,
0.062546,
-0.076317,
-0.052389,
-0.069904,
0.116010,
0.205950,
-0.204140,
0.004404,
0.017592,
-0.010381,
0.044556,
-0.166570,
0.134410,
0.034137,
0.023396,
-0.116430,
-0.003505,
-0.078614,
-0.026301,
0.089870,
0.033423,
-0.020894,
-0.112270,
0.049753,
-0.060057,
-0.016309,
0.010662,
-0.053291,
-0.115540,
0.050039,
-0.069911,
-0.171900,
-0.019331,
0.133250,
-0.116060,
0.037967,
-0.135520,
-0.017791,
-0.164130,
-0.229250,
-0.173330,
0.010159,
-0.117190,
-0.207310,
0.098110,
-0.121530,
-0.084489,
0.110540,
-0.027388,
0.089912,
-0.125890,
0.094412,
0.109250,
0.197920,
0.072696,
-0.033907,
0.095237,
-0.017182,
-0.263530,
0.019484,
-0.199640,
-0.149940,
0.242790,
-0.139030,
-0.316690,
-0.254660,
-0.051634,
-0.055122,
-0.105320,
0.001223,
0.074118,
-0.077586,
0.146360,
0.092405,
-0.128050,
0.087474,
0.044590,
-0.014181,
-0.174840,
0.025522,
-0.106830,
0.121960,
-0.123070,
-0.165660,
-0.013577,
-0.075065,
-0.017060,
0.122150,
-0.038379,
-0.118920,
-0.120270,
-0.172380,
-0.237690,
-0.077983,
0.163910,
-0.029821,
-0.060246,
0.046776,
-0.102910,
-0.063500,
-0.059406,
0.062179,
0.048950,
-0.181870,
-0.021711,
-0.182830,
-0.080356,
0.146000,
0.155810,
0.100370,
0.111880,
0.091750,
-0.004524,
-0.107210,
-0.074642,
-0.042651,
-0.169480,
-0.134730,
-0.084872,
0.053907,
0.074842,
-0.167260,
-0.162110,
0.088510,
-0.185800,
-0.091234,
-0.140070,
0.133810,
0.094924,
-0.052230,
-0.085944,
-0.155570,
-0.190370,
-0.005333,
0.063886,
0.112250,
0.001180,
-0.199110,
-0.093487,
0.002526,
-0.182840,
-0.146070,
0.061803,
-0.066011,
0.099035,
0.095097,
-0.299750,
0.123230,
0.033969,
-0.214150,
-0.236600,
-0.073607,
-0.121590,
-0.136290,
-0.014280,
0.045408,
-0.065609,
-0.129230,
-0.135860,
0.057588,
-0.042554,
0.031550,
0.039373,
-0.121040,
0.054517,
-0.079804,
-0.229050,
0.128070,
0.028408,
0.004293,
0.170440,
-0.158660,
-0.045074,
0.158480,
0.020014,
-0.081168,
0.199840,
-0.184010,
-0.076557,
-0.124130,
-0.146230,
-0.212460,
0.120050,
-0.093265,
0.005719,
0.062251,
0.039962,
0.015178,
-0.051760,
-0.029315,
-0.133680,
0.097119,
-0.011526,
-0.016951,
0.066651,
-0.092847,
-0.194980,
-0.057876,
-0.015771,
0.019169,
0.011308,
0.066698,
-0.081461,
-0.290660,
0.193730,
-0.034562,
-0.009047,
-0.222290,
0.000633,
0.023777,
0.108110,
0.110420,
-0.139810,
0.025209,
0.046339,
-0.005240,
0.174360,
-0.200500,
-0.036457,
-0.218820,
0.323940,
-0.282570,
0.042966,
-0.118190,
-0.186070,
0.132620,
-0.104970,
-0.162690,
0.119590,
-0.209650,
-0.073151,
-0.105250,
-0.114580,
0.122100,
-0.087986,
-0.016087,
-0.084429,
-0.019280,
0.204850,
-0.010139,
-0.245240,
0.095200,
-0.325580,
-0.070665,
-0.076676,
-0.126350,
-0.056243,
0.140250,
0.027968,
0.119420,
0.096764,
-0.226520,
-0.322220,
0.149950,
-0.072142,
0.003118,
-0.169790,
0.107930,
0.101080,
0.215300,
0.050397,
0.042958,
-0.035878,
-0.024295,
0.029555,
-0.250620,
-0.113880,
0.089745,
-0.059382,
-0.261660,
-0.030908,
0.042674,
0.018364,
-0.240550,
-0.080123,
-0.203980,
-0.200730,
0.052406,
-0.065475,
-0.040520,
-0.006387,
-0.104870,
0.092241,
-0.037933,
0.024193,
-0.179970,
0.063623,
-0.097323,
-0.115720,
-0.051205,
0.106950,
-0.251260,
-0.054694,
-0.187300,
0.050070,
0.075319,
-0.175540,
0.074055,
0.087106,
0.083503,
0.096878,
-0.206380,
-0.051951,
-0.054918,
-0.038445,
0.077883,
-0.088481,
-0.080126,
0.177030,
-0.094446,
-0.213930,
0.012146,
-0.069147,
0.045483,
-0.137990,
-0.210270,
-0.137900,
0.010820,
0.112100,
0.057018,
-0.032130,
-0.001362,
-0.162960,
-0.071656,
0.128060,
0.110380,
-0.022836,
-0.164980,
0.025752,
0.005537,
0.026377,
-0.103870,
-0.148670,
-0.201370,
0.080307,
-0.025232,
-0.002733,
-0.162360,
-0.101900,
0.065386,
-0.117520,
-0.115590,
0.113410,
0.105760,
0.171450,
-0.254630,
-0.171290,
-0.096161,
-0.231360,
-0.015058,
0.091802,
0.006052,
-0.026457,
0.095044,
-0.049587,
0.025178,
0.045620,
0.037996,
-0.022856,
0.008596,
-0.251190,
-0.205470,
-0.304700,
-0.256080,
0.046451,
-0.221420,
-0.033455,
0.032275,
-0.093663,
0.133800,
# 85 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(fc3_weight);
# 83 "my_net/src/my_net.cpp"

 const half fc1_bias[120] = {

# 1 "my_net/src/./weight/fc1_bias.dat" 1
-0.0129,
-0.0236,
-0.02,
-0.0195,
0.0393,
-0.0143,
0.0142,
0.0598,
0.1199,
-0.1877,
-0.0066,
-0.011,
0.1513,
-0.0068,
-0.0087,
-0.257,
-0.028,
-0.0063,
0.0596,
0.0388,
0.0092,
-0.0242,
0.2611,
-0.0532,
0.0274,
-0.0543,
-0.0319,
-0.0173,
0.1163,
0.0239,
0.0169,
-0.04,
0.1251,
-0.0212,
-0.0134,
0.211,
-0.0014,
0.1018,
0.0198,
0.2871,
0.0374,
0.2092,
0.062,
0.0055,
0.0118,
-0.0411,
0.023,
0.0136,
-0.1315,
0.1421,
-0.0287,
0.1771,
0.0609,
-0.0163,
-0.0594,
0.0708,
0.0178,
0.1303,
0.12,
-0.0444,
-0.0548,
0.0526,
-0.0244,
0.2526,
-0.0039,
0.061,
0.087,
0.0136,
0.237,
-0.0343,
-0.0194,
0.02,
-0.0381,
0.0505,
-0.0426,
0.0072,
-0.1716,
-0.0074,
0.1307,
-0.0182,
0.1223,
-0.2761,
-0.1283,
0.0364,
0.0225,
0.01,
0.2017,
0.3387,
0.081,
0.1548,
-0.0408,
-0.0324,
0.2935,
0.0467,
-0.0176,
-0.0438,
-0.0328,
0.16,
0.0085,
0.0252,
0.0201,
-0.0507,
-0.0649,
-0.0404,
0.3637,
0.018,
-0.0144,
0.0246,
-0.1856,
0.2117,
-0.1073,
0.1296,
0.038,
0.2027,
0.0158,
0.3483,
-0.0391,
-0.0471,
0.0845,
-0.011,
# 88 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(fc1_bias);
# 86 "my_net/src/my_net.cpp"

 const half fc2_bias[84] = {

# 1 "my_net/src/./weight/fc2_bias.dat" 1
-0.0429,
0.2030,
0.1989,
0.0350,
-0.1075,
-0.0645,
0.1761,
0.0328,
-0.1137,
0.0398,
0.1754,
-0.0476,
-0.0122,
-0.0701,
0.3669,
0.2282,
-0.0469,
0.1643,
0.2284,
-0.0276,
-0.1124,
-0.0191,
0.0691,
0.0441,
0.0054,
0.4626,
0.1200,
-0.2229,
0.2342,
0.2171,
0.0345,
-0.1314,
-0.0187,
-0.1204,
0.0788,
-0.0820,
0.1034,
-0.1505,
0.1069,
-0.0855,
-0.0063,
0.0422,
-0.1349,
0.0156,
0.1839,
0.0124,
-0.1637,
0.0773,
0.2053,
0.0374,
0.1831,
0.2399,
-0.0392,
-0.0392,
0.2967,
-0.0102,
0.1722,
0.2951,
0.1021,
0.2592,
0.1737,
0.0768,
0.2830,
-0.1924,
-0.0571,
-0.0488,
-0.0848,
0.0810,
0.0022,
-0.0034,
-0.0192,
0.0943,
-0.1742,
0.0760,
0.1526,
0.3552,
0.1824,
0.3459,
-0.0360,
0.4767,
-0.0627,
-0.1136,
-0.0715,
0.0769,
# 91 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(fc2_bias);
# 89 "my_net/src/my_net.cpp"

 const half fc3_bias[10] = {

# 1 "my_net/src/./weight/fc3_bias.dat" 1
-0.0830,
-0.2416,
-0.0936,
0.1230,
0.2814,
-0.0582,
0.0344,
-0.2123,
0.1419,
-0.1118,
# 94 "my_net/src/my_net.cpp" 2
 };
_ssdm_SpecConstant(fc3_bias);
# 92 "my_net/src/my_net.cpp"




 half conv1_output[16][784] ;
 half pool1_output[16][196] ;
 half conv2_output[32][100] ;
 half pool2_output[32][25] ;
 half fc1_output[120] ;
 half fc2_output[84] ;
 half fc3_output[10] ;


 for (int i = 0; i < 16; i++)
 {
  half output1[784] = { 0 };
  half output2[784] = { 0 };

  for (int j = 0; j < 3; j++) {
   conv2(input1[j], conv1_weight[i][j], output1, 32, 28, 5);
   for (int n = 0; n < 28 * 28; n++) {
    output2[n] = output2[n] + output1[n];
   }
  }
  for (int k = 0; k < 28 * 28; k++) {
   conv1_output[i][k] = output2[k] + conv1_bias[i];
  }
  Sigmoid1(conv1_output[i], 784);





 }


 for (int i = 0; i < 16; i++) {
  pool(conv1_output[i], pool1_output[i], 28, 14);

 }


 for (int i = 0; i < 32; i++)
 {
  half output1[100] = { 0 };
  half output2[100] = { 0 };

  for (int j = 0; j < 16; j++) {
   conv2(pool1_output[j], conv2_weight[i][j], output1, 14, 10, 5);

   for (int n = 0; n < 100; n++) {
    output2[n] = output2[n] + output1[n];
   }
  }
  for (int k = 0; k < 100; k++) {
   conv2_output[i][k] = output2[k] + conv2_bias[i];
  }
  Sigmoid1(conv2_output[i], 100);

 }

 for (int i = 0; i < 32; i++) {
  pool(conv2_output[i], pool2_output[i], 10, 5);

 }

 half pool2_output1[800];
 for (int i = 0; i < 32; i++) {
  for (int j = 0; j < 25; j++) {
   pool2_output1[i * 25 + j] = pool2_output[i][j];
  }
 }


 for (int i = 0; i < 60; i++) {

  for (int j = 0; j < 800; j++) {
   fc1_output[i] = fc1_output[i] + pool2_output1[j] * fc1_weight1[i * 800 + j];
  }
  fc1_output[i] = fc1_output[i] + fc1_bias[i];
 }
 for (int i = 0; i < 60; i++) {
  for (int j = 0; j < 800; j++) {
   fc1_output[i + 60] = fc1_output[i+60] + pool2_output1[j] * fc1_weight2[i * 800 + j];
  }
  fc1_output[i + 60] = fc1_output[i + 60] + fc1_bias[i + 60];

 }
 Sigmoid1(fc1_output, 120);


 for (int i = 0; i < 84; i++) {
  for (int j = 0; j < 120; j++) {
   fc2_output[i] += fc1_output[j] * fc2_weight[i * 120 + j];
  }
  fc2_output[i] += fc2_bias[i];

 }
 Sigmoid1(fc2_output, 84);


 for (int i = 0; i < 10; i++) {
  for (int j = 0; j < 84; j++) {
   fc3_output[i] += fc2_output[j] * fc3_weight[i * 84 + j];
  }
  fc3_output[i] += fc3_bias[i];

 }
 Sigmoid1(fc3_output, 10);




 for (int i = 0; i < 10; i++) {
  output[i] = float(fc3_output[i]);
 }

}
