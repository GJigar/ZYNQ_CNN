-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity my_net_fc1_bias_rom is 
    generic(
             DWIDTH     : integer := 16; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 120
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of my_net_fc1_bias_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "1010001010011011", 1 => "1010011000001011", 2 => "1010010100011111", 
    3 => "1010010011111110", 4 => "0010100100001000", 5 => "1010001101010010", 
    6 => "0010001101000101", 7 => "0010101110101000", 8 => "0010111110101100", 
    9 => "1011001000000010", 10 => "1001111011000010", 11 => "1010000110100010", 
    12 => "0011000011010111", 13 => "1001111011110111", 14 => "1010000001110100", 
    15 => "1011010000011101", 16 => "1010011100101011", 17 => "1001111001110100", 
    18 => "0010101110100001", 19 => "0010100011110111", 20 => "0010000010110110", 
    21 => "1010011000110010", 22 => "0011010000101101", 23 => "1010101011001111", 
    24 => "0010011100000100", 25 => "1010101011110011", 26 => "1010100000010101", 
    27 => "1010010001101110", 28 => "0010111101110001", 29 => "0010011000011110", 
    30 => "0010010001010100", 31 => "1010100100011111", 32 => "0011000000000001", 
    33 => "1010010101101101", 34 => "1010001011011100", 35 => "0011001011000001", 
    36 => "1001010110111100", 37 => "0010111010000100", 38 => "0010010100010010", 
    39 => "0011010010011000", 40 => "0010100011001010", 41 => "0011001010110010", 
    42 => "0010101111110000", 43 => "0001110110100010", 44 => "0010001000001011", 
    45 => "1010100101000011", 46 => "0010010111100011", 47 => "0010001011110111", 
    48 => "1011000000110101", 49 => "0011000010001100", 50 => "1010011101011001", 
    51 => "0011000110101011", 52 => "0010101111001100", 53 => "1010010000101100", 
    54 => "1010101110011010", 55 => "0010110010001000", 56 => "0010010010001111", 
    57 => "0011000000101011", 58 => "0010111110101110", 59 => "1010100110101111", 
    60 => "1010101100000100", 61 => "0010101010111100", 62 => "1010011000111111", 
    63 => "0011010000001011", 64 => "1001101111111101", 65 => "0010101111001111", 
    66 => "0010110110010001", 67 => "0010001011110111", 68 => "0011001110010110", 
    69 => "1010100001100100", 70 => "1010010011110111", 71 => "0010010100011111", 
    72 => "1010100011100000", 73 => "0010101001110111", 74 => "1010100101110100", 
    75 => "0001111101011111", 76 => "1011000101111110", 77 => "1001111110010100", 
    78 => "0011000000101111", 79 => "1010010010101001", 80 => "0010111111010100", 
    81 => "1011010001101011", 82 => "1011000000011011", 83 => "0010100010101001", 
    84 => "0010010111000011", 85 => "0010000100011111", 86 => "0011001001110100", 
    87 => "0011010101101011", 88 => "0010110100101111", 89 => "0011000011110100", 
    90 => "1010100100111001", 91 => "1010100000100110", 92 => "0011010010110010", 
    93 => "0010100111111010", 94 => "1010010010000001", 95 => "1010100110011011", 
    96 => "1010100000110011", 97 => "0011000100011111", 98 => "0010000001011010", 
    99 => "0010011001110100", 100 => "0010010100100101", 101 => "1010101001111101", 
    102 => "1010110000100111", 103 => "1010100100101100", 104 => "0011010111010010", 
    105 => "0010010010011100", 106 => "1010001101011111", 107 => "0010011001001100", 
    108 => "1011000111110000", 109 => "0011001011000110", 110 => "1010111011011110", 
    111 => "0011000000100110", 112 => "0010100011011101", 113 => "0011001001111101", 
    114 => "0010010000001011", 115 => "0011010110010011", 116 => "1010100100000001", 
    117 => "1010101000000111", 118 => "0010110101101000", 119 => "1010000110100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity my_net_fc1_bias is
    generic (
        DataWidth : INTEGER := 16;
        AddressRange : INTEGER := 120;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of my_net_fc1_bias is
    component my_net_fc1_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    my_net_fc1_bias_rom_U :  component my_net_fc1_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


