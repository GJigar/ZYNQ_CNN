// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_offset,
        weight_offset,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_q0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] input_r_address0;
output   input_r_ce0;
input  [15:0] input_r_q0;
input  [4:0] input_offset;
input  [5:0] weight_offset;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
input  [15:0] output_r_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] conv2_weight_address0;
reg    conv2_weight_ce0;
wire   [15:0] conv2_weight_q0;
wire   [14:0] grp_fu_396_p3;
reg   [14:0] mul_ln19_reg_404;
wire   [12:0] mul_ln19_1_fu_190_p2;
reg   [12:0] mul_ln19_1_reg_409;
wire   [3:0] r_fu_202_p2;
reg   [3:0] r_reg_417;
wire    ap_CS_fsm_state2;
wire   [6:0] shl_ln19_3_fu_208_p3;
reg   [6:0] shl_ln19_3_reg_422;
wire   [0:0] icmp_ln8_fu_196_p2;
wire   [4:0] shl_ln19_4_fu_216_p3;
reg   [4:0] shl_ln19_4_reg_427;
wire   [3:0] c_fu_234_p2;
reg   [3:0] c_reg_435;
wire    ap_CS_fsm_state3;
reg   [6:0] output_addr_reg_440;
wire   [0:0] icmp_ln11_fu_228_p2;
wire   [4:0] zext_ln14_1_fu_263_p1;
reg   [4:0] zext_ln14_1_reg_445;
wire    ap_CS_fsm_state4;
wire   [2:0] kr_fu_273_p2;
reg   [2:0] kr_reg_453;
wire   [8:0] sub_ln19_fu_309_p2;
reg   [8:0] sub_ln19_reg_458;
wire   [0:0] icmp_ln14_fu_267_p2;
wire   [4:0] shl_ln_fu_315_p3;
reg   [4:0] shl_ln_reg_463;
wire   [2:0] kc_fu_337_p2;
reg   [2:0] kc_reg_471;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln17_fu_331_p2;
reg   [15:0] input_load_reg_486;
wire    ap_CS_fsm_state6;
reg   [15:0] conv2_weight_load_reg_491;
wire   [15:0] grp_fu_166_p2;
reg   [15:0] tmp_reg_496;
wire    ap_CS_fsm_state10;
reg   [15:0] output_load_reg_501;
wire   [15:0] grp_fu_162_p2;
reg   [15:0] tmp_s_reg_506;
wire    ap_CS_fsm_state15;
reg   [3:0] r_0_reg_116;
reg   [3:0] c_0_reg_128;
reg   [2:0] kr_0_reg_140;
reg   [2:0] kc_0_reg_151;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln19_4_fu_254_p1;
wire  signed [63:0] sext_ln19_4_fu_367_p1;
wire  signed [63:0] sext_ln19_5_fu_391_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state7;
wire   [9:0] tmp_20_fu_170_p3;
wire   [4:0] mul_ln19_1_fu_190_p0;
wire   [4:0] zext_ln11_fu_224_p1;
wire   [4:0] add_ln19_6_fu_240_p2;
wire   [6:0] zext_ln19_6_fu_245_p1;
wire   [6:0] add_ln19_fu_249_p2;
wire   [3:0] zext_ln14_fu_259_p1;
wire   [3:0] add_ln19_1_fu_279_p2;
wire   [7:0] shl_ln19_5_fu_285_p3;
wire   [4:0] shl_ln19_6_fu_297_p3;
wire   [8:0] zext_ln19_8_fu_293_p1;
wire   [8:0] zext_ln19_9_fu_305_p1;
wire   [3:0] zext_ln17_1_fu_327_p1;
wire   [3:0] add_ln19_7_fu_343_p2;
wire   [8:0] zext_ln19_10_fu_349_p1;
wire   [8:0] add_ln19_3_fu_353_p2;
wire  signed [12:0] sext_ln19_fu_358_p1;
wire   [12:0] add_ln19_10_fu_362_p2;
wire   [4:0] zext_ln17_fu_323_p1;
wire   [4:0] add_ln19_8_fu_372_p2;
wire   [4:0] add_ln19_4_fu_377_p2;
wire   [14:0] zext_ln19_12_fu_382_p1;
(* use_dsp48 = "no" *) wire   [14:0] add_ln19_11_fu_386_p2;
wire   [4:0] grp_fu_396_p0;
wire   [9:0] grp_fu_396_p1;
wire   [5:0] grp_fu_396_p2;
reg   [15:0] ap_NS_fsm;
wire   [10:0] grp_fu_396_p00;
wire   [10:0] grp_fu_396_p10;
wire   [12:0] mul_ln19_1_fu_190_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

conv2_conv2_weight #(
    .DataWidth( 16 ),
    .AddressRange( 12800 ),
    .AddressWidth( 14 ))
conv2_weight_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv2_weight_address0),
    .ce0(conv2_weight_ce0),
    .q0(conv2_weight_q0)
);

my_net_hadd_16ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
my_net_hadd_16ns_cud_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(output_load_reg_501),
    .din1(tmp_reg_496),
    .ce(1'b1),
    .dout(grp_fu_162_p2)
);

my_net_hmul_16ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
my_net_hmul_16ns_dEe_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_load_reg_486),
    .din1(conv2_weight_load_reg_491),
    .ce(1'b1),
    .dout(grp_fu_166_p2)
);

my_net_am_addmul_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 15 ))
my_net_am_addmul_g8j_U19(
    .din0(grp_fu_396_p0),
    .din1(grp_fu_396_p1),
    .din2(grp_fu_396_p2),
    .dout(grp_fu_396_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_267_p2 == 1'd1))) begin
        c_0_reg_128 <= c_reg_435;
    end else if (((icmp_ln8_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_128 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        kc_0_reg_151 <= kc_reg_471;
    end else if (((icmp_ln14_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        kc_0_reg_151 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln17_fu_331_p2 == 1'd1))) begin
        kr_0_reg_140 <= kr_reg_453;
    end else if (((icmp_ln11_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        kr_0_reg_140 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_116 <= r_reg_417;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_116 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_435 <= c_fu_234_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv2_weight_load_reg_491 <= conv2_weight_q0;
        input_load_reg_486 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        kc_reg_471 <= kc_fu_337_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kr_reg_453 <= kr_fu_273_p2;
        zext_ln14_1_reg_445[2 : 0] <= zext_ln14_1_fu_263_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mul_ln19_1_reg_409[12 : 2] <= mul_ln19_1_fu_190_p2[12 : 2];
        mul_ln19_reg_404 <= grp_fu_396_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_228_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        output_addr_reg_440 <= zext_ln19_4_fu_254_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        output_load_reg_501 <= output_r_q0;
        tmp_reg_496 <= grp_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_417 <= r_fu_202_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_196_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln19_3_reg_422[6 : 3] <= shl_ln19_3_fu_208_p3[6 : 3];
        shl_ln19_4_reg_427[4 : 1] <= shl_ln19_4_fu_216_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_267_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln_reg_463[4 : 2] <= shl_ln_fu_315_p3[4 : 2];
        sub_ln19_reg_458[8 : 1] <= sub_ln19_fu_309_p2[8 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        tmp_s_reg_506 <= grp_fu_162_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln8_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv2_weight_ce0 = 1'b1;
    end else begin
        conv2_weight_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state16))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_196_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_228_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_267_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln17_fu_331_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln19_10_fu_362_p2 = ($signed(sext_ln19_fu_358_p1) + $signed(mul_ln19_1_reg_409));

assign add_ln19_11_fu_386_p2 = (zext_ln19_12_fu_382_p1 + mul_ln19_reg_404);

assign add_ln19_1_fu_279_p2 = (r_0_reg_116 + zext_ln14_fu_259_p1);

assign add_ln19_3_fu_353_p2 = (zext_ln19_10_fu_349_p1 + sub_ln19_reg_458);

assign add_ln19_4_fu_377_p2 = (add_ln19_8_fu_372_p2 + zext_ln14_1_reg_445);

assign add_ln19_6_fu_240_p2 = (shl_ln19_4_reg_427 + zext_ln11_fu_224_p1);

assign add_ln19_7_fu_343_p2 = (c_0_reg_128 + zext_ln17_1_fu_327_p1);

assign add_ln19_8_fu_372_p2 = (shl_ln_reg_463 + zext_ln17_fu_323_p1);

assign add_ln19_fu_249_p2 = (zext_ln19_6_fu_245_p1 + shl_ln19_3_reg_422);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign c_fu_234_p2 = (c_0_reg_128 + 4'd1);

assign conv2_weight_address0 = sext_ln19_5_fu_391_p1;

assign grp_fu_396_p0 = grp_fu_396_p00;

assign grp_fu_396_p00 = input_offset;

assign grp_fu_396_p1 = grp_fu_396_p10;

assign grp_fu_396_p10 = tmp_20_fu_170_p3;

assign grp_fu_396_p2 = 15'd25;

assign icmp_ln11_fu_228_p2 = ((c_0_reg_128 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_267_p2 = ((kr_0_reg_140 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_331_p2 = ((kc_0_reg_151 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_196_p2 = ((r_0_reg_116 == 4'd10) ? 1'b1 : 1'b0);

assign input_r_address0 = sext_ln19_4_fu_367_p1;

assign kc_fu_337_p2 = (kc_0_reg_151 + 3'd1);

assign kr_fu_273_p2 = (kr_0_reg_140 + 3'd1);

assign mul_ln19_1_fu_190_p0 = mul_ln19_1_fu_190_p00;

assign mul_ln19_1_fu_190_p00 = input_offset;

assign mul_ln19_1_fu_190_p2 = (mul_ln19_1_fu_190_p0 * $signed('hC4));

assign output_r_address0 = output_addr_reg_440;

assign output_r_d0 = tmp_s_reg_506;

assign r_fu_202_p2 = (r_0_reg_116 + 4'd1);

assign sext_ln19_4_fu_367_p1 = $signed(add_ln19_10_fu_362_p2);

assign sext_ln19_5_fu_391_p1 = $signed(add_ln19_11_fu_386_p2);

assign sext_ln19_fu_358_p1 = $signed(add_ln19_3_fu_353_p2);

assign shl_ln19_3_fu_208_p3 = {{r_0_reg_116}, {3'd0}};

assign shl_ln19_4_fu_216_p3 = {{r_0_reg_116}, {1'd0}};

assign shl_ln19_5_fu_285_p3 = {{add_ln19_1_fu_279_p2}, {4'd0}};

assign shl_ln19_6_fu_297_p3 = {{add_ln19_1_fu_279_p2}, {1'd0}};

assign shl_ln_fu_315_p3 = {{kr_0_reg_140}, {2'd0}};

assign sub_ln19_fu_309_p2 = (zext_ln19_8_fu_293_p1 - zext_ln19_9_fu_305_p1);

assign tmp_20_fu_170_p3 = {{weight_offset}, {4'd0}};

assign zext_ln11_fu_224_p1 = c_0_reg_128;

assign zext_ln14_1_fu_263_p1 = kr_0_reg_140;

assign zext_ln14_fu_259_p1 = kr_0_reg_140;

assign zext_ln17_1_fu_327_p1 = kc_0_reg_151;

assign zext_ln17_fu_323_p1 = kc_0_reg_151;

assign zext_ln19_10_fu_349_p1 = add_ln19_7_fu_343_p2;

assign zext_ln19_12_fu_382_p1 = add_ln19_4_fu_377_p2;

assign zext_ln19_4_fu_254_p1 = add_ln19_fu_249_p2;

assign zext_ln19_6_fu_245_p1 = add_ln19_6_fu_240_p2;

assign zext_ln19_8_fu_293_p1 = shl_ln19_5_fu_285_p3;

assign zext_ln19_9_fu_305_p1 = shl_ln19_6_fu_297_p3;

always @ (posedge ap_clk) begin
    mul_ln19_1_reg_409[1:0] <= 2'b00;
    shl_ln19_3_reg_422[2:0] <= 3'b000;
    shl_ln19_4_reg_427[0] <= 1'b0;
    zext_ln14_1_reg_445[4:3] <= 2'b00;
    sub_ln19_reg_458[0] <= 1'b0;
    shl_ln_reg_463[1:0] <= 2'b00;
end

endmodule //conv2
