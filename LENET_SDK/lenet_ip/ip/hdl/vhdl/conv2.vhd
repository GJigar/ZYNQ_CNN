-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_offset : IN STD_LOGIC_VECTOR (4 downto 0);
    weight_offset : IN STD_LOGIC_VECTOR (5 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of conv2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv13_C4 : STD_LOGIC_VECTOR (12 downto 0) := "0000011000100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_19 : STD_LOGIC_VECTOR (14 downto 0) := "000000000011001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv2_weight_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv2_weight_ce0 : STD_LOGIC;
    signal conv2_weight_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_396_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln19_reg_404 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln19_1_fu_190_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln19_1_reg_409 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_fu_202_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_417 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal shl_ln19_3_fu_208_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln19_3_reg_422 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln8_fu_196_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln19_4_fu_216_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln19_4_reg_427 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_234_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_435 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal output_addr_reg_440 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln11_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln14_1_fu_263_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_1_reg_445 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal kr_fu_273_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kr_reg_453 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln19_fu_309_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln19_reg_458 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln14_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln_fu_315_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_463 : STD_LOGIC_VECTOR (4 downto 0);
    signal kc_fu_337_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kc_reg_471 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln17_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_486 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal conv2_weight_load_reg_491 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_496 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal output_load_reg_501 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_506 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal r_0_reg_116 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_128 : STD_LOGIC_VECTOR (3 downto 0);
    signal kr_0_reg_140 : STD_LOGIC_VECTOR (2 downto 0);
    signal kc_0_reg_151 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal zext_ln19_4_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_4_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_5_fu_391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_20_fu_170_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln19_1_fu_190_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln11_fu_224_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln19_6_fu_240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln19_6_fu_245_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln19_fu_249_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln14_fu_259_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_1_fu_279_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln19_5_fu_285_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln19_6_fu_297_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln19_8_fu_293_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_9_fu_305_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln17_1_fu_327_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_7_fu_343_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln19_10_fu_349_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_3_fu_353_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln19_fu_358_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln19_10_fu_362_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln17_fu_323_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln19_8_fu_372_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln19_4_fu_377_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln19_12_fu_382_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln19_11_fu_386_p2 : STD_LOGIC_VECTOR (14 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln19_11_fu_386_p2 : signal is "no";
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_396_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_396_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_396_p10 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln19_1_fu_190_p00 : STD_LOGIC_VECTOR (12 downto 0);

    component my_net_hadd_16ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component my_net_hmul_16ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component my_net_am_addmul_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component conv2_conv2_weight IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    conv2_weight_U : component conv2_conv2_weight
    generic map (
        DataWidth => 16,
        AddressRange => 12800,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv2_weight_address0,
        ce0 => conv2_weight_ce0,
        q0 => conv2_weight_q0);

    my_net_hadd_16ns_cud_U17 : component my_net_hadd_16ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => output_load_reg_501,
        din1 => tmp_reg_496,
        ce => ap_const_logic_1,
        dout => grp_fu_162_p2);

    my_net_hmul_16ns_dEe_U18 : component my_net_hmul_16ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_load_reg_486,
        din1 => conv2_weight_load_reg_491,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    my_net_am_addmul_g8j_U19 : component my_net_am_addmul_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 10,
        din2_WIDTH => 6,
        dout_WIDTH => 15)
    port map (
        din0 => grp_fu_396_p0,
        din1 => grp_fu_396_p1,
        din2 => grp_fu_396_p2,
        dout => grp_fu_396_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_267_p2 = ap_const_lv1_1))) then 
                c_0_reg_128 <= c_reg_435;
            elsif (((icmp_ln8_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_128 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    kc_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                kc_0_reg_151 <= kc_reg_471;
            elsif (((icmp_ln14_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                kc_0_reg_151 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    kr_0_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln17_fu_331_p2 = ap_const_lv1_1))) then 
                kr_0_reg_140 <= kr_reg_453;
            elsif (((icmp_ln11_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                kr_0_reg_140 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_116 <= r_reg_417;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_116 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_435 <= c_fu_234_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                conv2_weight_load_reg_491 <= conv2_weight_q0;
                input_load_reg_486 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                kc_reg_471 <= kc_fu_337_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                kr_reg_453 <= kr_fu_273_p2;
                    zext_ln14_1_reg_445(2 downto 0) <= zext_ln14_1_fu_263_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    mul_ln19_1_reg_409(12 downto 2) <= mul_ln19_1_fu_190_p2(12 downto 2);
                mul_ln19_reg_404 <= grp_fu_396_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_228_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                output_addr_reg_440 <= zext_ln19_4_fu_254_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                output_load_reg_501 <= output_r_q0;
                tmp_reg_496 <= grp_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_417 <= r_fu_202_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_196_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln19_3_reg_422(6 downto 3) <= shl_ln19_3_fu_208_p3(6 downto 3);
                    shl_ln19_4_reg_427(4 downto 1) <= shl_ln19_4_fu_216_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_267_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln_reg_463(4 downto 2) <= shl_ln_fu_315_p3(4 downto 2);
                    sub_ln19_reg_458(8 downto 1) <= sub_ln19_fu_309_p2(8 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                tmp_s_reg_506 <= grp_fu_162_p2;
            end if;
        end if;
    end process;
    mul_ln19_1_reg_409(1 downto 0) <= "00";
    shl_ln19_3_reg_422(2 downto 0) <= "000";
    shl_ln19_4_reg_427(0) <= '0';
    zext_ln14_1_reg_445(4 downto 3) <= "00";
    sub_ln19_reg_458(0) <= '0';
    shl_ln_reg_463(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_196_p2, ap_CS_fsm_state3, icmp_ln11_fu_228_p2, ap_CS_fsm_state4, icmp_ln14_fu_267_p2, ap_CS_fsm_state5, icmp_ln17_fu_331_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_228_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_267_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln17_fu_331_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln19_10_fu_362_p2 <= std_logic_vector(signed(sext_ln19_fu_358_p1) + signed(mul_ln19_1_reg_409));
    add_ln19_11_fu_386_p2 <= std_logic_vector(unsigned(zext_ln19_12_fu_382_p1) + unsigned(mul_ln19_reg_404));
    add_ln19_1_fu_279_p2 <= std_logic_vector(unsigned(r_0_reg_116) + unsigned(zext_ln14_fu_259_p1));
    add_ln19_3_fu_353_p2 <= std_logic_vector(unsigned(zext_ln19_10_fu_349_p1) + unsigned(sub_ln19_reg_458));
    add_ln19_4_fu_377_p2 <= std_logic_vector(unsigned(add_ln19_8_fu_372_p2) + unsigned(zext_ln14_1_reg_445));
    add_ln19_6_fu_240_p2 <= std_logic_vector(unsigned(shl_ln19_4_reg_427) + unsigned(zext_ln11_fu_224_p1));
    add_ln19_7_fu_343_p2 <= std_logic_vector(unsigned(c_0_reg_128) + unsigned(zext_ln17_1_fu_327_p1));
    add_ln19_8_fu_372_p2 <= std_logic_vector(unsigned(shl_ln_reg_463) + unsigned(zext_ln17_fu_323_p1));
    add_ln19_fu_249_p2 <= std_logic_vector(unsigned(zext_ln19_6_fu_245_p1) + unsigned(shl_ln19_3_reg_422));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_196_p2)
    begin
        if ((((icmp_ln8_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_196_p2)
    begin
        if (((icmp_ln8_fu_196_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_234_p2 <= std_logic_vector(unsigned(c_0_reg_128) + unsigned(ap_const_lv4_1));
    conv2_weight_address0 <= sext_ln19_5_fu_391_p1(14 - 1 downto 0);

    conv2_weight_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv2_weight_ce0 <= ap_const_logic_1;
        else 
            conv2_weight_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_396_p0 <= grp_fu_396_p00(5 - 1 downto 0);
    grp_fu_396_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_offset),11));
    grp_fu_396_p1 <= grp_fu_396_p10(10 - 1 downto 0);
    grp_fu_396_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_170_p3),11));
    grp_fu_396_p2 <= ap_const_lv15_19(6 - 1 downto 0);
    icmp_ln11_fu_228_p2 <= "1" when (c_0_reg_128 = ap_const_lv4_A) else "0";
    icmp_ln14_fu_267_p2 <= "1" when (kr_0_reg_140 = ap_const_lv3_5) else "0";
    icmp_ln17_fu_331_p2 <= "1" when (kc_0_reg_151 = ap_const_lv3_5) else "0";
    icmp_ln8_fu_196_p2 <= "1" when (r_0_reg_116 = ap_const_lv4_A) else "0";
    input_r_address0 <= sext_ln19_4_fu_367_p1(12 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    kc_fu_337_p2 <= std_logic_vector(unsigned(kc_0_reg_151) + unsigned(ap_const_lv3_1));
    kr_fu_273_p2 <= std_logic_vector(unsigned(kr_0_reg_140) + unsigned(ap_const_lv3_1));
    mul_ln19_1_fu_190_p0 <= mul_ln19_1_fu_190_p00(5 - 1 downto 0);
    mul_ln19_1_fu_190_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(input_offset),13));
    mul_ln19_1_fu_190_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln19_1_fu_190_p0) * unsigned(ap_const_lv13_C4), 13));
    output_r_address0 <= output_addr_reg_440;

    output_r_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= tmp_s_reg_506;

    output_r_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_202_p2 <= std_logic_vector(unsigned(r_0_reg_116) + unsigned(ap_const_lv4_1));
        sext_ln19_4_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln19_10_fu_362_p2),64));

        sext_ln19_5_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln19_11_fu_386_p2),64));

        sext_ln19_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln19_3_fu_353_p2),13));

    shl_ln19_3_fu_208_p3 <= (r_0_reg_116 & ap_const_lv3_0);
    shl_ln19_4_fu_216_p3 <= (r_0_reg_116 & ap_const_lv1_0);
    shl_ln19_5_fu_285_p3 <= (add_ln19_1_fu_279_p2 & ap_const_lv4_0);
    shl_ln19_6_fu_297_p3 <= (add_ln19_1_fu_279_p2 & ap_const_lv1_0);
    shl_ln_fu_315_p3 <= (kr_0_reg_140 & ap_const_lv2_0);
    sub_ln19_fu_309_p2 <= std_logic_vector(unsigned(zext_ln19_8_fu_293_p1) - unsigned(zext_ln19_9_fu_305_p1));
    tmp_20_fu_170_p3 <= (weight_offset & ap_const_lv4_0);
    zext_ln11_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_128),5));
    zext_ln14_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_0_reg_140),5));
    zext_ln14_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kr_0_reg_140),4));
    zext_ln17_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_0_reg_151),4));
    zext_ln17_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kc_0_reg_151),5));
    zext_ln19_10_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_7_fu_343_p2),9));
    zext_ln19_12_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_4_fu_377_p2),15));
    zext_ln19_4_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_249_p2),64));
    zext_ln19_6_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_6_fu_240_p2),7));
    zext_ln19_8_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln19_5_fu_285_p3),9));
    zext_ln19_9_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln19_6_fu_297_p3),9));
end behav;
